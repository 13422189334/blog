{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "繁华中自律，落魄中自愈",
  "home_page_url": "https://jin-shaohui.gitee.io/",
  "feed_url": "https://jin-shaohui.gitee.io/feed.json",
  "description": "Just playing around",
  "items": [
    {
      "title": "推荐",
      "url": "https://jin-shaohui.gitee.io/Recommend/CSS/",
      "id": "https://jin-shaohui.gitee.io/Recommend/CSS/",
      "content_html": "<h2 id=\"前端-css\" tabindex=\"-1\"> 前端 - Css</h2>\n<ul>\n<li><a href=\"https://cssreference.io/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 参考书</a></li>\n<li><a href=\"https://htmlcheatsheet.com/css/\" target=\"_blank\" rel=\"noopener noreferrer\">交互式在线 CSS 速记表</a></li>\n<li><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 小花招</a></li>\n<li><a href=\"https://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener noreferrer\">学习 CSS 布局</a></li>\n<li><a href=\"https://codemyui.com/tag/\" target=\"_blank\" rel=\"noopener noreferrer\">450 多个纯 CSS 实现的 UI 设计</a></li>\n</ul>\n<h2 id=\"前端-js\" tabindex=\"-1\"> 前端 - JS</h2>\n<ul>\n<li><a href=\"https://animate.style/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 动画集</a></li>\n<li><a href=\"https://animxyz.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 三维变换动画</a></li>\n<li><a href=\"https://animista.net/play/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 动画集，可自由调节动画参数，生成代码片段</a></li>\n</ul>\n<h2 id=\"前端-边学边玩css\" tabindex=\"-1\"> 前端 - 边学边玩Css</h2>\n<ul>\n<li><a href=\"https://cssgridgarden.com/\" target=\"_blank\" rel=\"noopener noreferrer\">通过给萝卜浇水，学习 CSS 网格布局</a></li>\n<li><a href=\"http://www.flexboxdefense.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 塔防游戏，学习 flex 布局</a></li>\n<li><a href=\"https://flexboxfroggy.com/\" target=\"_blank\" rel=\"noopener noreferrer\">送小青蛙回家，学习 flex 布局</a></li>\n</ul>\n<h2 id=\"前端-在线工具\" tabindex=\"-1\"> 前端 - 在线工具</h2>\n<ul>\n<li><a href=\"https://glassgenerator.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">磨砂透明效果</a></li>\n<li><a href=\"https://coolbackgrounds.io/\" target=\"_blank\" rel=\"noopener noreferrer\">酷酷的背景图</a></li>\n<li><a href=\"https://www.pixelartcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">自定义像素素材</a></li>\n<li><a href=\"https://stripesgenerator.com/\" target=\"_blank\" rel=\"noopener noreferrer\">布条背景图生成器</a></li>\n<li><a href=\"https://grid.layoutit.com/\" target=\"_blank\" rel=\"noopener noreferrer\">网格布局生成器</a></li>\n<li><a href=\"https://csslayout.io/\" target=\"_blank\" rel=\"noopener noreferrer\">纯 CSS 实现的一套页面元素、组件集</a></li>\n<li><a href=\"https://www.30secondsofcode.org/css/\" target=\"_blank\" rel=\"noopener noreferrer\">30 秒代码片段</a></li>\n</ul>\n",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2023-02-01T09:35:45.000Z",
      "authors": [],
      "tags": [
        "推荐好物"
      ]
    },
    {
      "title": "HTML规范指南",
      "url": "https://jin-shaohui.gitee.io/Standard/HTML/",
      "id": "https://jin-shaohui.gitee.io/Standard/HTML/",
      "summary": "HTML 作为描述网页结构的超文本标记语言，本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。\n",
      "content_html": "<p><em>HTML 作为描述网页结构的超文本标记语言，本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。</em></p>\n\n<h2 id=\"通用\" tabindex=\"-1\"> 通用</h2>\n<h3 id=\"【强制】-使用-html5-的-doctype-来启用标准模式-建议使用大写的-doctype。\" tabindex=\"-1\"> <code>【强制】</code> 使用 HTML5 的 doctype 来启用标准模式，建议使用大写的 DOCTYPE。</h3>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"【推荐】在-html-标签上设置正确的-lang-属性。\" tabindex=\"-1\"> <code>【推荐】</code>在 html 标签上设置正确的 <strong>lang</strong> 属性。</h3>\n<blockquote>\n<p>为什么？有助于提高页面的可访问性，如：让语音合成工具确定其所应该采用的发音，令翻译工具确定其翻译语言等。</p>\n</blockquote>\n<div><pre><code><span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>zh-CN<span>\"</span></span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"【强制】-页面必须使用精简形式-明确指定字符编码。指定字符编码的-meta-必须是-head-的第一个直接子元素。\" tabindex=\"-1\"> <code>【强制】</code> 页面必须使用精简形式，明确指定字符编码。指定字符编码的 <code>meta</code> 必须是 <code>head</code> 的第一个直接子元素。</h3>\n<blockquote>\n<p>为什么？见 <a href=\"https://www.w3school.com.cn/html5/att_script_charset.asp\" target=\"_blank\" rel=\"noopener noreferrer\">HTML5 Charset能用吗</a>一文。</p>\n</blockquote>\n<div><pre><code><span><span><span>&lt;</span>html</span><span>></span></span>\n  <span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span><span>></span></span>\n    ......\n  <span><span><span>&lt;/</span>head</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    ......\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"【强制】-css-和-javascript-引入\" tabindex=\"-1\"> <code>【强制】</code> CSS 和 JavaScript 引入</h3>\n<div><pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>stylesheet<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>page.css<span>\"</span></span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"【建议】-引入-css-和-javascript-时无须指明-type-属性。\" tabindex=\"-1\"> <code>【建议】</code> 引入 CSS 和 JavaScript 时无须指明 type 属性。</h3>\n<blockquote>\n<p>为什么？text/css 和 text/javascript 是 type 的默认值。</p>\n</blockquote>\n<h3 id=\"【建议】-javascript-应当放在页面末尾-或采用异步加载。\" tabindex=\"-1\"> <code>【建议】</code> JavaScript 应当放在页面末尾，或采用异步加载。</h3>\n<blockquote>\n<p>为什么？将 <code>script</code> 放在页面中间将阻断页面的渲染。出于性能方面的考虑，如非必要，请遵守此条建议。</p>\n</blockquote>\n<div><pre><code> <span><span><span>&lt;</span>body</span><span>></span></span>\n   <span>&lt;!-- a lot of elements --></span>\n   <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>init-behavior.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n <span><span><span>&lt;/</span>body</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h3 id=\"【建议】-移动环境或只针对现代浏览器设计的-web-应用-如果引用外部资源的-url-协议部分与页面相同-建议省略协议前缀。\" tabindex=\"-1\"> <code>【建议】</code> 移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 URL 协议部分与页面相同，建议省略协议前缀。</h3>\n<div><pre><code> <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>//s1.bdstatic.com/cache/static/jquery-1.10.2.min_f2fb5194.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>/cache/static/jquery-1.10.2.min_f2fb5194.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h3 id=\"【强制】-页面必须包含-title-标签声明标题。且-title-必须作为-head-的直接子元素-并紧随-charset-声明之后。\" tabindex=\"-1\"> <code>【强制】</code> 页面必须包含 title 标签声明标题。且 title 必须作为 head 的直接子元素，并紧随 charset 声明之后。</h3>\n<blockquote>\n<p>title 中如果包含 ASCII 之外的字符，浏览器需要知道字符编码类型才能进行解码，否则可能导致乱码。</p>\n</blockquote>\n<div><pre><code> <span><span><span>&lt;</span>head</span><span>></span></span>\n   <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span><span>></span></span>\n   <span><span><span>&lt;</span>title</span><span>></span></span>页面标题<span><span><span>&lt;/</span>title</span><span>></span></span>\n <span><span><span>&lt;/</span>head</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"【强制】-保证-favicon-可访问。\" tabindex=\"-1\"> <code>【强制】</code> 保证 favicon 可访问。</h3>\n<blockquote>\n<p>在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 <code>favicon.ico</code> 。为了保证 favicon 可访问，避免 404，必须遵循以下两种方法之一：</p>\n<ol>\n<li>在 Web Server 根目录放置 <code>favicon.ico</code> 文件。</li>\n<li>使用 <code>link</code> 指定 favicon。</li>\n</ol>\n</blockquote>\n<div><pre><code> <span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>shortcut icon<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>path/to/favicon.ico<span>\"</span></span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"【建议】-若页面欲对移动设备友好-需指定页面的-viewport。\" tabindex=\"-1\"> <code>【建议】</code> 若页面欲对移动设备友好，需指定页面的 <code>viewport</code>。</h3>\n<blockquote>\n<p>viewport meta tag 可以设置可视区域的宽度和初始缩放大小，避免在移动设备上出现页面展示不正常。\n比如，在页面宽度小于 <code>980px</code> 时，若需 iOS 设备友好，应当设置 viewport 的 <code>width</code> 值来适应你的页面宽度。</p>\n<p>同时因为不同移动设备分辨率不同，在设置时，应当使用 <code>device-width</code> 和 <code>device-height</code> 变量。</p>\n<p>另外，为了使 viewport 正常工作，在页面内容样式布局设计上也要做相应调整，如避免绝对定位等。关于 viewport 的更多介绍，\n可以参见 <a href=\"https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html#//apple_ref/doc/uid/TP40006509-SW26\" target=\"_blank\" rel=\"noopener noreferrer\">Safari Web Content Guide的介绍</a>。</p>\n</blockquote>\n<h2 id=\"javascript规范指南\" tabindex=\"-1\"> JavaScript规范指南</h2>\n<p><em>使用 JavaScript 最合理的方式。基于Airbnb JavaScript Style Guide 结合实际研发情况，做相应改写而成。</em></p>\n<blockquote>\n<p><strong>注意</strong>: 这个指南假定你正在使用 <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Babel</a>，并且需要你使用 <a href=\"https://npmjs.com/babel-preset-airbnb\" target=\"_blank\" rel=\"noopener noreferrer\">babel-preset-airbnb</a>或与其等效的预设。同时假定你在你的应用里安装了 带有 <a href=\"https://npmjs.com/airbnb-browser-shims\" target=\"_blank\" rel=\"noopener noreferrer\">airbnb-browser-shims</a>或与其等效的插件的 <code>shims/polyfills</code>。</p>\n</blockquote>\n<blockquote>\n<p><strong>提示</strong>: 基于babel-preset-airbnb 二次修改的预设还没完成，仅限与初版文档阶段。</p>\n</blockquote>\n<h3 id=\"引用\" tabindex=\"-1\"> 引用</h3>\n<h4 id=\"【强制】-所有的赋值都用-const-避免使用-var。eslint-prefer-const-no-const-assign\" tabindex=\"-1\"> <code>【强制】</code> 所有的赋值都用 <code>const</code>，避免使用 <code>var</code>。eslint: <a href=\"http://eslint.org/docs/rules/prefer-const.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-const</code></a>, <a href=\"http://eslint.org/docs/rules/no-const-assign.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-const-assign</code></a></h4>\n<blockquote>\n<p>为什么？因为这个能确保你不会改变你的初始值，重复引用会导致 bug 并且使代码变得难以理解。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>var</span> a <span>=</span> <span>1</span><span>;</span>\n<span>var</span> b <span>=</span> <span>2</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> a <span>=</span> <span>1</span><span>;</span>\n<span>const</span> b <span>=</span> <span>2</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-如果你一定要对参数重新赋值-使用-let-而不是-var。eslint-no-var\" tabindex=\"-1\"> <code>【强制】</code> 如果你一定要对参数重新赋值，使用 <code>let</code>，而不是 <code>var</code>。eslint: <a href=\"http://eslint.org/docs/rules/no-var.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-var</code></a></h4>\n<blockquote>\n<p>为什么？因为 <code>let</code> 是块级作用域，而 <code>var</code> 是函数级作用域。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>var</span> count <span>=</span> <span>1</span><span>;</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  count <span>+=</span> <span>1</span><span>;</span>\n<span>}</span>\n\n<span>// good, use the let.</span>\n<span>let</span> count <span>=</span> <span>1</span><span>;</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  count <span>+=</span> <span>1</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"注意-let-和-const-都是块级作用域。\" tabindex=\"-1\"> 注意：<code>let</code> 和 <code>const</code> 都是块级作用域。</h4>\n<div><pre><code><span>// const 和 let 都只存在于它被定义的那个块级作用域。</span>\n<span>{</span>\n  <span>let</span> a <span>=</span> <span>1</span><span>;</span>\n  <span>const</span> b <span>=</span> <span>1</span><span>;</span>\n<span>}</span>\nconsole<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span> <span>// ReferenceError</span>\nconsole<span>.</span><span>log</span><span>(</span>b<span>)</span><span>;</span> <span>// ReferenceError</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"对象\" tabindex=\"-1\"> 对象</h3>\n<h4 id=\"【强制】-使用字面值创建对象。eslint-no-new-object\" tabindex=\"-1\"> <code>【强制】</code> 使用字面值创建对象。eslint: <a href=\"http://eslint.org/docs/rules/no-new-object.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-new-object</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> item <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> item <span>=</span> <span>{</span><span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-使用计算属性名创建一个带有动态属性名的对象。\" tabindex=\"-1\"> <code>【强制】</code> 使用计算属性名创建一个带有动态属性名的对象。</h4>\n<blockquote>\n<p>为什么？因为这可以使你在同一个地方定义所有对象属性。</p>\n</blockquote>\n<div><pre><code><span>function</span> <span>getKey</span><span>(</span><span>k</span><span>)</span> <span>{</span>\n  <span>return</span> <span><span>`</span><span>a key named </span><span><span>${</span>k<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  <span>id</span><span>:</span> <span>5</span><span>,</span>\n  <span>name</span><span>:</span> <span>'San Francisco'</span><span>,</span>\n<span>}</span><span>;</span>\nobj<span>[</span><span>getKey</span><span>(</span><span>'enabled'</span><span>)</span><span>]</span> <span>=</span> <span>true</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  <span>id</span><span>:</span> <span>5</span><span>,</span>\n  <span>name</span><span>:</span> <span>'San Francisco'</span><span>,</span>\n  <span>[</span><span>getKey</span><span>(</span><span>'enabled'</span><span>)</span><span>]</span><span>:</span> <span>true</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用对象方法简写。eslint-object-shorthand\" tabindex=\"-1\"> <code>【强制】</code> 用对象方法简写。eslint: <a href=\"http://eslint.org/docs/rules/object-shorthand.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>object-shorthand</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> atom <span>=</span> <span>{</span>\n  <span>value</span><span>:</span> <span>1</span><span>,</span>\n\n  <span>addValue</span><span>:</span> <span>function</span> <span>(</span><span>value</span><span>)</span> <span>{</span>\n    <span>return</span> atom<span>.</span>value <span>+</span> value<span>;</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> atom <span>=</span> <span>{</span>\n  <span>value</span><span>:</span> <span>1</span><span>,</span>\n\n  <span>// 对象的方法</span>\n  <span>addValue</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n    <span>return</span> atom<span>.</span>value <span>+</span> value<span>;</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用属性值缩写。eslint-object-shorthand\" tabindex=\"-1\"> <code>【强制】</code> 用属性值缩写。eslint: <a href=\"http://eslint.org/docs/rules/object-shorthand.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>object-shorthand</code></a></h4>\n<blockquote>\n<p>为什么？因为这样写的更少且可读性更高。</p>\n</blockquote>\n<div><pre><code><span>const</span> lukeSkywalker <span>=</span> <span>'Luke Skywalker'</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  <span>lukeSkywalker</span><span>:</span> lukeSkywalker<span>,</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  lukeSkywalker<span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】将你的所有缩写放在对象声明的前面。\" tabindex=\"-1\"> <code>【推荐】</code>将你的所有缩写放在对象声明的前面。</h4>\n<blockquote>\n<p>为什么？因为这样能更方便地知道有哪些属性用了缩写。</p>\n</blockquote>\n<div><pre><code><span>const</span> anakinSkywalker <span>=</span> <span>'Anakin Skywalker'</span><span>;</span>\n<span>const</span> lukeSkywalker <span>=</span> <span>'Luke Skywalker'</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  <span>episodeOne</span><span>:</span> <span>1</span><span>,</span>\n  <span>twoJediWalkIntoACantina</span><span>:</span> <span>2</span><span>,</span>\n  lukeSkywalker<span>,</span>\n  <span>episodeThree</span><span>:</span> <span>3</span><span>,</span>\n  <span>mayTheFourth</span><span>:</span> <span>4</span><span>,</span>\n  anakinSkywalker<span>,</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  lukeSkywalker<span>,</span>\n  anakinSkywalker<span>,</span>\n  <span>episodeOne</span><span>:</span> <span>1</span><span>,</span>\n  <span>twoJediWalkIntoACantina</span><span>:</span> <span>2</span><span>,</span>\n  <span>episodeThree</span><span>:</span> <span>3</span><span>,</span>\n  <span>mayTheFourth</span><span>:</span> <span>4</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-只对那些无效的标示使用引号-。eslint-quote-props\" tabindex=\"-1\"> <code>【强制】</code> 只对那些无效的标示使用引号 <code>''</code>。eslint: <a href=\"http://eslint.org/docs/rules/quote-props.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>quote-props</code></a></h4>\n<blockquote>\n<p>为什么？通常我们认为这种方式主观上更易读。不仅优化了代码高亮，而且也更容易被许多 JS 引擎优化。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> bad <span>=</span> <span>{</span>\n  <span>'foo'</span><span>:</span> <span>3</span><span>,</span>\n  <span>'bar'</span><span>:</span> <span>4</span><span>,</span>\n  <span>'data-blah'</span><span>:</span> <span>5</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> good <span>=</span> <span>{</span>\n  <span>foo</span><span>:</span> <span>3</span><span>,</span>\n  <span>bar</span><span>:</span> <span>4</span><span>,</span>\n  <span>'data-blah'</span><span>:</span> <span>5</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要直接调用-object-prototype上的方法-如-hasownproperty、propertyisenumerable、isprototypeof。\" tabindex=\"-1\"> <code>【强制】</code> 不要直接调用 <code>Object.prototype</code>上的方法，如 <code>hasOwnProperty</code>、<code>propertyIsEnumerable</code>、<code>isPrototypeOf</code>。</h4>\n<blockquote>\n<p>为什么？在一些有问题的对象上，这些方法可能会被屏蔽掉，如：<code>{ hasOwnProperty: false }</code> 或空对象 <code>Object.create(null)</code></p>\n</blockquote>\n<div><pre><code><span>// bad</span>\nconsole<span>.</span><span>log</span><span>(</span>object<span>.</span><span>hasOwnProperty</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n\n<span>// good</span>\nconsole<span>.</span><span>log</span><span>(</span><span>Object</span><span>.</span>prototype<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span>object<span>,</span> key<span>)</span><span>)</span><span>;</span>\n\n<span>// best</span>\n<span>const</span> has <span>=</span> <span>Object</span><span>.</span>prototype<span>.</span>hasOwnProperty<span>;</span> <span>// 在模块作用域内做一次缓存。</span>\nconsole<span>.</span><span>log</span><span>(</span><span>has</span><span>.</span><span>call</span><span>(</span>object<span>,</span> key<span>)</span><span>)</span><span>;</span>\n<span>/* or */</span>\n<span>import</span> has <span>from</span> <span>'has'</span><span>;</span> <span>// https://www.npmjs.com/package/has</span>\nconsole<span>.</span><span>log</span><span>(</span><span>has</span><span>(</span>object<span>,</span> key<span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-对象浅拷贝时-更推荐使用扩展运算符-即-运算符-而不是-object-assign-。获取对象指定的几个属性时-用对象的-rest-解构运算符-即-运算符-更好。eslint-prefer-object-spread\" tabindex=\"-1\"> <code>【强制】</code> 对象浅拷贝时，更推荐使用扩展运算符（即 <code>...</code> 运算符），而不是 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Object.assign</code> </a>。获取对象指定的几个属性时，用对象的 rest 解构运算符（即 <code>...</code> 运算符）更好。eslint: <a href=\"https://eslint.org/docs/rules/prefer-object-spread\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-object-spread</code></a></h4>\n<div><pre><code><span>// very bad</span>\n<span>const</span> original <span>=</span> <span>{</span> <span>a</span><span>:</span> <span>1</span><span>,</span> <span>b</span><span>:</span> <span>2</span> <span>}</span><span>;</span>\n<span>const</span> copy <span>=</span> Object<span>.</span><span>assign</span><span>(</span>original<span>,</span> <span>{</span> <span>c</span><span>:</span> <span>3</span> <span>}</span><span>)</span><span>;</span> <span>// this mutates `original` ಠ_ಠ</span>\n<span>delete</span> copy<span>.</span>a<span>;</span> <span>// so does this</span>\n\n<span>// bad</span>\n<span>const</span> original <span>=</span> <span>{</span> <span>a</span><span>:</span> <span>1</span><span>,</span> <span>b</span><span>:</span> <span>2</span> <span>}</span><span>;</span>\n<span>const</span> copy <span>=</span> Object<span>.</span><span>assign</span><span>(</span><span>{</span><span>}</span><span>,</span> original<span>,</span> <span>{</span> <span>c</span><span>:</span> <span>3</span> <span>}</span><span>)</span><span>;</span> <span>// copy => { a: 1, b: 2, c: 3 }</span>\n\n<span>// good es6 扩展运算符 ...</span>\n<span>const</span> original <span>=</span> <span>{</span> <span>a</span><span>:</span> <span>1</span><span>,</span> <span>b</span><span>:</span> <span>2</span> <span>}</span><span>;</span>\n<span>// 浅拷贝</span>\n<span>const</span> copy <span>=</span> <span>{</span> <span>...</span>original<span>,</span> <span>c</span><span>:</span> <span>3</span> <span>}</span><span>;</span> <span>// copy => { a: 1, b: 2, c: 3 }</span>\n\n<span>// rest 解构运算符</span>\n<span>const</span> <span>{</span> a<span>,</span> <span>...</span>noA <span>}</span> <span>=</span> copy<span>;</span> <span>// noA => { b: 2, c: 3 }</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"数组\" tabindex=\"-1\"> 数组</h3>\n<h4 id=\"【强制】-用字面量创建数组。eslint-no-array-constructor\" tabindex=\"-1\"> <code>【强制】</code> 用字面量创建数组。eslint: <a href=\"http://eslint.org/docs/rules/no-array-constructor.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-array-constructor</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> items <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> items <span>=</span> <span>[</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-array-push代替直接向数组中添加一个值。\" tabindex=\"-1\"> <code>【强制】</code> 用 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\" rel=\"noopener noreferrer\">Array#push</a>代替直接向数组中添加一个值。</h4>\n<div><pre><code><span>const</span> someStack <span>=</span> <span>[</span><span>]</span><span>;</span>\n\n<span>// bad</span>\nsomeStack<span>[</span>someStack<span>.</span>length<span>]</span> <span>=</span> <span>'abracadabra'</span><span>;</span>\n\n<span>// good</span>\nsomeStack<span>.</span><span>push</span><span>(</span><span>'abracadabra'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用扩展运算符做数组浅拷贝-类似上面的对象浅拷贝。\" tabindex=\"-1\"> <code>【强制】</code> 用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝。</h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> len <span>=</span> items<span>.</span>length<span>;</span>\n<span>const</span> itemsCopy <span>=</span> <span>[</span><span>]</span><span>;</span>\n<span>let</span> i<span>;</span>\n\n<span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len<span>;</span> i <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n  itemsCopy<span>[</span>i<span>]</span> <span>=</span> items<span>[</span>i<span>]</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>const</span> itemsCopy <span>=</span> <span>[</span><span>...</span>items<span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-运算符而不是-array-from来将一个可迭代的对象转换成数组。\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>...</code> 运算符而不是 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Array.from</code></a>来将一个可迭代的对象转换成数组。</h4>\n<div><pre><code><span>const</span> foo <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span>'.foo'</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> nodes <span>=</span> Array<span>.</span><span>from</span><span>(</span>foo<span>)</span><span>;</span>\n\n<span>// best</span>\n<span>const</span> nodes <span>=</span> <span>[</span><span>...</span>foo<span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-array-from将一个类数组对象转成一个数组。\" tabindex=\"-1\"> <code>【强制】</code> 用 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Array.from</code></a>将一个类数组对象转成一个数组。</h4>\n<div><pre><code><span>const</span> arrLike <span>=</span> <span>{</span> <span>0</span><span>:</span> <span>'foo'</span><span>,</span> <span>1</span><span>:</span> <span>'bar'</span><span>,</span> <span>2</span><span>:</span> <span>'baz'</span><span>,</span> <span>length</span><span>:</span> <span>3</span> <span>}</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> arr <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arrLike<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> arr <span>=</span> Array<span>.</span><span>from</span><span>(</span>arrLike<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-array-from而不是-运算符去做-map-遍历。-因为这样可以避免创建一个临时数组。\" tabindex=\"-1\"> <code>【强制】</code> 用 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Array.from</code></a>而不是 <code>...</code> 运算符去做 map 遍历。 因为这样可以避免创建一个临时数组。</h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> baz <span>=</span> <span>[</span><span>...</span>foo<span>]</span><span>.</span><span>map</span><span>(</span>bar<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> baz <span>=</span> Array<span>.</span><span>from</span><span>(</span>foo<span>,</span> bar<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-在数组方法的回调函数中使用-return-语句。如果函数体由一条返回一个表达式的语句组成-并且这个表达式没有副作用-这个时候可以忽略-return-详见-7-2。eslint-array-callback-return\" tabindex=\"-1\"> <code>【强制】</code> 在数组方法的回调函数中使用 return 语句。如果函数体由一条返回一个表达式的语句组成，并且这个表达式没有副作用， 这个时候可以忽略 return，详见 <a href=\"http://fe.dev.kdshc.com/docs.html#arrows--implicit-return\" target=\"_blank\" rel=\"noopener noreferrer\">7.2</a>。eslint: <a href=\"http://eslint.org/docs/rules/array-callback-return\" target=\"_blank\" rel=\"noopener noreferrer\"><code>array-callback-return</code></a></h4>\n<div><pre><code><span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>x</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> y <span>=</span> x <span>+</span> <span>1</span><span>;</span>\n  <span>return</span> x <span>*</span> y<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good 函数只有一个语句</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>x</span> <span>=></span> x <span>+</span> <span>1</span><span>)</span><span>;</span>\n\n<span>// bad - 没有返回值， 因为在第一次迭代后 acc 就变成 undefined 了</span>\n<span>[</span><span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>]</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>acc<span>,</span> item<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> flatten <span>=</span> acc<span>.</span><span>concat</span><span>(</span>item<span>)</span><span>;</span>\n  acc<span>[</span>index<span>]</span> <span>=</span> flatten<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>]</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>acc<span>,</span> item<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> flatten <span>=</span> acc<span>.</span><span>concat</span><span>(</span>item<span>)</span><span>;</span>\n  acc<span>[</span>index<span>]</span> <span>=</span> flatten<span>;</span>\n  <span>return</span> flatten<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// bad</span>\ninbox<span>.</span><span>filter</span><span>(</span><span>(</span><span>msg</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>{</span> subject<span>,</span> author <span>}</span> <span>=</span> msg<span>;</span>\n  <span>if</span> <span>(</span>subject <span>===</span> <span>'Mockingbird'</span><span>)</span> <span>{</span>\n    <span>return</span> author <span>===</span> <span>'Harper Lee'</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\ninbox<span>.</span><span>filter</span><span>(</span><span>(</span><span>msg</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>{</span> subject<span>,</span> author <span>}</span> <span>=</span> msg<span>;</span>\n  <span>if</span> <span>(</span>subject <span>===</span> <span>'Mockingbird'</span><span>)</span> <span>{</span>\n    <span>return</span> author <span>===</span> <span>'Harper Lee'</span><span>;</span>\n  <span>}</span>\n\n  <span>return</span> <span>false</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-如果一个数组有很多行-在数组的-后和-前断行。请看下面示例\" tabindex=\"-1\"> <code>【强制】</code> 如果一个数组有很多行，在数组的 <code>[</code> 后和 <code>]</code> 前断行。请看下面示例：</h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> arr <span>=</span> <span>[</span>\n  <span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span>\n<span>]</span><span>;</span>\n\n<span>const</span> objectInArray <span>=</span> <span>[</span><span>{</span>\n  <span>id</span><span>:</span> <span>1</span><span>,</span>\n<span>}</span><span>,</span> <span>{</span>\n  <span>id</span><span>:</span> <span>2</span><span>,</span>\n<span>}</span><span>]</span><span>;</span>\n\n<span>const</span> numberInArray <span>=</span> <span>[</span>\n  <span>1</span><span>,</span> <span>2</span><span>,</span>\n<span>]</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> arr <span>=</span> <span>[</span><span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>]</span><span>;</span>\n\n<span>const</span> objectInArray <span>=</span> <span>[</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>1</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>2</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>]</span><span>;</span>\n\n<span>const</span> numberInArray <span>=</span> <span>[</span>\n  <span>1</span><span>,</span>\n  <span>2</span><span>,</span>\n<span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"解构\" tabindex=\"-1\"> 解构</h3>\n<h4 id=\"【强制】-用对象的解构赋值来获取和使用对象某个或多个属性值。eslint-prefer-destructuring\" tabindex=\"-1\"> <code>【强制】</code> 用对象的解构赋值来获取和使用对象某个或多个属性值。eslint: <a href=\"https://eslint.org/docs/rules/prefer-destructuring\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-destructuring</code></a></h4>\n<blockquote>\n<p>为什么？解构使您不必为这些属性创建临时引用，并且避免重复引用对象。重复引用对象将造成代码重复、增加阅读次数、提高犯错概率。\nDestructuring objects also provides a single site of definition of the object structure that is used in the block, rather than requiring reading the entire block to determine what is used.</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>getFullName</span><span>(</span><span>user</span><span>)</span> <span>{</span>\n  <span>const</span> firstName <span>=</span> user<span>.</span>firstName<span>;</span>\n  <span>const</span> lastName <span>=</span> user<span>.</span>lastName<span>;</span>\n\n  <span>return</span> <span><span>`</span><span><span>${</span>firstName<span>}</span></span><span> </span><span><span>${</span>lastName<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>getFullName</span><span>(</span><span>user</span><span>)</span> <span>{</span>\n  <span>const</span> <span>{</span> firstName<span>,</span> lastName <span>}</span> <span>=</span> user<span>;</span>\n  <span>return</span> <span><span>`</span><span><span>${</span>firstName<span>}</span></span><span> </span><span><span>${</span>lastName<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span>\n\n<span>// best</span>\n<span>function</span> <span>getFullName</span><span>(</span><span><span>{</span> firstName<span>,</span> lastName <span>}</span></span><span>)</span> <span>{</span>\n  <span>return</span> <span><span>`</span><span><span>${</span>firstName<span>}</span></span><span> </span><span><span>${</span>lastName<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用数组解构。eslint-prefer-destructuring\" tabindex=\"-1\"> <code>【强制】</code> 用数组解构。eslint: <a href=\"https://eslint.org/docs/rules/prefer-destructuring\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-destructuring</code></a></h4>\n<div><pre><code><span>const</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> first <span>=</span> arr<span>[</span><span>0</span><span>]</span><span>;</span>\n<span>const</span> second <span>=</span> arr<span>[</span><span>1</span><span>]</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> <span>[</span>first<span>,</span> second<span>]</span> <span>=</span> arr<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-多个返回值用对象的解构-而不是数组解构。\" tabindex=\"-1\"> <code>【强制】</code> 多个返回值用对象的解构，而不是数组解构。</h4>\n<blockquote>\n<p>为什么？你可以在后期添加新的属性或者变换变量的顺序而不会破坏原有的引用。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>processInput</span><span>(</span><span>input</span><span>)</span> <span>{</span>\n  <span>// 然后就是见证奇迹的时刻</span>\n  <span>return</span> <span>[</span>left<span>,</span> right<span>,</span> top<span>,</span> bottom<span>]</span><span>;</span>\n<span>}</span>\n\n<span>// 调用者需要想一想返回值的顺序</span>\n<span>const</span> <span>[</span>left<span>,</span> __<span>,</span> top<span>]</span> <span>=</span> <span>processInput</span><span>(</span>input<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>function</span> <span>processInput</span><span>(</span><span>input</span><span>)</span> <span>{</span>\n  <span>// oops，奇迹又发生了</span>\n  <span>return</span> <span>{</span> left<span>,</span> right<span>,</span> top<span>,</span> bottom <span>}</span><span>;</span>\n<span>}</span>\n\n<span>// 调用者只需要选择他想用的值就好了</span>\n<span>const</span> <span>{</span> left<span>,</span> top <span>}</span> <span>=</span> <span>processInput</span><span>(</span>input<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"字符串\" tabindex=\"-1\"> 字符串</h3>\n<h4 id=\"【强制】-字符串应使用单引号-。eslint-quotes\" tabindex=\"-1\"> <code>【强制】</code> 字符串应使用单引号 <code>''</code> 。eslint: <a href=\"https://eslint.org/docs/rules/quotes.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>quotes</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> name <span>=</span> <span>\"Capt. Janeway\"</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> name <span>=</span> <span><span>`</span><span>Capt. Janeway</span><span>`</span></span><span>;</span>\n<span>const</span> name <span>=</span> <span>'Capt. Janeway'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-超过-100-个字符的字符串不应该用字符串连接成多行。\" tabindex=\"-1\"> <code>【强制】</code> 超过 100 个字符的字符串不应该用字符串连接成多行。</h4>\n<blockquote>\n<p>为什么？字符串折行增加编写难度且不易被搜索。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> errorMessage <span>=</span> <span>'This is a super long error that was thrown because \\\n    of Batman. When you stop to think about how Batman had anything to do \\\n    with this, you would get nowhere \\\nfast.'</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> errorMessage <span>=</span> <span>'This is a super long error that was thrown because '</span> <span>+</span>\n    <span>'of Batman. When you stop to think about how Batman had anything to do '</span> <span>+</span>\n<span>'with this, you would get nowhere fast.'</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> errorMessage <span>=</span> <span>'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】当需要动态生成字符串时-使用模板字符串而不是字符串拼接。eslint-prefer-templatetemplate-curly-spacing\" tabindex=\"-1\"> <code>【推荐】</code>当需要动态生成字符串时，使用模板字符串而不是字符串拼接。eslint: <a href=\"https://eslint.org/docs/rules/prefer-template.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-template</code></a><a href=\"https://eslint.org/docs/rules/template-curly-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>template-curly-spacing</code></a></h4>\n<blockquote>\n<p>为什么？模板字符串更具可读性、多行语法更简洁以及更方便插入变量到字符串里头。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>sayHi</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  <span>return</span> <span>'How are you, '</span> <span>+</span> name <span>+</span> <span>'?'</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>sayHi</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  <span>return</span> <span>[</span><span>'How are you, '</span><span>,</span> name<span>,</span> <span>'?'</span><span>]</span><span>.</span><span>join</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>sayHi</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  <span>return</span> <span><span>`</span><span>How are you, </span><span><span>${</span> name <span>}</span></span><span>?</span><span>`</span></span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>sayHi</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  <span>return</span> <span><span>`</span><span>How are you, </span><span><span>${</span>name<span>}</span></span><span>?</span><span>`</span></span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"永远不要使用-eval-该方法有太多漏洞。eslint-no-eval\" tabindex=\"-1\"> 永远不要使用 <code>eval()</code>，该方法有太多漏洞。eslint: <a href=\"https://eslint.org/docs/rules/no-eval\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-eval</code></a></h4>\n<h4 id=\"不要使用不必要的转义字符。eslint-no-useless-escape\" tabindex=\"-1\"> 不要使用不必要的转义字符。eslint: <a href=\"http://eslint.org/docs/rules/no-useless-escape\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-useless-escape</code></a></h4>\n<blockquote>\n<p>为什么？反斜线可读性差，因此仅当必要时才使用它。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> <span>'\\'this\\' \\i\\s \\\"quoted\\\"'</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> <span>'\\'this\\' is \"quoted\"'</span><span>;</span>\n\n<span>//best</span>\n<span>const</span> foo <span>=</span> <span><span>`</span><span>my name is '</span><span><span>${</span>name<span>}</span></span><span>'</span><span>`</span></span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"函数\" tabindex=\"-1\"> 函数</h3>\n<h4 id=\"【推荐】使用命名函数表达式而不是函数声明。eslint-func-style\" tabindex=\"-1\"> <code>【推荐】</code>使用命名函数表达式而不是函数声明。eslint: <a href=\"http://eslint.org/docs/rules/func-style\" target=\"_blank\" rel=\"noopener noreferrer\"><code>func-style</code></a></h4>\n<blockquote>\n<p>函数表达式： const func = function () {}</p>\n</blockquote>\n<blockquote>\n<p>函数声明： function func () {}</p>\n</blockquote>\n<blockquote>\n<p>为什么？函数声明会发生提升，这意味着在一个文件里函数很容易在其被定义之前就被引用了。这样伤害了代码可读性和可维护性。如果你发现一个函数又大又复杂，且这个函数妨碍了这个文件其他部分的理解性，你应当单独把这个函数提取成一个单独的模块。不管这个名字是不是由一个确定的变量推断出来的，别忘了给表达式清晰的命名（这在现代浏览器和类似 babel 编译器中很常见）。这消除了由匿名函数在错误调用栈产生的所有假设。 (<a href=\"https://github.com/airbnb/javascript/issues/794\" target=\"_blank\" rel=\"noopener noreferrer\">讨论 </a>)</p>\n</blockquote>\n<div><pre><code>> 译者注：这一段可能不是很好理解，简单来说就是使用函数声明会发生提升（即在函数被声明之前就可以使用），使用匿名函数会导致难以追踪错误。[这一段英文原文在这](https://github.com/airbnb/javascript#functions)。\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>const</span> <span>foo</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>// lexical name distinguished from the variable-referenced invocation(s)</span>\n<span>// 函数表达式名和声明的函数名是不一样的</span>\n<span>const</span> <span>short</span> <span>=</span> <span>function</span> <span>longUniqueMoreDescriptiveLexicalFoo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-把立即执行函数包裹在圆括号里。eslint-wrap-iife\" tabindex=\"-1\"> <code>【强制】</code> 把立即执行函数包裹在圆括号里。eslint: <a href=\"http://eslint.org/docs/rules/wrap-iife.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>wrap-iife</code></a></h4>\n<blockquote>\n<p>立即执行函数：Immediately Invoked Function expression = IIFE。 为什么？一个立即调用的函数表达式是一个单元 - 把它和它的调用者（圆括号）包裹起来，使代码读起来更清晰。 另外，在模块化世界里，你几乎用不着 IIFE。</p>\n</blockquote>\n<div><pre><code><span>// immediately-invoked function expression (IIFE)</span>\n<span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'Welcome to the Internet. Please follow me.'</span><span>)</span><span>;</span>\n<span>}</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要在非函数块-if、while-等-内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做-但不同浏览器的解析方式不同-这是一个坏消息。eslint-no-loop-func\" tabindex=\"-1\"> <code>【强制】</code> 不要在非函数块（<code>if</code>、<code>while</code> 等）内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做，但不同浏览器的解析方式不同，这是一个坏消息。eslint: <a href=\"http://eslint.org/docs/rules/no-loop-func.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-loop-func</code></a></h4>\n<p><em>注意</em>*：ECMA-262 中对块（<code>block</code>）的定义是： 一系列的语句。但是函数声明不是一个语句， 函数表达式是一个语句。</p>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span>currentUser<span>)</span> <span>{</span>\n  <span>function</span> <span>test</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'Nope.'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>let</span> test<span>;</span>\n<span>if</span> <span>(</span>currentUser<span>)</span> <span>{</span>\n  <span>test</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'Yup.'</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要用-arguments-命名参数。他的优先级高于每个函数作用域自带的-arguments-对象-这会导致函数自带的-arguments-值被覆盖。\" tabindex=\"-1\"> <code>【强制】</code> 不要用 <code>arguments</code> 命名参数。他的优先级高于每个函数作用域自带的 <code>arguments</code> 对象，这会导致函数自带的 <code>arguments</code> 值被覆盖。</h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>name<span>,</span> options<span>,</span> arguments</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>foo</span><span>(</span><span>name<span>,</span> options<span>,</span> args</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要使用-arguments-用收集参数语法-代替。eslint-prefer-rest-params\" tabindex=\"-1\"> <code>【强制】</code> 不要使用 <code>arguments</code>，用收集参数语法 <code>...</code> 代替。eslint: <a href=\"http://eslint.org/docs/rules/prefer-rest-params\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-rest-params</code></a></h4>\n<blockquote>\n<p>为什么？<code>...</code> 明确你想用哪个参数。而且收集参数是真数组，而不是类似数组的 <code>arguments</code>。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>concatenateAll</span><span>(</span><span>)</span> <span>{</span>\n  <span>const</span> args <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span><span>;</span>\n  <span>return</span> args<span>.</span><span>join</span><span>(</span><span>''</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>concatenateAll</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>\n  <span>return</span> args<span>.</span><span>join</span><span>(</span><span>''</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】用默认参数语法而不是在函数里对参数重新赋值。\" tabindex=\"-1\"> <code>【推荐】</code>用默认参数语法而不是在函数里对参数重新赋值。</h4>\n<div><pre><code><span>// really bad</span>\n<span>function</span> <span>handleThings</span><span>(</span><span>opts</span><span>)</span> <span>{</span>\n  <span>// 不！我们不该修改 arguments</span>\n  <span>// 第二：如果 opts 的值为 false, 它会被赋值为 {}</span>\n  <span>// 虽然你想这么写，但是这个会带来一些微妙的 bug。</span>\n  opts <span>=</span> opts <span>||</span> <span>{</span><span>}</span><span>;</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// still bad</span>\n<span>function</span> <span>handleThings</span><span>(</span><span>opts</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>opts <span>===</span> <span>void</span> <span>0</span><span>)</span> <span>{</span>\n    opts <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>}</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>handleThings</span><span>(</span><span>opts <span>=</span> <span>{</span><span>}</span></span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-避免默认参数的副作用。\" tabindex=\"-1\"> <code>【强制】</code> 避免默认参数的副作用。</h4>\n<blockquote>\n<p>为什么？他会令人迷惑不解，比如下面这个，a 到底等于几，这个需要想一下。</p>\n</blockquote>\n<div><pre><code><span>var</span> b <span>=</span> <span>1</span><span>;</span>\n<span>// bad</span>\n<span>function</span> <span>count</span><span>(</span><span>a <span>=</span> b<span>++</span></span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span>\n<span>}</span>\n<span>count</span><span>(</span><span>)</span><span>;</span>  <span>// 1</span>\n<span>count</span><span>(</span><span>)</span><span>;</span>  <span>// 2</span>\n<span>count</span><span>(</span><span>3</span><span>)</span><span>;</span> <span>// 3</span>\n<span>count</span><span>(</span><span>)</span><span>;</span>  <span>// 3</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】把默认参数赋值放在最后。eslint-default-param-last\" tabindex=\"-1\"> <code>【推荐】</code>把默认参数赋值放在最后。eslint: <a href=\"https://eslint.org/docs/rules/default-param-last\" target=\"_blank\" rel=\"noopener noreferrer\"><code>default-param-last</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>handleThings</span><span>(</span><span>opts <span>=</span> <span>{</span><span>}</span><span>,</span> name</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>handleThings</span><span>(</span><span>name<span>,</span> opts <span>=</span> <span>{</span><span>}</span></span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要用函数构造器创建函数。eslint-no-new-func\" tabindex=\"-1\"> <code>【强制】</code> 不要用函数构造器创建函数。eslint: <a href=\"http://eslint.org/docs/rules/no-new-func\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-new-func</code></a></h4>\n<blockquote>\n<p>为什么？以这种方式创建函数将类似于字符串 eval()，存在漏洞。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>var</span> add <span>=</span> <span>new</span> <span>Function</span><span>(</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'return a + b'</span><span>)</span><span>;</span>\n\n<span>// still bad</span>\n<span>var</span> subtract <span>=</span> <span>Function</span><span>(</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'return a - b'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-函数定义部分要有空格。eslint-space-before-function-parenspace-before-blocks\" tabindex=\"-1\"> <code>【强制】</code> 函数定义部分要有空格。eslint: <a href=\"http://eslint.org/docs/rules/space-before-function-paren\" target=\"_blank\" rel=\"noopener noreferrer\"><code>space-before-function-paren</code></a><a href=\"http://eslint.org/docs/rules/space-before-blocks\" target=\"_blank\" rel=\"noopener noreferrer\"><code>space-before-blocks</code></a></h4>\n<blockquote>\n<p>为什么？统一性好，而且在你添加/删除一个名字的时候不需要添加/删除空格。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> <span>f</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>;</span>\n<span>const</span> <span>g</span> <span>=</span> <span>function</span> <span>(</span><span>)</span><span>{</span><span>}</span><span>;</span>\n<span>const</span> <span>h</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> <span>x</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n<span>const</span> <span>y</span> <span>=</span> <span>function</span> <span>a</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要修改参数-eslint-no-param-reassign\" tabindex=\"-1\"> <code>【强制】</code> 不要修改参数. eslint: <a href=\"http://eslint.org/docs/rules/no-param-reassign.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-param-reassign</code></a></h4>\n<blockquote>\n<p>为什么？操作参数对象对原始调用者会导致意想不到的副作用。就是不要改参数的数据结构，保留参数原始值和数据结构。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>f1</span><span>(</span><span>obj</span><span>)</span> <span>{</span>\n  obj<span>.</span>key <span>=</span> <span>1</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>function</span> <span>f2</span><span>(</span><span>obj</span><span>)</span> <span>{</span>\n  <span>const</span> key <span>=</span> <span>Object</span><span>.</span>prototype<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span>obj<span>,</span> <span>'key'</span><span>)</span> <span>?</span> obj<span>.</span>key <span>:</span> <span>1</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】不要对参数重新赋值。eslint-no-param-reassign\" tabindex=\"-1\"> <code>【推荐】</code>不要对参数重新赋值。eslint: <a href=\"http://eslint.org/docs/rules/no-param-reassign.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-param-reassign</code></a></h4>\n<blockquote>\n<p>为什么？参数重新赋值会导致意外行为，尤其是对 <code>arguments</code>。这也会导致优化问题，特别是在 V8 引擎里。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>f1</span><span>(</span><span>a</span><span>)</span> <span>{</span>\n  a <span>=</span> <span>1</span><span>;</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>function</span> <span>f2</span><span>(</span><span>a</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>!</span>a<span>)</span> <span>{</span> a <span>=</span> <span>1</span><span>;</span> <span>}</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>f3</span><span>(</span><span>a</span><span>)</span> <span>{</span>\n  <span>const</span> b <span>=</span> a <span>||</span> <span>1</span><span>;</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>function</span> <span>f4</span><span>(</span><span>a <span>=</span> <span>1</span></span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-使用拓展运算符调用多参数的函数。eslint-prefer-spread\" tabindex=\"-1\"> <code>【强制】</code> 使用拓展运算符调用多参数的函数。eslint: <a href=\"http://eslint.org/docs/rules/prefer-spread\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-spread</code></a></h4>\n<blockquote>\n<p>为什么？这样更清晰，你不必提供上下文（即指定 this 值），而且你不能轻易地用 <code>apply</code> 来组成 <code>new</code>。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> x <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>\nconsole<span>.</span><span>log</span><span>.</span><span>apply</span><span>(</span>console<span>,</span> x<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> x <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>...</span>x<span>)</span><span>;</span>\n\n<span>// bad</span>\n<span>new</span> <span>(</span><span>Function</span><span>.</span>prototype<span>.</span><span>bind</span><span>.</span><span>apply</span><span>(</span>Date<span>,</span> <span>[</span><span>null</span><span>,</span> <span>2016</span><span>,</span> <span>8</span><span>,</span> <span>5</span><span>]</span><span>)</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>new</span> <span>Date</span><span>(</span><span>...</span><span>[</span><span>2016</span><span>,</span> <span>8</span><span>,</span> <span>5</span><span>]</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-调用或者编写一个包含多个参数的函数的缩进-应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数-每行逗号结尾。\" tabindex=\"-1\"> <code>【强制】</code> 调用或者编写一个包含多个参数的函数的缩进，应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数，每行逗号结尾。</h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>bar<span>,</span>\n             baz<span>,</span>\n             quux</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good 缩进不要太过分</span>\n<span>function</span> <span>foo</span><span>(</span>\n  <span>bar<span>,</span>\n  baz<span>,</span>\n  quux<span>,</span></span>\n<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\nconsole<span>.</span><span>log</span><span>(</span>foo<span>,</span>\n  bar<span>,</span>\n  baz<span>)</span><span>;</span>\n\n<span>// good</span>\nconsole<span>.</span><span>log</span><span>(</span>\n  foo<span>,</span>\n  bar<span>,</span>\n  baz<span>,</span>\n<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"箭头函数\" tabindex=\"-1\"> 箭头函数</h3>\n<h4 id=\"【强制】-当你一定要用函数表达式-在回调函数里-的时候-使用箭头函数。-eslint-prefer-arrow-callback-arrow-spacing\" tabindex=\"-1\"> <code>【强制】</code> 当你一定要用函数表达式（在回调函数里）的时候，使用箭头函数。 eslint: <a href=\"http://eslint.org/docs/rules/prefer-arrow-callback.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-arrow-callback</code></a>, <a href=\"http://eslint.org/docs/rules/arrow-spacing.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>arrow-spacing</code></a></h4>\n<blockquote>\n<p>为什么？箭头函数中的 <code>this</code> 与定义该函数的上下文中的 <code>this</code> 一致，这通常才是你想要的。而且箭头函数是更简洁的语法。</p>\n</blockquote>\n<blockquote>\n<p>什么时候不用箭头函数：如果你的函数逻辑较复杂，你应该把它单独写入一个命名函数里头。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>function</span> <span>(</span><span>x</span><span>)</span> <span>{</span>\n  <span>const</span> y <span>=</span> x <span>+</span> <span>1</span><span>;</span>\n  <span>return</span> x <span>*</span> y<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>x</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> y <span>=</span> x <span>+</span> <span>1</span><span>;</span>\n  <span>return</span> x <span>*</span> y<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-如果函数体由一个没有副作用的-表达式语句组成-删除大括号和-return。否则-使用大括号和-return-语句。-eslint-arrow-parens-arrow-body-style\" tabindex=\"-1\"> <code>【强制】</code> 如果函数体由一个没有副作用的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\" target=\"_blank\" rel=\"noopener noreferrer\">表达式</a>语句组成，删除大括号和 return。否则，使用大括号和 <code>return</code> 语句。 eslint: <a href=\"https://eslint.org/docs/rules/arrow-parens.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>arrow-parens</code> </a>, <a href=\"https://eslint.org/docs/rules/arrow-body-style.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>arrow-body-style</code></a></h4>\n<blockquote>\n<p>为什么？语法糖，当多个函数链在一起的时候好读。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> nextNumber <span>=</span> number <span>+</span> <span>1</span><span>;</span>\n  <span><span>`</span><span>A string containing the </span><span><span>${</span>nextNumber<span>}</span></span><span>.</span><span>`</span></span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>number</span><span>)</span> <span>=></span> <span><span>`</span><span>A string containing the </span><span><span>${</span>number <span>+</span> <span>1</span><span>}</span></span><span>.</span><span>`</span></span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> nextNumber <span>=</span> number <span>+</span> <span>1</span><span>;</span>\n  <span>return</span> <span><span>`</span><span>A string containing the </span><span><span>${</span>nextNumber<span>}</span></span><span>.</span><span>`</span></span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>number<span>,</span> index</span><span>)</span> <span>=></span> <span>(</span><span>{</span>\n  <span>[</span>index<span>]</span><span>:</span> number<span>,</span>\n<span>}</span><span>)</span><span>)</span><span>;</span>\n\n<span>// 没有明显的 return 语句，可能存在副作用。</span>\n<span>function</span> <span>foo</span><span>(</span><span>callback</span><span>)</span> <span>{</span>\n  <span>const</span> val <span>=</span> <span>callback</span><span>(</span><span>)</span><span>;</span>\n  <span>if</span> <span>(</span>val <span>===</span> <span>true</span><span>)</span> <span>{</span>\n    <span>// 当 callback 返回 true 时...</span>\n  <span>}</span>\n<span>}</span>\n\n<span>let</span> bool <span>=</span> <span>false</span><span>;</span>\n\n<span>// bad</span>\n<span>foo</span><span>(</span><span>(</span><span>)</span> <span>=></span> bool <span>=</span> <span>true</span><span>)</span><span>;</span>\n\n\n<span>// good</span>\n<span>foo</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n  bool <span>=</span> <span>true</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-如果表达式涉及多行-把他包裹在圆括号里以提高可读性。\" tabindex=\"-1\"> <code>【强制】</code> 如果表达式涉及多行，把他包裹在圆括号里以提高可读性。</h4>\n<blockquote>\n<p>为什么？这样能清晰地显示函数的开始位置和结束位置。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>[</span><span>'get'</span><span>,</span> <span>'post'</span><span>,</span> <span>'put'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>httpMethod</span> <span>=></span> <span>Object</span><span>.</span>prototype<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span>\n    httpMagicObjectWithAVeryLongName<span>,</span>\n    httpMethod\n  <span>)</span>\n<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>'get'</span><span>,</span> <span>'post'</span><span>,</span> <span>'put'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>httpMethod</span> <span>=></span> <span>(</span>\n  <span>Object</span><span>.</span>prototype<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span>\n    httpMagicObjectWithAVeryLongName<span>,</span>\n    httpMethod\n  <span>)</span>\n<span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在箭头函数参数两头-总是使用小括号包裹住参数-这样做使代码更清晰且一致-eslint-arrow-parens\" tabindex=\"-1\"> <code>【推荐】</code>在箭头函数参数两头，总是使用小括号包裹住参数，这样做使代码更清晰且一致. eslint: <a href=\"https://eslint.org/docs/rules/arrow-parens.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>arrow-parens</code></a></h4>\n<blockquote>\n<p>为什么？当你想要添加或删除参数时能比较省事。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>x</span> <span>=></span> x <span>*</span> x<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>x</span><span>)</span> <span>=></span> x <span>*</span> x<span>)</span><span>;</span>\n\n<span>// bad</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>number</span> <span>=></span> <span>(</span>\n  <span><span>`</span><span>A long string with the </span><span><span>${</span>number<span>}</span></span><span>. It’s so long that we don’t want it to take up space on the .map line!</span><span>`</span></span>\n<span>)</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>number</span><span>)</span> <span>=></span> <span>(</span>\n  <span><span>`</span><span>A long string with the </span><span><span>${</span>number<span>}</span></span><span>. It’s so long that we don’t want it to take up space on the .map line!</span><span>`</span></span>\n<span>)</span><span>)</span><span>;</span>\n\n\n<span>// bad</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>x</span> <span>=></span> <span>{</span>\n  <span>const</span> y <span>=</span> x <span>+</span> <span>1</span><span>;</span>\n  <span>return</span> x <span>*</span> y<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>x</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> y <span>=</span> x <span>+</span> <span>1</span><span>;</span>\n  <span>return</span> x <span>*</span> y<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】避免箭头函数-和比较操作符-混淆-eslint-no-confusing-arrow\" tabindex=\"-1\"> <code>【推荐】</code>避免箭头函数（<code>=&gt;</code>）和比较操作符（<code>&lt;=</code>, <code>&gt;=</code>）混淆. eslint: <a href=\"http://eslint.org/docs/rules/no-confusing-arrow\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-confusing-arrow</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> <span>itemHeight</span> <span>=</span> <span>(</span><span>item</span><span>)</span> <span>=></span> item<span>.</span>height <span>&lt;=</span> <span>256</span> <span>?</span> item<span>.</span>largeSize <span>:</span> item<span>.</span>smallSize<span>;</span>\n\n<span>// bad</span>\n<span>const</span> <span>itemHeight</span> <span>=</span> <span>(</span><span>item</span><span>)</span> <span>=></span> item<span>.</span>height <span>>=</span> <span>256</span> <span>?</span> item<span>.</span>largeSize <span>:</span> item<span>.</span>smallSize<span>;</span>\n\n<span>// good</span>\n<span>const</span> <span>itemHeight</span> <span>=</span> <span>(</span><span>item</span><span>)</span> <span>=></span> <span>(</span>item<span>.</span>height <span>&lt;=</span> <span>256</span> <span>?</span> item<span>.</span>largeSize <span>:</span> item<span>.</span>smallSize<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> <span>itemHeight</span> <span>=</span> <span>(</span><span>item</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>{</span> height<span>,</span> largeSize<span>,</span> smallSize <span>}</span> <span>=</span> item<span>;</span>\n  <span>return</span> height <span>&lt;=</span> <span>256</span> <span>?</span> largeSize <span>:</span> smallSize<span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】使箭头函数体有一个清晰的返回。-eslint-implicit-arrow-linebreak\" tabindex=\"-1\"> <code>【推荐】</code>使箭头函数体有一个清晰的返回。 eslint: <a href=\"https://eslint.org/docs/rules/implicit-arrow-linebreak\" target=\"_blank\" rel=\"noopener noreferrer\"><code>implicit-arrow-linebreak</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>(</span><span>foo</span><span>)</span> <span>=></span>\n  bar<span>;</span>\n\n<span>(</span><span>foo</span><span>)</span> <span>=></span>\n  <span>(</span>bar<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>(</span><span>foo</span><span>)</span> <span>=></span> bar<span>;</span>\n<span>(</span><span>foo</span><span>)</span> <span>=></span> <span>(</span>bar<span>)</span><span>;</span>\n<span>(</span><span>foo</span><span>)</span> <span>=></span> <span>(</span>\n   bar\n<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"类与构造函数\" tabindex=\"-1\"> 类与构造函数</h3>\n<h4 id=\"【推荐】使用-class-语法。避免直接操作-prototype。\" tabindex=\"-1\"> <code>【推荐】</code>使用 <code>class</code> 语法。避免直接操作 <code>prototype</code>。</h4>\n<blockquote>\n<p>为什么？<code>class</code> 语法更简洁更易理解。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>Queue</span><span>(</span><span>contents <span>=</span> <span>[</span><span>]</span></span><span>)</span> <span>{</span>\n  <span>this</span><span>.</span>queue <span>=</span> <span>[</span><span>...</span>contents<span>]</span><span>;</span>\n<span>}</span>\n<span>Queue</span><span>.</span>prototype<span>.</span><span>pop</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>const</span> value <span>=</span> <span>this</span><span>.</span>queue<span>[</span><span>0</span><span>]</span><span>;</span>\n  <span>this</span><span>.</span>queue<span>.</span><span>splice</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>;</span>\n  <span>return</span> value<span>;</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>class</span> <span>Queue</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>contents <span>=</span> <span>[</span><span>]</span></span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>queue <span>=</span> <span>[</span><span>...</span>contents<span>]</span><span>;</span>\n  <span>}</span>\n  <span>pop</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> value <span>=</span> <span>this</span><span>.</span>queue<span>[</span><span>0</span><span>]</span><span>;</span>\n    <span>this</span><span>.</span>queue<span>.</span><span>splice</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>;</span>\n    <span>return</span> value<span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-extends-实现继承。\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>extends</code> 实现继承。</h4>\n<blockquote>\n<p>为什么？它是一种内置的方法来继承原型功能而不破坏 <code>instanceof</code>。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> inherits <span>=</span> <span>require</span><span>(</span><span>'inherits'</span><span>)</span><span>;</span>\n<span>function</span> <span>PeekableQueue</span><span>(</span><span>contents</span><span>)</span> <span>{</span>\n  <span>Queue</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> contents<span>)</span><span>;</span>\n<span>}</span>\n<span>inherits</span><span>(</span>PeekableQueue<span>,</span> Queue<span>)</span><span>;</span>\n<span>PeekableQueue</span><span>.</span>prototype<span>.</span><span>peek</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>this</span><span>.</span>queue<span>[</span><span>0</span><span>]</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>class</span> <span>PeekableQueue</span> <span>extends</span> <span>Queue</span> <span>{</span>\n  <span>peek</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>.</span>queue<span>[</span><span>0</span><span>]</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】方法可以返回-this-来实现链式调用。\" tabindex=\"-1\"> <code>【推荐】</code>方法可以返回 <code>this</code> 来实现链式调用。</h4>\n<div><pre><code><span>// bad</span>\n<span>Jedi</span><span>.</span>prototype<span>.</span><span>jump</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>this</span><span>.</span>jumping <span>=</span> <span>true</span><span>;</span>\n  <span>return</span> <span>true</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>Jedi</span><span>.</span>prototype<span>.</span><span>setHeight</span> <span>=</span> <span>function</span> <span>(</span><span>height</span><span>)</span> <span>{</span>\n  <span>this</span><span>.</span>height <span>=</span> height<span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> luke <span>=</span> <span>new</span> <span>Jedi</span><span>(</span><span>)</span><span>;</span>\nluke<span>.</span><span>jump</span><span>(</span><span>)</span><span>;</span> <span>// => true</span>\nluke<span>.</span><span>setHeight</span><span>(</span><span>20</span><span>)</span><span>;</span> <span>// => undefined</span>\n\n<span>// good</span>\n<span>class</span> <span>Jedi</span> <span>{</span>\n  <span>jump</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>jumping <span>=</span> <span>true</span><span>;</span>\n    <span>return</span> <span>this</span><span>;</span>\n  <span>}</span>\n\n  <span>setHeight</span><span>(</span><span>height</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>height <span>=</span> height<span>;</span>\n    <span>return</span> <span>this</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>const</span> luke <span>=</span> <span>new</span> <span>Jedi</span><span>(</span><span>)</span><span>;</span>\n\nluke<span>.</span><span>jump</span><span>(</span><span>)</span>\n  <span>.</span><span>setHeight</span><span>(</span><span>20</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-自己写-tostring-方法是可以的-但需要保证它可以正常工作且没有副作用。\" tabindex=\"-1\"> <code>【强制】</code> 自己写 <code>toString()</code> 方法是可以的，但需要保证它可以正常工作且没有副作用。</h4>\n<div><pre><code><span>class</span> <span>Jedi</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options <span>=</span> <span>{</span><span>}</span></span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> options<span>.</span>name <span>||</span> <span>'no name'</span><span>;</span>\n  <span>}</span>\n\n  <span>getName</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>.</span>name<span>;</span>\n  <span>}</span>\n\n  <span>toString</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span><span>`</span><span>Jedi - </span><span><span>${</span><span>this</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-如果没有特别定义-类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。-eslint-no-useless-constructor\" tabindex=\"-1\"> <code>【强制】</code> 如果没有特别定义，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。 eslint: <a href=\"http://eslint.org/docs/rules/no-useless-constructor\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-useless-constructor</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>class</span> <span>Jedi</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n  <span>getName</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>.</span>name<span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>class</span> <span>Rey</span> <span>extends</span> <span>Jedi</span> <span>{</span>\n  <span>// 这种构造函数是不需要写的</span>\n  <span>constructor</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>...</span>args<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>class</span> <span>Rey</span> <span>extends</span> <span>Jedi</span> <span>{</span>\n  <span>constructor</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>...</span>args<span>)</span><span>;</span>\n    <span>this</span><span>.</span>name <span>=</span> <span>'Rey'</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-避免重复定义类成员。eslint-no-dupe-class-members\" tabindex=\"-1\"> <code>【强制】</code> 避免重复定义类成员。eslint: <a href=\"http://eslint.org/docs/rules/no-dupe-class-members\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-dupe-class-members</code></a></h4>\n<blockquote>\n<p>为什么？重复定义类成员只会使用最后一个被定义的 —— 重复本身也是一个 bug.</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>1</span><span>;</span> <span>}</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>2</span><span>;</span> <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>1</span><span>;</span> <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>2</span><span>;</span> <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】除非外部库或框架需要使用特定的非静态方法-否则类方法应该使用-this-或被写成静态方法。-作为一个实例方法表明它应该根据实例的属性有不同的行为。eslint-class-methods-use-this\" tabindex=\"-1\"> <code>【推荐】</code>除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用 <code>this</code> 或被写成静态方法。 作为一个实例方法表明它应该根据实例的属性有不同的行为。eslint: <a href=\"https://eslint.org/docs/rules/class-methods-use-this\" target=\"_blank\" rel=\"noopener noreferrer\"><code>class-methods-use-this</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'bar'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good - this 被使用了</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>bar<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good - constructor 不一定要使用 this</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good - 静态方法不需要使用 this</span>\n<span>class</span> <span>Foo</span> <span>{</span>\n  <span>static</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'bar'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"模块\" tabindex=\"-1\"> 模块</h3>\n<h4 id=\"【推荐】使用-import-export-模块而不是非标准的模块系统。你可以随时转到你喜欢的模块系统。\" tabindex=\"-1\"> <code>【推荐】</code>使用（<code>import</code>/<code>export</code>）模块而不是非标准的模块系统。你可以随时转到你喜欢的模块系统。</h4>\n<blockquote>\n<p>为什么？模块化是未来，让我们现在就开启未来吧。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> AirbnbStyleGuide <span>=</span> <span>require</span><span>(</span><span>'./AirbnbStyleGuide'</span><span>)</span><span>;</span>\nmodule<span>.</span>exports <span>=</span> AirbnbStyleGuide<span>.</span>es6<span>;</span>\n\n<span>// ok</span>\n<span>import</span> AirbnbStyleGuide <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n<span>export</span> <span>default</span> AirbnbStyleGuide<span>.</span>es6<span>;</span>\n\n<span>// best</span>\n<span>import</span> <span>{</span> es6 <span>}</span> <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n<span>export</span> <span>default</span> es6<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】不要用-import-通配符-即-这种方式。\" tabindex=\"-1\"> <code>【推荐】</code>不要用 <code>import</code> 通配符， 即 <code>*</code> 这种方式。</h4>\n<blockquote>\n<p>为什么？这确保你有单个默认的导出。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>import</span> <span>*</span> <span>as</span> AirbnbStyleGuide <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> AirbnbStyleGuide <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】不要直接从-import-中直接-export。\" tabindex=\"-1\"> <code>【推荐】</code>不要直接从 <code>import</code> 中直接 <code>export</code>。</h4>\n<blockquote>\n<p>为什么？虽然只写一行很简洁，但是使用明确 <code>import</code> 和明确的 <code>export</code> 来保证一致性。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>// filename es6.js</span>\n<span>export</span> <span>{</span> es6 <span>as</span> <span>default</span> <span>}</span> <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n\n<span>// good</span>\n<span>// filename es6.js</span>\n<span>import</span> <span>{</span> es6 <span>}</span> <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n<span>export</span> <span>default</span> es6<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-一个路径只-import-一次。eslint-no-duplicate-imports\" tabindex=\"-1\"> <code>【强制】</code> 一个路径只 <code>import</code> 一次。eslint: <a href=\"http://eslint.org/docs/rules/no-duplicate-imports\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-duplicate-imports</code></a></h4>\n<blockquote>\n<p>为什么？多行导入同一路径将使代码变得难以维护。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>import</span> foo <span>from</span> <span>'foo'</span><span>;</span>\n<span>// … 其他导入 … //</span>\n<span>import</span> <span>{</span> named1<span>,</span> named2 <span>}</span> <span>from</span> <span>'foo'</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> foo<span>,</span> <span>{</span> named1<span>,</span> named2 <span>}</span> <span>from</span> <span>'foo'</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> foo<span>,</span> <span>{</span>\n  named1<span>,</span>\n  named2<span>,</span>\n<span>}</span> <span>from</span> <span>'foo'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要导出可变的东西。eslint-import-no-mutable-exports\" tabindex=\"-1\"> <code>【强制】</code> 不要导出可变的东西。eslint: <a href=\"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md\" target=\"_blank\" rel=\"noopener noreferrer\"><code>import/no-mutable-exports</code></a></h4>\n<blockquote>\n<p>为什么？变化通常都是需要避免，特别是当你要输出可变的绑定。虽然在某些场景下可能需要这种技术，但总的来说应该导出常量。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>let</span> foo <span>=</span> <span>3</span><span>;</span>\n<span>export</span> <span>{</span> foo <span>}</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> <span>3</span><span>;</span>\n<span>export</span> <span>{</span> foo <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在一个单一导出模块里-用-export-default-更好。eslint-import-prefer-default-export\" tabindex=\"-1\"> <code>【推荐】</code>在一个单一导出模块里，用 <code>export default</code> 更好。eslint: <a href=\"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md\" target=\"_blank\" rel=\"noopener noreferrer\"><code>import/prefer-default-export</code></a></h4>\n<blockquote>\n<p>为什么？鼓励使用更多文件，每个文件只导出一次，这样可读性和可维护性更好。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>export</span> <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n<span>// good</span>\n<span>export</span> <span>default</span> <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-把-import-放在其他所有语句之前。eslint-import-first\" tabindex=\"-1\"> <code>【强制】</code> 把 <code>import</code> 放在其他所有语句之前。eslint: <a href=\"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md\" target=\"_blank\" rel=\"noopener noreferrer\"><code>import/first</code></a></h4>\n<blockquote>\n<p>为什么？因为 <code>import</code> 会被提升到代码最前面运行，因此将他们放在最前面以防止发生意外行为。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>import</span> foo <span>from</span> <span>'foo'</span><span>;</span>\nfoo<span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>\n\n<span>import</span> bar <span>from</span> <span>'bar'</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> foo <span>from</span> <span>'foo'</span><span>;</span>\n<span>import</span> bar <span>from</span> <span>'bar'</span><span>;</span>\n\nfoo<span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-多行-import-应该缩进-就像多行数组和对象字面量一样。\" tabindex=\"-1\"> <code>【强制】</code> 多行 <code>import</code> 应该缩进，就像多行数组和对象字面量一样。</h4>\n<blockquote>\n<p>为什么？花括号与样式指南中每个其他花括号块遵循相同的缩进规则，逗号也是。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>import</span> <span>{</span>longNameA<span>,</span> longNameB<span>,</span> longNameC<span>,</span> longNameD<span>,</span> longNameE<span>}</span> <span>from</span> <span>'path'</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> <span>{</span>\n  longNameA<span>,</span>\n  longNameB<span>,</span>\n  longNameC<span>,</span>\n  longNameD<span>,</span>\n  longNameE<span>,</span>\n<span>}</span> <span>from</span> <span>'path'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-在-import-语句里不允许-webpack-loader-语法。eslint-import-no-webpack-loader-syntax\" tabindex=\"-1\"> <code>【强制】</code> 在 <code>import</code> 语句里不允许 Webpack loader 语法。eslint: <a href=\"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md\" target=\"_blank\" rel=\"noopener noreferrer\"><code>import/no-webpack-loader-syntax</code></a></h4>\n<blockquote>\n<p>为什么？一旦用 Webpack 语法在 import 里会把代码耦合到模块绑定器。最好是在 <code>webpack.config.js</code> 里写 webpack loader 语法</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>import</span> fooSass <span>from</span> <span>'css!sass!foo.scss'</span><span>;</span>\n<span>import</span> barCss <span>from</span> <span>'style!css!bar.css'</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> fooSass <span>from</span> <span>'foo.scss'</span><span>;</span>\n<span>import</span> barCss <span>from</span> <span>'bar.css'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"迭代器与生成器\" tabindex=\"-1\"> 迭代器与生成器</h3>\n<h4 id=\"【强制】-不要用迭代器。使用-javascript-高级函数代替-for-in、-for-of。eslint-no-iterator-no-restricted-syntax\" tabindex=\"-1\"> <code>【强制】</code> 不要用迭代器。使用 JavaScript 高级函数代替 <code>for-in</code>、 <code>for-of</code>。eslint: <a href=\"http://eslint.org/docs/rules/no-iterator.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-iterator</code> </a><a href=\"http://eslint.org/docs/rules/no-restricted-syntax\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-restricted-syntax</code></a></h4>\n<blockquote>\n<p>为什么？这强调了我们不可变的规则。 处理返回值的纯函数比处理副作用更容易。</p>\n</blockquote>\n<blockquote>\n<p>用数组的这些迭代方法： <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / ... , 用对象的这些方法 <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code> 去产生一个数组，这样你就能去遍历对象了。</p>\n</blockquote>\n<div><pre><code><span>const</span> numbers <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>\n\n<span>// bad</span>\n<span>let</span> sum <span>=</span> <span>0</span><span>;</span>\n<span>for</span> <span>(</span><span>let</span> num <span>of</span> numbers<span>)</span> <span>{</span>\n  sum <span>+=</span> num<span>;</span>\n<span>}</span>\nsum <span>===</span> <span>15</span><span>;</span>\n\n<span>// good</span>\n<span>let</span> sum <span>=</span> <span>0</span><span>;</span>\nnumbers<span>.</span><span>forEach</span><span>(</span><span>num</span> <span>=></span> sum <span>+=</span> num<span>)</span><span>;</span>\nsum <span>===</span> <span>15</span><span>;</span>\n\n<span>// best (use the functional force)</span>\n<span>const</span> sum <span>=</span> numbers<span>.</span><span>reduce</span><span>(</span><span>(</span><span>total<span>,</span> num</span><span>)</span> <span>=></span> total <span>+</span> num<span>,</span> <span>0</span><span>)</span><span>;</span>\nsum <span>===</span> <span>15</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> increasedByOne <span>=</span> <span>[</span><span>]</span><span>;</span>\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> numbers<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n  increasedByOne<span>.</span><span>push</span><span>(</span>numbers<span>[</span>i<span>]</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>const</span> increasedByOne <span>=</span> <span>[</span><span>]</span><span>;</span>\nnumbers<span>.</span><span>forEach</span><span>(</span><span>num</span> <span>=></span> increasedByOne<span>.</span><span>push</span><span>(</span>num <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span>\n\n<span>// best (keeping it functional)</span>\n<span>const</span> increasedByOne <span>=</span> numbers<span>.</span><span>map</span><span>(</span><span>num</span> <span>=></span> num <span>+</span> <span>1</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-现在暂时不要使用生成器。\" tabindex=\"-1\"> <code>【强制】</code> 现在暂时不要使用生成器。</h4>\n<blockquote>\n<p>为什么？生成器目前不能很好地转换为 ES5 语法。</p>\n</blockquote>\n<h4 id=\"【强制】-如果你一定要用生成器-或者你忽略我们的建议-请确保它们的函数标志空格是得当的。eslint-generator-star-spacing\" tabindex=\"-1\"> <code>【强制】</code> 如果你一定要用生成器，或者你忽略我们的建议，请确保它们的函数标志空格是得当的。eslint: <a href=\"http://eslint.org/docs/rules/generator-star-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>generator-star-spacing</code></a></h4>\n<blockquote>\n<p>为什么？<code>function</code> 和 <code>*</code> 是同一概念关键字 - <code>*</code>不是<code>function</code>的修饰符，<code>function*</code> 是一个和<code>function</code> 不一样的独特结构。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>*</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>const</span> <span>bar</span> <span>=</span> <span>function</span> <span>*</span> <span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>const</span> <span>baz</span> <span>=</span> <span>function</span> <span>*</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>const</span> <span>quux</span> <span>=</span> <span>function</span><span>*</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span><span>*</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>*</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// very bad</span>\n<span>function</span>\n<span>*</span>\n<span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// very bad</span>\n<span>const</span> <span>wat</span> <span>=</span> <span>function</span>\n<span>*</span>\n<span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span><span>*</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>const</span> <span>foo</span> <span>=</span> <span>function</span><span>*</span> <span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"属性\" tabindex=\"-1\"> 属性</h3>\n<h4 id=\"【强制】-访问属性时使用点符号。eslint-dot-notation\" tabindex=\"-1\"> <code>【强制】</code> 访问属性时使用点符号。eslint: <a href=\"http://eslint.org/docs/rules/dot-notation.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>dot-notation</code></a></h4>\n<div><pre><code><span>const</span> luke <span>=</span> <span>{</span>\n  <span>jedi</span><span>:</span> <span>true</span><span>,</span>\n  <span>age</span><span>:</span> <span>28</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> isJedi <span>=</span> luke<span>[</span><span>'jedi'</span><span>]</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> isJedi <span>=</span> luke<span>.</span>jedi<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-当使用变量获取属性时用方括号-。\" tabindex=\"-1\"> <code>【强制】</code> 当使用变量获取属性时用方括号 <code>[]</code>。</h4>\n<div><pre><code><span>const</span> luke <span>=</span> <span>{</span>\n  <span>jedi</span><span>:</span> <span>true</span><span>,</span>\n  <span>age</span><span>:</span> <span>28</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>function</span> <span>getProp</span><span>(</span><span>prop</span><span>)</span> <span>{</span>\n  <span>return</span> luke<span>[</span>prop<span>]</span><span>;</span>\n<span>}</span>\n\n<span>const</span> isJedi <span>=</span> <span>getProp</span><span>(</span><span>'jedi'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-做幂运算时用幂操作符-。eslint-no-restricted-properties\" tabindex=\"-1\"> <code>【强制】</code> 做幂运算时用幂操作符 <code>**</code> 。eslint: <a href=\"https://eslint.org/docs/rules/no-restricted-properties\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-restricted-properties</code> </a>.</h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> binary <span>=</span> Math<span>.</span><span>pow</span><span>(</span><span>2</span><span>,</span> <span>10</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> binary <span>=</span> <span>2</span> <span>**</span> <span>10</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"变量\" tabindex=\"-1\"> 变量</h3>\n<h4 id=\"【强制】-使用-const-或-let-声明变量。不这样做会导致全局变量。我们想要避免污染全局命名空间。地球超人也这样警告我们-译者注-可能是一个冷笑话-。-eslint-no-undef-prefer-const\" tabindex=\"-1\"> <code>【强制】</code> 使用 <code>const</code> 或 <code>let</code> 声明变量。不这样做会导致全局变量。我们想要避免污染全局命名空间。地球超人也这样警告我们（译者注：可能是一个冷笑话）。 eslint: <a href=\"http://eslint.org/docs/rules/no-undef\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-undef</code> </a><a href=\"http://eslint.org/docs/rules/prefer-const\" target=\"_blank\" rel=\"noopener noreferrer\"><code>prefer-const</code></a></h4>\n<div><pre><code><span>// bad</span>\nsuperPower <span>=</span> <span>new</span> <span>SuperPower</span><span>(</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> superPower <span>=</span> <span>new</span> <span>SuperPower</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】为每个变量声明都用一个-const-或-let。eslint-one-var\" tabindex=\"-1\"> <code>【推荐】</code>为每个变量声明都用一个 <code>const</code> 或 <code>let</code>。eslint: <a href=\"http://eslint.org/docs/rules/one-var.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>one-var</code></a></h4>\n<blockquote>\n<p>为什么？这种方式很容易去声明新的变量，你不用去考虑把 <code>;</code> 调换成 <code>,</code>，或者引入一个只有标点的不同的变化（译者注：这里说的应该是在 Git 提交代码时显示的变化）。这种做法也可以是你在调试的时候单步每个声明语句，而不是一下跳过所有声明。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> items <span>=</span> <span>getItems</span><span>(</span><span>)</span><span>,</span>\n    goSportsTeam <span>=</span> <span>true</span><span>,</span>\n    dragonball <span>=</span> <span>'z'</span><span>;</span>\n\n<span>// bad</span>\n<span>// （与前面的比较，找一找错误）</span>\n<span>const</span> items <span>=</span> <span>getItems</span><span>(</span><span>)</span><span>,</span>\n    goSportsTeam <span>=</span> <span>true</span><span>;</span>\n    dragonball <span>=</span> <span>'z'</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> items <span>=</span> <span>getItems</span><span>(</span><span>)</span><span>;</span>\n<span>const</span> goSportsTeam <span>=</span> <span>true</span><span>;</span>\n<span>const</span> dragonball <span>=</span> <span>'z'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】把const-和-let-分别放一起。\" tabindex=\"-1\"> <code>【推荐】</code>把<code>const</code> 和 <code>let</code> 分别放一起。</h4>\n<blockquote>\n<p>为什么？在你需要分配一个新的变量，而这个变量依赖之前分配过的变量的时候，这种做法是有帮助的。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>let</span> i<span>,</span> len<span>,</span> dragonball<span>,</span>\n    items <span>=</span> <span>getItems</span><span>(</span><span>)</span><span>,</span>\n    goSportsTeam <span>=</span> <span>true</span><span>;</span>\n\n<span>// bad</span>\n<span>let</span> i<span>;</span>\n<span>const</span> items <span>=</span> <span>getItems</span><span>(</span><span>)</span><span>;</span>\n<span>let</span> dragonball<span>;</span>\n<span>const</span> goSportsTeam <span>=</span> <span>true</span><span>;</span>\n<span>let</span> len<span>;</span>\n\n<span>// good</span>\n<span>const</span> goSportsTeam <span>=</span> <span>true</span><span>;</span>\n<span>const</span> items <span>=</span> <span>getItems</span><span>(</span><span>)</span><span>;</span>\n<span>let</span> dragonball<span>;</span>\n<span>let</span> i<span>;</span>\n<span>let</span> length<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-在你需要的地方声明变量-但是要放在合理的位置。\" tabindex=\"-1\"> <code>【强制】</code> 在你需要的地方声明变量，但是要放在合理的位置。</h4>\n<blockquote>\n<p>为什么？<code>let</code> 和 <code>const</code> 都是块级作用域而不是函数级作用域。</p>\n</blockquote>\n<div><pre><code><span>// bad - 不必要的函数调用。</span>\n<span>function</span> <span>checkName</span><span>(</span><span>hasName</span><span>)</span> <span>{</span>\n  <span>const</span> name <span>=</span> <span>getName</span><span>(</span><span>)</span><span>;</span>\n\n  <span>if</span> <span>(</span>hasName <span>===</span> <span>'test'</span><span>)</span> <span>{</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n\n  <span>if</span> <span>(</span>name <span>===</span> <span>'test'</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span><span>setName</span><span>(</span><span>''</span><span>)</span><span>;</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n\n  <span>return</span> name<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>checkName</span><span>(</span><span>hasName</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>hasName <span>===</span> <span>'test'</span><span>)</span> <span>{</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n\n  <span>// 在需要的时候分配</span>\n  <span>const</span> name <span>=</span> <span>getName</span><span>(</span><span>)</span><span>;</span>\n\n  <span>if</span> <span>(</span>name <span>===</span> <span>'test'</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span><span>setName</span><span>(</span><span>''</span><span>)</span><span>;</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n\n  <span>return</span> name<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要使用链式声明变量。-eslint-no-multi-assign\" tabindex=\"-1\"> <code>【强制】</code> 不要使用链式声明变量。 eslint: <a href=\"https://eslint.org/docs/rules/no-multi-assign\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-multi-assign</code></a></h4>\n<blockquote>\n<p>为什么？链式声明变量会创建隐式全局变量。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>(</span><span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  <span>// JavaScript 将这一段解释为</span>\n  <span>// let a = ( b = ( c = 1 ) );</span>\n  <span>// let 只对变量 a 起作用; 变量 b 和 c 都变成了全局变量</span>\n  <span>let</span> a <span>=</span> b <span>=</span> c <span>=</span> <span>1</span><span>;</span>\n<span>}</span><span>(</span><span>)</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span> <span>// undefined</span>\nconsole<span>.</span><span>log</span><span>(</span>b<span>)</span><span>;</span> <span>// 1</span>\nconsole<span>.</span><span>log</span><span>(</span>c<span>)</span><span>;</span> <span>// 1</span>\n\n<span>// good</span>\n<span>(</span><span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  <span>let</span> a <span>=</span> <span>1</span><span>;</span>\n  <span>let</span> b <span>=</span> a<span>;</span>\n  <span>let</span> c <span>=</span> a<span>;</span>\n<span>}</span><span>(</span><span>)</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span> <span>// undefined</span>\nconsole<span>.</span><span>log</span><span>(</span>b<span>)</span><span>;</span> <span>// undefined</span>\nconsole<span>.</span><span>log</span><span>(</span>c<span>)</span><span>;</span> <span>// undefined</span>\n\n<span>// `const` 也是如此</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要使用一元自增自减运算符-eslint-no-plusplus\" tabindex=\"-1\"> <code>【强制】</code> 不要使用一元自增自减运算符（<code>++</code>， <code>--</code>）. eslint <a href=\"http://eslint.org/docs/rules/no-plusplus\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-plusplus</code></a></h4>\n<blockquote>\n<p>为什么？根据 eslint 文档，一元增量和减量语句受到自动分号插入的影响，并且可能会导致应用程序中的值递增或递减的静默错误。 使用 <code>num + = 1</code> 而不是 <code>num ++</code> 或 <code>num ++</code> 语句也是含义清晰的。 禁止一元增量和减量语句还会阻止您无意地预增/预减值，这也会导致程序出现意外行为。</p>\n</blockquote>\n<div><pre><code>  <span>// bad</span>\n\n  <span>const</span> array <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>\n  <span>let</span> num <span>=</span> <span>1</span><span>;</span>\n  num<span>++</span><span>;</span>\n  <span>--</span>num<span>;</span>\n\n  <span>let</span> sum <span>=</span> <span>0</span><span>;</span>\n  <span>let</span> truthyCount <span>=</span> <span>0</span><span>;</span>\n  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> array<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>let</span> value <span>=</span> array<span>[</span>i<span>]</span><span>;</span>\n    sum <span>+=</span> value<span>;</span>\n    <span>if</span> <span>(</span>value<span>)</span> <span>{</span>\n      truthyCount<span>++</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>// good</span>\n\n  <span>const</span> array <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>\n  <span>let</span> num <span>=</span> <span>1</span><span>;</span>\n  num <span>+=</span> <span>1</span><span>;</span>\n  num <span>-=</span> <span>1</span><span>;</span>\n\n  <span>const</span> sum <span>=</span> array<span>.</span><span>reduce</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> a <span>+</span> b<span>,</span> <span>0</span><span>)</span><span>;</span>\n  <span>const</span> truthyCount <span>=</span> array<span>.</span><span>filter</span><span>(</span>Boolean<span>)</span><span>.</span>length<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在赋值的时候避免在-前-后换行。-如果你的赋值语句超出-max-len-那就用小括号把这个值包起来再换行。eslint-operator-linebreak\" tabindex=\"-1\"> <code>【推荐】</code>在赋值的时候避免在 <code>=</code> 前/后换行。 如果你的赋值语句超出 <a href=\"https://eslint.org/docs/rules/max-len.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>max-len</code> </a>，那就用小括号把这个值包起来再换行。eslint <a href=\"https://eslint.org/docs/rules/operator-linebreak.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>operator-linebreak</code> </a>.</h4>\n<blockquote>\n<p>为什么？在 <code>=</code> 附近换行容易混淆这个赋值语句。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span>\n  <span>superLongLongLongLongLongLongLongLongFunctionName</span><span>(</span><span>)</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> foo\n  <span>=</span> <span>'superLongLongLongLongLongLongLongLongString'</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> <span>(</span>\n  <span>superLongLongLongLongLongLongLongLongFunctionName</span><span>(</span><span>)</span>\n<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> <span>'superLongLongLongLongLongLongLongLongString'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不允许有未使用的变量。eslint-no-unused-vars\" tabindex=\"-1\"> <code>【强制】</code> 不允许有未使用的变量。eslint: <a href=\"https://eslint.org/docs/rules/no-unused-vars\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-unused-vars</code></a></h4>\n<blockquote>\n<p>为什么？一个声明了但未使用的变量更像是由于重构未完成产生的错误。这种在代码中出现的变量会使阅读者迷惑。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n\n<span>var</span> some_unused_var <span>=</span> <span>42</span><span>;</span>\n\n<span>// 写了没用</span>\n<span>var</span> y <span>=</span> <span>10</span><span>;</span>\ny <span>=</span> <span>5</span><span>;</span>\n\n<span>// 变量改了自己的值，也没有用这个变量</span>\n<span>var</span> z <span>=</span> <span>0</span><span>;</span>\nz <span>=</span> z <span>+</span> <span>1</span><span>;</span>\n\n<span>// 参数定义了但未使用</span>\n<span>function</span> <span>getX</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>\n    <span>return</span> x<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>getXPlusY</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>\n  <span>return</span> x <span>+</span> y<span>;</span>\n<span>}</span>\n\n<span>var</span> x <span>=</span> <span>1</span><span>;</span>\n<span>var</span> y <span>=</span> a <span>+</span> <span>2</span><span>;</span>\n\n<span>alert</span><span>(</span><span>getXPlusY</span><span>(</span>x<span>,</span> y<span>)</span><span>)</span><span>;</span>\n\n<span>// 'type' 即使没有使用也可以可以被忽略， 因为这个有一个 rest 取值的属性。</span>\n<span>// 这是从对象中抽取一个忽略特殊字段的对象的一种形式</span>\n<span>var</span> <span>{</span> type<span>,</span> <span>...</span>coords <span>}</span> <span>=</span> data<span>;</span>\n<span>// 'coords' 现在就是一个没有 'type' 属性的 'data' 对象</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"提升\" tabindex=\"-1\"> 提升</h3>\n<h4 id=\"var-声明会被提前到离他最近的作用域的最前面-但是它的赋值语句并没有提前。const-和-let-被赋予了新的概念-暂时性死区-。-重要的是要知道为什么-typeof-不再安全\" tabindex=\"-1\"> <code>var</code> 声明会被提前到离他最近的作用域的最前面，但是它的赋值语句并没有提前。<code>const</code> 和 <code>let</code> 被赋予了新的概念 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\" target=\"_blank\" rel=\"noopener noreferrer\">暂时性死区 </a>。 重要的是要知道为什么 <a href=\"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15\" target=\"_blank\" rel=\"noopener noreferrer\">typeof 不再安全 </a>.</h4>\n<div><pre><code><span>// 我们知道这个不会工作，假设没有定义全局的 notDefined</span>\n<span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>notDefined<span>)</span><span>;</span> <span>// => throws a ReferenceError</span>\n<span>}</span>\n\n<span>// 在你引用的地方之后声明一个变量，他会正常输出是因为变量提升。</span>\n<span>// 注意： declaredButNotAssigned 的值 true 没有被提升。</span>\n<span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>declaredButNotAssigned<span>)</span><span>;</span> <span>// => undefined</span>\n  <span>var</span> declaredButNotAssigned <span>=</span> <span>true</span><span>;</span>\n<span>}</span>\n\n<span>// 解释器把变量声明提升到作用域最前面，</span>\n<span>// 可以重写成如下例子， 二者意义相同。</span>\n<span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  <span>let</span> declaredButNotAssigned<span>;</span>\n  console<span>.</span><span>log</span><span>(</span>declaredButNotAssigned<span>)</span><span>;</span> <span>// => undefined</span>\n  declaredButNotAssigned <span>=</span> <span>true</span><span>;</span>\n<span>}</span>\n\n<span>// 用 const，let就不一样了。</span>\n<span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>declaredButNotAssigned<span>)</span><span>;</span> <span>// => throws a ReferenceError</span>\n  console<span>.</span><span>log</span><span>(</span><span>typeof</span> declaredButNotAssigned<span>)</span><span>;</span> <span>// => throws a ReferenceError</span>\n  <span>const</span> declaredButNotAssigned <span>=</span> <span>true</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-匿名函数表达式和-var-情况相同。\" tabindex=\"-1\"> <code>【强制】</code> 匿名函数表达式和 <code>var</code> 情况相同。</h4>\n<div><pre><code><span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>anonymous<span>)</span><span>;</span> <span>// => undefined</span>\n\n  <span>anonymous</span><span>(</span><span>)</span><span>;</span> <span>// => TypeError anonymous is not a function</span>\n\n  <span>// 译者注，不管后面是函数、数字还是字符串，都是一样的，总结就是实际代码中最好不要用 var。</span>\n  <span>var</span> <span>anonymous</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'anonymous function expression'</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"已命名函数表达式提升他的变量名-不是函数名或函数体。\" tabindex=\"-1\"> 已命名函数表达式提升他的变量名，不是函数名或函数体。</h4>\n<div><pre><code><span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>named<span>)</span><span>;</span> <span>// => undefined</span>\n\n  <span>named</span><span>(</span><span>)</span><span>;</span> <span>// => TypeError named is not a function</span>\n\n  <span>superPower</span><span>(</span><span>)</span><span>;</span> <span>// => ReferenceError superPower is not defined</span>\n\n  <span>var</span> <span>named</span> <span>=</span> <span>function</span> <span>superPower</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'Flying'</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n\n<span>// 函数名和变量名一样是也如此。</span>\n<span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>named<span>)</span><span>;</span> <span>// => undefined</span>\n\n  <span>named</span><span>(</span><span>)</span><span>;</span> <span>// => TypeError named is not a function</span>\n\n  <span>var</span> <span>named</span> <span>=</span> <span>function</span> <span>named</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'named'</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"函数声明则提升了函数名和函数体。\" tabindex=\"-1\"> 函数声明则提升了函数名和函数体。</h4>\n<div><pre><code><span>function</span> <span>example</span><span>(</span><span>)</span> <span>{</span>\n  <span>superPower</span><span>(</span><span>)</span><span>;</span> <span>// => Flying</span>\n\n  <span>function</span> <span>superPower</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'Flying'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>详情请见 <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Scoping &amp; Hoisting </a>by <a href=\"http://www.adequatelygood.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Ben Cherry</a>.</p>\n<h3 id=\"比较运算符与相等\" tabindex=\"-1\"> 比较运算符与相等</h3>\n<h4 id=\"【强制】-用-和-而不是-和-eslint-eqeqeq\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>. eslint: <a href=\"http://eslint.org/docs/rules/eqeqeq.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>eqeqeq</code></a></h4>\n<h4 id=\"【强制】-条件语句如-if-语句使用强制-toboolean-抽象方法来计算它们的表达式-并且始终遵循以下简单规则\" tabindex=\"-1\"> <code>【强制】</code> 条件语句如 <code>if</code> 语句使用强制 <code>ToBoolean</code> 抽象方法来计算它们的表达式，并且始终遵循以下简单规则：</h4>\n<ul>\n<li>\n<p><strong>Objects</strong> 计算成 <strong>true</strong></p>\n</li>\n<li>\n<p><strong>Undefined</strong> 计算成 <strong>false</strong></p>\n</li>\n<li>\n<p><strong>Null</strong> 计算成 <strong>false</strong></p>\n</li>\n<li>\n<p><strong>Booleans</strong> 计算成 <strong>the value of the boolean</strong></p>\n</li>\n<li>\n<p><strong>Numbers</strong></p>\n<ul>\n<li><strong>+0, -0, or NaN</strong> 计算成 <strong>false</strong></li>\n<li>其他 <strong>true</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Strings</strong></p>\n<ul>\n<li><code>''</code> 计算成 <strong>false</strong></li>\n<li>其他 <strong>true</strong></li>\n</ul>\n</li>\n</ul>\n<div><pre><code><span>if</span> <span>(</span><span>[</span><span>0</span><span>]</span> <span>&amp;&amp;</span> <span>[</span><span>]</span><span>)</span> <span>{</span>\n  <span>// true</span>\n  <span>// 数组（即使是空数组）是对象，对象会计算成 true</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】布尔值要用缩写-而字符串和数字要明确使用比较操作符。\" tabindex=\"-1\"> <code>【推荐】</code>布尔值要用缩写，而字符串和数字要明确使用比较操作符。</h4>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span>isValid <span>===</span> <span>true</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>isValid<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>if</span> <span>(</span>name<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>name <span>!==</span> <span>''</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>if</span> <span>(</span>collection<span>.</span>length<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>collection<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>更多信息请见 Angus Croll 的 <a href=\"https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\" target=\"_blank\" rel=\"noopener noreferrer\">Truth Equality and JavaScript</a>。</p>\n<h4 id=\"【推荐】在-case-和-default-分句里用大括号创建一块包含词法声明的区域-例如-let、const、function-和-class-。eslint-rules-no-case-declarations\" tabindex=\"-1\"> <code>【推荐】</code>在 <code>case</code> 和 <code>default</code> 分句里用大括号创建一块包含词法声明的区域（例如：<code>let</code>、<code>const</code>、<code>function</code> 和 <code>class</code>）。eslint rules: <a href=\"http://eslint.org/docs/rules/no-case-declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-case-declarations</code></a>.</h4>\n<blockquote>\n<p>为什么？词法声明在整个 <code>switch</code> 的代码块里都可见，但是只有当其被分配后才会初始化，仅当这个 <code>case</code> 被执行时才被初始化。当多个 <code>case</code> 分句试图定义同一个对象时就会出现问题。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>switch</span> <span>(</span>foo<span>)</span> <span>{</span>\n  <span>case</span> <span>1</span><span>:</span>\n    <span>let</span> x <span>=</span> <span>1</span><span>;</span>\n    <span>break</span><span>;</span>\n  <span>case</span> <span>2</span><span>:</span>\n    <span>const</span> y <span>=</span> <span>2</span><span>;</span>\n    <span>break</span><span>;</span>\n  <span>case</span> <span>3</span><span>:</span>\n    <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n      <span>// ...</span>\n    <span>}</span>\n    <span>break</span><span>;</span>\n  <span>default</span><span>:</span>\n    <span>class</span> <span>C</span> <span>{</span><span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>switch</span> <span>(</span>foo<span>)</span> <span>{</span>\n  <span>case</span> <span>1</span><span>:</span> <span>{</span>\n    <span>let</span> x <span>=</span> <span>1</span><span>;</span>\n    <span>break</span><span>;</span>\n  <span>}</span>\n  <span>case</span> <span>2</span><span>:</span> <span>{</span>\n    <span>const</span> y <span>=</span> <span>2</span><span>;</span>\n    <span>break</span><span>;</span>\n  <span>}</span>\n  <span>case</span> <span>3</span><span>:</span> <span>{</span>\n    <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n      <span>// ...</span>\n    <span>}</span>\n    <span>break</span><span>;</span>\n  <span>}</span>\n  <span>case</span> <span>4</span><span>:</span>\n    <span>bar</span><span>(</span><span>)</span><span>;</span>\n    <span>break</span><span>;</span>\n  <span>default</span><span>:</span> <span>{</span>\n    <span>class</span> <span>C</span> <span>{</span><span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-三元表达式不应该嵌套-通常是单行表达式。eslint-rules-no-nested-ternary\" tabindex=\"-1\"> <code>【强制】</code> 三元表达式不应该嵌套，通常是单行表达式。eslint rules: <a href=\"http://eslint.org/docs/rules/no-nested-ternary.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-nested-ternary</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> maybe1 <span>></span> maybe2\n  <span>?</span> <span>\"bar\"</span>\n  <span>:</span> value1 <span>></span> value2 <span>?</span> <span>\"baz\"</span> <span>:</span> <span>null</span><span>;</span>\n\n<span>// better</span>\n<span>const</span> maybeNull <span>=</span> value1 <span>></span> value2 <span>?</span> <span>'baz'</span> <span>:</span> <span>null</span><span>;</span>\n\n<span>const</span> foo <span>=</span> maybe1 <span>></span> maybe2\n<span>?</span> <span>'bar'</span>\n  <span>:</span> maybeNull<span>;</span>\n\n<span>// best</span>\n<span>const</span> maybeNull <span>=</span> value1 <span>></span> value2 <span>?</span> <span>'baz'</span> <span>:</span> <span>null</span><span>;</span>\n\n<span>const</span> foo <span>=</span> maybe1 <span>></span> maybe2 <span>?</span> <span>'bar'</span> <span>:</span> maybeNull<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-避免不必要的三元表达式。eslint-rules-no-unneeded-ternary\" tabindex=\"-1\"> <code>【强制】</code> 避免不必要的三元表达式。eslint rules: <a href=\"http://eslint.org/docs/rules/no-unneeded-ternary.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-unneeded-ternary</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> a <span>?</span> a <span>:</span> b<span>;</span>\n<span>const</span> bar <span>=</span> c <span>?</span> <span>true</span> <span>:</span> <span>false</span><span>;</span>\n<span>const</span> baz <span>=</span> c <span>?</span> <span>false</span> <span>:</span> <span>true</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> a <span>||</span> b<span>;</span>\n<span>const</span> bar <span>=</span> <span>!</span><span>!</span>c<span>;</span>\n<span>const</span> baz <span>=</span> <span>!</span>c<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用圆括号来组合操作符。-只有当标准的算术运算符-和-并且它们的优先级显而易见时-才可以不用圆括号括起来。eslint-no-mixed-operators\" tabindex=\"-1\"> <code>【强制】</code> 用圆括号来组合操作符。 只有当标准的算术运算符（<code>+</code>, <code>-</code>, <code>*</code>, 和 <code>/</code>）， 并且它们的优先级显而易见时，才可以不用圆括号括起来。eslint: <a href=\"https://eslint.org/docs/rules/no-mixed-operators.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-mixed-operators</code></a></h4>\n<blockquote>\n<p>为什么？这提高了可读性，并且明确了开发者的意图。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> a <span>&amp;&amp;</span> b <span>&lt;</span> <span>0</span> <span>||</span> c <span>></span> <span>0</span> <span>||</span> d <span>+</span> <span>1</span> <span>===</span> <span>0</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> bar <span>=</span> a <span>**</span> b <span>-</span> <span>5</span> <span>%</span> d<span>;</span>\n\n<span>// bad</span>\n<span>// 别人会陷入(a || b) &amp;&amp; c 的迷惑中</span>\n<span>if</span> <span>(</span>a <span>||</span> b <span>&amp;&amp;</span> c<span>)</span> <span>{</span>\n  <span>return</span> d<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> <span>(</span>a <span>&amp;&amp;</span> b <span>&lt;</span> <span>0</span><span>)</span> <span>||</span> c <span>></span> <span>0</span> <span>||</span> <span>(</span>d <span>+</span> <span>1</span> <span>===</span> <span>0</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> bar <span>=</span> <span>(</span>a <span>**</span> b<span>)</span> <span>-</span> <span>(</span><span>5</span> <span>%</span> d<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>a <span>||</span> <span>(</span>b <span>&amp;&amp;</span> c<span>)</span><span>)</span> <span>{</span>\n  <span>return</span> d<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>const</span> bar <span>=</span> a <span>+</span> b <span>/</span> c <span>*</span> d<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"块\" tabindex=\"-1\"> 块</h3>\n<h4 id=\"【强制】-用大括号包裹多行代码块。-eslint-nonblock-statement-body-position\" tabindex=\"-1\"> <code>【强制】</code> 用大括号包裹多行代码块。 eslint: <a href=\"https://eslint.org/docs/rules/nonblock-statement-body-position\" target=\"_blank\" rel=\"noopener noreferrer\"><code>nonblock-statement-body-position</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span>test<span>)</span>\n  <span>return</span> <span>false</span><span>;</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>test<span>)</span> <span>return</span> <span>false</span><span>;</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>test<span>)</span> <span>{</span>\n  <span>return</span> <span>false</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>false</span><span>;</span> <span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>false</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-if-表达式的-else和-if-的右大括号在一行。eslint-brace-style\" tabindex=\"-1\"> <code>【强制】</code> <code>if</code> 表达式的 <code>else</code>和 <code>if</code> 的右大括号在一行。eslint: <a href=\"http://eslint.org/docs/rules/brace-style.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>brace-style</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span>test<span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n  <span>thing2</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n<span>else</span> <span>{</span>\n  <span>thing3</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>test<span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n  <span>thing2</span><span>(</span><span>)</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n  <span>thing3</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-如果-if-语句中总是需要用-return-返回-那后续的-else-就不需要写了。-if-块中包含-return-它后面的-else-if-块中也包含了-return-这个时候就可以把-return-分到多个-if-语句块中。-eslint-no-else-return\" tabindex=\"-1\"> <code>【强制】</code> 如果 <code>if</code> 语句中总是需要用 <code>return</code> 返回，那后续的 <code>else</code> 就不需要写了。 <code>if</code> 块中包含 <code>return</code>， 它后面的 <code>else if</code> 块中也包含了 <code>return</code>， 这个时候就可以把 <code>return</code> 分到多个 <code>if</code> 语句块中。 eslint: <a href=\"https://eslint.org/docs/rules/no-else-return\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-else-return</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>return</span> x<span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> y<span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>cats</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>return</span> x<span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>y<span>)</span> <span>{</span>\n    <span>return</span> y<span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>dogs</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>return</span> x<span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>if</span> <span>(</span>y<span>)</span> <span>{</span>\n      <span>return</span> y<span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>return</span> x<span>;</span>\n  <span>}</span>\n  <span>return</span> y<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>cats</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>return</span> x<span>;</span>\n  <span>}</span>\n\n  <span>if</span> <span>(</span>y<span>)</span> <span>{</span>\n    <span>return</span> y<span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>dogs</span><span>(</span><span>x</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>z<span>)</span> <span>{</span>\n      <span>return</span> y<span>;</span>\n    <span>}</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> z<span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"控制语句\" tabindex=\"-1\"> 控制语句</h3>\n<p>当你的控制语句（<code>if</code>, <code>while</code> 等）太长或者超过最大长度限制的时候，把每一个（组）判断条件放在单独一行里。逻辑操作符放在行首。</p>\n<blockquote>\n<p>为什么？把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致。这提高了可读性，也让复杂逻辑更清晰。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span><span>(</span>foo <span>===</span> <span>123</span> <span>||</span> bar <span>===</span> <span>'abc'</span><span>)</span> <span>&amp;&amp;</span> <span>doesItLookGoodWhenItBecomesThatLong</span><span>(</span><span>)</span> <span>&amp;&amp;</span> <span>isThisReallyHappening</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>if</span> <span>(</span>foo <span>===</span> <span>123</span> <span>&amp;&amp;</span>\n  bar <span>===</span> <span>'abc'</span><span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>if</span> <span>(</span>foo <span>===</span> <span>123</span>\n  <span>&amp;&amp;</span> bar <span>===</span> <span>'abc'</span><span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>if</span> <span>(</span>\n  foo <span>===</span> <span>123</span> <span>&amp;&amp;</span>\n  bar <span>===</span> <span>'abc'</span>\n<span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>\n  foo <span>===</span> <span>123</span>\n  <span>&amp;&amp;</span> bar <span>===</span> <span>'abc'</span>\n<span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>\n  <span>(</span>foo <span>===</span> <span>123</span> <span>||</span> bar <span>===</span> <span>'abc'</span><span>)</span>\n  <span>&amp;&amp;</span> <span>doesItLookGoodWhenItBecomesThatLong</span><span>(</span><span>)</span>\n  <span>&amp;&amp;</span> <span>isThisReallyHappening</span><span>(</span><span>)</span>\n<span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>foo <span>===</span> <span>123</span> <span>&amp;&amp;</span> bar <span>===</span> <span>'abc'</span><span>)</span> <span>{</span>\n  <span>thing1</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】不要用选择操作符代替控制语句。\" tabindex=\"-1\"> <code>【推荐】</code>不要用选择操作符代替控制语句。</h4>\n<div><pre><code><span>// bad</span>\n<span>!</span>isRunning <span>&amp;&amp;</span> <span>startRunning</span><span>(</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span><span>!</span>isRunning<span>)</span> <span>{</span>\n  <span>startRunning</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"注释\" tabindex=\"-1\"> 注释</h3>\n<h4 id=\"【强制】-多行注释用-。\" tabindex=\"-1\"> <code>【强制】</code> 多行注释用 <code>/** ... */</code>。</h4>\n<div><pre><code><span>// bad</span>\n<span>// make() returns a new element</span>\n<span>// based on the passed in tag name</span>\n<span>//</span>\n<span>// @param {String} tag</span>\n<span>// @return {Element} element</span>\n<span>function</span> <span>make</span><span>(</span><span>tag</span><span>)</span> <span>{</span>\n\n  <span>// ...</span>\n\n  <span>return</span> element<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>/**\n * make() returns a new element\n * based on the passed-in tag name\n */</span>\n<span>function</span> <span>make</span><span>(</span><span>tag</span><span>)</span> <span>{</span>\n\n  <span>// ...</span>\n\n  <span>return</span> element<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-单行注释用-将单行注释放在被注释区域上面。如果注释不是在第一行-那么注释前面就空一行。\" tabindex=\"-1\"> <code>【强制】</code> 单行注释用 <code>//</code>，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行。</h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> active <span>=</span> <span>true</span><span>;</span>  <span>// is current tab</span>\n\n<span>// good</span>\n<span>// is current tab</span>\n<span>const</span> active <span>=</span> <span>true</span><span>;</span>\n\n<span>// bad</span>\n<span>function</span> <span>getType</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'fetching type...'</span><span>)</span><span>;</span>\n  <span>// set the default type to 'no type'</span>\n  <span>const</span> type <span>=</span> <span>this</span><span>.</span>_type <span>||</span> <span>'no type'</span><span>;</span>\n\n  <span>return</span> type<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>getType</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'fetching type...'</span><span>)</span><span>;</span>\n\n  <span>// set the default type to 'no type'</span>\n  <span>const</span> type <span>=</span> <span>this</span><span>.</span>_type <span>||</span> <span>'no type'</span><span>;</span>\n\n  <span>return</span> type<span>;</span>\n<span>}</span>\n\n<span>// also good</span>\n<span>function</span> <span>getType</span><span>(</span><span>)</span> <span>{</span>\n  <span>// set the default type to 'no type'</span>\n  <span>const</span> type <span>=</span> <span>this</span><span>.</span>_type <span>||</span> <span>'no type'</span><span>;</span>\n\n  <span>return</span> type<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-所有注释开头空一格-方便阅读。eslint-spaced-comment\" tabindex=\"-1\"> <code>【强制】</code> 所有注释开头空一格，方便阅读。eslint: <a href=\"http://eslint.org/docs/rules/spaced-comment\" target=\"_blank\" rel=\"noopener noreferrer\"><code>spaced-comment</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>//is current tab</span>\n<span>const</span> active <span>=</span> <span>true</span><span>;</span>\n\n<span>// good</span>\n<span>// is current tab</span>\n<span>const</span> active <span>=</span> <span>true</span><span>;</span>\n\n<span>// bad</span>\n<span>/**\n *make() returns a new element\n *based on the passed-in tag name\n */</span>\n<span>function</span> <span>make</span><span>(</span><span>tag</span><span>)</span> <span>{</span>\n\n  <span>// ...</span>\n\n  <span>return</span> element<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>/**\n * make() returns a new element\n * based on the passed-in tag name\n */</span>\n<span>function</span> <span>make</span><span>(</span><span>tag</span><span>)</span> <span>{</span>\n\n  <span>// ...</span>\n\n  <span>return</span> element<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-在你的注释前使用-fixme-或-todo-前缀-这有助于其他开发人员快速理解你指出的需要修复的问题-或者您建议需要实现的问题的解决方案。-这些不同于常规注释-它们是有明确含义的。fixme-需要修复这个问题或todo-需要实现的功能。\" tabindex=\"-1\"> <code>【强制】</code> 在你的注释前使用 <code>FIXME</code> 或 <code>TODO</code> 前缀，这有助于其他开发人员快速理解你指出的需要修复的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，它们是有明确含义的。<code>FIXME：需要修复这个问题</code>或<code>TODO：需要实现的功能</code>。</h4>\n<h4 id=\"【强制】-用-fixme-给问题做注释。\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>// FIXME:</code> 给问题做注释。</h4>\n<div><pre><code><span>class</span> <span>Calculator</span> <span>extends</span> <span>Abacus</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>)</span><span>;</span>\n\n    <span>// FIXME: shouldn't use a global here</span>\n    total <span>=</span> <span>0</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-todo-去注释问题的解决方案。\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>// TODO:</code> 去注释问题的解决方案。</h4>\n<div><pre><code><span>class</span> <span>Calculator</span> <span>extends</span> <span>Abacus</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>)</span><span>;</span>\n\n    <span>// TODO: total should be configurable by an options param</span>\n    <span>this</span><span>.</span>total <span>=</span> <span>0</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"空格\" tabindex=\"-1\"> 空格</h3>\n<h4 id=\"【强制】-一个缩进使用两个空格。eslint-indent\" tabindex=\"-1\"> <code>【强制】</code> 一个缩进使用两个空格。eslint: <a href=\"http://eslint.org/docs/rules/indent.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>indent</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n∙∙∙∙<span>const</span> name<span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n∙<span>const</span> name<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span>\n∙∙<span>const</span> name<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在大括号前空一格。eslint-space-before-blocks\" tabindex=\"-1\"> <code>【推荐】</code>在大括号前空一格。eslint: <a href=\"http://eslint.org/docs/rules/space-before-blocks.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>space-before-blocks</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>test</span><span>(</span><span>)</span><span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'test'</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>test</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'test'</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\ndog<span>.</span><span>set</span><span>(</span><span>'attr'</span><span>,</span><span>{</span>\n  <span>age</span><span>:</span> <span>'1 year'</span><span>,</span>\n  <span>breed</span><span>:</span> <span>'Bernese Mountain Dog'</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\ndog<span>.</span><span>set</span><span>(</span><span>'attr'</span><span>,</span> <span>{</span>\n  <span>age</span><span>:</span> <span>'1 year'</span><span>,</span>\n  <span>breed</span><span>:</span> <span>'Bernese Mountain Dog'</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在控制语句-if-while-等-的圆括号前空一格。在函数调用和定义时-参数列表和函数名之间不空格。-eslint-keyword-spacing\" tabindex=\"-1\"> <code>【推荐】</code>在控制语句（<code>if</code>, <code>while</code> 等）的圆括号前空一格。在函数调用和定义时，参数列表和函数名之间不空格。 eslint: <a href=\"http://eslint.org/docs/rules/keyword-spacing.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>keyword-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>if</span><span>(</span>isJedi<span>)</span> <span>{</span>\n  <span>fight</span> <span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>isJedi<span>)</span> <span>{</span>\n  <span>fight</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>fight</span> <span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span> <span>(</span><span>'Swooosh!'</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>fight</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'Swooosh!'</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】用空格来隔开运算符。eslint-space-infix-ops\" tabindex=\"-1\"> <code>【推荐】</code>用空格来隔开运算符。eslint: <a href=\"http://eslint.org/docs/rules/space-infix-ops.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>space-infix-ops</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> x<span>=</span>y<span>+</span><span>5</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> x <span>=</span> y <span>+</span> <span>5</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】文件结尾空一行。eslint-eol-last\" tabindex=\"-1\"> <code>【推荐】</code>文件结尾空一行。eslint: <a href=\"https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md\" target=\"_blank\" rel=\"noopener noreferrer\"><code>eol-last</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>import</span> <span>{</span> es6 <span>}</span> <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n  <span>// ...</span>\n<span>export</span> <span>default</span> es6<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>// bad</span>\n<span>import</span> <span>{</span> es6 <span>}</span> <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n  <span>// ...</span>\n<span>export</span> <span>default</span> es6<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>// good</span>\n<span>import</span> <span>{</span> es6 <span>}</span> <span>from</span> <span>'./AirbnbStyleGuide'</span><span>;</span>\n  <span>// ...</span>\n<span>export</span> <span>default</span> es6<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-当出现长的方法链式调用时-2个-用缩进。用点开头强调该行是一个方法调用-而不是一个新的语句。eslint-newline-per-chained-callno-whitespace-before-property\" tabindex=\"-1\"> <code>【强制】</code> 当出现长的方法链式调用时（&gt;2个）用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。eslint: <a href=\"http://eslint.org/docs/rules/newline-per-chained-call\" target=\"_blank\" rel=\"noopener noreferrer\"><code>newline-per-chained-call</code></a><a href=\"http://eslint.org/docs/rules/no-whitespace-before-property\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-whitespace-before-property</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>$</span><span>(</span><span>'#items'</span><span>)</span><span>.</span><span>find</span><span>(</span><span>'.selected'</span><span>)</span><span>.</span><span>highlight</span><span>(</span><span>)</span><span>.</span><span>end</span><span>(</span><span>)</span><span>.</span><span>find</span><span>(</span><span>'.open'</span><span>)</span><span>.</span><span>updateCount</span><span>(</span><span>)</span><span>;</span>\n\n<span>// bad</span>\n<span>$</span><span>(</span><span>'#items'</span><span>)</span><span>.</span>\n  <span>find</span><span>(</span><span>'.selected'</span><span>)</span><span>.</span>\n    <span>highlight</span><span>(</span><span>)</span><span>.</span>\n    <span>end</span><span>(</span><span>)</span><span>.</span>\n  <span>find</span><span>(</span><span>'.open'</span><span>)</span><span>.</span>\n    <span>updateCount</span><span>(</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>$</span><span>(</span><span>'#items'</span><span>)</span>\n  <span>.</span><span>find</span><span>(</span><span>'.selected'</span><span>)</span>\n    <span>.</span><span>highlight</span><span>(</span><span>)</span>\n    <span>.</span><span>end</span><span>(</span><span>)</span>\n  <span>.</span><span>find</span><span>(</span><span>'.open'</span><span>)</span>\n    <span>.</span><span>updateCount</span><span>(</span><span>)</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> leds <span>=</span> stage<span>.</span><span>selectAll</span><span>(</span><span>'.led'</span><span>)</span><span>.</span><span>data</span><span>(</span>data<span>)</span><span>.</span><span>enter</span><span>(</span><span>)</span><span>.</span><span>append</span><span>(</span><span>'svg:svg'</span><span>)</span><span>.</span><span>classed</span><span>(</span><span>'led'</span><span>,</span> <span>true</span><span>)</span>\n    <span>.</span><span>attr</span><span>(</span><span>'width'</span><span>,</span> <span>(</span>radius <span>+</span> margin<span>)</span> <span>*</span> <span>2</span><span>)</span><span>.</span><span>append</span><span>(</span><span>'svg:g'</span><span>)</span>\n    <span>.</span><span>attr</span><span>(</span><span>'transform'</span><span>,</span> <span><span>`</span><span>translate(</span><span><span>${</span>radius <span>+</span> margin<span>}</span></span><span>,</span><span><span>${</span>radius <span>+</span> margin<span>}</span></span><span>)</span><span>`</span></span><span>)</span>\n    <span>.</span><span>call</span><span>(</span>tron<span>.</span>led<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> leds <span>=</span> stage<span>.</span><span>selectAll</span><span>(</span><span>'.led'</span><span>)</span>\n    <span>.</span><span>data</span><span>(</span>data<span>)</span>\n  <span>.</span><span>enter</span><span>(</span><span>)</span><span>.</span><span>append</span><span>(</span><span>'svg:svg'</span><span>)</span>\n    <span>.</span><span>classed</span><span>(</span><span>'led'</span><span>,</span> <span>true</span><span>)</span>\n    <span>.</span><span>attr</span><span>(</span><span>'width'</span><span>,</span> <span>(</span>radius <span>+</span> margin<span>)</span> <span>*</span> <span>2</span><span>)</span>\n  <span>.</span><span>append</span><span>(</span><span>'svg:g'</span><span>)</span>\n    <span>.</span><span>attr</span><span>(</span><span>'transform'</span><span>,</span> <span><span>`</span><span>translate(</span><span><span>${</span>radius <span>+</span> margin<span>}</span></span><span>,</span><span><span>${</span>radius <span>+</span> margin<span>}</span></span><span>)</span><span>`</span></span><span>)</span>\n    <span>.</span><span>call</span><span>(</span>tron<span>.</span>led<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> leds <span>=</span> stage<span>.</span><span>selectAll</span><span>(</span><span>'.led'</span><span>)</span><span>.</span><span>data</span><span>(</span>data<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在一个代码块后下一条语句前空一行。\" tabindex=\"-1\"> <code>【推荐】</code>在一个代码块后下一条语句前空一行。</h4>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span>foo<span>)</span> <span>{</span>\n  <span>return</span> bar<span>;</span>\n<span>}</span>\n<span>return</span> baz<span>;</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>foo<span>)</span> <span>{</span>\n  <span>return</span> bar<span>;</span>\n<span>}</span>\n\n<span>return</span> baz<span>;</span>\n\n<span>// bad</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n  <span>bar</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n<span>return</span> obj<span>;</span>\n\n<span>// good</span>\n<span>const</span> obj <span>=</span> <span>{</span>\n  <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n\n  <span>bar</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>return</span> obj<span>;</span>\n\n<span>// bad</span>\n<span>const</span> arr <span>=</span> <span>[</span>\n  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n  <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n<span>]</span><span>;</span>\n<span>return</span> arr<span>;</span>\n\n<span>// good</span>\n<span>const</span> arr <span>=</span> <span>[</span>\n  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n\n  <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n  <span>}</span><span>,</span>\n<span>]</span><span>;</span>\n\n<span>return</span> arr<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要用空白行填充块。eslint-padded-blocks\" tabindex=\"-1\"> <code>【强制】</code> 不要用空白行填充块。eslint: <a href=\"http://eslint.org/docs/rules/padded-blocks.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>padded-blocks</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n\n  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>\n\n<span>}</span>\n\n<span>// also bad</span>\n<span>if</span> <span>(</span>baz<span>)</span> <span>{</span>\n\n  console<span>.</span><span>log</span><span>(</span>qux<span>)</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>\n\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>baz<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>qux<span>)</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要在代码之间使用多个空白行填充。eslint-no-multiple-empty-lines\" tabindex=\"-1\"> <code>【强制】</code> 不要在代码之间使用多个空白行填充。eslint: <a href=\"https://eslint.org/docs/rules/no-multiple-empty-lines\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-multiple-empty-lines</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>class</span> <span>Person</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>fullName<span>,</span> email<span>,</span> birthday</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>fullName <span>=</span> fullName<span>;</span>\n\n\n    <span>this</span><span>.</span>email <span>=</span> email<span>;</span>\n\n\n    <span>this</span><span>.</span><span>setAge</span><span>(</span>birthday<span>)</span><span>;</span>\n  <span>}</span>\n\n\n  <span>setAge</span><span>(</span><span>birthday</span><span>)</span> <span>{</span>\n    <span>const</span> today <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>\n\n\n    <span>const</span> age <span>=</span> <span>this</span><span>.</span><span>getAge</span><span>(</span>today<span>,</span> birthday<span>)</span><span>;</span>\n\n\n    <span>this</span><span>.</span>age <span>=</span> age<span>;</span>\n  <span>}</span>\n\n\n  <span>getAge</span><span>(</span><span>today<span>,</span> birthday</span><span>)</span> <span>{</span>\n  <span>// ..</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>class</span> <span>Person</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>fullName<span>,</span> email<span>,</span> birthday</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>fullName <span>=</span> fullName<span>;</span>\n    <span>this</span><span>.</span>email <span>=</span> email<span>;</span>\n    <span>this</span><span>.</span><span>setAge</span><span>(</span>birthday<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>setAge</span><span>(</span><span>birthday</span><span>)</span> <span>{</span>\n    <span>const</span> today <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>\n    <span>const</span> age <span>=</span> <span>getAge</span><span>(</span>today<span>,</span> birthday<span>)</span><span>;</span>\n    <span>this</span><span>.</span>age <span>=</span> age<span>;</span>\n  <span>}</span>\n\n  <span>getAge</span><span>(</span><span>today<span>,</span> birthday</span><span>)</span> <span>{</span>\n    <span>// ..</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-圆括号里不要加空格。eslint-space-in-parens\" tabindex=\"-1\"> <code>【强制】</code> 圆括号里不要加空格。eslint: <a href=\"http://eslint.org/docs/rules/space-in-parens.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>space-in-parens</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>bar</span><span>(</span> <span>foo</span> <span>)</span> <span>{</span>\n  <span>return</span> foo<span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>bar</span><span>(</span><span>foo</span><span>)</span> <span>{</span>\n  <span>return</span> foo<span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>if</span> <span>(</span> foo <span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span>foo<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-方括号里不要加空格。-eslint-array-bracket-spacing\" tabindex=\"-1\"> <code>【强制】</code> 方括号里不要加空格。 eslint: <a href=\"http://eslint.org/docs/rules/array-bracket-spacing.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>array-bracket-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> <span>[</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span> <span>]</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>foo<span>[</span> <span>0</span> <span>]</span><span>)</span><span>;</span>\n\n<span>// good，逗号分隔符后还是要空格的。</span>\n<span>const</span> foo <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>foo<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-花括号里加空格-。eslint-object-curly-spacing\" tabindex=\"-1\"> <code>【强制】</code> 花括号里加空格 。eslint: <a href=\"http://eslint.org/docs/rules/object-curly-spacing.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>object-curly-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> <span>{</span><span>clark</span><span>:</span> <span>'kent'</span><span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> <span>{</span> <span>clark</span><span>:</span> <span>'kent'</span> <span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-避免一行代码超过100个字符-包含空格-。注意-对于-上面-长字符串不受此规则限制-不应换行。-eslint-max-len\" tabindex=\"-1\"> <code>【强制】</code> 避免一行代码超过100个字符（包含空格）。注意：对于 <a href=\"http://fe.dev.kdshc.com/docs.html#strings--line-length\" target=\"_blank\" rel=\"noopener noreferrer\">上面</a>，长字符串不受此规则限制，不应换行。 eslint: <a href=\"http://eslint.org/docs/rules/max-len.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>max-len</code></a></h4>\n<blockquote>\n<p>为什么？这样确保可读性和可维护性。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>const</span> foo <span>=</span> jsonData <span>&amp;&amp;</span> jsonData<span>.</span>foo <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar<span>.</span>baz <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar<span>.</span>baz<span>.</span>quux <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar<span>.</span>baz<span>.</span>quux<span>.</span>xyzzy<span>;</span>\n\n<span>// bad</span>\n$<span>.</span><span>ajax</span><span>(</span><span>{</span> <span>method</span><span>:</span> <span>'POST'</span><span>,</span> <span>url</span><span>:</span> <span>'https://airbnb.com/'</span><span>,</span> <span>data</span><span>:</span> <span>{</span> <span>name</span><span>:</span> <span>'John'</span> <span>}</span> <span>}</span><span>)</span><span>.</span><span>done</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'Congratulations!'</span><span>)</span><span>)</span><span>.</span><span>fail</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'You have failed this city.'</span><span>)</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> foo <span>=</span> jsonData\n  <span>&amp;&amp;</span> jsonData<span>.</span>foo\n  <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar\n  <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar<span>.</span>baz\n  <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar<span>.</span>baz<span>.</span>quux\n  <span>&amp;&amp;</span> jsonData<span>.</span>foo<span>.</span>bar<span>.</span>baz<span>.</span>quux<span>.</span>xyzzy<span>;</span>\n\n<span>// good</span>\n$<span>.</span><span>ajax</span><span>(</span><span>{</span>\n  <span>method</span><span>:</span> <span>'POST'</span><span>,</span>\n  <span>url</span><span>:</span> <span>'https://airbnb.com/'</span><span>,</span>\n  <span>data</span><span>:</span> <span>{</span> <span>name</span><span>:</span> <span>'John'</span> <span>}</span><span>,</span>\n<span>}</span><span>)</span>\n  <span>.</span><span>done</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'Congratulations!'</span><span>)</span><span>)</span>\n  <span>.</span><span>fail</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'You have failed this city.'</span><span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-作为语句的花括号内也要加空格-——-后和-前都需要空格。-eslint-block-spacing\" tabindex=\"-1\"> <code>【强制】</code> 作为语句的花括号内也要加空格 —— <code>{</code> 后和 <code>}</code> 前都需要空格。 eslint: <a href=\"https://eslint.org/docs/rules/block-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>block-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>return</span> <span>true</span><span>;</span><span>}</span>\n<span>if</span> <span>(</span>foo<span>)</span> <span>{</span> bar <span>=</span> <span>0</span><span>;</span><span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>true</span><span>;</span> <span>}</span>\n<span>if</span> <span>(</span>foo<span>)</span> <span>{</span> bar <span>=</span> <span>0</span><span>;</span> <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-前不要空格-后需要空格。-eslint-comma-spacing\" tabindex=\"-1\"> <code>【强制】</code> <code>,</code> 前不要空格， <code>,</code> 后需要空格。 eslint: <a href=\"https://eslint.org/docs/rules/comma-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>comma-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>var</span> foo <span>=</span> <span>1</span><span>,</span>bar <span>=</span> <span>2</span><span>;</span>\n<span>var</span> arr <span>=</span> <span>[</span><span>1</span> <span>,</span> <span>2</span><span>]</span><span>;</span>\n\n<span>// good</span>\n<span>var</span> foo <span>=</span> <span>1</span><span>,</span> bar <span>=</span> <span>2</span><span>;</span>\n<span>var</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-计算属性内要空格。参考上述花括号和中括号的规则。-eslint-computed-property-spacing\" tabindex=\"-1\"> <code>【强制】</code> 计算属性内要空格。参考上述花括号和中括号的规则。 eslint: <a href=\"https://eslint.org/docs/rules/computed-property-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>computed-property-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\nobj<span>[</span>foo <span>]</span>\nobj<span>[</span> <span>'foo'</span><span>]</span>\n<span>var</span> x <span>=</span> <span>{</span><span>[</span> b <span>]</span><span>:</span> a<span>}</span>\nobj<span>[</span>foo<span>[</span> bar <span>]</span><span>]</span>\n\n<span>// good</span>\nobj<span>[</span>foo<span>]</span>\nobj<span>[</span><span>'foo'</span><span>]</span>\n<span>var</span> x <span>=</span> <span>{</span> <span>[</span>b<span>]</span><span>:</span> a <span>}</span>\nobj<span>[</span>foo<span>[</span>bar<span>]</span><span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-调用函数时-函数名和小括号之间不要空格。-eslint-func-call-spacing\" tabindex=\"-1\"> <code>【强制】</code> 调用函数时，函数名和小括号之间不要空格。 eslint: <a href=\"https://eslint.org/docs/rules/func-call-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>func-call-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>func</span> <span>(</span><span>)</span><span>;</span>\n\n<span>func</span>\n<span>(</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>func</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】在对象的字面量属性中-key-和-value-之间要有空格。-eslint-key-spacing\" tabindex=\"-1\"> <code>【推荐】</code>在对象的字面量属性中， <code>key</code> 和 <code>value</code> 之间要有空格。 eslint: <a href=\"https://eslint.org/docs/rules/key-spacing\" target=\"_blank\" rel=\"noopener noreferrer\"><code>key-spacing</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>var</span> obj <span>=</span> <span>{</span> <span>\"foo\"</span> <span>:</span> <span>42</span> <span>}</span><span>;</span>\n<span>var</span> obj2 <span>=</span> <span>{</span> <span>\"foo\"</span><span>:</span><span>42</span> <span>}</span><span>;</span>\n\n<span>// good</span>\n<span>var</span> obj <span>=</span> <span>{</span> <span>\"foo\"</span><span>:</span> <span>42</span> <span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-行末不要空格。-eslint-no-trailing-spaces\" tabindex=\"-1\"> <code>【强制】</code> 行末不要空格。 eslint: <a href=\"https://eslint.org/docs/rules/no-trailing-spaces\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-trailing-spaces</code></a></h4>\n<h4 id=\"【强制】-避免出现多个空行。-在文件末尾只允许空一行。避免在文件开始处出现空行。eslint-no-multiple-empty-lines\" tabindex=\"-1\"> <code>【强制】</code> 避免出现多个空行。 在文件末尾只允许空一行。避免在文件开始处出现空行。eslint: <a href=\"https://eslint.org/docs/rules/no-multiple-empty-lines\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-multiple-empty-lines</code></a></h4>\n<div><pre><code><span>// bad - multiple empty lines</span>\n<span>var</span> x <span>=</span> <span>1</span><span>;</span>\n\n\n<span>var</span> y <span>=</span> <span>2</span><span>;</span>\n\n<span>// bad - 2+ newlines at end of file</span>\n<span>var</span> x <span>=</span> <span>1</span><span>;</span>\n<span>var</span> y <span>=</span> <span>2</span><span>;</span>\n\n\n<span>// bad - 1+ newline(s) at beginning of file</span>\n\n<span>var</span> x <span>=</span> <span>1</span><span>;</span>\n<span>var</span> y <span>=</span> <span>2</span><span>;</span>\n\n<span>// good</span>\n<span>var</span> x <span>=</span> <span>1</span><span>;</span>\n<span>var</span> y <span>=</span> <span>2</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"逗号\" tabindex=\"-1\"> 逗号</h3>\n<h4 id=\"【强制】-不要前置逗号。eslint-comma-style\" tabindex=\"-1\"> <code>【强制】</code> 不要前置逗号。eslint: <a href=\"http://eslint.org/docs/rules/comma-style.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>comma-style</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> story <span>=</span> <span>[</span>\n    once\n  <span>,</span> upon\n  <span>,</span> aTime\n<span>]</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> story <span>=</span> <span>[</span>\n  once<span>,</span>\n  upon<span>,</span>\n  aTime<span>,</span>\n<span>]</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> hero <span>=</span> <span>{</span>\n    <span>firstName</span><span>:</span> <span>'Ada'</span>\n  <span>,</span> <span>lastName</span><span>:</span> <span>'Lovelace'</span>\n  <span>,</span> <span>birthYear</span><span>:</span> <span>1815</span>\n  <span>,</span> <span>superPower</span><span>:</span> <span>'computers'</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> hero <span>=</span> <span>{</span>\n  <span>firstName</span><span>:</span> <span>'Ada'</span><span>,</span>\n  <span>lastName</span><span>:</span> <span>'Lovelace'</span><span>,</span>\n  <span>birthYear</span><span>:</span> <span>1815</span><span>,</span>\n  <span>superPower</span><span>:</span> <span>'computers'</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-额外结尾逗号-要-eslint-comma-dangle\" tabindex=\"-1\"> <code>【强制】</code> 额外结尾逗号: <strong>要</strong> eslint: <a href=\"http://eslint.org/docs/rules/comma-dangle.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>comma-dangle</code></a></h4>\n<blockquote>\n<p>为什么？这使 git diffs 更简洁。此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的 <a href=\"https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas\" target=\"_blank\" rel=\"noopener noreferrer\">结尾逗号问题 </a>。</p>\n</blockquote>\n<div><pre><code>// bad - 没有结尾逗号的 git diff\nconst hero = {\n     firstName: 'Florence',\n-    lastName: 'Nightingale'\n+    lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing']\n};\n\n// good - 有结尾逗号的 git diff\nconst hero = {\n     firstName: 'Florence',\n     lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing'],\n};\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>// bad</span>\n<span>const</span> hero <span>=</span> <span>{</span>\n  <span>firstName</span><span>:</span> <span>'Dana'</span><span>,</span>\n  <span>lastName</span><span>:</span> <span>'Scully'</span>\n<span>}</span><span>;</span>\n\n<span>const</span> heroes <span>=</span> <span>[</span>\n  <span>'Batman'</span><span>,</span>\n  <span>'Superman'</span>\n<span>]</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> hero <span>=</span> <span>{</span>\n  <span>firstName</span><span>:</span> <span>'Dana'</span><span>,</span>\n  <span>lastName</span><span>:</span> <span>'Scully'</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>const</span> heroes <span>=</span> <span>[</span>\n  <span>'Batman'</span><span>,</span>\n  <span>'Superman'</span><span>,</span>\n<span>]</span><span>;</span>\n\n<span>// bad</span>\n<span>function</span> <span>createHero</span><span>(</span>\n  <span>firstName<span>,</span>\n  lastName<span>,</span>\n  inventorOf</span>\n<span>)</span> <span>{</span>\n  <span>// does nothing</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>createHero</span><span>(</span>\n  <span>firstName<span>,</span>\n  lastName<span>,</span>\n  inventorOf<span>,</span></span>\n<span>)</span> <span>{</span>\n  <span>// does nothing</span>\n<span>}</span>\n\n<span>// good (注意，逗号不应出现在使用了 ... 操作符后的参数后面)</span>\n<span>function</span> <span>createHero</span><span>(</span>\n  <span>firstName<span>,</span>\n  lastName<span>,</span>\n  inventorOf<span>,</span>\n  <span>...</span>heroArgs</span>\n<span>)</span> <span>{</span>\n  <span>// does nothing</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>createHero</span><span>(</span>\n  firstName<span>,</span>\n  lastName<span>,</span>\n  inventorOf\n<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>createHero</span><span>(</span>\n  firstName<span>,</span>\n  lastName<span>,</span>\n  inventorOf<span>,</span>\n<span>)</span><span>;</span>\n\n<span>// good  (注意，逗号不应出现在使用了 ... 操作符后的参数后面)</span>\n<span>createHero</span><span>(</span>\n  firstName<span>,</span>\n  lastName<span>,</span>\n  inventorOf<span>,</span>\n  <span>...</span>heroArgs\n<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"类型转换与强制转换\" tabindex=\"-1\"> 类型转换与强制转换</h3>\n<h4 id=\"【强制】-在语句开始执行强制类型转换。\" tabindex=\"-1\"> <code>【强制】</code> 在语句开始执行强制类型转换。</h4>\n<h4 id=\"【强制】-字符串-eslint-no-new-wrappers\" tabindex=\"-1\"> <code>【强制】</code> 字符串: eslint: <a href=\"https://eslint.org/docs/rules/no-new-wrappers\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-new-wrappers</code></a></h4>\n<div><pre><code><span>// => this.reviewScore = 9;</span>\n\n<span>// bad</span>\n<span>const</span> totalScore <span>=</span> <span>new</span> <span>String</span><span>(</span><span>this</span><span>.</span>reviewScore<span>)</span><span>;</span> <span>// typeof totalScore is \"object\" not \"string\"</span>\n\n<span>// bad</span>\n<span>const</span> totalScore <span>=</span> <span>this</span><span>.</span>reviewScore <span>+</span> <span>''</span><span>;</span> <span>// 将会执行 this.reviewScore.valueOf()</span>\n\n<span>// bad</span>\n<span>const</span> totalScore <span>=</span> <span>this</span><span>.</span>reviewScore<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// 不保证返回 string</span>\n\n<span>// good</span>\n<span>const</span> totalScore <span>=</span> <span>String</span><span>(</span><span>this</span><span>.</span>reviewScore<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-数字-用-number-做类型转换-parseint-转换-string-应总是带上基数。-eslint-radix\" tabindex=\"-1\"> <code>【强制】</code> 数字: 用 <code>Number</code> 做类型转换，<code>parseInt</code> 转换 <code>string</code> 应总是带上基数。 eslint: <a href=\"http://eslint.org/docs/rules/radix\" target=\"_blank\" rel=\"noopener noreferrer\"><code>radix</code></a></h4>\n<blockquote>\n<p>为什么？函数 <code>parseInt</code> 会根据指定的基数将字符串转换为数字。字符串开头的空白字符将会被忽略，如果参数基数（第二个参数）为 <code>undefined</code> 或者 <code>0</code> ，除非字符串开头为 <code>0x</code> 或 <code>0X</code>（十六进制），会默认假设为 <code>10</code>。这个差异来自 ECMAScript 3，它不鼓励（但是允许）解释八进制。在 2013 年之前，一些实现不兼容这种行为。因为我们需要支持旧浏览器，所以应当始终指定进制。</p>\n</blockquote>\n<div><pre><code><span>const</span> inputValue <span>=</span> <span>'4'</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> val <span>=</span> <span>new</span> <span>Number</span><span>(</span>inputValue<span>)</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> val <span>=</span> <span>+</span>inputValue<span>;</span>\n\n<span>// bad</span>\n<span>const</span> val <span>=</span> inputValue <span>>></span> <span>0</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> val <span>=</span> <span>parseInt</span><span>(</span>inputValue<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> val <span>=</span> <span>Number</span><span>(</span>inputValue<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> val <span>=</span> <span>parseInt</span><span>(</span>inputValue<span>,</span> <span>10</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事-比如由于-parseint-是你的性能瓶颈导致你一定要用移位运算。说明这个是因为-性能原因-。\" tabindex=\"-1\"> <code>【强制】</code> 请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事，比如由于 <code>parseInt</code> 是你的性能瓶颈导致你一定要用移位运算。说明这个是因为 <a href=\"https://jsperf.com/coercion-vs-casting/3\" target=\"_blank\" rel=\"noopener noreferrer\">性能原因 </a>。</h4>\n<div><pre><code><span>// good</span>\n<span>/**\n * parseInt 是代码运行慢的原因\n * 用 Bitshifting 将字符串转成数字使代码运行效率大幅提升\n */</span>\n<span>const</span> val <span>=</span> inputValue <span>>></span> <span>0</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-注意-用移位运算要小心。数字是用-64-位-表示的-但移位运算常常返回的是32为整形source-。移位运算对大于-32-位的整数会导致意外行为。discussion-最大的-32-位整数是-2-147-483-647\" tabindex=\"-1\"> <code>【强制】</code> <strong>注意:</strong> 用移位运算要小心。数字是用 <a href=\"https://es5.github.io/#x4.3.19\" target=\"_blank\" rel=\"noopener noreferrer\">64-位 </a>表示的，但移位运算常常返回的是32为整形<a href=\"https://es5.github.io/#x11.7\" target=\"_blank\" rel=\"noopener noreferrer\">source </a>)。移位运算对大于 32 位的整数会导致意外行为。<a href=\"https://github.com/airbnb/javascript/issues/109\" target=\"_blank\" rel=\"noopener noreferrer\">Discussion </a>. 最大的 32 位整数是 2,147,483,647:</h4>\n<div><pre><code><span>2147483647</span> <span>>></span> <span>0</span> <span>//=> 2147483647</span>\n<span>2147483648</span> <span>>></span> <span>0</span> <span>//=> -2147483648</span>\n<span>2147483649</span> <span>>></span> <span>0</span> <span>//=> -2147483647</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h4 id=\"【强制】-布尔-eslint-no-new-wrappers\" tabindex=\"-1\"> <code>【强制】</code> 布尔: eslint: <a href=\"https://eslint.org/docs/rules/no-new-wrappers\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-new-wrappers</code></a></h4>\n<div><pre><code><span>const</span> age <span>=</span> <span>0</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> hasAge <span>=</span> <span>new</span> <span>Boolean</span><span>(</span>age<span>)</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> hasAge <span>=</span> <span>Boolean</span><span>(</span>age<span>)</span><span>;</span>\n\n<span>// best</span>\n<span>const</span> hasAge <span>=</span> <span>!</span><span>!</span>age<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"命名规范\" tabindex=\"-1\"> 命名规范</h3>\n<h4 id=\"【强制】-避免用一个字母命名-让你的命名有意义。eslint-id-length\" tabindex=\"-1\"> <code>【强制】</code> 避免用一个字母命名，让你的命名有意义。eslint: <a href=\"http://eslint.org/docs/rules/id-length\" target=\"_blank\" rel=\"noopener noreferrer\"><code>id-length</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>q</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>query</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用小驼峰命名法来命名你的对象、函数、实例。eslint-camelcase\" tabindex=\"-1\"> <code>【强制】</code> 用小驼峰命名法来命名你的对象、函数、实例。eslint: <a href=\"http://eslint.org/docs/rules/camelcase.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>camelcase</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>const</span> OBJEcttsssss <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>const</span> this_is_my_object <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>function</span> <span>c</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n<span>// good</span>\n<span>const</span> thisIsMyObject <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>function</span> <span>thisIsMyFunction</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用大驼峰命名法来命名类。eslint-new-cap\" tabindex=\"-1\"> <code>【强制】</code> 用大驼峰命名法来命名类。eslint: <a href=\"http://eslint.org/docs/rules/new-cap.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>new-cap</code></a></h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>user</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  <span>this</span><span>.</span>name <span>=</span> options<span>.</span>name<span>;</span>\n<span>}</span>\n\n<span>const</span> bad <span>=</span> <span>new</span> <span>user</span><span>(</span><span>{</span>\n  <span>name</span><span>:</span> <span>'nope'</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// good</span>\n<span>class</span> <span>User</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> options<span>.</span>name<span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>const</span> good <span>=</span> <span>new</span> <span>User</span><span>(</span><span>{</span>\n  <span>name</span><span>:</span> <span>'yup'</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】不要用前置或后置下划线。eslint-no-underscore-dangle\" tabindex=\"-1\"> <code>【推荐】</code>不要用前置或后置下划线。eslint: <a href=\"http://eslint.org/docs/rules/no-underscore-dangle.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-underscore-dangle</code></a></h4>\n<blockquote>\n<p>为什么？JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着私有，事实上，这些属性是完全公有的，因此这部分也是你的 API 的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。如果你想要什么东西变成私有，那就不要让它在这里出现。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>this</span><span>.</span>__firstName__ <span>=</span> <span>'Panda'</span><span>;</span>\n<span>this</span><span>.</span>firstName_ <span>=</span> <span>'Panda'</span><span>;</span>\n<span>this</span><span>.</span>_firstName <span>=</span> <span>'Panda'</span><span>;</span>\n\n<span>// good</span>\n<span>this</span><span>.</span>firstName <span>=</span> <span>'Panda'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-不要保存引用-this-用箭头函数或-函数绑定——function-bind。\" tabindex=\"-1\"> <code>【强制】</code> 不要保存引用 <code>this</code>，用箭头函数或 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener noreferrer\">函数绑定——Function#bind</a>。</h4>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>const</span> self <span>=</span> <span>this</span><span>;</span>\n  <span>return</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span>self<span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n\n<span>// bad</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>const</span> that <span>=</span> <span>this</span><span>;</span>\n  <span>return</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span>that<span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-export-default-导出模块a-则这个文件名也叫-a-import-时候的参数也叫-a。-大小写完全一致。\" tabindex=\"-1\"> <code>【强制】</code> <code>export default</code> 导出模块A，则这个文件名也叫 <code>A.*</code>， <code>import</code> 时候的参数也叫 <code>A</code>。 大小写完全一致。</h4>\n<div><pre><code><span>// file 1 contents</span>\n<span>class</span> <span>CheckBox</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n<span>export</span> <span>default</span> CheckBox<span>;</span>\n\n<span>// file 2 contents</span>\n<span>export</span> <span>default</span> <span>function</span> <span>fortyTwo</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>42</span><span>;</span> <span>}</span>\n\n<span>// file 3 contents</span>\n<span>export</span> <span>default</span> <span>function</span> <span>insideDirectory</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n<span>// in some other file</span>\n<span>// bad</span>\n<span>import</span> CheckBox <span>from</span> <span>'./checkBox'</span><span>;</span> <span>// PascalCase import/export, camelCase filename</span>\n<span>import</span> FortyTwo <span>from</span> <span>'./FortyTwo'</span><span>;</span> <span>// PascalCase import/filename, camelCase export</span>\n<span>import</span> InsideDirectory <span>from</span> <span>'./InsideDirectory'</span><span>;</span> <span>// PascalCase import/filename, camelCase export</span>\n\n<span>// bad</span>\n<span>import</span> CheckBox <span>from</span> <span>'./check_box'</span><span>;</span> <span>// PascalCase import/export, snake_case filename</span>\n<span>import</span> forty_two <span>from</span> <span>'./forty_two'</span><span>;</span> <span>// snake_case import/filename, camelCase export</span>\n<span>import</span> inside_directory <span>from</span> <span>'./inside_directory'</span><span>;</span> <span>// snake_case import, camelCase export</span>\n<span>import</span> index <span>from</span> <span>'./inside_directory/index'</span><span>;</span> <span>// requiring the index file explicitly</span>\n<span>import</span> insideDirectory <span>from</span> <span>'./insideDirectory/index'</span><span>;</span> <span>// requiring the index file explicitly</span>\n\n<span>// good</span>\n<span>import</span> CheckBox <span>from</span> <span>'./CheckBox'</span><span>;</span> <span>// PascalCase export/import/filename</span>\n<span>import</span> fortyTwo <span>from</span> <span>'./fortyTwo'</span><span>;</span> <span>// camelCase export/import/filename</span>\n<span>import</span> insideDirectory <span>from</span> <span>'./insideDirectory'</span><span>;</span> <span>// camelCase export/import/directory name/implicit \"index\"</span>\n<span>// ^ supports both insideDirectory.js and insideDirectory/index.js</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-当你-export-default-一个函数时-函数名用小驼峰-文件名需要和函数名一致。\" tabindex=\"-1\"> <code>【强制】</code>  当你 export-default 一个函数时，函数名用小驼峰，文件名需要和函数名一致。</h4>\n<div><pre><code><span>function</span> <span>makeStyleGuide</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> makeStyleGuide<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】当你-export-一个结构体-类-单例-函数库-对象-时用大驼峰。\" tabindex=\"-1\"> <code>【推荐】</code>当你 export 一个结构体/类/单例/函数库/对象 时用大驼峰。</h4>\n<div><pre><code><span>const</span> AirbnbStyleGuide <span>=</span> <span>{</span>\n  <span>es6</span><span>:</span> <span>{</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> AirbnbStyleGuide<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-简称和缩写应该全部大写或全部小写。\" tabindex=\"-1\"> <code>【强制】</code> 简称和缩写应该全部大写或全部小写。</h4>\n<blockquote>\n<p>为什么？名字都是给人读的，不是为了去适应计算机算法。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>import</span> SmsContainer <span>from</span> <span>'./containers/SmsContainer'</span><span>;</span>\n\n<span>// bad</span>\n<span>const</span> HttpRequests <span>=</span> <span>[</span>\n  <span>// ...</span>\n<span>]</span><span>;</span>\n\n<span>// good</span>\n<span>import</span> SMSContainer <span>from</span> <span>'./containers/SMSContainer'</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> HTTPRequests <span>=</span> <span>[</span>\n  <span>// ...</span>\n<span>]</span><span>;</span>\n\n<span>// also good</span>\n<span>const</span> httpRequests <span>=</span> <span>[</span>\n  <span>// ...</span>\n<span>]</span><span>;</span>\n\n<span>// best</span>\n<span>import</span> TextMessageContainer <span>from</span> <span>'./containers/TextMessageContainer'</span><span>;</span>\n\n<span>// best</span>\n<span>const</span> requests <span>=</span> <span>[</span>\n  <span>// ...</span>\n<span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-你可以用全大写字母设置静态变量-他需要满足三个条件。\" tabindex=\"-1\"> <code>【强制】</code> 你可以用全大写字母设置静态变量，他需要满足三个条件。</h4>\n<ol>\n<li>导出变量；</li>\n<li>是 <code>const</code> 定义的， 保证不能被改变；</li>\n<li>这个变量是可信的，他的子属性都是不能被改变的。</li>\n</ol>\n<blockquote>\n<p>为什么？这是一个附加工具，帮助开发者去辨识一个变量是不是不可变的。UPPERCASE_VARIABLES 能让开发者知道他能确信这个变量（以及他的属性）是不会变的。</p>\n</blockquote>\n<ul>\n<li>\n<p>对于所有的 <code>const</code> 变量呢？ —— 这个是不必要的。大写变量不应该在同一个文件里定义并使用， 它只能用来作为导出变量。</p>\n</li>\n<li>\n<p>那导出的对象呢？ —— 大写变量处在 <code>export</code> 的最高级(例如：<code>EXPORTED_OBJECT.key</code>) 并且他包含的所有子属性都是不可变的。（译者注：即导出的变量是全大写的，但他的属性不用大写）</p>\n</li>\n</ul>\n<div><pre><code><span>// bad</span>\n<span>const</span> <span>PRIVATE_VARIABLE</span> <span>=</span> <span>'should not be unnecessarily uppercased within a file'</span><span>;</span>\n\n<span>// bad</span>\n<span>export</span> <span>const</span> <span>THING_TO_BE_CHANGED</span> <span>=</span> <span>'should obviously not be uppercased'</span><span>;</span>\n\n<span>// bad</span>\n<span>export</span> <span>let</span> <span>REASSIGNABLE_VARIABLE</span> <span>=</span> <span>'do not use let with uppercase variables'</span><span>;</span>\n\n\n<span>// ---</span>\n\n<span>// 允许但不够语义化</span>\n<span>export</span> <span>const</span> apiKey <span>=</span> <span>'SOMEKEY'</span><span>;</span>\n\n<span>// 在大多数情况下更好</span>\n<span>export</span> <span>const</span> <span>API_KEY</span> <span>=</span> <span>'SOMEKEY'</span><span>;</span>\n\n<span>// ---</span>\n\n<span>// bad - 不必要的大写键，没有增加任何语义</span>\n<span>export</span> <span>const</span> <span>MAPPING</span> <span>=</span> <span>{</span>\n  <span>KEY</span><span>:</span> <span>'value'</span>\n<span>}</span><span>;</span>\n\n<span>// good</span>\n<span>export</span> <span>const</span> <span>MAPPING</span> <span>=</span> <span>{</span>\n  <span>key</span><span>:</span> <span>'value'</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"get-set-访问器\" tabindex=\"-1\"> Get-Set 访问器</h3>\n<h4 id=\"【强制】-不需要使用属性的访问器函数。\" tabindex=\"-1\"> <code>【强制】</code> 不需要使用属性的访问器函数。</h4>\n<h4 id=\"【强制】-不要使用-javascript-的-getters-setters-因为他们会产生副作用-并且难以测试、维护和理解。相反的-你可以用-getval-和-setval-hello-去创造你自己的访问器函数。\" tabindex=\"-1\"> <code>【强制】</code> 不要使用 JavaScript 的 getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 <code>getVal()</code> 和 <code>setVal('hello')</code> 去创造你自己的访问器函数。</h4>\n<div><pre><code><span>// bad</span>\n<span>class</span> <span>Dragon</span> <span>{</span>\n  <span>get</span> <span>age</span><span>(</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n\n  <span>set</span> <span>age</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// good</span>\n<span>class</span> <span>Dragon</span> <span>{</span>\n  <span>getAge</span><span>(</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n\n  <span>setAge</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】如果属性-方法是-boolean-用-isval-或-hasval-。\" tabindex=\"-1\"> <code>【推荐】</code>如果属性/方法是 <code>boolean</code>， 用 <code>isVal()</code> 或 <code>hasVal()</code>。</h4>\n<div><pre><code><span>// bad</span>\n<span>if</span> <span>(</span><span>!</span>dragon<span>.</span><span>age</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  <span>return</span> <span>false</span><span>;</span>\n<span>}</span>\n\n<span>// good</span>\n<span>if</span> <span>(</span><span>!</span>dragon<span>.</span><span>hasAge</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  <span>return</span> <span>false</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【推荐】用-get-和-set-函数是可以的-但是要一起用。\" tabindex=\"-1\"> <code>【推荐】</code>用 <code>get()</code> 和 <code>set()</code> 函数是可以的，但是要一起用。</h4>\n<div><pre><code><span>class</span> <span>Jedi</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options <span>=</span> <span>{</span><span>}</span></span><span>)</span> <span>{</span>\n    <span>const</span> lightsaber <span>=</span> options<span>.</span>lightsaber <span>||</span> <span>'blue'</span><span>;</span>\n    <span>this</span><span>.</span><span>set</span><span>(</span><span>'lightsaber'</span><span>,</span> lightsaber<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>set</span><span>(</span>key<span>,</span> val<span>)</span> <span>{</span>\n    <span>this</span><span>[</span>key<span>]</span> <span>=</span> val<span>;</span>\n  <span>}</span>\n\n  <span>get</span><span>(</span>key<span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>[</span>key<span>]</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"事件\" tabindex=\"-1\"> 事件</h3>\n<h4 id=\"【强制】-当传递数据载荷给事件时-不论是-dom-还是像-backbone-这样有很多属性的事件-。这使得后续的贡献者-程序员-向这个事件添加更多的数据时不用去找或者更新每个处理器。例如\" tabindex=\"-1\"> <code>【强制】</code> 当传递数据载荷给事件时（不论是 DOM 还是像 Backbone 这样有很多属性的事件）。这使得后续的贡献者（程序员）向这个事件添加更多的数据时不用去找或者更新每个处理器。例如：</h4>\n<div><pre><code><span>// bad</span>\n<span>$</span><span>(</span><span>this</span><span>)</span><span>.</span><span>trigger</span><span>(</span><span>'listingUpdated'</span><span>,</span> listing<span>.</span>id<span>)</span><span>;</span>\n\n<span>// ...</span>\n\n<span>$</span><span>(</span><span>this</span><span>)</span><span>.</span><span>on</span><span>(</span><span>'listingUpdated'</span><span>,</span> <span>(</span><span>e<span>,</span> listingID</span><span>)</span> <span>=></span> <span>{</span>\n  <span>// do something with listingID</span>\n<span>}</span><span>)</span><span>;</span>\n\n\n<span>// good</span>\n<span>$</span><span>(</span><span>this</span><span>)</span><span>.</span><span>trigger</span><span>(</span><span>'listingUpdated'</span><span>,</span> <span>{</span> <span>listingID</span><span>:</span> listing<span>.</span>id <span>}</span><span>)</span><span>;</span>\n\n<span>// ...</span>\n\n<span>$</span><span>(</span><span>this</span><span>)</span><span>.</span><span>on</span><span>(</span><span>'listingUpdated'</span><span>,</span> <span>(</span><span>e<span>,</span> data</span><span>)</span> <span>=></span> <span>{</span>\n  <span>// do something with data.listingID</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"标准库\" tabindex=\"-1\"> 标准库</h3>\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\" rel=\"noopener noreferrer\">标准库</a>中包含一些功能受损但是由于历史原因遗留的工具类</p>\n<h4 id=\"【强制】-用-number-isnan-代替全局的-isnan。-eslint-no-restricted-globals\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>Number.isNaN</code> 代替全局的 <code>isNaN</code>。 eslint: <a href=\"https://eslint.org/docs/rules/no-restricted-globals\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-restricted-globals</code></a></h4>\n<blockquote>\n<p>为什么？全局 <code>isNaN</code> 强制把非数字转成数字， 然后对于任何强转后为 <code>NaN</code> 的变量都返回 <code>true</code> 如果你想用这个功能，就显式的用它。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>isNaN</span><span>(</span><span>'1.2'</span><span>)</span><span>;</span> <span>// false</span>\n<span>isNaN</span><span>(</span><span>'1.2.3'</span><span>)</span><span>;</span> <span>// true</span>\n\n<span>// good</span>\nNumber<span>.</span><span>isNaN</span><span>(</span><span>'1.2.3'</span><span>)</span><span>;</span> <span>// false</span>\nNumber<span>.</span><span>isNaN</span><span>(</span><span>Number</span><span>(</span><span>'1.2.3'</span><span>)</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-用-number-isfinite-代替-isfinite-eslint-no-restricted-globals\" tabindex=\"-1\"> <code>【强制】</code> 用 <code>Number.isFinite</code> 代替 <code>isFinite</code>. eslint: <a href=\"https://eslint.org/docs/rules/no-restricted-globals\" target=\"_blank\" rel=\"noopener noreferrer\"><code>no-restricted-globals</code></a></h4>\n<blockquote>\n<p>Why? 理由同上，会把一个非数字变量强转成数字，然后做判断。</p>\n</blockquote>\n<div><pre><code><span>// bad</span>\n<span>isFinite</span><span>(</span><span>'2e3'</span><span>)</span><span>;</span> <span>// true</span>\n\n<span>// good</span>\nNumber<span>.</span><span>isFinite</span><span>(</span><span>'2e3'</span><span>)</span><span>;</span> <span>// false</span>\nNumber<span>.</span><span>isFinite</span><span>(</span><span>parseInt</span><span>(</span><span>'2e3'</span><span>,</span> <span>10</span><span>)</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"css规范指南\" tabindex=\"-1\"> CSS规范指南</h2>\n<p><em>BEM的意思就是块（block）、元素（element）、修饰符（modifier）,是由Yandex团队提出的一种前端命名方法论。这种巧妙的命名方法让你的CSS类对其他开发者来说更加透明而且更有意义。BEM命名约定更加严格，而且包含更多的信息，它们用于一个团队开发一个耗时的大项目</em></p>\n<h3 id=\"命名约定的模式\" tabindex=\"-1\"> 命名约定的模式</h3>\n<h4 id=\"【强制】-命名约定的模式如下\" tabindex=\"-1\"> <code>【强制】</code> 命名约定的模式如下</h4>\n<div><pre><code>  <span>.block</span> <span>{</span>\n     <span>/*styles*/</span> \n  <span>}</span> \n  \n  <span>.block__element</span> <span>{</span> \n    <span>/* styles */</span> \n  \n  <span>}</span>\n\n  <span>.block--modifier</span> <span>{</span>\n     <span>/* styles */</span> \n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"块-1\" tabindex=\"-1\"> 块</h3>\n<h4 id=\"【强制】-一个块就是一个组件-如\" tabindex=\"-1\"> <code>【强制】</code> 一个块就是一个组件，如：</h4>\n<div><pre><code>  <span><span><span>&lt;</span>form</span> <span>class</span><span><span>=</span><span>\"</span>form<span>\"</span></span><span>></span></span>\n      <span>&lt;!-- innerhtml --></span>\n  <span><span><span>&lt;/</span>form</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>对应的css</p>\n<div><pre><code>  <span>.form</span> <span>{</span>\n    <span>display</span><span>:</span>block<span>;</span>\n  <span>}</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"修饰符\" tabindex=\"-1\"> 修饰符</h3>\n<h4 id=\"【强制】-修饰符是改变某个块的外观的标志。要使用修饰符-可以将-modifier-添加到块中。从上面的form示例继续命名\" tabindex=\"-1\"> <code>【强制】</code> 修饰符是改变某个块的外观的标志。要使用修饰符，可以将 --modifier 添加到块中。从上面的form示例继续命名</h4>\n<div><pre><code>  <span><span><span>&lt;</span>form</span>  <span>class</span><span><span>=</span><span>\"</span>form form--red<span>\"</span></span><span>></span></span>\n      <span>&lt;!-- innerhtml --></span>\n  <span><span><span>&lt;/</span>form</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>对应的css</p>\n<div><pre><code>  <span>.form</span> <span>{</span>\n    <span>display</span><span>:</span>block<span>;</span>\n  <span>}</span> \n\n  <span>.form--red</span><span>{</span>\n    <span>color</span><span>:</span>red<span>;</span>\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"元素\" tabindex=\"-1\"> 元素</h3>\n<h4 id=\"【强制】-元素是块的子节点。为了表明某个东西是一个元素-你需要在块名后添加-element。所以-如果你看到一个像那样的名字-比如-form-row-你将立即知道-form-块中有一个-row-元素。\" tabindex=\"-1\"> <code>【强制】</code> 元素是块的子节点。为了表明某个东西是一个元素，你需要在块名后添加 __element。所以，如果你看到一个像那样的名字，比如 form__row ，你将立即知道 .form 块中有一个 row 元素。</h4>\n<blockquote>\n<p>BEM 元素有两个优点：</p>\n<ol>\n<li>你可以让 CSS 的优先级保持相对扁平</li>\n<li>你能立即知道哪些东西是一个子元素。</li>\n</ol>\n</blockquote>\n<div><pre><code>  <span><span><span>&lt;</span>form</span>  <span>class</span><span><span>=</span><span>\"</span>form form--red<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>form__row<span>\"</span></span><span>></span></span>form__row<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>form</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>对应的css</p>\n<div><pre><code>  <span>.form</span> <span>{</span>\n    <span>display</span><span>:</span>block<span>;</span>\n  <span>}</span> \n\n  <span>.form--red</span><span>{</span>\n    <span>color</span><span>:</span>red<span>;</span>\n  <span>}</span>\n\n  <span>.form__row</span><span>{</span>\n    <span>width</span><span>:</span>100%\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"【强制】-永远不应该链式命名-bem-元素。通过以下两种方式绕过长长的-bem-链式命名\" tabindex=\"-1\"> <code>【强制】</code> 永远不应该链式命名 BEM 元素。通过以下两种方式绕过长长的 BEM 链式命名：</h4>\n<div>\n<p>警告</p>\n<ol>\n<li>\n<p>只把子子元素链接到有意义的</p>\n</li>\n<li>\n<p>创建新的块来保存元素</p>\n</li>\n</ol>\n</div>\n<div><pre><code>  <span>&lt;!-- bad --></span>\n  <span><span><span>&lt;</span>form</span>  <span>class</span><span><span>=</span><span>\"</span>form<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>form__row<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>form__row__input<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>form</span><span>></span></span>\n\n  <span>&lt;!-- good 链接孙元素到块--></span>\n  <span><span><span>&lt;</span>form</span>  <span>class</span><span><span>=</span><span>\"</span>form<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>form__row<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>form__input<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>form</span><span>></span></span>\n\n  <span>&lt;!-- good 创建新的块来保存孙元素--></span>\n  <span><span><span>&lt;</span>form</span>  <span>class</span><span><span>=</span><span>\"</span>form<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>row<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>row__input<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>form</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>/*bad*/</span>\n<span>.form__row__input</span> <span>{</span>\n  <span>/* styles */</span> \n<span>}</span>\n\n <span>/*good__链接孙元素到块*/</span>\n<span>.form__row</span> <span>{</span>\n  <span>/* styles */</span> \n<span>}</span>\n\n<span>/*good__链接孙元素到块*/</span>\n<span>.form__input</span> <span>{</span> \n  <span>/* styles */</span> \n<span>}</span>\n\n<span>/*good__创建新的块来保存孙元素*/</span>\n<span>.row</span> <span>{</span>\n  <span>/* styles */</span> \n<span>}</span>\n\n<span>/*good__创建新的块来保存孙元素*/</span>\n<span>.row__input</span> <span>{</span>\n  <span>/* styles */</span> \n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-22T10:28:05.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "前端规范"
      ]
    },
    {
      "title": "RESTful API",
      "url": "https://jin-shaohui.gitee.io/Standard/RESTful/",
      "id": "https://jin-shaohui.gitee.io/Standard/RESTful/",
      "content_html": "<h2 id=\"如何解释什么是restful\" tabindex=\"-1\"> 如何解释什么是RESTful</h2>\n<p>一个悠闲的周日下午，Ta午觉醒来，又习惯性的抓起这个月的杂志，饶有兴趣地看了起来。</p>\n<p>果不其然，看着看着，Ta又对我发难了，“Restful是什么呀，是restaurant的形容词吗，突然就觉得好饿了啊......”</p>\n<p>作为一个合格的程序员，我一直把能够将一项技术讲给Ta听，并且能给Ta讲懂，作为我已经掌握了这项技术的标准。</p>\n<p>如果我直接回答说，<strong>REST就是Representational State Transfer的缩写呀，翻译为中文就是 表述性状态转移</strong>，那肯定不行。</p>\n<p>必须找个合适的机会，把Restful的来龙去脉给Ta形象的描述一遍。</p>\n<p>“走，咱们去楼下咖啡厅吃个下午茶吧”，我对Ta说。</p>\n<p>“一个芝士蛋糕，一杯拿铁，两条吸管，谢谢”，我对前台的服务员说，然后我们找了个角落坐了下来。</p>\n<h2 id=\"level-0-面向前台\" tabindex=\"-1\"> Level 0 - 面向前台</h2>\n<p>“刚才我们向前台点了一杯拿铁，这个过程可以用这段文字来描述”，说着，我在纸上写下了这段JSON，虽然Ta不知道什么叫JSON，但理解这段文字对于英语专业8级的Ta，实在再简单不过。</p>\n<div><pre><code><span>{</span>\n  <span>\"addOrder\"</span><span>:</span> <span>{</span>\n    <span>\"orderName\"</span><span>:</span> <span>\"latte\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>“我们通过这段文字，告诉前台，新增一笔订单，订单是一杯拿铁咖啡”，接着，前台给我们返回这么一串回复：</p>\n<div><pre><code><span>{</span>\n  <span>\"orderId\"</span><span>:</span> <span>\"123456\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>“订单ID？还是订单编号？”</p>\n<p>“恩恩，就是订单编号”</p>\n<p>“那我们就等着前台喊订单123456的客户可以取餐了，然后就可以开吃了！”</p>\n<p>“哈哈，你真聪明，不过，在这之前，假设我们有一张会员卡，我们想查询一下这张会员卡的余额，这时候，要向前台发起另一个询问”，我继续在纸上写着：</p>\n<div><pre><code><span>{</span>\n  <span>\"queryBalance\"</span><span>:</span> <span>{</span>\n    <span>\"cardId\"</span><span>:</span> <span>\"886333\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>“查询卡号为886333的卡的余额？”</p>\n<p>“真棒！接着，查询的结果返回来了”</p>\n<div><pre><code><span>{</span>\n  <span>\"balance\"</span><span>:</span> <span>\"0\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>“切，没钱......”</p>\n<p>“哈哈，没钱，现在我们要跟前台说，这杯咖啡不要了”，我在纸上写到：</p>\n<div><pre><code><span>{</span>\n  <span>\"deleteOrder\"</span><span>:</span> <span>{</span>\n    <span>\"orderId\"</span><span>:</span> <span>\"123456\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>“哼，这就把订单取消啦？”</p>\n<h2 id=\"level-1-面向资源\" tabindex=\"-1\"> Level 1 - 面向资源</h2>\n<p>“现在这家咖啡店越做越大，来喝咖啡的人越来越多，单靠前台显然是不行的，店主决定进行分工，每个资源都有专人负责，我们可以直接面向资源操作。”</p>\n<p>&quot;面向资源？”</p>\n<p>“是的，比如还是下单，请求的内容不变，但是我们多了一条消息”，我在纸上画出这次的模型：</p>\n<div><pre><code>/orders\n{\n \"addOrder\": {\n   \"orderName\": \"latte\"\n }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>“多了一个斜杠和orders？这是什么意思？”</p>\n<p>“这个表示我们这个请求是发给哪个资源的，订单是一种资源，我们可以理解为是咖啡厅专门管理订单的人，他可以帮我们处理所有有关订单的操作，包括新增订单、修改订单、取消订单等操作”</p>\n<p>“Soga...”</p>\n<p>“接着还是会返回订单的编号给我们”</p>\n<div><pre><code><span>{</span>\n  <span>\"orderId\"</span><span>:</span> <span>\"123456\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>“下面，我们还是要查询会员卡余额，这次请求的资源变成了cards”</p>\n<div><pre><code>/cards\n{\n  \"queryBalance\": {\n    \"cardId\": \"886333\"\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>“接下来是取消订单”</p>\n<p>“这个我会”，说着，Ta抢走我手上的笔，在纸上写了起来：</p>\n<div><pre><code>/orders\n{\n  \"deleteOrder\": {\n    \"orderId\": \"123456\"\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"level-2-打上标签\" tabindex=\"-1\"> Level 2 - 打上标签</h2>\n<p>“接下来，店主还想继续优化他的咖啡厅的服务流程，他发现负责处理订单的员工，每次都要去订单内容里面看是新增订单还是删除订单，还是其他的什么操作，十分不方便，于是规定，所有新增资源的请求，都在请求上面写上大大的 <strong>POST</strong> ，表示这是一笔新增资源的请求”</p>\n<p>“其他种类的请求，比如查询类的，用 <strong>GET</strong> 表示，删除类的，用 <strong>DELETE</strong> 表示”</p>\n<p>“还有修改类的，修改分为两种，这个第一种，如果修改，无论发送多少次，最后一次修改后的资源，总是和第一次修改后的一样，比如将拿铁改为猫屎，那么用 <strong>PUT</strong> 表示；第二种，如果这个修改，每次修改都会让这个资源和前一次的不一样，比如是加一杯咖啡，那么这种请求用 <strong>PATCH</strong> 或者 <strong>POST</strong> 表示”，一口气讲了这么多，发现Ta有点似懂非懂。</p>\n<p>“来，我们再来重复上面那个过程，来一杯拿铁”，我边说边画着：</p>\n<div><pre><code>POST /orders\n{\n  \"orderName\": \"latte\"\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>&quot;请求的内容简洁多啦，不用告诉店员是addOrder，看到POST就知道是新增&quot;，Ta听的很认真，理解的也很透彻。</p>\n<p>&quot;恩恩，返回的内容还是一样&quot;</p>\n<div><pre><code><span>{</span>\n  <span>\"orderId\"</span><span>:</span> <span>\"123456\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>“接着是查询会员卡余额，这次也简化了很多”</p>\n<div><pre><code>GET /cards\n{\n  \"cardId\": \"886333\"\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>“这个请求我们还可以进一步优化为这样”</p>\n<div><pre><code>GET /cards/886333\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>“Soga，直接把要查询的卡号写在后面了”</p>\n<p>“没错，接着，取消订单”</p>\n<div><pre><code>DELETE /orders/123456\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"level-3-完美服务\" tabindex=\"-1\"> Level 3 - 完美服务</h2>\n<p>“忽然有一天，有个顾客抱怨说，他买了咖啡后，不知道要怎么取消订单，咖啡厅一个店员回了一句，你不会看我们的宣传单吗，上面不写着：</p>\n<div><pre><code>DELETE /orders/{orderId}\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>顾客反问道，谁会去看那个啊，店员不服，又说到，你瞎了啊你......据说后面两人吵着吵着还打了起来...”</p>\n<p>“噗，真是悲剧...”</p>\n<p>“有了这次教训，店长决定，顾客下了单之后，不仅给他们返回订单的编号，还给顾客返回所有可以对这个订单做的操作，比如告诉用户如何删除订单。现在，我们还是发出请求，请求内容和上一次一样”</p>\n<div><pre><code>POST /orders\n{\n  \"orderName\": \"latte\"\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>“但是这次返回时多了些内容”</p>\n<div><pre><code><span>{</span>\n  <span>\"orderId\"</span><span>:</span> <span>\"123456\"</span><span>,</span>\n  <span>\"link\"</span><span>:</span> <span>{</span>\n    <span>\"rel\"</span><span>:</span> <span>\"cancel\"</span><span>,</span>\n    <span>\"url\"</span><span>:</span> <span>\"/order/123456\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>“这次返回时多了一项link信息，里面包含了一个rel属性和url属性，rel是relationship的意思，这里的关系是cancel，url则告诉你如何执行这个cancel操作，接着你就可以这样子来取消订单啦”</p>\n<div><pre><code>DELETE /orders/123456\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>“哈哈，这服务真是贴心，以后再也不用担心店员和顾客打起来了”</p>\n<p>“订单123456的客户可以取餐了”，伴随着咖啡厅的广播，我们吃起了下午茶，一杯拿铁，两支吸管......</p>\n<h2 id=\"说明\" tabindex=\"-1\"> 说明</h2>\n<p>上面讲的Level0 ~ Level3，来自Leonard Richardson提出的Richardson Maturity Model：</p>\n<ul>\n<li>\n<p>Level0 和 Level1 最大的区别，就是 Level1 拥有了 RESTful 的第一个特征——面向资源，这对构建可伸缩、分布式的架构是至关重要的。同时，如果把 Level0 的数据格式换成XML，那么其实就是 SOAP ，SOAP 的特点是关注行为和处理，和面向资源的 RESTful 有很大的不同。</p>\n</li>\n<li>\n<p>Level0 和 Level1 ，其实都很挫，他们都只是把 HTTP 当做一个传输的通道，没有把 HTTP 当做一种传输协议。</p>\n</li>\n<li>\n<p>Level2，真正将 HTTP 作为了一种传输协议，最直观的一点就是 Level2 使用了HTTP动词，GET/PUT/POST/DELETE/PATCH....,这些都是 HTTP 的规范，规范的作用自然是重大的，用户看到一个 POST 请求，就知道它不是幂等的，使用时要小心，看到 PUT ，就知道他是幂等的，调用多几次都不会造成问题，当然，这些的前提都是 API 的设计者和开发者也遵循这一套规范，确保自己提供的 PUT 接口是幂等的。</p>\n</li>\n<li>\n<p>Level3，关于这一层，有一个古怪的名词，叫 HATEOAS（Hypertext As The Engine Of Application State），中文翻译为“将超媒体格式作为应用状态的引擎”，核心思想就是每个资源都有它的状态，不同状态下，可对它进行的操作不一样。理解了这一层，再来看看 REST 的全称，Representational State Transfer，中文翻译为“表述性状态转移”，是不是好理解多了？</p>\n</li>\n<li>\n<p>Level3 的 Restful API，给使用者带来了很大的便利，使用者只需要知道如何获取资源的入口，之后的每个URI都可以通过请求获得，无法获得就说明无法执行那个请求。</p>\n</li>\n<li>\n<p>现在绝大多数的 RESTful 接口都做到了 Level2 的层次，做到 Level3 的比较少。当然，这个模型并不是一种规范，只是用来理解 RESTful 的工具。所以，做到了 Level2 ，也就是面向资源和使用 HTTP 动词，就已经很 RESTful 了。RESTful 本身也不是一种规范，我比较倾向于用“风格&quot;来形容它。如果你想深入了解Level3，可以阅读《Rest in Practice》第五章。</p>\n</li>\n</ul>\n<blockquote>\n<p>我讲的时候，用的数据格式是JSON，但是要强调一点，RESTful 对数据格式没有限制，就算你用的是XML或者其他格式，只要符合上面提到的几个特征，也算RESTful。</p>\n</blockquote>\n<h2 id=\"规范\" tabindex=\"-1\"> 规范</h2>\n<p>RESTful 是目前最流行的 API 设计规范，用于 Web 数据接口的设计。</p>\n<p>它的大原则容易把握，但是细节不容易做对。本文总结 RESTful 的设计细节，介绍如何设计出易于理解和使用的 API。</p>\n<h3 id=\"url-设计\" tabindex=\"-1\"> URL 设计</h3>\n<h4 id=\"动词-宾语\" tabindex=\"-1\"> 动词 + 宾语</h4>\n<p>RESTful 的核心思想就是，客户端发出的数据操作指令都是&quot;动词 + 宾语&quot;的结构。比如: <strong>GET /articles</strong> 这个命令，GET是动词，/articles是宾语。</p>\n<p>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p>\n<div><pre><code>- GET：读取（Read）\n- POST：新建（Create）\n- PUT：更新（Update）\n- PATCH：更新（Update），通常是部分更新\n- DELETE：删除（Delete）\n- 根据 HTTP 规范，动词一律大写。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"动词的覆盖\" tabindex=\"-1\"> 动词的覆盖</h4>\n<p>有些客户端只能使用 GET 和 POST 这两种方法。服务器必须接受 POST 模拟其他三个方法（PUT、PATCH、DELETE）。</p>\n<p>这时，客户端发出的 HTTP 请求，要加上 <strong>X-HTTP-Method-Override</strong> 属性，告诉服务器应该使用哪一个动词，覆盖POST方法。</p>\n<div><pre><code><span><span>POST</span> <span>/api/Person/4</span> <span>HTTP/1.1</span></span>  \n<span><span>X-HTTP-Method-Override</span><span>:</span> <span>PUT</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>上面代码中，X-HTTP-Method-Override 指定本次请求的方法是PUT，而不是POST。</p>\n<h4 id=\"宾语必须是名词\" tabindex=\"-1\"> 宾语必须是名词</h4>\n<p>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如: <strong>/articles</strong> 这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</p>\n<div><pre><code>/getAllCars\n/createNewCar\n/deleteAllRedCars\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h4 id=\"复数-url\" tabindex=\"-1\"> 复数 URL</h4>\n<p>既然 URL 是名词，那么应该使用复数，还是单数？</p>\n<p>这没有统一的规定，但是常见的操作是读取一个集合，比如 <strong>GET /articles</strong>（读取所有文章），这里明显应该是复数。</p>\n<p>为了统一起见，建议都使用复数 URL，比如 <strong>GET /articles/2</strong> 要好于 <strong>GET /article/2</strong> 。</p>\n<h4 id=\"避免多级-url\" tabindex=\"-1\"> 避免多级 URL</h4>\n<p>常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。</p>\n<div><pre><code><span><span>GET</span> <span>/authors/12/categories/2</span> <span>HTTP/1.1</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。</p>\n<p>更好的做法是，除了第一级，其他级别都用查询字符串表达。</p>\n<div><pre><code><span><span>GET</span> <span>/authors/12?categories=2</span> <span>HTTP/1.1</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。</p>\n<div><pre><code><span><span>GET</span> <span>/articles/published</span> <span>HTTP/1.1</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>查询字符串的写法明显更好。</p>\n<div><pre><code><span><span>GET</span> <span>/articles?published=true</span> <span>HTTP/1.1</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"状态码\" tabindex=\"-1\"> 状态码</h3>\n<h4 id=\"状态码必须精确\" tabindex=\"-1\"> 状态码必须精确</h4>\n<p>客户端的每一次请求，服务器都必须给出回应。回应包括 <strong>HTTP 状态码</strong> 和 <strong>数据</strong> 两部分。</p>\n<p>HTTP 状态码就是一个三位数，分成五个类别。</p>\n<div><pre><code>- 1xx：相关信息\n- 2xx：操作成功\n- 3xx：重定向\n- 4xx：客户端错误\n- 5xx：服务器错误\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>这五大类总共包含100多种状态码，覆盖了绝大部分可能遇到的情况。每一种状态码都有标准的（或者约定的）解释，客户端只需查看状态码，就可以判断出发生了什么情况，所以服务器应该返回尽可能精确的状态码。</p>\n<p>API 不需要1xx状态码，下面介绍其他四类状态码的精确含义。</p>\n<h4 id=\"_2xx-状态码\" tabindex=\"-1\"> 2xx 状态码</h4>\n<p>200状态码表示操作成功，但是不同的方法可以返回更精确的状态码。</p>\n<div><pre><code>- GET: 200 OK\n- POST: 201 Created\n- PUT: 200 OK\n- PATCH: 200 OK\n- DELETE: 204 No Content\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，POST返回201状态码，表示生成了新的资源；DELETE返回204状态码，表示资源已经不存在。</p>\n<p>此外，202 Accepted状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于异步操作。下面是一个例子。</p>\n<div><pre><code><span><span>HTTP/1.1</span> <span>202</span> <span>Accepted</span></span>\n\n{\n  \"task\": {\n    \"href\": \"/api/company/job-management/jobs/2130040\",\n    \"id\": \"2130040\"\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"_3xx-状态码\" tabindex=\"-1\"> 3xx 状态码</h4>\n<p>API 用不到301状态码（永久重定向）和302状态码（暂时重定向，307也是这个含义），因为它们可以由应用级别返回，浏览器会直接跳转，API 级别可以不考虑这两种情况。</p>\n<p>API 用到的3xx状态码，主要是303 See Other，表示参考另一个 URL。它与302和307的含义一样，也是&quot;暂时重定向&quot;，区别在于 <strong>302和307用于GET请求</strong> ，而 <strong>303用于POST、PUT和DELETE请求</strong>。收到303以后，浏览器不会自动跳转，而会让用户自己决定下一步怎么办。下面是一个例子。</p>\n<div><pre><code><span><span>HTTP/1.1</span> <span>303</span> <span>See Other</span></span>\n<span><span>Location</span><span>:</span> <span>/api/orders/12345</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h4 id=\"_4xx-状态码\" tabindex=\"-1\"> 4xx 状态码</h4>\n<p>4xx状态码表示客户端错误，主要有下面几种。</p>\n<div><pre><code>400 Bad Request：服务器不理解客户端的请求，未做任何处理。\n401 Unauthorized：用户未提供身份验证凭据，或者没有通过身份验证。\n403 Forbidden：用户通过了身份验证，但是不具有访问资源所需的权限。\n404 Not Found：所请求的资源不存在，或不可用。\n405 Method Not Allowed：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。\n410 Gone：所请求的资源已从这个地址转移，不再可用。\n415 Unsupported Media Type：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。\n422 Unprocessable Entity ：客户端上传的附件无法处理，导致请求失败。\n429 Too Many Requests：客户端的请求次数超过限额。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"_5xx-状态码\" tabindex=\"-1\"> 5xx 状态码</h4>\n<p>5xx状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了。</p>\n<div><pre><code>500 Internal Server Error：客户端请求有效，服务器处理时发生了意外。\n503 Service Unavailable：服务器无法处理请求，一般用于网站维护状态。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h3 id=\"服务器回应\" tabindex=\"-1\"> 服务器回应</h3>\n<h4 id=\"不要返回纯本文\" tabindex=\"-1\"> 不要返回纯本文</h4>\n<p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的 <strong>Content-Type</strong> 属性要设为 <strong>application/json</strong>。</p>\n<p>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的ACCEPT属性也要设成application/json。下面是一个例子。</p>\n<div><pre><code><span><span>GET</span> <span>/orders/2</span> <span>HTTP/1.1</span></span> \n<span><span>Accept</span><span>:</span> <span>application/json</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h4 id=\"发生错误时-不要返回-200-状态码\" tabindex=\"-1\"> 发生错误时，不要返回 200 状态码</h4>\n<p>有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，就像下面这样。</p>\n<div><pre><code><span><span>HTTP/1.1</span> <span>200</span> <span>OK</span></span>\n<span><span>Content-Type</span><span>:</span> <span>application/json</span></span>\n<span>\n<span>{</span>\n  <span>\"status\"</span><span>:</span> <span>\"failure\"</span><span>,</span>\n  <span>\"data\"</span><span>:</span> <span>{</span>\n    <span>\"error\"</span><span>:</span> <span>\"Expected at least two items in list.\"</span>\n  <span>}</span>\n<span>}</span>\n</span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，解析数据体以后，才能得知操作失败。</p>\n<p>这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。</p>\n<div><pre><code><span><span>HTTP/1.1</span> <span>400</span> <span>Bad Request</span></span>\n<span><span>Content-Type</span><span>:</span> <span>application/json</span></span>\n<span>\n<span>{</span>\n  <span>\"error\"</span><span>:</span> <span>\"Invalid payoad.\"</span><span>,</span>\n  <span>\"detail\"</span><span>:</span> <span>{</span>\n     <span>\"surname\"</span><span>:</span> <span>\"This field is required.\"</span>\n  <span>}</span>\n<span>}</span>\n</span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"提供链接\" tabindex=\"-1\"> 提供链接</h4>\n<p>API 的使用者未必知道，URL 是怎么设计的。一个解决方法就是，在回应中，给出相关链接，便于下一步操作。这样的话，用户只要记住一个 URL，就可以发现其他的 URL。这种方法叫做 HATEOAS。</p>\n<blockquote>\n<p>举例来说，GitHub 的 API 都在 api.github.com 这个域名。访问它，就可以得到其他 URL。</p>\n</blockquote>\n<div><pre><code><span>{</span>\n  <span>\"feeds_url\"</span><span>:</span> <span>\"https://api.github.com/feeds\"</span><span>,</span>\n  <span>\"followers_url\"</span><span>:</span> <span>\"https://api.github.com/user/followers\"</span><span>,</span>\n  <span>\"following_url\"</span><span>:</span> <span>\"https://api.github.com/user/following{/target}\"</span><span>,</span>\n  <span>\"gists_url\"</span><span>:</span> <span>\"https://api.github.com/gists{/gist_id}\"</span><span>,</span>\n  <span>\"hub_url\"</span><span>:</span> <span>\"https://api.github.com/hub\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面的回应中，挑一个 URL 访问，又可以得到别的 URL。对于用户来说，不需要记住 URL 设计，只要从 api.github.com 一步步查找就可以了。</p>\n<p>HATEOAS 的格式没有统一规定，上面例子中，GitHub 将它们与其他属性放在一起。更好的做法应该是，将相关链接与其他属性分开。</p>\n<div><pre><code><span><span>HTTP/1.1</span> <span>200</span> <span>OK</span></span>\n<span><span>Content-Type</span><span>:</span> <span>application/json</span></span>\n<span>\n<span>{</span>\n  <span>\"status\"</span><span>:</span> <span>\"In progress\"</span><span>,</span>\n   <span>\"links\"</span><span>:</span> <span>{</span><span>[</span>\n    <span>{</span> <span>\"rel\"</span><span>:</span><span>\"cancel\"</span><span>,</span> <span>\"method\"</span><span>:</span> <span>\"delete\"</span><span>,</span> <span>\"href\"</span><span>:</span><span>\"/api/status/12345\"</span> <span>}</span> <span>,</span>\n    <span>{</span> <span>\"rel\"</span><span>:</span><span>\"edit\"</span><span>,</span> <span>\"method\"</span><span>:</span> <span>\"put\"</span><span>,</span> <span>\"href\"</span><span>:</span><span>\"/api/status/12345\"</span> <span>}</span>\n  <span>]</span><span>}</span>\n<span>}</span>\n</span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "RESTful"
      ]
    },
    {
      "title": "组件通讯方式",
      "url": "https://jin-shaohui.gitee.io/Vue2/Communicate/",
      "id": "https://jin-shaohui.gitee.io/Vue2/Communicate/",
      "summary": " Vue中的8种组件通信方式\nVue是数据驱动视图更新的框架，所以对于vue来说组件间的数据通信非常重要。\n常见使用场景可以分为三类:\n\n\n父子组件通信: props/$emit  Content not supportedparent/children provide/inject ref Content not supportedattrs/listeners\n\n\n兄弟组件通信: eventBus Vuex\n\n\n跨级通信: eventBus Vuex provide/inject Content not supportedattrs/listeners\n\n\n",
      "content_html": "<h1 id=\"vue中的8种组件通信方式\" tabindex=\"-1\"> Vue中的8种组件通信方式</h1>\n<p>Vue是数据驱动视图更新的框架，所以对于vue来说组件间的数据通信非常重要。</p>\n<p>常见使用场景可以分为三类:</p>\n<ul>\n<li>\n<p>父子组件通信: props/$emit  <span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>p</span><span>a</span><span>re</span><span>n</span><span>t</span><span>/</span></span></span></span>children provide/inject ref <span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>tt</span><span>rs</span><span>/</span></span></span></span>listeners</p>\n</li>\n<li>\n<p>兄弟组件通信: eventBus Vuex</p>\n</li>\n<li>\n<p>跨级通信: eventBus Vuex provide/inject <span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>tt</span><span>rs</span><span>/</span></span></span></span>listeners</p>\n</li>\n</ul>\n\n<h2 id=\"props-emit-最常用的组建通信方式\" tabindex=\"-1\"> props / $emit （最常用的组建通信方式）</h2>\n<p>父组件通过props的方式向子组件传递数据，而通过$emit 子组件可以向父组件通信。</p>\n<h3 id=\"父组件向子组件传值-props\" tabindex=\"-1\"> 父组件向子组件传值（props）</h3>\n<ul>\n<li>传入一个静态的值</li>\n</ul>\n<div><pre><code>  <span><span><span>&lt;</span>blog-post</span> <span>title</span><span><span>=</span><span>\"</span>My journey with Vue<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ul>\n<li>传入一个动态的值，任何类型的值都可以传给一个 prop。</li>\n</ul>\n<div><pre><code>　　<span><span><span>&lt;</span>blog-post</span> <span><span>v-bind:</span>title</span><span><span>=</span><span>\"</span>post.title<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>\n　　<span><span><span>&lt;</span>blog-post</span> <span><span>v-bind:</span>likes</span><span><span>=</span><span>\"</span>42<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>\n　　<span><span><span>&lt;</span>blog-post</span> <span><span>v-bind:</span>is-published</span><span><span>=</span><span>\"</span>false<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>\n　　<span><span><span>&lt;</span>blog-post</span> <span><span>v-bind:</span>comment-ids</span><span><span>=</span><span>\"</span>[234, 266, 273]<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span>\n　　<span>&lt;blog-post</span>\n 　　 <span><span>v-bind:</span>author</span><span><span>=</span><span>\"</span>{\n  　　  name: 'Veronica',\n  　　  company: 'Veridian Dynamics'\n 　　 }<span>\"</span></span>\n　　<span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>\n<p>总结：props 只可以在父子组件中通信，即单向数据流。而且 props 是只读的，不可以被修改，所有修改都会被警告。</p>\n</blockquote>\n<h3 id=\"子组件向父组件传值-emit\" tabindex=\"-1\"> 子组件向父组件传值（$emit）</h3>\n<p>子组件通过 $emit 将参数传递给父组件,父组件通过v-on监听并接收参数。</p>\n<div><pre><code>    Vue.component('welcome-button', {\n      template: `\n        <span><span><span>&lt;</span>button</span> <span><span>v-on:</span>click</span><span><span>=</span><span>\"</span>$emit('welcome')<span>\"</span></span><span>></span></span>\n          Click me to be welcomed\n        <span><span><span>&lt;/</span>button</span><span>></span></span>\n      `\n    })\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>emit-example-simple<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>welcome-button</span> <span><span>v-on:</span>welcome</span><span><span>=</span><span>\"</span>sayHi<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>welcome-button</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    new Vue({\n      el: '#emit-example-simple',\n      methods: {\n        sayHi: function () {\n          alert('Hi!')\n        }\n      }\n    })\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"children-parent\" tabindex=\"-1\"> $children / $parent</h2>\n<p><code>$parent</code> 可以访问到当前组件的父组件实例，<code>$children</code> 可以访问到当前组件的子组件实例。</p>\n<div><pre><code>    // 父组件中\n    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>hello_world<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>div</span><span>></span></span>{{msg}}<span><span><span>&lt;/</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>com-a</span><span>></span></span><span><span><span>&lt;/</span>com-a</span><span>></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>changeA<span>\"</span></span><span>></span></span>点击改变子组件值<span><span><span>&lt;/</span>button</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    ​\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>import</span> ComA <span>from</span> <span>'./test/comA.vue'</span>\n    <span>export</span> <span>default</span> <span>{</span>\n      <span>name</span><span>:</span> <span>'HelloWorld'</span><span>,</span>\n      <span>components</span><span>:</span> <span>{</span> ComA <span>}</span><span>,</span>\n      <span>data</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>{</span>\n          <span>msg</span><span>:</span> <span>'Welcome'</span>\n        <span>}</span>\n      <span>}</span><span>,</span>\n    ​\n      <span>methods</span><span>:</span> <span>{</span>\n        <span>changeA</span><span>(</span><span>)</span> <span>{</span>\n          <span>// 获取到子组件A</span>\n          <span>this</span><span>.</span>$children<span>[</span><span>0</span><span>]</span><span>.</span>messageA <span>=</span> <span>'this is new value'</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>    // 子组件中\n    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>com_a<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>span</span><span>></span></span>{{messageA}}<span><span><span>&lt;/</span>span</span><span>></span></span>\n        <span><span><span>&lt;</span>p</span><span>></span></span>获取父组件的值为:  {{parentVal}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    ​\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>export</span> <span>default</span> <span>{</span>\n      <span>data</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>{</span>\n          <span>messageA</span><span>:</span> <span>'this is old'</span>\n        <span>}</span>\n      <span>}</span><span>,</span>\n      <span>computed</span><span>:</span><span>{</span>\n        <span>parentVal</span><span>(</span><span>)</span><span>{</span>\n          <span>return</span> <span>this</span><span>.</span>$parent<span>.</span>msg<span>;</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>\n<p>注意：<code>$parent</code> 和 <code>$children</code> 得到的值不一样，<code>$children</code> 的值是数组，而 <code>$parent</code> 是个对象。</p>\n</blockquote>\n<h2 id=\"provide-inject\" tabindex=\"-1\"> provide/ inject</h2>\n<p>provide/ inject 就是父组件中通过provide来提供变量, 然后在子组件中通过inject来注入变量。</p>\n<p>provide 是一个对象或返回一个对象的函数。inject 是一个数组或对象。</p>\n<p>注意: 这里不论子组件嵌套有多深, 只要调用了inject 那么就可以注入provide中的数据，而不局限于只能从当前父组件的props属性中获取数据。</p>\n<div><pre><code>    // 父级组件提供 'foo'\n    var Provider = {\n      provide: {\n        foo: 'bar'\n      },\n      // ...\n    }\n    ​\n    // 子组件注入 'foo'\n    var Child = {\n      inject: ['foo'],\n      created () {\n        console.log(this.foo) // => \"bar\"\n      }\n      // ...\n    }\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"ref-refs\" tabindex=\"-1\"> ref / refs</h2>\n<p>ref：在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；用在组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据。</p>\n<div><pre><code>    <span><span><span>&lt;</span>base-input</span> <span>ref</span><span><span>=</span><span>\"</span>usernameInput<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>input</span> <span>ref</span><span><span>=</span><span>\"</span>input<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;/</span>base-input</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n        <span>methods</span><span>:</span> <span>{</span>\n         <span>// 用来从父级组件聚焦输入框</span>\n            <span>focus</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n            <span>this</span><span>.</span>$refs<span>.</span>input<span>.</span><span>focus</span><span>(</span><span>)</span>\n      <span>}</span>\n    <span>}</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"eventbus\" tabindex=\"-1\"> eventBus</h2>\n<p>eventBus 又称为事件总线，在vue中是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件。</p>\n<ul>\n<li>初始化</li>\n</ul>\n<p>首先需要创建一个事件总线并将其导出, 以便其他模块可以使用或者监听它.</p>\n<div><pre><code><span>// event-bus.js</span>\n​\n<span>import</span> Vue <span>from</span> <span>'vue'</span>\n<span>export</span> <span>const</span> EventBus <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><ul>\n<li>发送事件</li>\n</ul>\n<p>假设你有两个组件: additionNum 和 showNum, 这两个组件可以是兄弟组件也可以是父子组件；这里我们以兄弟组件为例:</p>\n<div><pre><code>    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>show-num-com</span><span>></span></span><span><span><span>&lt;/</span>show-num-com</span><span>></span></span>\n        <span><span><span>&lt;</span>addition-num-com</span><span>></span></span><span><span><span>&lt;/</span>addition-num-com</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    ​\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>import</span> showNumCom <span>from</span> <span>'./showNum.vue'</span>\n    <span>import</span> additionNumCom <span>from</span> <span>'./additionNum.vue'</span>\n    <span>export</span> <span>default</span> <span>{</span>\n      <span>components</span><span>:</span> <span>{</span> showNumCom<span>,</span> additionNumCom <span>}</span>\n    <span>}</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>​\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>additionHandle<span>\"</span></span><span>></span></span>+加法器<span><span><span>&lt;/</span>button</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    \n      <span>import</span> <span>{</span>EventBus<span>}</span> <span>from</span> <span>'./event-bus.js'</span>\n\n      <span>export</span> <span>default</span> <span>{</span>\n        <span>data</span><span>(</span><span>)</span> <span>{</span>\n          <span>return</span> <span>{</span>\n            <span>num</span><span>:</span> <span>1</span>\n          <span>}</span>\n        <span>}</span><span>,</span>\n        <span>methods</span><span>:</span> <span>{</span>\n          <span>additionHandle</span><span>(</span><span>)</span> <span>{</span>\n            EventBus<span>.</span><span>$emit</span><span>(</span><span>'addition'</span><span>,</span> <span>{</span> <span>num</span><span>:</span><span>this</span><span>.</span>num<span>++</span> <span>}</span><span>)</span>\n          <span>}</span>\n        <span>}</span>\n      <span>}</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>接收事件</li>\n</ul>\n<div><pre><code>\n    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>计算和: {{count}}<span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    ​\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n      <span>import</span> <span>{</span>EventBus<span>}</span> <span>from</span> <span>'./event-bus.js'</span>\n    \n      <span>export</span> <span>default</span> <span>{</span>\n        <span>data</span><span>(</span><span>)</span> <span>{</span>\n          <span>return</span> <span>{</span>\n            <span>count</span><span>:</span> <span>0</span>\n          <span>}</span>\n        <span>}</span><span>,</span>\n        <span>mounted</span><span>(</span><span>)</span><span>{</span>\n          EventBus<span>.</span><span>$on</span><span>(</span><span>'addition'</span><span>,</span> <span>param</span> <span>=></span> <span>{</span>\n            <span>this</span><span>.</span>count <span>=</span> <span>this</span><span>.</span>count <span>+</span> param<span>.</span>num<span>;</span>\n          <span>}</span><span>)</span>\n        <span>}</span>\n      <span>}</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这样就实现了在组件addtionNum.vue中点击相加按钮, 在showNum.vue中利用传递来的 num 展示求和的结果.</p>\n<ul>\n<li>移除事件监听者</li>\n</ul>\n<p>如果想移除事件的监听, 可以像下面这样操作:</p>\n<div><pre><code>    <span>import</span> <span>{</span> eventBus <span>}</span> <span>from</span> <span>'event-bus.js'</span>\n    EventBus<span>.</span><span>$off</span><span>(</span><span>'addition'</span><span>,</span> <span>{</span><span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h2 id=\"vuex\" tabindex=\"-1\"> Vuex</h2>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，主要解决的是开发大型单页面项目的组件通信问题。</p>\n<h2 id=\"attrs与-listeners\" tabindex=\"-1\"> $attrs与 $listeners</h2>\n<p>为了解决该需求，引入了 <code>$attrs</code> 和 <code>$listeners</code>， 新增了inheritAttrs 选项。 默认情况下,父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)，将会“回退”且作为普通的HTML特性应用在子组件的根元素上。接下来看一个跨级通信的例子:</p>\n<div><pre><code>    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>child-com1</span>\n          <span>:name</span><span><span>=</span><span>\"</span>name<span>\"</span></span>\n          <span>:age</span><span><span>=</span><span>\"</span>age<span>\"</span></span>\n          <span>:gender</span><span><span>=</span><span>\"</span>gender<span>\"</span></span>\n          <span>:height</span><span><span>=</span><span>\"</span>height<span>\"</span></span>\n          <span>title</span><span><span>=</span><span>\"</span>程序员成长指北<span>\"</span></span>\n        <span>></span></span><span><span><span>&lt;/</span>child-com1</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>const</span> <span>childCom1</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>import</span><span>(</span><span>\"./childCom1.vue\"</span><span>)</span><span>;</span>\n    <span>export</span> <span>default</span> <span>{</span>\n      <span>components</span><span>:</span> <span>{</span> childCom1 <span>}</span><span>,</span>\n      <span>data</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>{</span>\n          <span>name</span><span>:</span> <span>\"zhang\"</span><span>,</span>\n          <span>age</span><span>:</span> <span>\"18\"</span><span>,</span>\n          <span>gender</span><span>:</span> <span>\"女\"</span><span>,</span>\n          <span>height</span><span>:</span> <span>\"158\"</span>\n        <span>}</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>;</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>    <span><span><span>&lt;</span>template</span> <span>class</span><span><span>=</span><span>\"</span>border<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>p</span><span>></span></span>name: {{ name}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n        <span><span><span>&lt;</span>p</span><span>></span></span>childCom1的$attrs: {{ $attrs }}<span><span><span>&lt;/</span>p</span><span>></span></span>\n        <span><span><span>&lt;</span>child-com2</span> <span>v-bind</span><span><span>=</span><span>\"</span>$attrs<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>child-com2</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>const</span> <span>childCom2</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>import</span><span>(</span><span>\"./childCom2.vue\"</span><span>)</span><span>;</span>\n    <span>export</span> <span>default</span> <span>{</span>\n      <span>components</span><span>:</span> <span>{</span>\n        childCom2\n      <span>}</span><span>,</span>\n      <span>inheritAttrs</span><span>:</span> <span>false</span><span>,</span> <span>// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span>\n      <span>props</span><span>:</span> <span>{</span>\n        <span>name</span><span>:</span> String <span>// name作为props属性绑定</span>\n      <span>}</span><span>,</span>\n      <span>created</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>$attrs<span>)</span><span>;</span>\n         <span>// { \"age\": \"18\", \"gender\": \"女\", \"height\": \"158\", \"title\": \"程序员成长指北\" }</span>\n      <span>}</span>\n    <span>}</span><span>;</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>    <span><span><span>&lt;</span>template</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>border<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>p</span><span>></span></span>age: {{ age}}<span><span><span>&lt;/</span>p</span><span>></span></span>\n        <span><span><span>&lt;</span>p</span><span>></span></span>childCom2: {{ $attrs }}<span><span><span>&lt;/</span>p</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    ​\n    <span>export</span> <span>default</span> <span>{</span>\n      <span>inheritAttrs</span><span>:</span> <span>false</span><span>,</span>\n      <span>props</span><span>:</span> <span>{</span>\n        <span>age</span><span>:</span> String\n      <span>}</span><span>,</span>\n      <span>created</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>$attrs<span>)</span><span>;</span> \n        <span>// { \"gender\": \"女\", \"height\": \"158\", \"title\": \"程序员成长指北\" }</span>\n      <span>}</span>\n    <span>}</span><span>;</span>\n    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"localstorage-sessionstorage\" tabindex=\"-1\"> localStorage / sessionStorage#</h2>\n<p>通过 window.localStorage.getItem(key) 获取数据，通过 window.localStorage.setItem(key,value) 存储数据。</p>\n<h2 id=\"总结\" tabindex=\"-1\"> 总结：</h2>\n<p>props / $emit 是使用最多，也最推荐的方式。适用于父子组件通信。</p>\n<p>Vuex 是 Vue 官方提供的组件通信方式，适用于构建大型单页面项目。</p>\n<p><code>$children</code> / <code>$parent</code> ，<code>ref</code> ，<code>$attr</code> / <code>$listener</code> 主要是通过操作父子组件的实例来获取组件的数据，实现组件通信。</p>\n",
      "date_published": "2022-06-01T16:21:10.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE"
      ]
    },
    {
      "title": "生命周期",
      "url": "https://jin-shaohui.gitee.io/Vue2/LifeCycle/",
      "id": "https://jin-shaohui.gitee.io/Vue2/LifeCycle/",
      "summary": " 前言\n每个Vue实例再被创建之前，都会经过一系列的初始化过程，这个过程被称之为vue的生命周期。\n下面这张官网的图，想必大家都熟悉，那让我们一步一步的分析，并最后验证一下。\n\n图中可以看到在一整个生命周期中会有很多的钩子函数，不同的钩子函数提供给我们在vue生命周期不同的时刻进行的操作, 那么我们先列出所有的钩子函数，然后我们再一一详解：\n",
      "content_html": "<h1 id=\"前言\" tabindex=\"-1\"> 前言</h1>\n<p>每个Vue实例再被创建之前，都会经过一系列的初始化过程，这个过程被称之为vue的生命周期。</p>\n<p>下面这张官网的图，想必大家都熟悉，那让我们一步一步的分析，并最后验证一下。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/vue/lifeCycle/vueLifecycle.png')\" alt=\"vueLifecycle\" style=\"zoom:50%;\" />\n<p>图中可以看到在一整个生命周期中会有很多的钩子函数，不同的钩子函数提供给我们在vue生命周期不同的时刻进行的操作, 那么我们先列出所有的钩子函数，然后我们再一一详解：</p>\n\n<blockquote>\n<p>结合 <a href=\"/Knowledge/FrontEnd/Vue2/LifeCycle/demo.html\">生命周期案例</a> ，F12看控制台更容易理解。</p>\n</blockquote>\n<ul>\n<li><strong>beforeCreate（创建前）</strong> 此阶段为实例初始化之后，此时的数据观察和事件机制都未形成，不能获得DOM节点。</li>\n</ul>\n<p>在 <strong>beforeCreate</strong> 和 <strong>created</strong> 生命周期之间，进行 <strong>初始化事件，进行数据的观测</strong> ，这时候我们可以看到在created钩子的时候数据已经和data中的属性进行绑定（其中在data中的属性值发生改变的时候，视图也会相对应改变，即所谓的双向绑定）。</p>\n<p>注意事项：此时并没有el</p>\n<ul>\n<li><strong>created（创建后）</strong> 此阶段vue实例已经创建，仍然不能获取DOM元素。</li>\n</ul>\n<p>在 <strong>created</strong> 和 <strong>beforeMount</strong> 生命周期之间，发生的事情相对比较多，结合官网给出的生命周期图可以分析下：</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/vue/lifeCycle/createdToBeforeMount.png')\" alt=\"createdToBeforeMount\" style=\"zoom:50%;\" />\n<p>首先会判断对象是否有 <strong>el</strong> 。如果有的话就继续向下编译，如果没有el选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用vm.$mount(el)。</p>\n<blockquote>\n<p>此时注释掉demo代码中的 <strong>el: '#app'</strong> ，然后可以看到控制台打印的日志到created的时候就停止了，如果我们在代码后面继续调用 <strong>vm.$mount(el)</strong> ，可以发现代码继续向下执行了，其中这个 <strong>el</strong> 参数就是挂载的dom节点</p>\n</blockquote>\n<p>然后，我们往下看，<strong>template</strong> 参数选项的对生命周期的影响。</p>\n<ol>\n<li>\n<p>如果vue实例对象中有template参数选项，则将其作为模板编译成 <strong>render函数</strong>。</p>\n</li>\n<li>\n<p>如果没有template选项，则将外部HTML作为模板编译。</p>\n</li>\n<li>\n<p>可以看到template中的模板优先级要高于outer HTML的优先级。</p>\n</li>\n</ol>\n<blockquote>\n<p>vue中还有一个 <strong>render 函数</strong> ，它是以createElement作为参数，然后做渲染操作，而且我们可以直接嵌入JSX，可以看到页面中渲染的是： <strong>render function</strong> 。若没有 <strong>rennder 函数</strong> ，则观察demo中的template参数，在有这个参数的时候，页面渲染出来的结果为 <strong>Vue的生命周期 --- 这是在template中的</strong> ，若注释掉 <strong>template</strong> 参数，则页面渲染结果为 <strong>Vue的生命周期 --- 这是在outer HTML中的</strong> ，证明以上三点结论。</p>\n</blockquote>\n<p>同时，也可以从侧面解释为什么 <strong>Has 'el' option</strong> 要在 <strong>Has 'template' option</strong> 之前，因为vue需要通过 <strong>el</strong> 去找到对应的 <strong>outer html</strong> ，最终可得出优先级结论：<strong>render函数选项 &gt; template选项 &gt; outer HTML</strong></p>\n<ul>\n<li><strong>beforeMount（载入前）</strong> 此阶段，依然得不到具体的DOM元素，但vue挂载的根节点已经创建，下面vue对DOM的操作将围绕这个根元素继续进行。</li>\n</ul>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/vue/lifeCycle/beforeMountToMounted.png')\" alt=\"beforeMountToMounted\" style=\"zoom:50%;\" />\n<p>在 <strong>beforeMount</strong> 和 <strong>mounted</strong> 生命周期之间，可以看到此时是给vue实例对象添加 <strong>$el成员</strong> ，并且替换掉挂载的DOM元素。</p>\n<blockquote>\n<p>demo中控制台打印的日志可以看出生命周期在 <strong>beforeMount</strong> 之前时 <strong>el</strong> 是undefined。</p>\n<p>同时，我们可以看下控制台打印的日志，<strong>beforeMount</strong> 和 <strong>mounted</strong> 两个生命周期上的 <strong>el</strong> ，在beforeMount时h1中还是使用 <strong>{{ message + '  --- 这是在outer HTML中的' }}</strong> 进行占位，因为此时还有挂在到页面上，还是JavaScript中的虚拟DOM形式存在的。在mounted之后可以看到h1中的内容发生了变化。</p>\n</blockquote>\n<ul>\n<li><strong>mounted（载入后）</strong> 此阶段数据和DOM都已被渲染出来。</li>\n<li><strong>beforeUpdate（更新前）</strong> 此阶段，vue遵循数据驱动DOM的原则；函数在数据更新后虽然没立即更新数据，但是DOM中的数据会在Vue双向数据绑定的作用下改变。</li>\n<li><strong>updated（更新后）</strong> 此阶段DOM会和更改过的内容同步。</li>\n<li><strong>beforeDestroy（销毁前）</strong></li>\n<li><strong>destroyed（销毁后）</strong></li>\n</ul>\n",
      "date_published": "2022-05-26T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE"
      ]
    },
    {
      "title": "Vue相关面试问题",
      "url": "https://jin-shaohui.gitee.io/Vue2/Question/",
      "id": "https://jin-shaohui.gitee.io/Vue2/Question/",
      "content_html": "<h2 id=\"常问问题\" tabindex=\"-1\"> 常问问题</h2>\n<h3 id=\"vue-router实现原理的histroy相关的api\" tabindex=\"-1\"> vue-router实现原理的histroy相关的api</h3>\n<h3 id=\"vue项目想要改变element-ui的组件内部的样式-默认情况下style加了scope无法修改-需怎么做\" tabindex=\"-1\"> vue项目想要改变element-ui的组件内部的样式，默认情况下style加了scope无法修改，需怎么做</h3>\n<h3 id=\"v-if-和-v-for优先级\" tabindex=\"-1\"> v-if 和 v-for优先级</h3>\n<details><summary>详情</summary>\n<p><strong>v-if和v-for是开发中经常会遇到的2个指令，那么在使用的过程中，二者如果同时存在同一个标签上，谁的优先级会更高一点呢？</strong></p>\n<p>那么我们从源码的角度去看他，源码位置： compiler/codegen/index.js</p>\n<p>在genElement方法中，我们可以看到一些if else的判断</p>\n<div><pre><code>  <span>if</span> <span>(</span>el<span>.</span>staticRoot <span>&amp;&amp;</span> <span>!</span>el<span>.</span>staticProcessed<span>)</span> <span>{</span>\n    <span>return</span> <span>genStatic</span><span>(</span>el<span>,</span> state<span>)</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>el<span>.</span>once <span>&amp;&amp;</span> <span>!</span>el<span>.</span>onceProcessed<span>)</span> <span>{</span>\n    <span>return</span> <span>genOnce</span><span>(</span>el<span>,</span> state<span>)</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>el<span>.</span>for <span>&amp;&amp;</span> <span>!</span>el<span>.</span>forProcessed<span>)</span> <span>{</span>\n    <span>return</span> <span>genFor</span><span>(</span>el<span>,</span> state<span>)</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>el<span>.</span>if <span>&amp;&amp;</span> <span>!</span>el<span>.</span>ifProcessed<span>)</span> <span>{</span>\n    <span>return</span> <span>genIf</span><span>(</span>el<span>,</span> state<span>)</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>el<span>.</span>tag <span>===</span> <span>'template'</span> <span>&amp;&amp;</span> <span>!</span>el<span>.</span>slotTarget <span>&amp;&amp;</span> <span>!</span>state<span>.</span>pre<span>)</span> <span>{</span>\n    <span>return</span> <span>genChildren</span><span>(</span>el<span>,</span> state<span>)</span> <span>||</span> <span>'void 0'</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>el<span>.</span>tag <span>===</span> <span>'slot'</span><span>)</span> <span>{</span>\n    <span>return</span> <span>genSlot</span><span>(</span>el<span>,</span> state<span>)</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>// component or element</span>\n    <span>let</span> code\n    <span>if</span> <span>(</span>el<span>.</span>component<span>)</span> <span>{</span>\n      code <span>=</span> <span>genComponent</span><span>(</span>el<span>.</span>component<span>,</span> el<span>,</span> state<span>)</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      <span>let</span> data\n      <span>if</span> <span>(</span><span>!</span>el<span>.</span>plain <span>||</span> <span>(</span>el<span>.</span>pre <span>&amp;&amp;</span> state<span>.</span><span>maybeComponent</span><span>(</span>el<span>)</span><span>)</span><span>)</span> <span>{</span>\n        data <span>=</span> <span>genData</span><span>(</span>el<span>,</span> state<span>)</span>\n      <span>}</span>\n\n      <span>const</span> children <span>=</span> el<span>.</span>inlineTemplate <span>?</span> <span>null</span> <span>:</span> <span>genChildren</span><span>(</span>el<span>,</span> state<span>,</span> <span>true</span><span>)</span>\n      code <span>=</span> <span><span>`</span><span>_c('</span><span><span>${</span>el<span>.</span>tag<span>}</span></span><span>'</span><span><span>${</span>\n        data <span>?</span> <span><span>`</span><span>,</span><span><span>${</span>data<span>}</span></span><span>`</span></span> <span>:</span> <span>''</span> <span>// data</span>\n      <span>}</span></span><span><span>${</span>\n        children <span>?</span> <span><span>`</span><span>,</span><span><span>${</span>children<span>}</span></span><span>`</span></span> <span>:</span> <span>''</span> <span>// children</span>\n      <span>}</span></span><span>)</span><span>`</span></span>\n    <span>}</span>\n    <span>// module transforms</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> state<span>.</span>transforms<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      code <span>=</span> state<span>.</span>transforms<span>[</span>i<span>]</span><span>(</span>el<span>,</span> code<span>)</span>\n    <span>}</span>\n    <span>return</span> code\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>\n<p>处理for循环是处于if的上面的，所以我们由此可以判定v-for的优先级是高于v-if的。</p>\n</blockquote>\n<p>我们经常会遇见这种情况，在v-for的时候，在数组中会有一些需要进行v-if的判断，这种情况下，我们如果先使用computed将不需要渲染的项过滤出来，那么在进行v-for的时候，循环的就只是需要渲染的项，这也是提升vue性能的一种方式。</p>\n</details>\n<h3 id=\"vue渐进式\" tabindex=\"-1\"> vue渐进式</h3>\n<details><summary>详情</summary>\n<p><strong>什么是渐进式</strong></p>\n<p>先使用Vue的核心库，再根据你的需要的功能再去逐渐增加加相应的插件。</p>\n<ul>\n<li>渐进式代表的含义是：主张最少，</li>\n<li>渐进式的含义，我的理解是：没有多做职责之外的事。</li>\n</ul>\n<p>Vue的核心的功能，是一个视图模板引擎，但这不是说Vue就不能成为一个框架。</p>\n<p>在声明式渲染（视图模板引擎）的基础上，我们可以通过添加组件系统、客户端路由、大规模状态管理来构建一个完整的框架。</p>\n<p>更重要的是，这些功能相互独立，你可以在核心功能的基础上任意选用其他的部件，不一定要全部整合在一起。</p>\n<p>可以看到，所说的“渐进式”，其实就是Vue的使用方式，同时也体现了Vue的设计的理念。</p>\n</details>\n<h3 id=\"优雅降级和渐进增强\" tabindex=\"-1\"> 优雅降级和渐进增强</h3>\n<details><summary>详情</summary>\n<p><strong>优雅降级</strong>：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。</p>\n<p>如：border-shadow</p>\n<p><strong>渐进增强</strong>：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>\n<p>如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；</p>\n</details>\n<h2 id=\"实例选项\" tabindex=\"-1\"> 实例选项</h2>\n<h3 id=\"extend-s-与mixins差异\" tabindex=\"-1\"> extend(s)与mixins差异</h3>\n<details><summary>详情</summary>\n<ul>\n<li>\n<p><strong>Mixins 的使用方法：</strong></p>\n<p>首先，我们先定义一个Mixins混入类对象。</p>\n<div><pre><code><span>export</span> <span>const</span> myMixin <span>=</span> <span>{</span>\n\t<span>data</span><span>(</span><span>)</span><span>{</span>\n\t\t<span>return</span> <span>{</span>\n\t\t\t<span>num</span><span>:</span><span>1</span>\n\t\t<span>}</span>\n\t<span>}</span><span>,</span>\n\t<span>created</span><span>(</span><span>)</span><span>{</span>\n\t\t<span>this</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>;</span>\n\t<span>}</span><span>,</span>\n\t<span>methods</span><span>:</span><span>{</span>\n\t\t<span>hello</span><span>(</span><span>)</span><span>{</span>\n\t\t\tconsole<span>.</span><span>log</span><span>(</span><span>'hello from mixin'</span><span>)</span><span>;</span>\n\t\t<span>}</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后，将对象混合到当前组件中：</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n\t<span><span><span>&lt;</span>div</span><span>></span></span>\n\t\t组件1\n\t<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n\t<span>import</span> <span>{</span> myMixin  <span>}</span> <span>from</span> <span>'@/assets/mixin.js'</span>\n\t<span>export</span> <span>default</span><span>{</span>\n\t\t<span>mixins</span><span>:</span><span>[</span> myMixin <span>]</span>\n\t<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>​\t\tMixins选项接收一个混入对象的数组（即可以多个）。这些混入对象可以像正常实例对象一样包含实例选项，这些选项将会被合并到组件的选项中。</p>\n<p>​\t\t其中，有以下几点可以便于理解Mixins</p>\n<ol>\n<li>\n<p>应用场景：在项目中，如果我们需要提取公用的数据或者通用的方法，并且这些数据与方法不需要组件间进行维护，就可以使用Mixins</p>\n</li>\n<li>\n<p>特点：方法和参数在各组件中不共享</p>\n<p>当值为对象的选项，如 <strong>methods,components</strong> 等，选项会被合并，键冲突的时候组件会覆盖混入对象</p>\n<p>当值为函数的选项，如 <strong>created,mounted</strong> 等，就会被合并调用，混入对象钩子函数会比组件里的钩子函数先调用</p>\n</li>\n<li>\n<p>与vuex的区别\nvuex：用来做状态管理的（即全局），里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。\nMixins：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。</p>\n</li>\n<li>\n<p>与公共组件的区别\n组件：父组件中引入子组件，相当于在父组件中给出一片独立的空间供子组件使用，然后根据props来传值，但本质上两者是相对独立的。\nMixins：则是在引入组件之后与组件中的对象和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件。</p>\n</li>\n<li>\n<p>Mixins中的异步请求\n当混合里面包含异步请求函数，而我们又需要在组件中使用异步请求函数的返回值时，我们应直接返回异步函数（即 new Promise）</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>extends 的使用方法：</strong></p>\n</li>\n</ul>\n<p>首先，我们先定义一个extend对象。</p>\n<div><pre><code><span>//只能使用一个extends对象，多个无效，extends会先于mixins执行</span>\n<span>export</span> <span>const</span> myExtends <span>=</span> <span>{</span>\n    <span>methods</span><span>:</span> <span>{</span>\n        <span>hello</span><span>(</span><span>)</span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>\"hello extends\"</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span><span>,</span>\n    <span>beforeCreate</span><span>(</span><span>)</span><span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>\"extends的beforeCreated\"</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n    <span>created</span><span>(</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span><span>hello</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后，将对象混合到当前组件中：</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>div</span><span>></span></span>\n    home\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> <span>{</span> myExtends <span>}</span> <span>from</span> <span>'../util/test.js'</span>\n<span>export</span> <span>default</span> <span>{</span>\n<span>name</span><span>:</span> <span>\"Home\"</span><span>,</span>\n <span>data</span> <span>(</span><span>)</span> <span>{</span>\n   <span>return</span> <span>{</span>\n   <span>}</span><span>;</span>\n <span>}</span><span>,</span>\n <span>beforeCreate</span><span>(</span><span>)</span><span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>\"组件的beforeCreated\"</span><span>)</span><span>;</span>\n <span>}</span><span>,</span>\n <span>created</span><span>(</span><span>)</span><span>{</span>\n     console<span>.</span><span>log</span><span>(</span><span>\"1212\"</span><span>)</span><span>;</span>\n <span>}</span><span>,</span>\n <span>extends</span><span>:</span> myExtends  <span>// 使用extends</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>lang</span><span><span>=</span><span>\"</span>css<span>\"</span></span> <span>scoped</span><span>></span></span><span><span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>其中，有以下几点可以便于理解extends</p>\n<ol>\n<li>extends和Mixins类似，通过暴露一个extends对象到组件中使用。</li>\n<li>extends会比Mixins先执行。执行顺序：extends &gt; Mixins&gt; 组件</li>\n<li>extends只能暴露一个extends对象，暴露多个extends不会执行</li>\n</ol>\n<ul>\n<li><strong>extend 的使用方法：</strong></li>\n</ul>\n<p>vue.extend()方法其实是vue的一个构造器，继承自vue，可以通过extent拓展全局组件，首先我们新建一个 hello.vue</p>\n<div><pre><code><span>&lt;!--hello.vue--></span>\n<span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span><span>></span></span>{{text}}<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'hello'</span><span>,</span>\n  <span>data</span> <span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span>\n      <span>text</span><span>:</span> <span>''</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后，我们在同级新建一个 hello.js</p>\n<div><pre><code><span>// hello.js</span>\n<span>import</span> Vue <span>from</span> <span>'docs/question/vue'</span>\n<span>import</span> HelloTemplate <span>from</span> <span>'./hello.vue'</span>\n\n<span>// 使用extend方法创建vue的子类</span>\n<span>const</span> HelloConstructor <span>=</span> Vue<span>.</span><span>extend</span><span>(</span>HelloTemplate<span>)</span><span>;</span>\n\n<span>// 使用这个方法调用hello组件</span>\n<span>function</span> <span>Hello</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  options <span>=</span> options <span>||</span> <span>{</span><span>}</span><span>;</span>\n  <span>if</span> <span>(</span><span>typeof</span> options <span>===</span> <span>'string'</span><span>)</span> <span>{</span>\n    options <span>=</span> <span>{</span>\n      <span>text</span><span>:</span> options\n    <span>}</span>\n  <span>}</span>\n\n  <span>// 实例化子组件，然后获取到DOM结构并挂载到body上</span>\n  <span>const</span> helloInstence <span>=</span> <span>new</span> <span>HelloConstructor</span><span>(</span><span>{</span><span>data</span><span>:</span> options<span>}</span><span>)</span><span>;</span>\n  helloInstence<span>.</span>vm <span>=</span> helloInstence<span>.</span><span>$mount</span><span>(</span><span>)</span><span>;</span>\n  console<span>.</span><span>log</span><span>(</span>helloInstence<span>.</span>vm<span>)</span>\n  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>helloInstence<span>.</span>vm<span>.</span>$el<span>)</span><span>;</span>\n<span>}</span>\n<span>export</span> <span>default</span> Hello<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>最后在main.js引入</p>\n<div><pre><code><span>import</span> Hello <span>from</span> <span>'./src/components/hello/hello'</span>\n<span>Hello</span><span>(</span><span>{</span>\n\t<span>text</span><span>:</span><span>'hello world'</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><ul>\n<li><strong>extend,extends, Mixins 区别</strong></li>\n</ul>\n<p>Vue.extend创建组件的构造函数，为了复用</p>\n<p>Mixins 可以混入多个Mixin ，extends只能继承一个</p>\n<p>Mixins 类似于面向切面的编程（AOP），extends类似于面向对象的编程</p>\n<p>优先级Vue.extend&gt;extends&gt;Mixins</p>\n</details>\n<h3 id=\"created与activated差异\" tabindex=\"-1\"> created与activated差异</h3>\n<details><summary>详情</summary>\n<ul>\n<li>keep-alive 有什么作用？</li>\n</ul>\n<p>使用 &lt;<strong>keep-alive</strong>&gt; 会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在activated阶段获取数据，承担原来created钩子中获取数据的任务。\n被包含在 &lt;<strong>keep-alive</strong>&gt; 中创建的组件，会多出两个生命周期的钩子: activated 与 deactivated</p>\n<ul>\n<li>keep-alive 在vue的生命周期中赋予了什么新的钩子？</li>\n</ul>\n<p>activated：在组件第一次渲染时也会被调用，之后每次keep-alive激活时被调用。</p>\n<p>deactivated：在组件被停用时调用。</p>\n<p>注意：只有组件被 keep-alive 包裹时，这两个生命周期才会被调用，如果作为正常组件使用，是不会被调用，以及在 2.1.0 版本之后，使用 exclude 排除之后，就算被包裹在 &lt;<strong>keep-alive</strong>&gt; 中，这两个钩子依然不会被调用！另外在服务端渲染时此钩子也不会被调用的。</p>\n<ul>\n<li>什么时候获取数据？</li>\n</ul>\n<p>当引入 keep-alive 的时候，页面第一次进入，钩子的触发顺序created -&gt; mounted-&gt; activated，退出时触发deactivated。当再次进入（前进或者后退）时，只触发activated。</p>\n<p>我们知道 keep-alive 之后页面模板第一次初始化解析变成HTML片段后，再次进入就不在重新解析而是读取内存中的数据，即只有当数据变化时，才使用VirtualDOM进行diff更新。有需要的话，页面进入的数据获取应该在activated中也放一份。数据下载完毕手动操作DOM的部分也应该在activated中执行才会生效。</p>\n<p>所以，有需要的话，应该activated中留一份数据获取的代码，或者不要created部分，直接将created中的代码转移到activated中。</p>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>created()：在创建vue对象时，当html渲染之前就触发；但是注意，全局vue.js不强制刷新或者重启时只创建一次，也就是说，created()只会触发一次；</p>\n<p>activated()：在vue对象存活的情况下，进入当前存在activated()函数的页面时，一进入页面就触发；可用于初始化页面数据等</p>\n</blockquote>\n</details>\n<h3 id=\"vue的computed跟普通的函数有什么区别吗-computed怎么实现缓存的-有看过源码吗\" tabindex=\"-1\"> vue的computed跟普通的函数有什么区别吗，computed怎么实现缓存的，有看过源码吗</h3>\n<h2 id=\"webpack模块\" tabindex=\"-1\"> webpack模块</h2>\n<h3 id=\"webpack中-bundle-chunk-module-有什么区别\" tabindex=\"-1\"> webpack中 bundle chunk module 有什么区别</h3>\n<h3 id=\"webpack中-plugin-loader-有什么区别\" tabindex=\"-1\"> webpack中 plugin loader 有什么区别</h3>\n",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Question"
      ]
    },
    {
      "title": "VUE3工具函数源码解析",
      "url": "https://jin-shaohui.gitee.io/Vue3/ToolFunction/",
      "id": "https://jin-shaohui.gitee.io/Vue3/ToolFunction/",
      "content_html": "<div>\n<p>Tips</p>\n<p>具体文件是 <code>shared.cjs.prod.js</code> 和 <code>shared.cjs.js</code> 文件下针对源码中的工具函数和较冷门知识点的提取分析。</p>\n<p>vue 版本为 3.2.31</p>\n</div>\n<h2 id=\"常量定义\" tabindex=\"-1\"> 常量定义</h2>\n<h3 id=\"empty-obj、empty-arr-对象\" tabindex=\"-1\"> EMPTY_OBJ、EMPTY_ARR 对象</h3>\n<p>typescript是通过 <code>readonly</code> 的方式来定义一个冻结对象的类型的， <code>readonly</code> 是只读修饰符。 <code>Object.freeze</code> 冻结对象属性功能。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export declare const EMPTY_OBJ: {\n    readonly [key: string]: any;\n} = __DEV__ ? Object.freeze({}) : {}\n\n\nexport declare const EMPTY_ARR: {\n    readonly [key: string]: any;\n} = __DEV__ ? Object.freeze([]) : []\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let emptyObj = Object.freeze({\n  props: {\n    name: 'jack',\n    age: 12\n  },\n  total: 1000\n})\n// 无法修改第一层属性\nemptyObj.total = 0\nconsole.log('emptyObj.total', emptyObj.total)\n// 可以修改第二层对象的属性\nemptyObj.props.age = 13\nconsole.log('emptyObj.props.age', emptyObj.props.age)\n// 无法新建本不存在的属性\nemptyObj.props2 = {}\nconsole.log('emptyObj.props2', emptyObj.props2)\n\n\nlet arr = Object.freeze([])\nlet arr1 = Object.freeze([{ name: 'jack' }])\n// arr.push(1) // 无法添加元素, 会直接报错\narr.length = 3\nconsole.log('arr', arr)\n// 对象内的属性可以修改\narr1[0].name = 'rose'\nconsole.log('arr1[0].name', arr1[0].name) // rose\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"noop-空函数\" tabindex=\"-1\"> NOOP 空函数</h3>\n<p>定义一个空函数，而不是 <code>function () {}</code> 这样定义，是为了方便压缩。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const NOOP = () =&gt; {}\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let obj = function getName (cb =&gt; NOOP) {}\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"no-返回false常量函数\" tabindex=\"-1\"> NO 返回false常量函数</h3>\n<p>永远返回 <code>false</code> 的函数, 就是一个返回 <code>boolean</code> 值的函数的备选项</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const NO = () =&gt; false\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"函数定义\" tabindex=\"-1\"> 函数定义</h2>\n<h3 id=\"totypestring-复杂数据类型区分\" tabindex=\"-1\"> toTypeString  复杂数据类型区分</h3>\n<p><code>toTypeString</code> 主要是返回数据的类型，使用了 <code>Object.prototype.toString.call</code> 的方法，实现了对复杂数据类型的区分</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>const objectToString = Object.prototype.toString;\nconst toTypeString = (value) =&gt; objectToString.call(value);\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let arr = []\nlet obj = {}\nlet map = new Map()\nlet set = new Set()\nconsole.log(toTypeString(obj)) // [object Object]\nconsole.log(toTypeString(arr)) // [object Array]\nconsole.log(toTypeString(map)) // [object Map]\nconsole.log(toTypeString(set)) // [object Set]\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"torawtype-取出数据类型\" tabindex=\"-1\"> toRawType 取出数据类型</h3>\n<p>这里需要注意的是前面的 <code>toTypeString</code> 返回了 <code>[object xxType]</code>，现在则是使用 <code>slice</code> 方法来将 <code>xxType</code> 取出</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const toRawType = (value: unknown): string =&gt; {\n  // extract &quot;RawType&quot; from strings like &quot;[object RawType]&quot;\n  return toTypeString(value).slice(8, -1)\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>const objectToString = Object.prototype.toString\nconst toTypeString = (value) =&gt; objectToString.call(value)\n\nconst toRawType = (value) =&gt; toTypeString(value).slice(8, -1)\n\nconst str = toRawType('')\nconsole.log('str', str) // 'String'\nconst num = toRawType(123)\nconsole.log('num', num) // 'Number'\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"ison-事件名on判断\" tabindex=\"-1\"> isOn 事件名on判断</h3>\n<p>利用正则来判断当前的事件名是否是 <code>on + EventName</code> 的格式</p>\n<p>注意: <code>^</code> 在正则开头表示首位占位符，其他地方都是非的含义，<code>[^a-z]</code> 表示不是 a 到 z 的字母</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>const onRE = /^on[^a-z]/\nexport const isOn = (key: string) =&gt; onRE.test(key)\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h3 id=\"ismodellistener-事件名onupdate判断\" tabindex=\"-1\"> isModelListener 事件名onUpdate判断</h3>\n<p>检验监听事件名是否是<code>onUpdate:</code>开头</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isModelListener = (key: string) =&gt; key.startsWith('onUpdate:')\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><blockquote>\n<p><code>startsWith</code> 是 <code>es6</code> 当中的方法，可以获取一个字符串是否以指定的子字符串开头，返回Boolean类型</p>\n</blockquote>\n<ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>console.log(isModeListener('onUpdate:change'))\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"extend-合并对象\" tabindex=\"-1\"> extend 合并对象</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>const extend = Object.assign\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let obj1 = {name: 'jack'}\nlet obj2 = {name: 'rose', age: 18}\n\nlet obj = extend(obj1, obj2)\nconsole.log('obj', obj) // { name: 'rose', age: 18 }\n// 注意, 原本的obj1也会被改变\nconsole.log('obj1', obj1) // { name: 'rose', age: 18 }\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"remove-删除数组元素\" tabindex=\"-1\"> remove 删除数组元素</h3>\n<p>删除数组中的某个元素，但是使用splice方法，其实是比较消耗性能的。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const remove = &lt;T&gt;(arr: T[], el: T) =&gt; {\n  const i = arr.indexOf(el)\n  if (i &gt; -1) {\n    arr.splice(i, 1)\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let arr = [1, 2, 3]\nremove(arr, 2) // [ 1, 3 ] 'arr数据'\nconsole.log(arr, 'arr数据')\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>axios源码中 <code>lib/core/interceptorManager.js</code> , 使用以下的方式删除数组中的元素:</p>\n<div><pre><code>InterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n// 第46行\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></div>\n<h3 id=\"hasown-是否包含属性\" tabindex=\"-1\"> hasOwn 是否包含属性</h3>\n<p>判断一个属性是否是一个对象本身的属性，利用了 <code>Object.prototype.hasOwnProperty.call</code> 的形式来实现功能</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>const hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Vue3 的写法\n */\nexport const hasOwn = (\n  val: object,\n  key: string | symbol\n): key is keyof typeof val =&gt; hasOwnProperty.call(val, key)\n\n/**\n * Vue3.2 的写法\n */\nexport const hasOwn = (\n  val: object,\n  key: string | symbol\n): key is never =&gt; hasOwnProperty.call(val, key)\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<ul>\n<li><code>is</code> 关键字：它被称为类型谓词，用来判断一个变量属于某个接口或类型，比如：</li>\n</ul>\n<div><pre><code>const isNumber = (val: unknown): val is number =&gt; typeof val === 'number'\nconst isString = (val: unknown): val is string =&gt; typeof val === 'string'\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><ul>\n<li><code>keyof</code> 关键字：用于获取某种类型的所有键，其返回类型是联合类型，比如：</li>\n</ul>\n<div><pre><code>interface Person {\n    name: string;\n    age: number;\n}\ntype K = keyof Person; // &quot;name&quot; | &quot;age&quot;\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li><code>typeof</code> 关键字：js 中的 typeof 只能获取几种类型，而在 ts 中 typeof 用来获取一个变量声明或对象的类型，比如：</li>\n</ul>\n<div><pre><code>interface Person {\n  name: string;\n  age: number;\n}\n \nconst sem: Person = { name: 'semlinker', age: 30 };\ntype Sem = typeof sem; // -&gt; Person\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></div>\n<h3 id=\"isarray-是否数组\" tabindex=\"-1\"> isArray 是否数组</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isArray = (arg: any) : arg is any[] =&gt; Array.isArray(arg);\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>const fakeArray = { __proto__: Array.prototype, length: 0 }\n\nconsole.log('isArray(fakeArray)', isArray(fakeArray)) // false\nconsole.log('fakeArray instanceof Array', fakeArray instanceof Array) // true\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h3 id=\"ismap-isset-是否map-set\" tabindex=\"-1\"> isMap/isSet 是否Map/Set</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isMap = (val: unknown): val is Map&lt;any, any&gt; =&gt; toTypeString(val) === '[object Map]'\nexport const isSet = (val: unknown): val is Set&lt;any&gt; =&gt; toTypeString(val) === '[object Set]'\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h4 id=\"map\" tabindex=\"-1\"> Map</h4>\n<p>Map 是一种 <code>es6</code> 提供的新的一种键值对数据结构的数据类型，相比于对象，它的键不同于对象那种只能是字符串的键，可以是各种类型。</p>\n<ul>\n<li>基础方法</li>\n</ul>\n<blockquote>\n<p><code>get</code> 获取元素，\n<code>set</code> 新增元素成员，\n<code>has</code> 是否包含某元素，\n<code>delete</code> 删除元素成员，\n<code>clear</code> 清空所有元素，\n<code>Array.from</code> 转为普通的二维数组</p>\n</blockquote>\n<div><pre><code>// 1. 定义一个函数作为键\nlet fn = function func() { console.log('this is function') }\nlet m = new Map([['jack', 100], [fn, '我是函数的值']]) // 形式上, Map类型是二维数组\n\n// 2. get方法获取元素\nlet result = m.get(fn)\nconsole.log('func -&gt; result', result)\n// func -&gt; result 我是函数的值\n\n// 3. 通过Array.from可以转为普通的二维数组\nlet arr = Array.from(m)\nconsole.log('func -&gt; arr', arr)\n// func -&gt; arr [ [ 'jack', 100 ], [ [Function: func], '我是函数的值' ] ]\n\n// 4. set方法新增元素成员\nlet obj = { name: 'jack' }\nm.set(obj, '28岁了都')\nconsole.log('set新元素之后', m)\n// set新元素之后 Map {\n// 'jack' =&gt; 100,\n//  [Function: func] =&gt; '我是函数的值',\n//  { name: 'jack' } =&gt; '28岁了都' }\n\n// 5. has 判断是否包含某元素\nm.has(fn)\nconsole.log('func -&gt; m.has(fn)', m.has(fn)) // true\n\n// 6. delete删除元素成员\nm.delete(obj)\nconsole.log('删除后的结果', Array.from(m))\n// 删除后的结果 [ [ 'jack', 100 ], [ [Function: func], '我是函数的值' ] ]\n\n// 7. clear清空所有元素\nm.clear()\nconsole.log('清空后的结果', m)\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>遍历相关的方法</li>\n</ul>\n<blockquote>\n<p><code>keys</code> 返回包含映射中 <strong>键</strong> 的迭代器对象，<code>entries</code> 返回包含映射中的 <strong>键值</strong> 的迭代器对象，<code>values</code> 返回包含映射中的 <strong>值</strong> 的迭代器对象，<code>forEach</code></p>\n</blockquote>\n<div><pre><code>let fn = function func() { console.log('this is function') }\nlet m = new Map([['jack', 100], [fn, '我是函数的值']])\nm.forEach(item =&gt; {\n  console.log('forEach -&gt; item', item)\n})\n/**\n * forEach -&gt; item 100\n * forEach -&gt; item 我是函数的值\n */\n\n\n// 1. keys 方法, 返回包含映射中键的迭代器对象\nlet it = m.keys()\nconsole.log('it', it) // it [Map Iterator] { 'jack', [Function: func] }\nconsole.log(it.next().value) // jack\nconsole.log(it.next().value) // [Function: func]\nconsole.log(it.next().value) // undefined\n// 或者\nfor (let key of it) {\n  console.log('for...of... -&gt; key', key)\n}\n/**\n * \n  for...of... -&gt; key jack\n  for...of... -&gt; key function func() {\n    console.log('this is function');\n  }\n */\n\n// 2. entries 方法, 返回包含映射中的键值的迭代器对象\nlet it = m.entries()\nconsole.log(it.next().value) // [ 'jack', 100 ]\nconsole.log(it.next().value) // [ [Function: func], '我是函数的值' ]\nconsole.log(it.next().value) // undefined\n// 或者\nfor (let item of it) {\n  console.log('for...of... -&gt; entries', item)\n}\n/**\n * for...of... -&gt; entries [ 'jack', 100 ]\n * for...of... -&gt; entries [ [Function: func], '我是函数的值' ]\n */\n\n// 3. values 方法, 返回包含映射中的值的迭代器对象\nlet it = m.values()\nconsole.log(it.next().value) // 100\nconsole.log(it.next().value) // 我是函数的值\nconsole.log(it.next().value) // undefined\n// 或者\nfor (let value of it) {\n\tconsole.log('for...of... -&gt; value', value)\n}\n// /**\n//  * for...of... -&gt; value 100\n//  * for...of... -&gt; value 我是函数的值\n//  */\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>::: theorem Map和Object的区别:</p>\n<ul>\n<li>Map的键可以是<code>任意类型</code>, Object只能是 <code>String</code> 或者 <code>Symbol</code></li>\n<li>Map的可以通过<code>size</code>属性获取元素数量, Object则必须<code>手动计算</code></li>\n<li>Map在频繁<code>增减键值对</code>的场景下, <code>性能较好</code></li>\n<li>Map中的数据是<code>有序</code>的, 而Object则是<code>无序</code>的\n:::</li>\n</ul>\n<h4 id=\"set\" tabindex=\"-1\"> Set</h4>\n<p>Set类型是<code>es6</code>提供的一种新的数据类型，它允许你存入 <code>任意类型</code> 的 <code>唯一值</code> ，无论是 <code>基本数据类型</code> 还是 <code>引用类型</code> ，尽管NaN !== NaN，Set仍然认为这是同一个数据。</p>\n<ul>\n<li>基础方法</li>\n</ul>\n<blockquote>\n<p><code>add</code> 新增元素成员，\n<code>has</code> 是否包含某元素，\n<code>delete</code> 删除元素成员，\n<code>clear</code> 清空所有元素，\n<code>Array.from</code> 转为数组</p>\n</blockquote>\n<div><pre><code>// 1. NaN\nlet set = new Set([NaN, NaN])\n// 尽管NaN !== NaN, 但是, 在Set中仍然被认为是相同的数据\nconsole.log('NaN === NaN', NaN === NaN) // false\nconsole.log('set', set) // Set {NaN}\n\n// 2.add 方法\nlet set = new Set()\nlet person1 = {\n  name: '大明'\n}\nlet person2 = {\n  name: '小明'\n}\nset.add(person1)\nset.add(person2)\nconsole.log('add的结果', set)\n// add的结果 Set { { name: '大明' }, { name: '小明' } }\n\nconsole.log('Array.from', Array.from(set))\n// Array.from [ { name: '大明' }, { name: '小明' } ]\n\n// 3. delete方法\nset.delete(person1)\nconsole.log('delete之后', set) // delete之后 Set { { name: '小明' } }\n\n// 4. has方法\nconsole.log('has person1 --&gt;', set.has(person1))\n// has person1 --&gt; false\nconsole.log('has person2 --&gt;', set.has(person2))\n// has person2 --&gt; true\n\n// 5.清空\nset.clear()\nconsole.log('set clear --&gt;', set) // set clear --&gt; Set {}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>遍历相关的方法</li>\n</ul>\n<blockquote>\n<p>主要有<code>keys</code>，<code>entries</code>，<code>values</code>，<code>forEach</code></p>\n</blockquote>\n<div><pre><code>// 1. keys方法\nlet it = set.keys()\nconsole.log(it.next().value) // { name: '大明' }\nconsole.log(it.next().value) // { name: '小明' }\nconsole.log(it.next().value) // undefined\n// 或者\nfor (let key of it) {\n  console.log('for...of... -&gt; keys', key)\n}\n/**\n * for...of... -&gt; keys { name: '大明' }\n * for...of... -&gt; keys { name: '小明' }\n */\n\n// 2. entries 方法\nlet it = set.entries() // SetIterator {{…} =&gt; {…}, {…} =&gt; {…}}\nfor (let key of it) {\n  console.log('for...of... -&gt; entries', key)\n}\n/**\n * for...of... -&gt; entries [ { name: '大明' }, { name: '大明' } ]\n * for...of... -&gt; entries [ { name: '小明' }, { name: '小明' } ]\n */\n\n// 3. values\nlet it = set.values() // SetIterator {{…}, {…}}\nconsole.log(it.next().value) // { name: '大明' }\nconsole.log(it.next().value) // { name: '小明' }\nconsole.log(it.next().value) // undefined\n// 或者\nfor (let key of it) {\n  console.log('for...of... -&gt; values', key)\n}\n/**\n * for...of... -&gt; values { name: '大明' }\n * for...of... -&gt; values { name: '小明' }\n */\n\n// 4. forEach\nset.forEach(item =&gt; {\n  console.log('item', item)\n})\n/**\n * item { name: '大明' }\n * item { name: '小明' }\n */\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"isdate-是否时间\" tabindex=\"-1\"> isDate 是否时间</h3>\n<ul>\n<li>源码实现 <i>Content not supported</i></li>\n</ul>\n<div><pre><code>export const isDate = (val: unknown): val is Date =&gt; val instanceof Date\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>这么做有一定的漏洞，但一般还是可以判断</p>\n<div><pre><code>const isDate = (val) =&gt; val instanceof Date\nlet date = new Date()\nlet result = isDate({ __proto__: Date.prototype, length: 0 })\nconsole.log('result', result) // result true\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h3 id=\"isfunction-是否函数\" tabindex=\"-1\"> isFunction 是否函数</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isFunction = (val: unknown): val is Function =&gt; typeof val === 'function'\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"isobject-是否对象\" tabindex=\"-1\"> isObject 是否对象</h3>\n<ul>\n<li>注意事项</li>\n</ul>\n<blockquote>\n<p><code>typeof null === 'object'</code>，所以必须确保val不为null。</p>\n<p><code>Record</code>是 <code>typescript</code> 中的一种工具类型，它的作用是限制一个对象的键值类型，其两个泛型参数就是一个限制键类型，一个限制值类型。</p>\n</blockquote>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isObject = (val: unknown): val is Record&lt;any, any&gt; =&gt; val !== null &amp;&amp; typeof val === 'object'\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><div>\n<p>Tips</p>\n<div><pre><code>// 第1469行代码\ntype Record&lt;K extends keyof any, T&gt; = {\n    [P in K]: T;\n};\n// 从这里我们可以看出, 键的类型只能从K(第一个泛型参数中得到), 而值的类型只能是T\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>Record使用案例:</p>\n<div><pre><code>type Animal = 'dog' | 'cat' | 'pig'\n\ninterface Info {\n  name: string;\n  age: number\n}\n\ntype AnimalInfo = Record&lt;Animal, Info&gt;\n\n// animalInfo的键, 只能是dog, cat, pig中的一个\nconst animalInfo: AnimalInfo = {\n  dog: {\n    name: '阿旺',\n    age: 2\n  },\n  cat: {\n    name: '阿花',\n    age: 1\n  },\n  pig: {\n    name: '二师兄',\n    age: 3\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></div>\n<h3 id=\"isplainobject-是否纯粹对象\" tabindex=\"-1\"> isPlainObject 是否纯粹对象</h3>\n<p>该方法作用是，判断一个对象<code>是否是纯粹的对象</code>，前面一个isObject方法，<code>isObject([])是true</code>，<code>isObject({})也是true</code>，而此处的isPlainObject则仅限于真正的Object。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isPlainObject = (val: unknown): val is object =&gt; toTypeString(val) === '[object Object]'\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"ispromise-是否promise\" tabindex=\"-1\"> isPromise 是否Promise</h3>\n<p>判断是否是promise对象，这里要注意的是Promise的类型，typescript 中 <code>Promise&lt;T&gt;</code> 类型，接受一个<code>泛型参数T</code>，用以确定这个promise对象最终<code>resolve的值的类型</code>。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isPromise = &lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; =&gt; isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch)\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><div>\n<p>Tips</p>\n<p>我们如何控制声明Promise返回值的类型:</p>\n<ul>\n<li>使用这里的泛型方式声明</li>\n</ul>\n<div><pre><code>let promiseString:Promise&lt;string&gt; = new Promise(resolve =&gt; resolve('123'))\nlet promiseNumber:Promise&lt;number&gt; = new Promise(resolve =&gt; resolve('123'))\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><ul>\n<li>单独声明resolve方法</li>\n</ul>\n<div><pre><code>let promiseString = new Promise((resolve: (params: string) =&gt; void, reject) =&gt; resolve('123'))\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></div>\n<h3 id=\"isintegerkey-是否数字型的字符串\" tabindex=\"-1\"> isIntegerKey 是否数字型的字符串</h3>\n<p>主要是用于判断是否是数字型的字符串，形如: '123'，'888' 则为true，'123hello'则为false。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const isString = (val: unknown): val is string =&gt; typeof val === 'string'\nexport const isIntegerKey = (key: unknown) =&gt;\n  isString(key) &amp;&amp;\n  key !== 'NaN' &amp;&amp;\n  key[0] !== '-' &amp;&amp;\n  '' + parseInt(key, 10) === key\nisIntegerKey('888hello') // false\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>parseInt 的第一个参数大家都很熟悉，就是要被转换的字符串，但是第二个出现的概率可能相对偏低，第二个表示的就是<code>进制</code>，一般<code>默认是10</code>，也就是十进制！\n这里指明进制数是为了保证在不同的环境下运行结果能保证一致！</p>\n<div><pre><code>// 以二进制的方式解析'010'\nconst result = parseInt('010', 2)\nconsole.log('result', result) // 2\n// 我们都知道，如果 '010'是二进制，那么，转为10进制，就是使用: 0*2^0 + 1*2^1 + 0*2^2 结果自然就是2，同理我们可以知道用三进制来解析：\nconst result = parseInt('010', 3) // 结果自然就是3\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><i>Content not supported</i><p>第二个参数的取值最大能达到多少？</p>\n<i>Content not supported</i> <p>我们知道，十进制最大的数也就是9，那么如果我要解析十进制以上的数字呢？\n最常见的就是十六进制。不错，我们会用字母代替！也就是a-z，共26个字母，那么我们大胆猜测下，最大取值，是不是就是36？</p>\n<div><pre><code>const result = parseInt('010', 36)\nconsole.log('result', result) // 36\n// 那再往上加一呢:\nconst result = parseInt('010', 37)\nconsole.log('result', result) // NaN\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>由此我们得知, parseInt最多只能取到36!</p>\n</div>\n<h3 id=\"makemap-构造带逗号的字符串校验字符函数\" tabindex=\"-1\"> makeMap 构造带逗号的字符串校验字符函数</h3>\n<p>该方法主要是接收一个<code>带逗号的字符串</code>，将该字符串以<code>逗号拆分</code>为一个个子字符串，再用这些子字符串作为一个对象的<code>键</code>，<code>值全部为true</code>；返回一个方法，这个方法可以检测出这个方法接收的参数是否是对象中的键。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export function makeMap(\n  str: string,\n  expectsLowerCase?: boolean\n): (key: string) =&gt; boolean {\n  const map: Record&lt;string, boolean&gt; = Object.create(null)\n  const list: Array&lt;string&gt; = str.split(',')\n  for (let i = 0; i &lt; list.length; i++) {\n    map[list[i]] = true\n  }\n  return expectsLowerCase ? val =&gt; !!map[val.toLowerCase()] : val =&gt; !!map[val]\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>难点解析</li>\n</ul>\n<p>类型上来看，其实就是一个这样的方法：<code>(params1:string, params2?:boolean) =&gt; (key: string) =&gt; boolean</code>，其返回了一个检测函数，该检测函数接受一个字符串，返回是该字符串是否存在！</p>\n<ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>const fn = makeMap('dog,cat,bird')\nconst result1 = fn('fish')\nconsole.log(result1) // false, 不存在fish\nconst result2 = fn('dog')\nconsole.log(result2) // true, 存在dog\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<i>Content not supported</i> <p>创建对象为何要用 <code>Object.create(null)</code> 而不是直接使用 <code>const map = {}</code></p>\n<i>Content not supported</i><p><code>Object.create(proto, [propertiesObject])</code>，返回一个新的对象。第一个参数<code>proto</code>，将会被挂在到<code>新对象的原型对象</code>上。\n第二个参数<code>propertiesObject</code>，对应了<code>Object.defineProperties</code>的第二个参数，也就是所谓的属性描述符:</p>\n<ul>\n<li>value 属性的值</li>\n<li>writable 是否可以写，默认为true</li>\n<li>enumerable  属性是否可枚举, 所谓可枚举，就是能够被以下方法访问到</li>\n<li>for...in 能将该属性遍历出来</li>\n<li>Object.keys 能将该属性包含在返回的数组中</li>\n<li>JSON.stringify 能够将其变为JSON字符串的一部分</li>\n<li>configurable 默认true，如果为false，则属性无法被改变，无法被删除，无法修改属性描述符</li>\n<li>set 存值函数</li>\n<li>get 取值函数</li>\n</ul>\n<p>我们可以看到，<code>Object.create(null)</code>创建的对象更为纯粹，当方法执行到<code>map[val.toLowerCase()]</code>时，不会受到<code>__proto__</code>的影响。</p>\n</div>\n<h3 id=\"cachestringfunction-缓存结果函数\" tabindex=\"-1\"> cacheStringFunction 缓存结果函数</h3>\n<p>函数<code>返回一个函数</code>，这个函数接收<code>一个字符串</code>参数，如果第一次传入了一个参数，计算结果就会被<code>闭包``缓存</code>起来，下次再遇到相同参数的时候，就不会再走<code>fn方法重新计算</code>了。\n本质上是一个<code>单例模式</code>，利用闭包，保存了之前的计算结果。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>const cacheStringFunction = &lt;T extends (str: string) =&gt; string&gt;(fn: T): T =&gt; {\n  const cache: Record&lt;string, string&gt; = Object.create(null)\n  return ((str: string) =&gt; {\n    const hit = cache[str]\n    return hit || (cache[str] = fn(str))\n  }) as any\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let fn1 = cacheStringFunction((key) =&gt; {\n  console.log('通过了计算得到', key + 'world')\n  return key + 'world'\n})\nconsole.log(fn1('hello'))\nconsole.log(fn1('hello'))\nconsole.log(fn1('goodbye'))\n/**\n * \n * 通过了计算得到 helloworld\n * helloworld\n * helloworld\n * 通过了计算得到 goodbyeworld\n * goodbyeworld\n */\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<i>Content not supported</i><p>为何返回的函数要被<code>as any</code>？去掉会如何？</p>\n<i>Content not supported</i> <p><code>(str:string) =&gt; string</code> 是符合 <code>T</code> 的类型要求，但是，<code>T</code>也可以是另一种形式的<code>子类</code>，也就无法保证和参数的类型完全一致。举个例子，假如以下函数不报错：</p>\n<div><pre><code>let testGenerics = &lt;T extends { length: number }&gt;(params: T, minNum: number): T =&gt;{\n  if (params.length &gt;= minNum) {\n    return params\n  } else {\n    return { length: minNum } as T\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>那我们直接运行下</p>\n<div><pre><code>let data = testGenerics([1,2,3], 8)\n// 此时的data,讲道理应该是Array类型\ndata.slice(0,1) // 直接报错, 因为根本就不是数组!\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div></div>\n<h3 id=\"camelize-驼峰转化\" tabindex=\"-1\"> camelize 驼峰转化</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>const camelizeRE = /-(\\w)/g\nexport const camelize = cacheStringFunction((str: string): string =&gt; {\n  return str.replace(camelizeRE, (_, c) =&gt; (c ? c.toUpperCase() : ''))\n})\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let str = 'on-handle-click'\nconst result = camelize(str)\nconsole.log('result', result) // result onHandleClick\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>关于replace的使用: <code>replace(regexp|substr, newSubStr|function)</code></p>\n<blockquote>\n<p>第一个参数既可以是<code>字符串</code>，也可以是<code>正则</code>，总之就是需要<code>被替换的字符串的文本模式</code>。</p>\n<p>第二个参数，它既可以是用于<code>替换掉</code>第一个参数在原字符串中的匹配部分的<code>字符串</code>（该字符串中可以内插一些<code>特殊的变量名</code>），也可以是一个用来创建新子字符串的<code>函数</code>，该函数的返回值将替换掉第一个参数匹配到的结果。</p>\n</blockquote>\n<ul>\n<li>正则替换表达式</li>\n</ul>\n<blockquote>\n<p>$&amp; 用于无分组的情况</p>\n</blockquote>\n<div><pre><code>let str = '史记真是史家之绝唱,无韵之离骚'\nlet result = str.replace('史记', '《$&amp;》') // 这里的$&amp;就是`史记`二字, 也就是用《史记》代替史记\nconsole.log(result) // 《史记》真是史家之绝唱,无韵之离骚\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><blockquote>\n<p>$` 匹配到的数据的左边字符串</p>\n</blockquote>\n<div><pre><code>let str = '研究一下replace该怎么用'\nlet result = str.replace('replace', ',$`前端技术') // 这里的 $` === 研究一下，也就是用 ',研究一下前端技术' 代替 'replace' \nconsole.log(result) // 研究一下,研究一下前端技术该怎么用\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><blockquote>\n<p>$' 和 $` 相反，代表匹配到的数据的右边字符串</p>\n</blockquote>\n<div><pre><code>let str = '研究一下replace该怎么用'\nlet result = str.replace('replace', &quot;,vue3$',&quot;) // 此处的 $' === 该怎么用，也就是用 ',vue3该怎么用,' 代替 'replace'\nconsole.log(result) // 研究一下,vue3该怎么用,该怎么用\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><blockquote>\n<p>$1,$2,<span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span>3</span><span>,</span><span style=\"margin-right:0.1667em;\"></span><span>.....</span></span></span></span>n，表示第几个分组</p>\n</blockquote>\n<div><pre><code>let str = '西瓜,番薯,大番薯,咸鱼,萝卜,苹果'\nlet result = str.replace(/(西瓜)(.*)(苹果)/, &quot;$1(水果)$2$3(水果)&quot;)\n/**\n * $1 === 西瓜\n * $2 === ,番薯,大番薯,咸鱼,萝卜,\n * $3 === 苹果\n */\nconsole.log('result', result) // 西瓜(水果),番薯,大番薯,咸鱼,萝卜,苹果(水果)\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>函数</li>\n</ul>\n<div><pre><code>let str = '今年是2022年,时间好快'\nlet result = str.replace(/(今年).+?(时间).*/g, function () {\n  console.log(arguments)\n  /**\n   * 0: &quot;今年是2022年,时间好快&quot;\n   * 1: &quot;今年&quot;\n   * 2: &quot;时间&quot;\n   * 3: 0\n   * 4: &quot;今年是2022年,时间好快&quot;\n   */\n})\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以得出结论，那就是<code>有分组</code>的情况下，第二个参数开始就是<code>依次展示</code>每次分组<code>匹配到的内容</code>。\n所以，我们回到源码中，此处的<code>c</code>，实际上就是前面说的每次匹配到的<code>第一个分组</code>，本案例中依次为：h, c两个，然后将其改为大写，直接return，就能将<code>-x</code>替换为<code>X</code>，从而实现我们的目标。</p>\n<div><pre><code>let str = 'on-handle-click'\nlet result = str.replace(/-(\\w)/g, function () {\n  console.log(arguments)\n  // { '0': '-h', '1': 'h', '2': 2, '3': 'on-handle-click' }\n  // { '0': '-c', '1': 'c', '2': 9, '3': 'on-handle-click' }\n  return str.replace(camelizeRE, (_, c) =&gt; (c ? c.toUpperCase() : ''))\n})\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></div>\n<h3 id=\"haschanged-比较变量相同\" tabindex=\"-1\"> hasChanged 比较变量相同</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>// compare whether a value has changed, accounting for NaN.\nexport const hasChanged = (value: any, oldValue: any): boolean =&gt; !Object.is(value, oldValue)\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>可能有人感到疑问，两个值是否不同还需要封装？多此一举，我直接 <code>a !== b</code> 不就行了？我们来看几个例子：</p>\n<div><pre><code>// +0 和 -0问题\nconsole.log(+0 === -0) // true\nObject.is(+0, -0) // false\n\n// NaN 问题\nconsole.log(NaN === NaN) // false\nObject.is(NaN, NaN) // true\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>由此可以看出，<code>Object.is</code>可以弥补 <code>正负0</code> 和 <code>NaN</code> 比较上存在的问题。MDN网站上还提供了一个<code>polyfill</code>：</p>\n<div><pre><code>Object.is = function () {\n\t // 如果两个值不同(有可能是正负0)\n  if (x === y) {\n    return x !== 0 || 1/x === 1/y\n    /**\n     * 如果x,y分别为+0 和 -0, 那么, 一个将会是Infinity 另一个是-Infinity\n     */\n    // 如果不同, 也可能是NaN\n  } else {\n    // 自己都不等于自己, 那肯定是NaN了\n    return x !== x &amp;&amp; y !==y\n  }\n}\nconsole.log('NaN === NaN --&gt;', Object.is(NaN, NaN))\nconsole.log('+0 === -0 --&gt;', Object.is(+0, -0))\n// NaN === NaN --&gt; true ⠼ : timing npm:load:cleanupLog Completed in 2ms\n// +0 === -0 --&gt; false\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></div>\n<h3 id=\"def-添加不可枚举属性\" tabindex=\"-1\"> def 添加不可枚举属性</h3>\n<p>就是给对象<code>obj</code>，加上一个<code>可以删除</code>，其属性描述符<code>可以改变</code>，且<code>不可枚举的属性key</code>，其值为<code>value</code>。</p>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const def = (obj: object, key: string | symbol, value: any) =&gt; {\n  Object.defineProperty(obj, key, {\n    configurable: true,\n    enumerable: false,\n    value\n  })\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>使用案例</li>\n</ul>\n<div><pre><code>let person = {\n  name: 'human',\n  age: 100\n}\ndef(person, 'gender', 'male')\nconsole.log('person --&gt; ', person) \n/**\n * nodejs 环境下 { name: 'human', age: 100 }\n * chrome 浏览器下 { name: 'human', age: 100, gender: 'male' }\n *  */ \nconsole.log('gender --&gt; ', person.gender) // male\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>测试可枚举性，按照我们之前说的<code>for...in</code>，<code>Object.keys</code>，<code>JSON.stringify</code>三种方法</p>\n<div><pre><code>// for...in\nfor (let key in person) {\n  console.log('key', key)\n  /**\n   * key name\n   * key age\n   */\n}\n\n// JSON.stringify\nconsole.log('JSON.stringify(person)', JSON.stringify(person))\n// {&quot;name&quot;:&quot;human&quot;,&quot;age&quot;:100}\n\n// Object.keys(person)\nconsole.log('Object.keys(person)', Object.keys(person))\n// [ 'name', 'age' ]\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>属性描述符可以细分为<code>数据描述符</code>和<code>存取描述符</code>。注意，configurable 和 enumerable既是数据描述符又是存取描述符。除了这两个属性之外，其他不同的描述符不得共用！</p>\n<p>数据描述符：<code>writable</code> 只有writable为true的时候，该属性才能被改变值。 <code>value</code> 属性的值</p>\n<p>存取描述符： <code>get</code>，<code>set</code></p>\n</div>\n<h3 id=\"tonumber-尝试转换数字\" tabindex=\"-1\"> toNumber 尝试转换数字</h3>\n<ul>\n<li>源码实现</li>\n</ul>\n<div><pre><code>export const toNumber = (val: any): any =&gt; {\n  const n = parseFloat(val)\n  return isNaN(n) ? val : n\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>isNaN一看字面意思就知道: 判断一个值是否为NaN. 但他有一些怪异行为, 例如:</p>\n<div><pre><code>isNaN(undefined) // true\nisNaN('undefined') // true\nisNaN('haha') // true\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>很明显, 这个方法关心的根本不是一个值是否是NaN, 它似乎更关心一个值是否无法被转为数字! 所以, 我们有了Number.isNaN</p>\n<div><pre><code>Number.isNaN(undefined) // false\nNumber.isNaN('undefined') // false\nNumber.isNaN('haha') // false\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>所以, 一定要注意了, <code>isNaN</code>和<code>Number.isNaN</code>不是一回事!</p>\n</div>\n",
      "date_published": "2022-07-11T13:41:55.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE",
        "VUE3"
      ]
    },
    {
      "title": "ES6",
      "url": "https://jin-shaohui.gitee.io/Standard/ES6/",
      "id": "https://jin-shaohui.gitee.io/Standard/ES6/",
      "summary": "ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。\nNode.js 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node.js 默认没有打开的 ES6 实验性语法。\n// Linux &amp; Mac\n$ node --v8-options | grep harmony\n// Windows\n$ node --v8-options | findstr harmony\n",
      "content_html": "<p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。</p>\n<p>Node.js 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node.js 默认没有打开的 ES6 实验性语法。</p>\n<div><pre><code>// Linux <span>&amp;</span> Mac\n$ <span>node</span> --v8-options <span>|</span> <span>grep</span> harmony\n// Windows\n$ <span>node</span> --v8-options <span>|</span> findstr harmony\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div>\n<h2 id=\"babel-转码器\" tabindex=\"-1\"> Babel 转码器</h2>\n<p>在讲ES6特性前，需要知道一下什么是Babel转码器。Babel 是 <strong>一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行</strong> 。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。</p>\n<div><pre><code><span>// 转码前</span>\ninput<span>.</span><span>map</span><span>(</span><span>item</span> <span>=></span> item <span>+</span> <span>1</span><span>)</span>\n<span>// 转码后</span>\ninput<span>.</span><span>map</span><span>(</span><span>function</span> <span>(</span><span>item</span><span>)</span> <span>{</span>\n<span>return</span> item <span>+</span> <span>1</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面的原始代码用了箭头函数，Babel将其转为普通函数，就能在不支持箭头函数的 JavaScript 环境执行了。</p>\n<h3 id=\"安装-babel-core\" tabindex=\"-1\"> 安装 @Babel/core</h3>\n<p>下面的命令在项目目录中，安装 Babel。</p>\n<div><pre><code>$ <span>npm</span> <span>install</span> --save-dev @babel/core\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>Babel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。该文件用来 <strong>设置转码规则和插件</strong> ，基本格式如下：</p>\n<div><pre><code><span>{</span>\n<span>\"presets\"</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>// 转码规则</span>\n<span>\"plugins\"</span><span>:</span> <span>[</span><span>]</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</p>\n<div><pre><code><span># 最新转码规则</span>\n$ <span>npm</span> <span>install</span> --save-dev @babel/preset-env\n<span># react 转码规则</span>\n$ <span>npm</span> <span>install</span> --save-dev @babel/preset-react\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>然后，将这些规则加入.babelrc</p>\n<div><pre><code><span>{</span>\n  <span>\"presets\"</span><span>:</span> <span>[</span>\n    <span>\"@babel/env\"</span><span>,</span>\n    <span>\"@babel/preset-react\"</span>\n  <span>]</span><span>,</span>\n  <span>\"plugins\"</span><span>:</span> <span>[</span><span>]</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"安装-babel-cli\" tabindex=\"-1\"> 安装 @Babel/cli</h3>\n<p>Babel 提供命令行工具@babel/cli，用于命令行转码。它的安装命令如下。</p>\n<div><pre><code>$ <span>npm</span> <span>install</span> --save-dev @babel/cli\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>基本用法如下：</p>\n<div><pre><code><span># 转码结果输出到标准输出</span>\n$ npx babel example.js\n\n<span># 转码结果写入一个文件</span>\n<span># --out-file 或 -o 参数指定输出文件</span>\n$ npx babel example.js --out-file compiled.js\n<span># 或者</span>\n$ npx babel example.js <span>-o</span> compiled.js\n\n<span># 整个目录转码</span>\n<span># --out-dir 或 -d 参数指定输出目录</span>\n$ npx babel src --out-dir lib\n<span># 或者</span>\n$ npx babel src <span>-d</span> lib\n\n<span># -s 参数生成source map文件</span>\n$ npx babel src <span>-d</span> lib <span>-s</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"安装-babel-node\" tabindex=\"-1\"> 安装 @Babel/node</h3>\n<p>@babel/node模块的babel-node命令， <strong>提供一个支持 ES6 的 REPL 环境。它支持 Node 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码</strong> 。</p>\n<p>首先，安装这个模块。</p>\n<div><pre><code>$ <span>npm</span> <span>install</span> --save-dev @babel/node\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>然后，执行babel-node就进入 REPL 环境。</p>\n<div><pre><code>$ npx babel-node\n<span>(</span>x <span>=</span><span>></span> x * <span>2</span><span>)</span><span>(</span><span>1</span><span>)</span>  // <span>2</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>babel-node命令可以直接运行 ES6 脚本。将上面的代码放入脚本文件es6.js，然后直接运行。</p>\n<div><pre><code><span># es6.js 的代码</span>\n<span># console.log((x => x * 2)(1))</span>\n$ npx babel-node es6.js\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"安装-babel-register\" tabindex=\"-1\"> 安装 @babel/register</h3>\n<p>@babel/register模块改写require命令，为它加上一个钩子。此后， <strong>每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用 Babel 进行转码</strong>。</p>\n<div><pre><code>$ <span>npm</span> <span>install</span> --save-dev @babel/register\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>使用时，必须首先加载@babel/register。</p>\n<div><pre><code><span>// index.js</span>\n<span>require</span><span>(</span><span>'@babel/register'</span><span>)</span>\n<span>require</span><span>(</span><span>'./es6.js'</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>然后，就不需要手动对index.js转码了。</p>\n<div><pre><code>$ <span>node</span> index.js\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>需要注意的是，@babel/register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p>\n<h3 id=\"polyfill\" tabindex=\"-1\"> polyfill</h3>\n<p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如 <strong>Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码</strong> 。</p>\n<p>举例来说，ES6 在Array对象上新增了Array.from方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以 <strong>使用core-js和regenerator-runtime(后者提供generator函数的转码)，为当前环境提供一个垫片</strong> 。</p>\n<p>安装命令如下：</p>\n<div><pre><code>$ <span>npm</span> <span>install</span> --save-dev core-js regenerator-runtime\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>然后，在脚本头部，加入如下两行代码：</p>\n<div><pre><code><span>import</span> <span>'core-js'</span>\n<span>import</span> <span>'regenerator-runtime/runtime'</span>\n<span>// 或者</span>\n<span>require</span><span>(</span><span>'core-js'</span><span>)</span>\n<span>require</span><span>(</span><span>'regenerator-runtime/runtime'</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>Babel 默认不转码的 API 非常多，详细清单可以查看babel-plugin-transform-runtime模块的 <strong>definitions.js</strong> 文件。</p>\n<h3 id=\"浏览器环境\" tabindex=\"-1\"> 浏览器环境</h3>\n<p>Babel 也可以用于浏览器环境，使用@babel/standalone模块提供的浏览器版本，将其插入网页。</p>\n<div><pre><code><span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://unpkg.com/@babel/standalone/babel.min.js<span>\"</span></span> <span>/></span></span><span><span>\n<span>&lt;</span>script type<span>=</span><span>\"text/babel\"</span><span>></span>\n<span>// Your ES6 code</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。</p>\n<p>Babel 提供一个REPL 在线编译器，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。</p>\n<h2 id=\"最常用的es6特性\" tabindex=\"-1\"> 最常用的ES6特性</h2>\n<p><strong>let, const, class, extends, super, arrow function, template string, destructuring, default, rest arguments</strong></p>\n<p>这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。</p>\n<h2 id=\"let-const\" tabindex=\"-1\"> let, const</h2>\n<p>实例展示</p>\n<p>这两个的用途与var类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。首先来看下面这个例子：</p>\n<div><pre><code><span>var</span> name <span>=</span> <span>'zach'</span>\n<span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  <span>var</span> name <span>=</span> <span>'obama'</span>\n  console<span>.</span><span>log</span><span>(</span>name<span>)</span>  <span>//obama</span>\n  <span>break</span>\n<span>}</span>\nconsole<span>.</span><span>log</span><span>(</span>name<span>)</span>  <span>//obama</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>使用var 两次输出都是obama，这是因为 <strong>ES5只有全局作用域和函数作用域，没有块级作用域</strong> ，这带来很多不合理的场景。</p>\n<p>第一种场景就是你现在看到的内层变量覆盖外层变量。而 <strong>let则实际上为JavaScript新增了块级作用域</strong> 。用它所声明的变量，只在 <strong>let命令所在的代码块内有效</strong>。</p>\n<div><pre><code><span>let</span> name <span>=</span> <span>'zach'</span>\n<span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  <span>let</span> name <span>=</span> <span>'obama'</span>\n  console<span>.</span><span>log</span><span>(</span>name<span>)</span>  <span>//obama</span>\n  <span>break</span>\n<span>}</span>\nconsole<span>.</span><span>log</span><span>(</span>name<span>)</span>  <span>//zach</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>另外一个var带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：</p>\n<div><pre><code><span>var</span> a <span>=</span> <span>[</span><span>]</span>\n<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n  a<span>[</span>i<span>]</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span>i<span>)</span>\n  <span>}</span>\n<span>}</span>\na<span>[</span><span>6</span><span>]</span><span>(</span><span>)</span> <span>// 10</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。</p>\n<div><pre><code><span>var</span> a <span>=</span> <span>[</span><span>]</span>\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n  a<span>[</span>i<span>]</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span>i<span>)</span>\n  <span>}</span>\n<span>}</span>\na<span>[</span><span>6</span><span>]</span><span>(</span><span>)</span> <span>// 6</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。</p>\n<div><pre><code><span>var</span> clickBoxs <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span>'.clickBox'</span><span>)</span>\n<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> clickBoxs<span>.</span>length<span>;</span> i<span>++</span><span>)</span><span>{</span>\n  clickBoxs<span>[</span>i<span>]</span><span>.</span><span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span>i<span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。</p>\n<div><pre><code><span>function</span> <span>iteratorFactory</span><span>(</span><span>i</span><span>)</span><span>{</span>\n  <span>var</span> <span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>e</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span>i<span>)</span>\n  <span>}</span>\n  <span>return</span> onclick\n<span>}</span>\n<span>var</span> clickBoxs <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span>'.clickBox'</span><span>)</span>\n<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> clickBoxs<span>.</span>length<span>;</span> i<span>++</span><span>)</span><span>{</span>\n  clickBoxs<span>[</span>i<span>]</span><span>.</span>onclick <span>=</span> <span>iteratorFactory</span><span>(</span>i<span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>const也用来声明变量，但是声明的是常量。一旦声明，<strong>常量的值就不能改变</strong>。</p>\n<div><pre><code><span>const</span> <span>PI</span> <span>=</span> Math<span>.</span><span>PI</span>\n<span>PI</span> <span>=</span> <span>23</span> <span>//Module build failed: SyntaxError: /es6/app.js: \"PI\" is read-only</span>\n<span>//Attempt to assign to const or readonly variable </span>\n<span>//Inspection info: Checks that constant or readonly variable is being reassigned</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>当我们尝试去改变用const声明的常量时，浏览器就会报错。const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p>\n<div><pre><code><span>const</span> monent <span>=</span> <span>require</span><span>(</span><span>'moment'</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"概念概述\" tabindex=\"-1\"> 概念概述</h4>\n<ul>\n<li>不存在变量提升</li>\n</ul>\n<p>var命令会发生“变量提升”现象，即 <strong>变量可以在声明之前使用，值为undefined</strong> 。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。为了纠正这种现象， <strong>let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错</strong> 。</p>\n<div><pre><code><span>// var 的情况</span>\nconsole<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// 输出undefined</span>\n<span>var</span> foo <span>=</span> <span>2</span> <span>// 浏览器console不打印错误信息</span>\n\n<span>// let 的情况</span>\nconsole<span>.</span><span>log</span><span>(</span>bar<span>)</span> <span>// 报错ReferenceError</span>\n<span>let</span> bar <span>=</span> <span>2</span> <span>// 浏览器报错信息：Cannot access 'bar' before initialization</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值，所以会输出undefined。变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。</p>\n<ul>\n<li>暂时性死区</li>\n</ul>\n<p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<div><pre><code><span>var</span> tmp <span>=</span> <span>123</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  tmp <span>=</span> <span>'abc'</span> <span>// ReferenceError</span>\n  <span>let</span> tmp\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>\n<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“ <strong>暂时性死区</strong> ”（temporal dead zone，简称 TDZ）。</p>\n<div><pre><code><span>var</span> tmp <span>=</span> <span>'1'</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  <span>// TDZ开始</span>\n  tmp <span>=</span> <span>'abc'</span> <span>// ReferenceError</span>\n  console<span>.</span><span>log</span><span>(</span>tmp<span>)</span> <span>// ReferenceError</span>\n\n  <span>let</span> tmp <span>// TDZ结束</span>\n  console<span>.</span><span>log</span><span>(</span>tmp<span>)</span> <span>// undefined</span>\n\n  tmp <span>=</span> <span>123</span>\n  console<span>.</span><span>log</span><span>(</span>tmp<span>)</span> <span>// 123</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。 <strong>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作</strong> 。</p>\n<div><pre><code>console<span>.</span><span>log</span><span>(</span> <span>typeof</span> x <span>)</span><span>// ReferenceError</span>\n<span>let</span> x <span>=</span> <span>1</span><span>// Cannot access 'x' before initialization</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>上面代码中，变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。</p>\n<p>作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。</p>\n<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>typeof</span> undeclared_variable<span>)</span><span>// undefined</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>上面代码中，undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以， <strong>在没有let之前，typeof运算符是百分之百安全的</strong> ，永远不会报错\n。\n现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。有些“死区”比较隐蔽，不太容易发现。</p>\n<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>x <span>=</span> y<span>,</span> y <span>=</span> <span>2</span></span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>[</span>x<span>,</span> y<span>]</span><span>)</span>\n<span>}</span>\n<span>bar</span><span>(</span><span>)</span> <span>// 控制台报错Cannot access 'y' before initialization</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>上面代码中，调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于“死区”。如果y的默认值是x，就不会报错，因为此时x已经声明了。</p>\n<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>x <span>=</span> <span>2</span><span>,</span> y <span>=</span> x</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>[</span>x<span>,</span> y<span>]</span><span>)</span>\n<span>}</span>\n<span>bar</span><span>(</span><span>)</span> <span>// [2, 2]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>另外，下面的代码也会报错，与var的行为不同。</p>\n<div><pre><code><span>// 不报错</span>\n<span>var</span> x <span>=</span> x\n<span>// 报错</span>\n<span>let</span> x <span>=</span> x\n<span>// Cannot access 'x' before initialization</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码报错，也是因为暂时性死区。使用let声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量x的声明语句还没有执行完成前，就去取x的值，导致报错”x 未定义“。</p>\n<p>ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p>总之， <strong>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong> 。</p>\n<ul>\n<li>不允许重复声明</li>\n</ul>\n<p>let不允许在相同作用域内，重复声明同一个变量。</p>\n<div><pre><code><span>// 报错</span>\n<span>function</span> <span>func</span><span>(</span><span>)</span> <span>{</span>\n  <span>let</span> a <span>=</span> <span>10</span>\n  <span>var</span> a <span>=</span> <span>1</span> <span>// 控制台报错 Identifier 'a' has already been declared</span>\n<span>}</span>\n\n<span>// 报错</span>\n<span>function</span> <span>func</span><span>(</span><span>)</span> <span>{</span>\n  <span>let</span> a <span>=</span> <span>10</span>\n  <span>let</span> a <span>=</span> <span>1</span> <span>// 控制台报错 Identifier 'a' has already been declared</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>因此，不能在函数内部重新声明参数。</p>\n<div><pre><code><span>function</span> <span>func</span><span>(</span><span>arg</span><span>)</span> <span>{</span>\n  <span>let</span> arg <span>// 报错 Identifier 'arg' has already been declared</span>\n<span>}</span>\n<span>func</span><span>(</span><span>)</span>\n\n<span>function</span> <span>func</span><span>(</span><span>arg</span><span>)</span> <span>{</span>\n  <span>{</span>\n    <span>let</span> arg<span>// 不报错</span>\n  <span>}</span>\n<span>}</span>\n<span>func</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>块级作用域</li>\n</ul>\n<p>为什么需要块级作用域？</p>\n<p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景，内层变量可能会覆盖外层变量。</p>\n<div><pre><code><span>var</span> tmp <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span>\n<span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>tmp<span>)</span>\n  <span>if</span> <span>(</span><span>false</span><span>)</span> <span>{</span>\n    <span>var</span> tmp <span>=</span> <span>'hello world'</span>\n  <span>}</span>\n<span>}</span>\n<span>f</span><span>(</span><span>)</span> <span>// undefined</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码的原意是，if代码块的外部使用外层的tmp变量，内部使用内层的tmp变量。但是，函数if执行后，输出结果为undefined，原因在于变量提升，导致内层的tmp变量覆盖了外层的tmp变量。</p>\n<p>第二种场景，用来计数的循环变量泄露为全局变量。</p>\n<div><pre><code><span>var</span> s <span>=</span> <span>'hello'</span>\n\n<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> s<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>s<span>[</span>i<span>]</span><span>)</span>\n<span>}</span>\n\nconsole<span>.</span><span>log</span><span>(</span>i<span>)</span> <span>// 5</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>\n<ul>\n<li>ES6 的块级作用域</li>\n</ul>\n<p>let实际上为 JavaScript 新增了块级作用域。</p>\n<div><pre><code><span>function</span> <span>f1</span><span>(</span><span>)</span> <span>{</span>\n  <span>let</span> n <span>=</span> <span>5</span>\n  <span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n    <span>let</span> n <span>=</span> <span>10</span>\n  <span>}</span>\n  console<span>.</span><span>log</span><span>(</span>n<span>)</span> <span>// 5</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面的函数有两个代码块，都声明了变量n，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用var定义变量n，最后输出的值才是 10。</p>\n<p>ES6 允许块级作用域的任意嵌套。</p>\n<div><pre><code><span>{</span><span>{</span><span>{</span><span>{</span>\n  <span>{</span>\n    <span>const</span> insane <span>=</span> <span>'Hello World'</span>\n  <span>}</span>\n  console<span>.</span><span>log</span><span>(</span>insane<span>)</span> <span>// 报错</span>\n<span>}</span><span>}</span><span>}</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</p>\n<p>内层作用域可以定义外层作用域的同名变量。</p>\n<div><pre><code><span>{</span><span>{</span><span>{</span><span>{</span>\n  <span>let</span> insane <span>=</span> <span>'Hello World'</span>\n  <span>{</span>\n    <span>let</span> insane <span>=</span> <span>'Hello World'</span>\n  <span>}</span>\n<span>}</span><span>}</span><span>}</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。</p>\n<div><pre><code><span>run</span><span>(</span><span>)</span> <span>{</span>\n  <span>// IIFE 写法</span>\n  <span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>var</span> tmp <span>=</span> <span>...</span>\n  \t <span>...</span>\n  <span>}</span><span>(</span><span>)</span><span>)</span>\n\n  <span>// 块级作用域写法</span>\n  <span>{</span>\n    <span>let</span> tmp <span>=</span> <span>...</span>\n  \t <span>...</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>块级作用域与函数声明</li>\n</ul>\n<p>函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。</p>\n<p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<div><pre><code><span>// 情况一</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n\n<span>// 情况二</span>\n<span>try</span> <span>{</span>\n  <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span> <span>catch</span><span>(</span>e<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面两种函数声明，根据 ES5 的规定都是非法的。</p>\n<p>但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。</p>\n<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定， <strong>块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用</strong> 。</p>\n<div><pre><code><span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'I am outside!'</span><span>)</span>\n<span>}</span>\n<span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>false</span><span>)</span> <span>{</span>\n    <span>// 重复声明一次函数f</span>\n    <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>'I am inside!'</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n  <span>f</span><span>(</span><span>)</span>\n<span>}</span><span>(</span><span>)</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码在 ES5 中运行，会得到“I am inside!”，因为在if内声明的函数f会被提升到函数头部，实际运行的代码如下。</p>\n<div><pre><code><span>// ES5 环境</span>\n<span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'I am outside!'</span><span>)</span>\n<span>}</span>\n<span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'I am inside!'</span><span>)</span>\n  <span>}</span>\n  <span>if</span> <span>(</span><span>false</span><span>)</span> <span>{</span>\n  <span>}</span>\n  <span>f</span><span>(</span><span>)</span>\n<span>}</span><span>(</span><span>)</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>ES6 就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于let，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？</p>\n<div><pre><code><span>// 浏览器的 ES6 环境</span>\n<span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'I am outside!'</span><span>)</span>\n<span>}</span>\n<span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>false</span><span>)</span> <span>{</span>\n    <span>// 重复声明一次函数f</span>\n    <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>'I am inside!'</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n  <span>f</span><span>(</span><span>)</span>\n<span>}</span><span>(</span><span>)</span><span>)</span>\n<span>// Uncaught TypeError: f is not a function</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面的代码在 ES6 浏览器中，都会报错。</p>\n<p>原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在附录 B里面规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。</p>\n<ol>\n<li>允许在块级作用域内声明函数。</li>\n<li>函数声明类似于var，即会提升到全局作用域或函数作用域的头部。</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部。</li>\n</ol>\n<p>注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。</p>\n<p>根据这三条规则，浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于var声明的变量。上面的例子实际运行的代码如下。</p>\n<div><pre><code><span>// 浏览器的 ES6 环境</span>\n<span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'I am outside!'</span><span>)</span>\n<span>}</span>\n<span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>var</span> f <span>=</span> <span>undefined</span>\n  <span>if</span> <span>(</span><span>false</span><span>)</span> <span>{</span>\n    <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>'I am inside!'</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n  <span>f</span><span>(</span><span>)</span>\n<span>}</span><span>(</span><span>)</span><span>)</span>\n<span>// Uncaught TypeError: f is not a function</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p>\n<div><pre><code><span>// 块级作用域内部的函数声明语句，建议不要使用</span>\n<span>{</span>\n  <span>let</span> a <span>=</span> <span>'secret'</span>\n  <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> a\n  <span>}</span>\n<span>}</span>\n\n<span>// 块级作用域内部，优先使用函数表达式</span>\n<span>{</span>\n  <span>let</span> a <span>=</span> <span>'secret'</span>\n  <span>let</span> <span>f</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>return</span> a\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>另外，还有一个需要注意的地方。ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<div><pre><code><span>// 第一种写法，报错</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>let</span> x <span>=</span> <span>1</span>\n\n<span>// 第二种写法，不报错</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  <span>let</span> x <span>=</span> <span>1</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码中，第一种写法没有大括号，所以不存在块级作用域，而let只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。</p>\n<p>函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。</p>\n<div><pre><code><span>// 不报错</span>\n<span>'use strict'</span><span>;</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n  <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n\n<span>// 报错</span>\n<span>'use strict'</span><span>;</span>\n<span>if</span> <span>(</span><span>true</span><span>)</span>\n  <span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"class-extends-super\" tabindex=\"-1\"> class, extends, super</h2>\n<p>这三个特性涉及了ES5中最令人头疼的几个部分：原型、构造函数，继承...你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？有了ES6我们不再烦恼！</p>\n<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p>\n<div><pre><code><span>class</span> <span>Animal</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>type <span>=</span> <span>'animal'</span>\n  <span>}</span>\n  <span>says</span><span>(</span><span>say</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>type <span>+</span> <span>' says '</span> <span>+</span> say<span>)</span>\n  <span>}</span>\n<span>}</span>\n<span>const</span> animal <span>=</span> <span>new</span> <span>Animal</span><span>(</span><span>)</span>\nanimal<span>.</span><span>says</span><span>(</span><span>'hello'</span><span>)</span> <span>// animal says hello</span>\n\n<span>class</span> <span>Cat</span> <span>extends</span> <span>Animal</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>)</span>\n    <span>this</span><span>.</span>type <span>=</span> <span>'cat'</span>\n  <span>}</span>\n<span>}</span>\n<span>const</span> cat <span>=</span> <span>new</span> <span>Cat</span><span>(</span><span>)</span>\ncat<span>.</span><span>says</span><span>(</span><span>'hello'</span><span>)</span> <span>// cat says hello</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说， <strong>constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的</strong>。</p>\n<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p>\n<p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为 <strong>子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象</strong> 。</p>\n<p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>\n<p>P.S 如果你写react的话，就会发现以上三个东西在最新版React中出现得很多。创建的每个component都是一个继承React.Component的类。详见react文档</p>\n<h2 id=\"arrow-function\" tabindex=\"-1\"> arrow function</h2>\n<p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p>\n<div><pre><code><span>function</span><span>(</span><span>i</span><span>)</span> <span>{</span> <span>return</span> i <span>+</span> <span>1</span><span>;</span> <span>}</span> <span>//ES5</span>\n<span>(</span><span>i</span><span>)</span> <span>=></span> i <span>+</span> <span>1</span> <span>//ES6</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>简直是简单的不像话对吧...</p>\n<p>如果方程比较复杂，则需要用{}把代码包起来：</p>\n<div><pre><code><span>function</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>\n  x<span>++</span><span>;</span>\n  y<span>--</span><span>;</span>\n  <span>return</span> x <span>+</span> y<span>;</span>\n<span>}</span>\n\n<span>(</span><span>x<span>,</span> y</span><span>)</span> <span>=></span><span>{</span>\n  x<span>++</span><span>;</span>\n  y<span>--</span><span>;</span>\n  <span>return</span> x <span>+</span> y\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>除了看上去更简洁以外，arrow function还有一项超级无敌的功能！长期以来，JavaScript语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。例如：</p>\n<div><pre><code><span>class</span> <span>Animal</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>type <span>=</span> <span>'animal'</span>\n  <span>}</span>\n  <span>says</span><span>(</span><span>say</span><span>)</span><span>{</span>\n    <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>type <span>+</span> <span>' says '</span> <span>+</span> say<span>)</span>\n    <span>}</span><span>,</span> <span>1000</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n<span>var</span> animal <span>=</span> <span>new</span> <span>Animal</span><span>(</span><span>)</span>\nanimal<span>.</span><span>says</span><span>(</span><span>'hi'</span><span>)</span>  <span>// undefined says hi</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>运行上面的代码会报错，这是因为setTimeout中的this指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>\n<p>第一种是将this传给self,再用self来指代this</p>\n<div><pre><code><span>says</span><span>(</span><span>say</span><span>)</span><span>{</span>\n  <span>var</span> self <span>=</span> <span>this</span>\n  <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span>self<span>.</span>type <span>+</span> <span>' says '</span> <span>+</span> say<span>)</span>\n  <span>}</span><span>,</span> <span>1000</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>第二种方法是用bind(this),即</p>\n<div><pre><code><span>says</span><span>(</span><span>say</span><span>)</span><span>{</span>\n  <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>type <span>+</span> <span>' says '</span> <span>+</span> say<span>)</span>\n  <span>}</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>,</span> <span>1000</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>但现在我们有了箭头函数，就不需要这么麻烦了：</p>\n<div><pre><code><span>class</span> <span>Animal</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span><span>{</span>\n    <span>this</span><span>.</span>type <span>=</span> <span>'animal'</span>\n  <span>}</span>\n  <span>says</span><span>(</span><span>say</span><span>)</span><span>{</span>\n    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>type <span>+</span> <span>' says '</span> <span>+</span> say<span>)</span>\n    <span>}</span><span>,</span> <span>1000</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n<span>var</span> animal <span>=</span> <span>new</span> <span>Animal</span><span>(</span><span>)</span>\nanimal<span>.</span><span>says</span><span>(</span><span>'hi'</span><span>)</span>  <span>// animal says hi</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>\n<h2 id=\"template-string\" tabindex=\"-1\"> template string</h2>\n<p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。</p>\n<p>大家可以先看下面一段代码：</p>\n<div><pre><code><span>$</span><span>(</span><span>'#result'</span><span>)</span><span>.</span><span>append</span><span>(</span>\n  <span>\"There are &lt;b>\"</span> <span>+</span> model<span>.</span>count <span>+</span> <span>\"&lt;/b> \"</span> <span>+</span>\n  <span>\"items in your basket, \"</span> <span>+</span>\n  <span>\"&lt;em>\"</span> <span>+</span> model<span>.</span>onSale <span>+</span>\n  <span>\"&lt;/em> are on sale!\"</span>\n<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我们要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：</p>\n<div><pre><code><span>$</span><span>(</span><span>'#result'</span><span>)</span><span>.</span><span>append</span><span>(</span>\n  <span><span>`</span><span>\n      There are &lt;b></span><span><span>${</span>model<span>.</span>count<span>}</span></span><span>&lt;/b>\n      items in your basket,&lt;em></span><span><span>${</span>model<span>.</span>onSale<span>}</span></span><span>&lt;/em> are on sale!\n  </span><span>`</span></span>\n<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>用反引号（`）来标识始末，用${}来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p>\n<p>React Router从第1.0.3版开始也使用ES6语法了，比如这个例子：</p>\n<div><pre><code><span><span><span>&lt;</span>Link</span> <span>to</span><span><span>=</span>{`/taco/${taco.name}`}</span><span>></span></span>{taco.name}<span><span><span>&lt;/</span>Link</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"destructuring\" tabindex=\"-1\"> destructuring</h2>\n<p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>看下面的例子：</p>\n<div><pre><code><span>let</span> cat <span>=</span> <span>'ken'</span>\n<span>let</span> dog <span>=</span> <span>'lili'</span>\n<span>let</span> zoo <span>=</span> <span>{</span> <span>cat</span><span>:</span> cat<span>,</span> <span>dog</span><span>:</span> dog <span>}</span>\nconsole<span>.</span><span>log</span><span>(</span>zoo<span>)</span>  <span>//Object {cat: \"ken\", dog: \"lili\"}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>用ES6完全可以像下面这么写：</p>\n<div><pre><code><span>let</span> cat <span>=</span> <span>'ken'</span>\n<span>let</span> dog <span>=</span> <span>'lili'</span>\n<span>let</span> zoo <span>=</span> <span>{</span> cat<span>,</span> dog <span>}</span>\nconsole<span>.</span><span>log</span><span>(</span>zoo<span>)</span>  <span>//Object {cat: \"ken\", dog: \"lili\"}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>反过来可以这么写：</p>\n<div><pre><code><span>let</span> dog <span>=</span> <span>{</span> <span>type</span><span>:</span> <span>'animal'</span><span>,</span> <span>many</span><span>:</span> <span>2</span> <span>}</span>\n<span>let</span> <span>{</span> type<span>,</span> many <span>}</span> <span>=</span> dog\nconsole<span>.</span><span>log</span><span>(</span>type<span>,</span> many<span>)</span>   <span>//animal 2</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h2 id=\"default\" tabindex=\"-1\"> default</h2>\n<p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || 'cat' 来指定默认值。</p>\n<div><pre><code><span>function</span> <span>animal</span><span>(</span><span>type</span><span>)</span><span>{</span>\n  type <span>=</span> type <span>||</span> <span>'cat'</span>\n  console<span>.</span><span>log</span><span>(</span>type<span>)</span>\n<span>}</span>\n<span>animal</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>如果用ES6我们而已直接这么写：</p>\n<div><pre><code><span>function</span> <span>animal</span><span>(</span>type <span>=</span> <span>'cat'</span><span>)</span><span>{</span>\n  console<span>.</span><span>log</span><span>(</span>type<span>)</span>\n<span>}</span>\n<span>animal</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h2 id=\"rest-arguments\" tabindex=\"-1\"> rest arguments</h2>\n<p>rest语法也很简单，直接看例子：</p>\n<div><pre><code><span>function</span> <span>animals</span><span>(</span><span><span>...</span>types</span><span>)</span><span>{</span>\n  console<span>.</span><span>log</span><span>(</span>types<span>)</span>\n<span>}</span>\n<span>animals</span><span>(</span><span>'cat'</span><span>,</span> <span>'dog'</span><span>,</span> <span>'fish'</span><span>)</span> <span>//[\"cat\", \"dog\", \"fish\"]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>而如果不用ES6的话，我们则得使用ES5的arguments。</p>\n<div><pre><code><span>function</span> <span>func1</span><span>(</span><span>a<span>,</span> b<span>,</span> c</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>arguments<span>[</span><span>0</span><span>]</span><span>)</span><span>// expected output: 1</span>\n  console<span>.</span><span>log</span><span>(</span>arguments<span>[</span><span>1</span><span>]</span><span>)</span><span>// expected output: 2</span>\n  console<span>.</span><span>log</span><span>(</span>arguments<span>[</span><span>2</span><span>]</span><span>)</span><span>// expected output: 3</span>\n<span>}</span>\n<span>func1</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"import-export\" tabindex=\"-1\"> import export</h2>\n<p>这两个家伙对应的就是es6自己的module功能。</p>\n<p>之前写的Javascript一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。</p>\n<p>这有可能导致两个问题：一方面js代码变得很臃肿，难以维护另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug。在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。</p>\n<p>如果想了解更多AMD，尤其是require.js，可以参看这个教程：why modules on the web are useful and the mechanisms that can be used on the web today to enable them</p>\n<p>而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p>\n<p>上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码...</p>\n<ul>\n<li>传统的写法</li>\n</ul>\n<p>假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？</p>\n<p><strong>require.js的写法</strong></p>\n<div><pre><code><span>//content.js</span>\n<span>define</span><span>(</span><span>'content.js'</span><span>,</span> <span>function</span><span>(</span><span>)</span><span>{</span>\n  <span>return</span> <span>'A cat'</span><span>;</span>\n<span>}</span><span>)</span>\n\n<span>//index.js</span>\n<span>require</span><span>(</span><span>[</span><span>'./content.js'</span><span>]</span><span>,</span> <span>function</span><span>(</span><span>animal</span><span>)</span><span>{</span>\n  console<span>.</span><span>log</span><span>(</span>animal<span>)</span><span>;</span>   <span>//A cat</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>CommonJS的写法</strong></p>\n<div><pre><code><span>//index.js</span>\n<span>var</span> animal <span>=</span> <span>require</span><span>(</span><span>'./content.js'</span><span>)</span>\n\n<span>//content.js</span>\nmodule<span>.</span>exports <span>=</span> <span>'A cat'</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>ES6的写法</strong></p>\n<div><pre><code><span>//index.js</span>\n<span>import</span> animal <span>from</span> <span>'./content'</span>\n\n<span>//content.js</span>\n<span>export</span> <span>default</span> <span>'A cat'</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>以上我把三者都列出来了，妈妈再也不用担心我写混淆了...</p>\n<p><strong>ES6 module的其他高级用法</strong></p>\n<p><strong>输出输入多个变量</strong></p>\n<div><pre><code><span>//content.js</span>\n<span>export</span> <span>default</span> <span>'A cat'</span>\n<span>export</span> <span>function</span> <span>say</span><span>(</span><span>)</span><span>{</span>\n  <span>return</span> <span>'Hello!'</span>\n<span>}</span>\n<span>export</span> <span>const</span> type <span>=</span> <span>'dog'</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）</p>\n<div><pre><code><span>//index.js</span>\n<span>import</span> <span>{</span> say<span>,</span> type <span>}</span> <span>from</span> <span>'./content'</span>\n<span>let</span> says <span>=</span> <span>say</span><span>(</span><span>)</span>\nconsole<span>.</span><span>log</span><span>(</span><span><span>`</span><span>The </span><span><span>${</span>type<span>}</span></span><span> says </span><span><span>${</span>says<span>}</span></span><span>`</span></span><span>)</span>  <span>//The dog says Hello</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。</p>\n<div><pre><code><span>//index.js</span>\n<span>import</span> animal<span>,</span> <span>{</span> say<span>,</span> type <span>}</span> <span>from</span> <span>'./content'</span>\n<span>let</span> says <span>=</span> <span>say</span><span>(</span><span>)</span>\nconsole<span>.</span><span>log</span><span>(</span><span><span>`</span><span>The </span><span><span>${</span>type<span>}</span></span><span> says </span><span><span>${</span>says<span>}</span></span><span> to </span><span><span>${</span>animal<span>}</span></span><span>`</span></span><span>)</span>\n<span>//The dog says Hello to A cat</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>修改变量名</strong></p>\n<p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。</p>\n<div><pre><code><span>//index.js</span>\n<span>import</span> animal<span>,</span> <span>{</span> say<span>,</span> type <span>as</span> animalType <span>}</span> <span>from</span> <span>'./content'</span>\n<span>let</span> says <span>=</span> <span>say</span><span>(</span><span>)</span>\nconsole<span>.</span><span>log</span><span>(</span><span><span>`</span><span>The </span><span><span>${</span>animalType<span>}</span></span><span> says </span><span><span>${</span>says<span>}</span></span><span> to </span><span><span>${</span>animal<span>}</span></span><span>`</span></span><span>)</span>\n<span>//The dog says Hello to A cat</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>模块的整体加载</strong></p>\n<p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<div><pre><code><span>//index.js</span>\n<span>import</span> animal<span>,</span> <span>*</span> <span>as</span> content <span>from</span> <span>'./content'</span>\n<span>let</span> says <span>=</span> content<span>.</span><span>say</span><span>(</span><span>)</span>\nconsole<span>.</span><span>log</span><span>(</span><span><span>`</span><span>The </span><span><span>${</span>content<span>.</span>type<span>}</span></span><span> says </span><span><span>${</span>says<span>}</span></span><span> to </span><span><span>${</span>animal<span>}</span></span><span>`</span></span><span>)</span>\n<span>//The dog says Hello to A cat</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>通常星号*结合as一起使用比较合适。</p>\n<p><strong>终极秘籍</strong></p>\n<p>考虑下面的场景：上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：</p>\n<div><pre><code><span>import</span> <span>{</span> type <span>}</span> <span>from</span> <span>'./content'</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。</p>\n<p>ES6帮我们实现了！</p>\n<p>不过，目前无论是webpack还是browserify都还不支持这一功能...</p>\n<p>如果你现在就想实现这一功能的话，可以尝试使用rollup.js</p>\n<p>他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。</p>\n<p>看看他们官方的解释吧：</p>\n<blockquote>\n<p>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It's a revolution in how we use libraries in JavaScript, and it's happening right now.</p>\n</blockquote>\n",
      "date_published": "2022-06-01T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "ECMAScript"
      ]
    },
    {
      "title": "Canvas 入门",
      "url": "https://jin-shaohui.gitee.io/Draw/Canvas/",
      "id": "https://jin-shaohui.gitee.io/Draw/Canvas/",
      "content_html": "<h2 id=\"canvas-是什么\" tabindex=\"-1\"> Canvas 是什么？</h2>\n<blockquote>\n<p>Canvas 中文名叫 <code>画布</code>，是 HTML5 <code>新增</code>的一个<code>标签</code>。</p>\n<p>Canvas 允许开发者通过JS在这个标签上绘制各种图案。</p>\n<p>Canvas 拥有多种绘制路径、矩形、圆形、字符以及图片的方法。</p>\n<p>Canvas 在某些情况下可以 <code>代替</code> 图片。</p>\n<p>Canvas 可用于动画、游戏、数据可视化、图片编辑器、实时视频处理等领域。</p>\n</blockquote>\n<h3 id=\"canvas-和-svg-的区别\" tabindex=\"-1\"> Canvas 和 SVG 的区别</h3>\n<table>\n<thead>\n<tr>\n<th>Canvas</th>\n<th>SVG</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用<code>JS</code>动态生成元素（一个HTML元素）</td>\n<td>用<code>XML</code>描述元素（类似HTML元素那样，可用多个元素来描述一个图形）</td>\n</tr>\n<tr>\n<td>位图（受屏幕分辨率影响）</td>\n<td>矢量图（不受屏幕分辨率影响）</td>\n</tr>\n<tr>\n<td>不支持事件</td>\n<td>支持事件</td>\n</tr>\n<tr>\n<td>数据发生变化需要重绘</td>\n<td>不需要重绘</td>\n</tr>\n</tbody>\n</table>\n<p>上面的描述可能有点难懂，可以打开 <code>AntV</code> 旗下的<code>图形编辑引擎</code>做对比。<code>G6</code> 是使用 canvas 开发的，<code>X6</code> 是使用 svg 开发的。</p>\n<div>\n<p>Tips</p>\n<p>如果要展示的<code>数据量比较大</code>，比如一条数据就是一个元素节点，那使用 canvas 会比较合适；如果用户操作的<code>交互比较多</code>，而且对<code>清晰度</code>有要求（矢量图），那么使用 svg 会比较合适。</p>\n</div>\n<h2 id=\"起步-画条直线\" tabindex=\"-1\"> 起步 - 画条直线</h2>\n<ul>\n<li>在 HTML 中创建 canvas 元素</li>\n<li>通过 js 获取 canvas 标签</li>\n<li>从 canvas 标签中获取到绘图工具</li>\n<li>通过绘图工具，在 canvas 标签上绘制图形</li>\n</ul>\n\n<CodeDemo id=\"code-demo-d0b14260\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3C!--%201%E3%80%81%E5%88%9B%E5%BB%BA%20canvas%20%E5%85%83%E7%B4%A0%20--%3E%5Cn%3Ctemplate%3E%5Cn%3Ccanvas%5Cn%20%20id%3D%5C%22canvas_001%5C%22%5Cn%20%20width%3D%5C%22300%5C%22%5Cn%20%20height%3D%5C%22200%5C%22%5Cn%20%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%5Cn%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20%2F%2F%202%E3%80%81%E8%8E%B7%E5%8F%96%20canvas%20%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_001')%5Cn%20%20%20%20%2F%2F%203%E3%80%81%E8%8E%B7%E5%8F%96%20canvas%20%E4%B8%8A%E4%B8%8B%E6%96%87%E7%8E%AF%E5%A2%83%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%204%E3%80%81%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%5Cn%20%20%20%20cxt.moveTo(100%2C%20100)%20%2F%2F%20%E8%B5%B7%E7%82%B9%E5%9D%90%E6%A0%87%20(x%2C%20y)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%20%2F%2F%20%E7%BB%88%E7%82%B9%E5%9D%90%E6%A0%87%20(x%2C%20y)%5Cn%20%20%20%20cxt.stroke()%20%2F%2F%20%E5%B0%86%E8%B5%B7%E7%82%B9%E5%92%8C%E7%BB%88%E7%82%B9%E8%BF%9E%E6%8E%A5%E8%B5%B7%E6%9D%A5%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span>&lt;!-- 1、创建 canvas 元素 --></span>\n<span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span>\n  <span>id</span><span><span>=</span><span>\"</span>canvas_001<span>\"</span></span>\n  <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span>\n  <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span>\n  <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span>\n<span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 2、获取 canvas 对象</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_001'</span><span>)</span>\n    <span>// 3、获取 canvas 上下文环境对象</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 4、绘制图形</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>100</span><span>,</span> <span>100</span><span>)</span> <span>// 起点坐标 (x, y)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span> <span>// 终点坐标 (x, y)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span> <span>// 将起点和终点连接起来</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"默认宽高\" tabindex=\"-1\"> 默认<code>宽高</code></h3>\n<p>canvas 有 <code>默认</code>的 <code>宽度(300px)</code> 和 <code>高度(150px)</code></p>\n<p>如果不在 canvas 上设置宽高，那 canvas 元素的默认宽度是300px，默认高度是150px。</p>\n<h3 id=\"设置-canvas-宽高\" tabindex=\"-1\"> 设置 canvas 宽高</h3>\n<p>canvas 元素提供了 <code>width</code> 和 <code>height</code> 两个属性，可设置它的宽高。</p>\n<p>需要注意的是，这两个属性只需传入数值，不需要传入单位（比如 px 等）。</p>\n<div><pre><code><span><span><span>&lt;</span>canvas</span> <span>width</span><span><span>=</span><span>\"</span>600<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>400<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"不能通过-css-设置画布的宽高\" tabindex=\"-1\"> 不能通过 <code>CSS</code> 设置画布的宽高</h3>\n<p>使用 css 设置 canvas 的宽高，会出现 <code>内容被拉伸</code> 的后果！！！ canvas 的默认宽度是<code>300px</code>，默认高度是<code>150px</code>。</p>\n<p>如果使用 css 修改 canvas 的宽高（比如变成 400px * 400px），那宽度就由 <code>300px 拉伸到 400px</code>，高度由 <code>150px 拉伸到 400px</code>。使用 <code>js</code> 获取 canvas 的宽高，此时返回的是 canvas 的<code>默认值</code>。最后出现的效果如下所示。</p>\n\n<CodeDemo id=\"code-demo-4c4636f8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Cstyle%3E%5Cn%20%20%23canvas_002%20%7B%5Cn%20%20%20%20width%3A%20400px%3B%5Cn%20%20%20%20height%3A%20400px%3B%5Cn%20%20%20%20border%3A%201px%20solid%20%23ccc%3B%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%3Ctemplate%3E%5Cn%3Ccanvas%5Cn%20%20id%3D%5C%22canvas_002%5C%22%5Cn%20%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%5Cn%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20%2F%2F%202%E3%80%81%E8%8E%B7%E5%8F%96%20canvas%20%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_002')%5Cn%20%20%20%20%2F%2F%203%E3%80%81%E8%8E%B7%E5%8F%96%20canvas%20%E4%B8%8A%E4%B8%8B%E6%96%87%E7%8E%AF%E5%A2%83%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%204%E3%80%81%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%5Cn%20%20%20%20cxt.moveTo(100%2C%20100)%20%2F%2F%20%E8%B5%B7%E7%82%B9%E5%9D%90%E6%A0%87%20(x%2C%20y)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%20%2F%2F%20%E7%BB%88%E7%82%B9%E5%9D%90%E6%A0%87%20(x%2C%20y)%5Cn%20%20%20%20cxt.stroke()%20%2F%2F%20%E5%B0%86%E8%B5%B7%E7%82%B9%E5%92%8C%E7%BB%88%E7%82%B9%E8%BF%9E%E6%8E%A5%E8%B5%B7%E6%9D%A5%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>#canvas_002</span> <span>{</span>\n    <span>width</span><span>:</span> 400px<span>;</span>\n    <span>height</span><span>:</span> 400px<span>;</span>\n    <span>border</span><span>:</span> 1px solid #ccc<span>;</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n<span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span>\n  <span>id</span><span><span>=</span><span>\"</span>canvas_002<span>\"</span></span>\n  <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span>\n<span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 2、获取 canvas 对象</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_002'</span><span>)</span>\n    <span>// 3、获取 canvas 上下文环境对象</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 4、绘制图形</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>100</span><span>,</span> <span>100</span><span>)</span> <span>// 起点坐标 (x, y)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span> <span>// 终点坐标 (x, y)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span> <span>// 将起点和终点连接起来</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"线条默认宽度和颜色\" tabindex=\"-1\"> <code>线条</code>默认<code>宽度</code>和<code>颜色</code></h3>\n<p>线条的默认宽度是 <code>1px</code> ，默认颜色是 <code>黑色</code>。</p>\n<p>但由于默认情况下 canvas 会将线条的<code>中心点</code>和<code>像素的底部</code>对齐，所以会导致显示效果是 <code>2px</code> 和<code>非纯黑色</code>问题。</p>\n<ul>\n<li>IE兼容性高</li>\n</ul>\n<p>暂时只有 <code>IE 9</code> 以上才支持 canvas 。</p>\n<p>如需兼容 IE 7 和 8 ，可以使用 <code>ExplorerCanvas</code> 。但即使是使用了 ExplorerCanvas 仍然会有所限制，比如无法使用 <code>fillText()</code> 方法等。</p>\n<h2 id=\"基础图形\" tabindex=\"-1\"> 基础图形</h2>\n<h3 id=\"坐标系\" tabindex=\"-1\"> 坐标系</h3>\n<p>在绘制基础图形之前，需要先搞清楚 Canvas 使用的坐标系。</p>\n<p>Canvas 使用的是 W3C 坐标系 ，也就是遵循我们屏幕、报纸的阅读习惯，<code>从上往下，从左往右</code>。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/canvas/KFC_001.jpg')\" />\n<p>W3C 坐标系 和 数学直角坐标系 的 <code>X轴</code> 是<code>一样的</code>，只是 <code>Y轴</code> 的<code>方向相反</code>。</p>\n<h3 id=\"直线\" tabindex=\"-1\"> 直线</h3>\n<p>最简单的起步方式是画一条直线。这里所说的 <code>直线</code> 是几何学里的 <code>线段</code> 的意思。</p>\n<p>需要用到这3个方法：</p>\n<ul>\n<li>moveTo(x1, y1)：起点坐标 (x, y)</li>\n<li>lineTo(x2, y2)：下一个点的坐标 (x, y)</li>\n<li>stroke()：将所有坐标用一条线连起来</li>\n</ul>\n\n<CodeDemo id=\"code-demo-5bf4775a\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_003%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_003')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%BB%98%E5%88%B6%E7%9B%B4%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(50%2C%20100)%20%2F%2F%20%E8%B5%B7%E7%82%B9%E5%9D%90%E6%A0%87%5Cn%20%20%20%20cxt.lineTo(200%2C%2050)%20%2F%2F%20%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%82%B9%E7%9A%84%E5%9D%90%E6%A0%87%5Cn%20%20%20%20cxt.stroke()%20%2F%2F%20%E5%B0%86%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%9D%90%E6%A0%87%E7%94%A8%E4%B8%80%E6%9D%A1%E7%BA%BF%E8%BF%9E%E6%8E%A5%E8%B5%B7%E6%9D%A5%20%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_003<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_003'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 绘制直线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>100</span><span>)</span> <span>// 起点坐标</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span> <span>// 下一个点的坐标</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span> <span>// 将上面的坐标用一条线连接起来 </span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"多条直线\" tabindex=\"-1\"> 多条直线</h3>\n\n<CodeDemo id=\"code-demo-e5679166\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_004%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_004')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(20%2C%20100)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20cxt.moveTo(20%2C%20120.5)%5Cn%20%20%20%20cxt.lineTo(200%2C%20120.5)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_004<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_004'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>仔细观察一下，为什么两条线的粗细不一样的？</p>\n</div>\n<p>明明使用的方法都是一样的，只是第二条直线的 <code>Y轴</code> 的值是有<code>小数点</code>。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/canvas/KFC_002.jpg')\" />\n<p>线的<code>中心点</code>会和<code>画布像素点</code>的底部对齐，所以会线<code>中间是黑色</code>的，但由于<code>一个像素不能再切割</code>了，所以会有<code>半个像素</code>被<code>染色</code>，就变成了<code>浅灰色</code>。</p>\n<h4 id=\"样式\" tabindex=\"-1\"> 样式</h4>\n<ul>\n<li>lineWidth：线的粗细</li>\n<li>strokeStyle：线的颜色</li>\n<li>lineCap：线帽：默认: butt; 圆形: round; 方形: square</li>\n</ul>\n\n<CodeDemo id=\"code-demo-d3e02838\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_005%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_005')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%BB%98%E5%88%B6%E7%9B%B4%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%2050)%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E7%9B%B4%E7%BA%BF%E7%9A%84%E5%AE%BD%E5%BA%A6%5Cn%20%20%20%20cxt.lineWidth%20%3D%2020%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E7%9B%B4%E7%BA%BF%E7%9A%84%E9%A2%9C%E8%89%B2%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E7%9B%B4%E7%BA%BF%E4%B8%A4%E7%AB%AF%E6%A0%B7%E5%BC%8F%5Cn%20%20%20%20cxt.lineCap%20%3D%20'butt'%20%2F%2F%20%E9%BB%98%E8%AE%A4%3A%20butt%3B%20%E5%9C%86%E5%BD%A2%3A%20round%3B%20%E6%96%B9%E5%BD%A2%3A%20square%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_005<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_005'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 绘制直线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n    <span>// 修改直线的宽度</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>20</span>\n    <span>// 修改直线的颜色</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span>\n    <span>// 修改直线两端样式</span>\n    cxt<span>.</span>lineCap <span>=</span> <span>'butt'</span> <span>// 默认: butt; 圆形: round; 方形: square</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"新开路径\" tabindex=\"-1\"> 新开路径</h4>\n<p>开辟新路径的方法：<code>beginPath()</code></p>\n<p>在绘制<code>多条线段</code>的同时，还要设置线段<code>样式</code>，通常需要<code>开辟新路径</code>，要不然<code>样式</code>之间会<code>相互污染</code>。</p>\n\n<CodeDemo id=\"code-demo-d117e474\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_006%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_006')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(20%2C%20100)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2010%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(20%2C%20120.5)%5Cn%20%20%20%20cxt.lineTo(200%2C%20120.5)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_006<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_006'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 第一条线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>10</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 第二条线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>如果不想相互污染，需要做<code>2件事</code>：</p>\n<ul>\n<li>使用 <code>beginPath()</code> 方法，重新开一个路径</li>\n<li>设置<code>新线段的样式</code>（必须项）</li>\n</ul>\n<p><code>如果上面2步缺了其中1步都会有影响。</code></p>\n<h5 id=\"使用-beginpath-同时-不设置样式\" tabindex=\"-1\"> 使用 beginPath() 同时 不设置样式</h5>\n\n<CodeDemo id=\"code-demo-528dd7bc\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_007%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_007')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(20%2C%20100)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2010%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.beginPath()%20%2F%2F%20%E9%87%8D%E6%96%B0%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20cxt.moveTo(20%2C%20120.5)%5Cn%20%20%20%20cxt.lineTo(200%2C%20120.5)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_007<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_007'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 第一条线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>10</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 第二条线</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span> <span>// 重新开启一个路径</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>第一条线的<code>样式</code>会<code>影响之后的线</code>。</p>\n<p>但如果使用了 <code>beginPath()</code> ，后面的线段不会影响前面的线段。</p>\n<h5 id=\"使用-beginpath-同时-设置样式\" tabindex=\"-1\"> 使用 beginPath() 同时 设置样式</h5>\n\n<CodeDemo id=\"code-demo-34fd2204\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_008%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_008')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(20%2C%20100)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.beginPath()%20%2F%2F%20%E9%87%8D%E6%96%B0%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20cxt.moveTo(20%2C%20120.5)%5Cn%20%20%20%20cxt.lineTo(200%2C%20120.5)%5Cn%20%20%20%20cxt.lineWidth%20%3D%204%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'red'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_008<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_008'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 第一条线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 第二条线</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span> <span>// 重新开启一个路径</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>4</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'red'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"不使用-beginpath-同时-设置样式\" tabindex=\"-1\"> 不使用 beginPath() 同时 设置样式</h5>\n\n<CodeDemo id=\"code-demo-ae32dcd2\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_009%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_009')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(20%2C%20100)%5Cn%20%20%20%20cxt.lineTo(200%2C%20100)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2010%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%9D%A1%E7%BA%BF%5Cn%20%20%20%20cxt.moveTo(20%2C%20120.5)%5Cn%20%20%20%20cxt.lineTo(200%2C%20120.5)%5Cn%20%20%20%20cxt.lineWidth%20%3D%204%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'red'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_009<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_009'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 第一条线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>10</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 第二条线</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>20</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>120.5</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>4</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'red'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"折线\" tabindex=\"-1\"> 折线</h3>\n<p>和 <code>直线</code> 差不多，都是使用 <code>moveTo()</code> 、<code>lineTo()</code> 和 <code>stroke()</code> 方法可以<code>绘制折线</code>。</p>\n\n<CodeDemo id=\"code-demo-5031742f\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_010%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_010')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(50%2C%20200)%5Cn%20%20%20%20cxt.lineTo(100%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%20200)%5Cn%20%20%20%20cxt.lineTo(250%2C%2050)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_010<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_010'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>200</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>100</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>200</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"矩形\" tabindex=\"-1\"> 矩形</h3>\n<p>根据前面的基础，我们可以 使用<code>线段</code>来<code>描绘矩形</code>，但 canvas 也提供了 <code>rect()</code> 等方法可以直接生成矩形。</p>\n<h4 id=\"线段描绘矩形\" tabindex=\"-1\"> 线段描绘矩形</h4>\n\n<CodeDemo id=\"code-demo-c52bcfb0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_011%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_011')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%20120)%5Cn%20%20%20%20cxt.lineTo(50%2C%20120)%5Cn%20%20%20%20cxt.lineTo(50%2C%2050)%20%2F%2F%20%E9%9C%80%E8%A6%81%E9%97%AD%E5%90%88%EF%BC%8C%E5%8F%88%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%20closePath()%20%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E9%97%AD%E5%90%88%EF%BC%8C%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%20closePath()%5Cn%20%20%20%20%2F%2F%20cxt.closePath()%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_011<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_011'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 绘制矩形</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>120</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>50</span><span>,</span> <span>120</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span> <span>// 需要闭合，又或者使用 closePath() 方法进行闭合，推荐使用 closePath()</span>\n    <span>// cxt.closePath()</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"strokerect-描边矩形\" tabindex=\"-1\"> strokeRect() 描边矩形</h4>\n<ul>\n<li>strokeStyle：设置描边的属性（<code>颜色</code>、<code>渐变</code>、<code>图案</code>）</li>\n<li>strokeRect(x, y, width, height)：描边矩形（x和y是矩形<code>左上角起点</code>；<code>width</code> 和 <code>height</code> 是矩形的<code>宽高</code>）</li>\n<li>strokeStyle 必须写在 strokeRect() 前面，不然样式不生效。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-38917fe0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_012%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_012')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20strokeStyle%20%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%2F%2F%20strokeRect(x%2C%20y%2C%20width%2C%20height)%20%E6%96%B9%E6%B3%95%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.strokeRect(50%2C%2050%2C%20200%2C%20100)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_012<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_012'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// strokeStyle 属性</span>\n    <span>// strokeRect(x, y, width, height) 方法</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>strokeRect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"fillrect-填充矩形\" tabindex=\"-1\"> fillRect() 填充矩形</h4>\n<p><code>fillRect()</code> 和 <code>strokeRect()</code> 方法差不多，但 fillRect() 的作用是<code>填充</code>。</p>\n<p>需要注意的是，<code>fillStyle</code> 必须写在 <code>fillRect()</code> <code>之前</code>，不然样式不生效。</p>\n\n<CodeDemo id=\"code-demo-615d3d76\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_013%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_013')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20fillStyle%20%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%2F%2F%20fillRect(x%2C%20y%2C%20width%2C%20height)%20%E6%96%B9%E6%B3%95%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.fillRect(50%2C%2050%2C%20200%2C%20100)%20%2F%2F%20fillRect(x%2C%20y%2C%20width%2C%20height)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_013<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_013'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// fillStyle 属性</span>\n    <span>// fillRect(x, y, width, height) 方法</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>fillRect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span> <span>// fillRect(x, y, width, height)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"strokerect-和-fillrect\" tabindex=\"-1\"> strokeRect() 和 fillRect()</h4>\n<p>会产生<code>描边</code>和<code>填充</code>的效果</p>\n\n<CodeDemo id=\"code-demo-d553ba1e\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_014%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_014')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'red'%5Cn%20%20%20%20cxt.strokeRect(50%2C%2050%2C%20200%2C%20100)%20%2F%2F%20strokeRect(x%2C%20y%2C%20width%2C%20height)%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'yellow'%5Cn%20%20%20%20cxt.fillRect(50%2C%2050%2C%20200%2C%20100)%20%2F%2F%20fillRect(x%2C%20y%2C%20width%2C%20height)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_014<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_014'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'red'</span>\n    cxt<span>.</span><span>strokeRect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span> <span>// strokeRect(x, y, width, height)</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'yellow'</span>\n    cxt<span>.</span><span>fillRect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span> <span>// fillRect(x, y, width, height)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"rect-生成矩形\" tabindex=\"-1\"> rect() 生成矩形</h4>\n<div>\n<p>Tips</p>\n<p><code>rect()</code> 和 <code>fillRect()</code> 、<code>strokeRect()</code> 的用法差不多，唯一的<code>区别</code>是：</p>\n<p>strokeRect() 和 fillRect() 这两个方法调用后会<code>立即绘制</code>；</p>\n<p><code>rect()</code> 方法被调用后，<code>不会立刻绘制矩形</code>，而是需要调用 <code>stroke()</code> 或 <code>fill()</code> 辅助渲染。</p>\n</div>\n\n<CodeDemo id=\"code-demo-03188518\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_015%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_015')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'red'%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.rect(50%2C%2050%2C%20200%2C%20100)%20%2F%2F%20rect(x%2C%20y%2C%20width%2C%20height)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20cxt.fill()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_015<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_015'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'red'</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>rect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span> <span>// rect(x, y, width, height)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>fill</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>等价公式：</p>\n<div><pre><code>cxt.strokeStyle = 'red',\ncxt.rect(50, 50, 200, 100)\ncxt.stroke()\n\n// 等价于\ncxt.strokeStyle = 'red'\ncxt.strokeRect(50, 50, 200, 100)\n\n//----------------//\n\ncxt.fillStyle = 'pink'\ncxt.rect(50, 50, 200, 100)\ncxt.fill()\n// 等价于\ncxt.fillStyle = 'pink'\ncxt.fillRect(50, 50, 200, 100)\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"clearrect-清空矩形\" tabindex=\"-1\"> clearRect() 清空矩形</h4>\n\n<CodeDemo id=\"code-demo-01eb76c8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_016%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_016')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'pink'%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E5%A1%AB%E5%85%85%E9%A2%9C%E8%89%B2%5Cn%20%20%20%20cxt.fillRect(50%2C%2050%2C%20200%2C%20200)%20%2F%2F%20%E5%A1%AB%E5%85%85%E7%9F%A9%E5%BD%A2%5Cn%20%20%20%20cxt.clearRect(60%2C%2060%2C%20180%2C%2090)%20%2F%2F%20%E6%B8%85%E7%A9%BA%E7%9F%A9%E5%BD%A2%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_016<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_016'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'pink'</span> <span>// 设置填充颜色</span>\n    cxt<span>.</span><span>fillRect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>200</span><span>)</span> <span>// 填充矩形</span>\n    cxt<span>.</span><span>clearRect</span><span>(</span><span>60</span><span>,</span> <span>60</span><span>,</span> <span>180</span><span>,</span> <span>90</span><span>)</span> <span>// 清空矩形</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>canvas 画布元素是矩形，所以可以通过下面的代码把整个<code>画布清空</code>掉。</p>\n<p>要清空的区域：从画布<code>左上角</code>开始，直到画布的<code>宽</code>和画布的<code>高</code>为止。</p>\n<div><pre><code>cxt.clearRect(0, 0, cnv.width, cnv.height)\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></div>\n<h3 id=\"多边形\" tabindex=\"-1\"> 多边形</h3>\n<p>Canvas 要画多边形，需要使用 <code>moveTo()</code> 、 <code>lineTo()</code> 和 <code>closePath()</code> 。</p>\n<h3 id=\"三角形\" tabindex=\"-1\"> 三角形</h3>\n<p>虽然三角形是常见图形，但 canvas 并<code>没有</code>提供类似 <code>rect()</code> 的方法来绘制<code>三角形</code>。</p>\n<p>需要确定三角形<code>3个点</code>的<code>坐标位置</code>，然后使用 <code>stroke()</code> 或者 <code>fill()</code> 方法生成三角形。</p>\n\n<CodeDemo id=\"code-demo-5e7d25f6\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_017%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_017')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%20200)%5Cn%20%20%20%20cxt.closePath()%5Cn%20%20%20%20%2F%2F%20cxt.lineTo(50%2C%2050)%20%2F%2F%20%E9%97%AD%E5%90%88%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_017<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_017'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>200</span><span>)</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    <span>// cxt.lineTo(50, 50) // 闭合</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>默认情况下<code>不会自动</code>从最后一个<code>点</code>连接到<code>起点</code>。最后一步需要设置一下 <code>cxt.lineTo(50, 50)</code> ，让它与 <code>cxt.moveTo(50, 50)</code> 一样。这样可以让路径<code>回到起点</code>，形成一个<code>闭合</code>效果。</p>\n<p>但这样做其实是有点问题的，而且也比较麻烦，要记住起始点坐标。</p>\n</div>\n<h4 id=\"linewidth-和-linejoin\" tabindex=\"-1\"> lineWidth 和 lineJoin</h4>\n<p>上面的闭合操作，如果遇到设置了 <code>lineWidth</code> 或者 <code>lineJoin</code> 就会有问题：当线段变粗后，起始点和结束点的链接处，拐角就出现<code>不正常</code>现象。</p>\n<p>如果需要真正闭合，可以使用 <code>closePath()</code> 方法自动将<code>终点</code>和<code>起始点</code>连接起来，此时看上去就正常多了。比如：</p>\n\n<CodeDemo id=\"code-demo-0dfca81d\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_018%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_019%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_020%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_018')%5Cn%20%20%20%20const%20cnv1%20%3D%20document.getElementById('canvas_019')%5Cn%20%20%20%20const%20cnv2%20%3D%20document.getElementById('canvas_020')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20const%20cxt1%20%3D%20cnv1.getContext('2d')%5Cn%20%20%20%20const%20cxt2%20%3D%20cnv2.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%2050)%5Cn%20%20%20%20cxt.lineTo(200%2C%20200)%5Cn%20%20%20%20cxt.lineTo(50%2C%2050)%20%2F%2F%20%E9%97%AD%E5%90%88%5Cn%20%20%20%20cxt.lineWidth%20%3D%2020%5Cn%20%20%20%20cxt.stroke()%5Cn%5Cn%20%20%20%20cxt1.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt1.lineTo(200%2C%2050)%5Cn%20%20%20%20cxt1.lineTo(200%2C%20200)%5Cn%20%20%20%20cxt1.lineTo(50%2C%2050)%20%2F%2F%20%E9%97%AD%E5%90%88%5Cn%20%20%20%20cxt1.lineJoin%20%3D%20'round'%20%2F%2F%20%E7%BA%BF%E6%9D%A1%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%A0%B7%E5%BC%8F%E3%80%82miter%3A%20%E9%BB%98%E8%AE%A4%3B%20bevel%3A%20%E6%96%9C%E9%9D%A2%3B%20round%3A%20%E5%9C%86%E8%A7%92%5Cn%20%20%20%20cxt1.lineWidth%20%3D%2020%5Cn%20%20%20%20cxt1.stroke()%5Cn%5Cn%20%20%20%20cxt2.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt2.lineTo(200%2C%2050)%5Cn%20%20%20%20cxt2.lineTo(200%2C%20200)%5Cn%20%20%20%20cxt2.lineJoin%20%3D%20'round'%20%2F%2F%20%E7%BA%BF%E6%9D%A1%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%A0%B7%E5%BC%8F%E3%80%82miter%3A%20%E9%BB%98%E8%AE%A4%3B%20bevel%3A%20%E6%96%9C%E9%9D%A2%3B%20round%3A%20%E5%9C%86%E8%A7%92%5Cn%20%20%20%20cxt2.lineWidth%20%3D%2020%5Cn%20%20%20%20cxt2.closePath()%5Cn%20%20%20%20cxt2.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_018<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_019<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_020<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_018'</span><span>)</span>\n    <span>const</span> cnv1 <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_019'</span><span>)</span>\n    <span>const</span> cnv2 <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_020'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>const</span> cxt1 <span>=</span> cnv1<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>const</span> cxt2 <span>=</span> cnv2<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>200</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span> <span>// 闭合</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>20</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n\n    cxt1<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt1<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n    cxt1<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>200</span><span>)</span>\n    cxt1<span>.</span><span>lineTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span> <span>// 闭合</span>\n    cxt1<span>.</span>lineJoin <span>=</span> <span>'round'</span> <span>// 线条连接的样式。miter: 默认; bevel: 斜面; round: 圆角</span>\n    cxt1<span>.</span>lineWidth <span>=</span> <span>20</span>\n    cxt1<span>.</span><span>stroke</span><span>(</span><span>)</span>\n\n    cxt2<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt2<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n    cxt2<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>200</span><span>)</span>\n    cxt2<span>.</span>lineJoin <span>=</span> <span>'round'</span> <span>// 线条连接的样式。miter: 默认; bevel: 斜面; round: 圆角</span>\n    cxt2<span>.</span>lineWidth <span>=</span> <span>20</span>\n    cxt2<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    cxt2<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"菱形\" tabindex=\"-1\"> 菱形</h3>\n\n<CodeDemo id=\"code-demo-0bf17e68\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_021%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_021')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(150%2C%2050)%5Cn%20%20%20%20cxt.lineTo(250%2C%20100)%5Cn%20%20%20%20cxt.lineTo(150%2C%20150)%5Cn%20%20%20%20cxt.lineTo(50%2C%20100)%5Cn%20%20%20%20cxt.closePath()%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_021<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_021'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>150</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>150</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>50</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"圆形\" tabindex=\"-1\"> 圆形</h3>\n<p>绘制圆形的方法是 <code>arc(x, y, r, sAngle, eAngle，counterclockwise)</code>。</p>\n<ul>\n<li>x 和 y: <code>圆心</code>坐标</li>\n<li>r: 半径</li>\n<li>sAngle: 开始角度</li>\n<li>eAngle: 结束角度</li>\n<li>counterclockwise: 绘制方向（true: 逆时针; false: 顺时针），默认 <code>false</code></li>\n</ul>\n<p>开始角度和结束角度，都是以<code>弧度</code>为<code>单位</code>。例如 <code>180°</code>就写成 <code>Math.PI</code> ，<code>360°</code>写成 <code>Math.PI * 2</code> ，以此类推。</p>\n<blockquote>\n<p>在实际开发中，为了更容易看懂弧度的<code>数值</code>，<code>1°</code>应该写成 <code>Math.PI / 180</code></p>\n<p>100°: <code>100 * Math.PI / 180</code></p>\n<p>110°: <code>110 * Math.PI / 180</code></p>\n<p>241°: <code>241 * Math.PI / 180</code></p>\n<p>注意：绘制圆形之前，<code>必须</code>先调用 <code>beginPath()</code> 方法！！！在绘制<code>完成</code>之后，还需要调用 <code>closePath()</code> 方法！！！</p>\n</blockquote>\n\n<CodeDemo id=\"code-demo-87d25b12\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_022%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_022')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.arc(150%2C%20150%2C%2080%2C%200%2C%20360%20*%20Math.PI%20%2F%20180)%5Cn%20%20%20%20cxt.closePath()%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20cxt.fill()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_022<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_022'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>arc</span><span>(</span><span>150</span><span>,</span> <span>150</span><span>,</span> <span>80</span><span>,</span> <span>0</span><span>,</span> <span>360</span> <span>*</span> Math<span>.</span><span>PI</span> <span>/</span> <span>180</span><span>)</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>fill</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"半圆\" tabindex=\"-1\"> 半圆</h3>\n<p>如果使用 <code>arc()</code> 方法画圆时，没做到刚好绕完一周（360°）就直接闭合路径，就会出现<code>半圆</code>的状态。</p>\n\n<CodeDemo id=\"code-demo-dc7b5ab0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_023%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_023')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.arc(150%2C%20150%2C%2080%2C%200%2C%20180%20*%20Math.PI%20%2F%20180)%20%2F%2F%20%E9%A1%BA%E6%97%B6%E9%92%88%5Cn%20%20%20%20cxt.closePath()%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_023<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_023'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>arc</span><span>(</span><span>150</span><span>,</span> <span>150</span><span>,</span> <span>80</span><span>,</span> <span>0</span><span>,</span> <span>180</span> <span>*</span> Math<span>.</span><span>PI</span> <span>/</span> <span>180</span><span>)</span> <span>// 顺时针</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>cxt.arc 最后一个参数没传，默认是 <code>false</code> ，所以是<code>顺时针</code>绘制。如果希望半圆的弧面在<code>上方</code>，可以将 cxt.arc 最后一个参数设置成 <code>true</code>。</p>\n\n<CodeDemo id=\"code-demo-aea570c8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_024%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_024')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.arc(150%2C%20150%2C%2080%2C%200%2C%20180%20*%20Math.PI%20%2F%20180%2C%20true)%5Cn%20%20%20%20cxt.closePath()%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_024<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_024'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>arc</span><span>(</span><span>150</span><span>,</span> <span>150</span><span>,</span> <span>80</span><span>,</span> <span>0</span><span>,</span> <span>180</span> <span>*</span> Math<span>.</span><span>PI</span> <span>/</span> <span>180</span><span>,</span> <span>true</span><span>)</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"弧线\" tabindex=\"-1\"> 弧线</h3>\n<p>使用 arc() 方法画半圆时，如果最后<code>不调用closePath()</code>方法，就不会出现闭合路径。也就是说，那是一条<code>弧线</code>。</p>\n<p>在 canvas 中，画弧线有2中方法：<code>arc()</code> 和 <code>arcTo()</code>。</p>\n<h4 id=\"arc\" tabindex=\"-1\"> arc()</h4>\n<p>如果想画一条 <code>0° ~ 30°</code> 的弧线，可以这样写</p>\n\n<CodeDemo id=\"code-demo-4691cbbc\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_025%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_025')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.arc(150%2C%20150%2C%2080%2C%200%2C%2030%20*%20Math.PI%20%2F%20180)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_025<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_025'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>arc</span><span>(</span><span>150</span><span>,</span> <span>150</span><span>,</span> <span>80</span><span>,</span> <span>0</span><span>,</span> <span>30</span> <span>*</span> Math<span>.</span><span>PI</span> <span>/</span> <span>180</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"arcto\" tabindex=\"-1\"> arcTo()</h4>\n<p><code>arcTo(cx, cy, x2, y2, radius)</code></p>\n<ul>\n<li>cx: 两切线交点的横坐标</li>\n<li>cy: 两切线交点的纵坐标</li>\n<li>x2: 结束点的横坐标</li>\n<li>y2: 结束点的纵坐标</li>\n<li>radius: 半径</li>\n</ul>\n<p>其中，<code>(cx, cy)</code> 也叫<code>控制点</code>，<code>(x2, y2)</code> 也叫<code>结束点</code>。</p>\n<div>\n<p>Tips</p>\n<i>Content not supported</i><p>是不是有点奇怪，为什么没有 x1 和 y1 ？</p>\n<i>Content not supported</i> <p><code>(x1, y1)</code> 是<code>开始点</code>，通常是由 <code>moveTo()</code> 或者 <code>lineTo()</code> 提供。</p>\n<p>arcTo() 方法利用 <code>开始点</code>、<code>控制点</code>和<code>结束点</code>形成的<code>夹角</code>，绘制一段与夹角的两边<code>相切</code>并且<code>半径</code>为 <code>radius</code> 的圆弧。</p>\n</div>\n\n<CodeDemo id=\"code-demo-7a1cffc3\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_026%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_026')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(40%2C%2040)%5Cn%20%20%20%20cxt.arcTo(120%2C%2040%2C%20120%2C%20120%2C%2080)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_026<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_026'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>40</span><span>,</span> <span>40</span><span>)</span>\n    cxt<span>.</span><span>arcTo</span><span>(</span><span>120</span><span>,</span> <span>40</span><span>,</span> <span>120</span><span>,</span> <span>120</span><span>,</span> <span>80</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h2 id=\"基础样式\" tabindex=\"-1\"> 基础样式</h2>\n<h3 id=\"stroke-描边\" tabindex=\"-1\"> stroke() 描边</h3>\n<p>前面的案例中，其实已经知道使用 <code>stroke()</code> 方法进行描边了。这里就不再赘述。</p>\n<h3 id=\"linewidth-线条宽度\" tabindex=\"-1\"> lineWidth 线条宽度</h3>\n<p>lineWidth 默认值是 <code>1</code> ，默认单位是 <code>px</code>。</p>\n\n<CodeDemo id=\"code-demo-abfe7480\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_027%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_027')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E7%BA%BF%E5%AE%BD%2010%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(250%2C%2050)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2010%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%BA%BF%E5%AE%BD%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E7%BA%BF%E5%AE%BD%2020%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.moveTo(50%2C%20150)%5Cn%20%20%20%20cxt.lineTo(250%2C%20150)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2020%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%BA%BF%E5%AE%BD%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E7%BA%BF%E5%AE%BD%2030%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.moveTo(50%2C%20250)%5Cn%20%20%20%20cxt.lineTo(250%2C%20250)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2030%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%BA%BF%E5%AE%BD%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_027<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_027'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 线宽 10</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>10</span> <span>// 设置线宽</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 线宽 20</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>20</span> <span>// 设置线宽</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 线宽 30</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>250</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>250</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>30</span> <span>// 设置线宽</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"strokestyle-线条颜色\" tabindex=\"-1\"> strokeStyle 线条颜色</h3>\n\n<CodeDemo id=\"code-demo-5a8b0304\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_028%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_028')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(250%2C%2050)%5Cn%20%20%20%20cxt.lineWidth%20%3D%2020%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_028<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_028'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>20</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span> <span>// 设置颜色</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"linecap-线帽\" tabindex=\"-1\"> lineCap 线帽</h3>\n<p>线帽指的是线段的<code>开始</code>和<code>结尾处</code>的样式，使用 <code>lineCap</code> 可以设置</p>\n<p>属性值包括：</p>\n<ul>\n<li>butt: 默认值，无线帽</li>\n<li>square: 方形线帽</li>\n<li>round: 圆形线帽</li>\n</ul>\n\n<CodeDemo id=\"code-demo-c54e5baa\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_029%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_029')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%BA%BF%E5%AE%BD%EF%BC%8C%E6%96%B9%E4%BE%BF%E6%BC%94%E7%A4%BA%5Cn%20%20%20%20cxt.lineWidth%20%3D%2016%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%E7%BA%BF%E5%B8%BD%20butt%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.moveTo(50%2C%2060)%5Cn%20%20%20%20cxt.lineTo(250%2C%2060)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E6%96%B9%E5%BD%A2%E7%BA%BF%E5%B8%BD%20square%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.lineCap%20%3D%20'square'%5Cn%20%20%20%20cxt.moveTo(50%2C%20150)%5Cn%20%20%20%20cxt.lineTo(250%2C%20150)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E5%9C%86%E5%BD%A2%E7%BA%BF%E5%B8%BD%20round%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.lineCap%20%3D%20'round'%5Cn%20%20%20%20cxt.moveTo(50%2C%20250)%5Cn%20%20%20%20cxt.lineTo(250%2C%20250)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_029<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_029'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>// 设置线宽，方便演示</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>16</span>\n    <span>// 默认线帽 butt</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>60</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>60</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 方形线帽 square</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span>lineCap <span>=</span> <span>'square'</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 圆形线帽 round</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span>lineCap <span>=</span> <span>'round'</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>250</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>250</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>使用 <code>square</code> 和 <code>round</code> 的话，会使线条变得<code>稍微长一点点</code>，这是给线条<code>增加线帽</code>的部分，日常开发中<code>需要注意</code>。</p>\n<p>线帽只对线条的<code>开始</code>和<code>结尾</code>处产生作用，对拐角不会产生任何作用。</p>\n<h3 id=\"linejoin-拐角样式\" tabindex=\"-1\"> lineJoin 拐角样式</h3>\n<p>属性值包括：</p>\n<ul>\n<li>miter: 默认值，尖角</li>\n<li>round: 圆角</li>\n<li>bevel: 斜角</li>\n</ul>\n\n<CodeDemo id=\"code-demo-a22a1118\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_030%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_030')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.lineWidth%20%3D%2020%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%EF%BC%8C%E5%B0%96%E8%A7%92%5Cn%20%20%20%20cxt.moveTo(50%2C%2040)%5Cn%20%20%20%20cxt.lineTo(200%2C%2040)%5Cn%20%20%20%20cxt.lineTo(200%2C%2090)%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E6%96%9C%E8%A7%92%20bevel%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.moveTo(50%2C%20140)%5Cn%20%20%20%20cxt.lineTo(200%2C%20140)%5Cn%20%20%20%20cxt.lineTo(200%2C%20190)%5Cn%20%20%20%20cxt.lineJoin%20%3D%20'bevel'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%20%20%2F%2F%20%E5%9C%86%E8%A7%92%20round%5Cn%20%20%20%20cxt.beginPath()%5Cn%20%20%20%20cxt.moveTo(50%2C%20240)%5Cn%20%20%20%20cxt.lineTo(200%2C%20240)%5Cn%20%20%20%20cxt.lineTo(200%2C%20290)%5Cn%20%20%20%20cxt.lineJoin%20%3D%20'round'%5Cn%20%20%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_030<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_030'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>lineWidth <span>=</span> <span>20</span>\n    <span>// 默认，尖角</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>40</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>40</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>90</span><span>)</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 斜角 bevel</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>140</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>140</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>190</span><span>)</span>\n    cxt<span>.</span>lineJoin <span>=</span> <span>'bevel'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n    <span>// 圆角 round</span>\n    cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>240</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>240</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>290</span><span>)</span>\n    cxt<span>.</span>lineJoin <span>=</span> <span>'round'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"setlinedash-虚线\" tabindex=\"-1\"> setLineDash() 虚线</h3>\n<p>虚线分3种情况:</p>\n<ul>\n<li>只传1个值</li>\n<li>有2个值</li>\n<li>有3个以上的值</li>\n</ul>\n\n<CodeDemo id=\"code-demo-22131e63\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_031%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20const%20cnv%20%3D%20document.getElementById('canvas_031')%5Cn%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20cxt.lineWidth%20%3D%2020%5Cn%20%20cxt.strokeStyle%20%3D%20'pink'%5Cn%5Cn%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20cxt.lineTo(200%2C%2050)%5Cn%20%20cxt.setLineDash(%5B10%5D)%20%2F%2F%20%E5%8F%AA%E4%BC%A01%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E5%AE%9E%E7%BA%BF%E4%B8%8E%E7%A9%BA%E7%99%BD%E9%83%BD%E6%98%AF%2010px%5Cn%5Cn%20%20cxt.stroke()%5Cn%20%20cxt.beginPath()%5Cn%20%20cxt.moveTo(50%2C%20100)%5Cn%20%20cxt.lineTo(200%2C%20100)%5Cn%20%20cxt.setLineDash(%5B10%2C%2020%5D)%20%2F%2F%202%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E6%AD%A4%E6%97%B6%EF%BC%8C%E5%AE%9E%E7%BA%BF%E6%98%AF%2010px%2C%20%E7%A9%BA%E7%99%BD%2020px%5Cn%5Cn%20%20cxt.stroke()%5Cn%20%20cxt.beginPath()%5Cn%20%20cxt.moveTo(50%2C%20150)%5Cn%20%20cxt.lineTo(200%2C%20150)%5Cn%20%20cxt.setLineDash(%5B10%2C%2020%2C%205%5D)%20%2F%2F%20%E4%BC%A03%E4%B8%AA%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E6%AD%A4%E4%BE%8B%EF%BC%9A10px%E5%AE%9E%E7%BA%BF%EF%BC%8C20px%E7%A9%BA%E7%99%BD%EF%BC%8C5px%E5%AE%9E%E7%BA%BF%EF%BC%8C10px%E7%A9%BA%E7%99%BD%EF%BC%8C20px%E5%AE%9E%E7%BA%BF%EF%BC%8C5px%E7%A9%BA%E7%99%BD%20%E2%80%A6%E2%80%A6%5Cn%20%20cxt.stroke()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_031<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n  <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_031'</span><span>)</span>\n  <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n  cxt<span>.</span>lineWidth <span>=</span> <span>20</span>\n  cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span>\n\n  cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n  cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>50</span><span>)</span>\n  cxt<span>.</span><span>setLineDash</span><span>(</span><span>[</span><span>10</span><span>]</span><span>)</span> <span>// 只传1个参数，实线与空白都是 10px</span>\n\n  cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n  cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>100</span><span>)</span>\n  cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n  cxt<span>.</span><span>setLineDash</span><span>(</span><span>[</span><span>10</span><span>,</span> <span>20</span><span>]</span><span>)</span> <span>// 2个参数，此时，实线是 10px, 空白 20px</span>\n\n  cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  cxt<span>.</span><span>beginPath</span><span>(</span><span>)</span>\n  cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>150</span><span>)</span>\n  cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>150</span><span>)</span>\n  cxt<span>.</span><span>setLineDash</span><span>(</span><span>[</span><span>10</span><span>,</span> <span>20</span><span>,</span> <span>5</span><span>]</span><span>)</span> <span>// 传3个以上的参数，此例：10px实线，20px空白，5px实线，10px空白，20px实线，5px空白 ……</span>\n  cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>此外:</p>\n<p><code>cxt.getLineDash()</code> 获取虚线不重复的距离；</p>\n<p><code>cxt.lineDashOffset</code> 设置虚线的偏移位。</p>\n<h3 id=\"fill-填充\" tabindex=\"-1\"> fill 填充</h3>\n\n<CodeDemo id=\"code-demo-09719ec0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_032%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22200%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_032')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.rect(50%2C%2050%2C%20200%2C%20100)%5Cn%20%20%20%20cxt.fill()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_032<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_032'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>rect</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>fill</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>可以使用 fillStyle 设置填充颜色，默认是<code>黑色</code>。</p>\n<h4 id=\"非零环绕填充\" tabindex=\"-1\"> 非零环绕填充</h4>\n<p>在使用 fill() 方法填充时，需要注意一个规则：非零环绕填充。</p>\n<p>在使用 moveTo 和 lineTo 描述图形时，如果是按<code>顺时针绘制</code>，计数器会<code>加1</code>；如果是<code>逆时针</code>，计数器会<code>减1</code>。</p>\n<p>当图形所处的位置，计数器的<code>结果为0</code>时，它就<code>不会</code>被<code>填充</code>。</p>\n\n<CodeDemo id=\"code-demo-2483ed49\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_033%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_033')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%A4%96%E5%B1%82%E7%9F%A9%E5%BD%A2%5Cn%20%20%20%20cxt.moveTo(50%2C%2050)%5Cn%20%20%20%20cxt.lineTo(250%2C%2050)%5Cn%20%20%20%20cxt.lineTo(250%2C%20250)%5Cn%20%20%20%20cxt.lineTo(50%2C%20250)%5Cn%20%20%20%20cxt.closePath()%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%86%85%E5%B1%82%E7%9F%A9%E5%BD%A2%5Cn%20%20%20%20cxt.moveTo(200%2C%20100)%5Cn%20%20%20%20cxt.lineTo(100%2C%20100)%5Cn%20%20%20%20cxt.lineTo(100%2C%20200)%5Cn%20%20%20%20cxt.lineTo(200%2C%20200)%5Cn%20%20%20%20cxt.closePath()%5Cn%20%20%20%20cxt.fill()%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_033<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_033'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n\n    <span>// 外层矩形</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>50</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>50</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>250</span><span>,</span> <span>250</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>50</span><span>,</span> <span>250</span><span>)</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n\n    <span>// 内层矩形</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>200</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>100</span><span>,</span> <span>100</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>100</span><span>,</span> <span>200</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>200</span><span>)</span>\n    cxt<span>.</span><span>closePath</span><span>(</span><span>)</span>\n    cxt<span>.</span><span>fill</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>请看看上面的代码，画了<code>2个矩形</code>，它们都没有用 <code>beginPath()</code> 方法开辟新路径。</p>\n<p>内层矩形是<code>逆时针绘制</code>的，所以内层的值是 <code>-1</code> 。外层矩形是<code>顺时针绘制</code>，所以经过外层时值 <code>+1</code>，最终内层的值为 <code>0</code> ，所以<code>不会被填充</code>。</p>\n<h3 id=\"文本\" tabindex=\"-1\"> 文本</h3>\n<h4 id=\"font-样式\" tabindex=\"-1\"> font 样式</h4>\n<p>和 <code>CSS</code> 设置 <code>font</code> 差不多，Canvas 也可以通过 <code>font</code> 设置<code>样式</code>。</p>\n<p>语法：<code>cxt.font = 'font-style font-variant font-weight font-size/line-height font-family'</code></p>\n<p>如果需要设置字号 <code>font-size</code>，需要同事设置 <code>font-family</code>。</p>\n<p><code>cxt.font = '30px 宋体'</code></p>\n<h4 id=\"stroketext-描边\" tabindex=\"-1\"> strokeText() 描边</h4>\n<p>语法：<code>strokeText(text, x, y, maxWidth)</code></p>\n<ul>\n<li>text: <code>字符串</code>，要绘制的内容</li>\n<li>x: <code>横坐标</code>，文本左边要对齐的坐标（默认<code>左对齐</code>）</li>\n<li>y: <code>纵坐标</code>，文本底边要对齐的坐标</li>\n<li>maxWidth: 可选参数，表示文本渲染的<code>最大宽度（px</code>），如果文本<code>超出</code> maxWidth 设置的值，文本会被<code>压缩</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-3a285e88\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_034%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_034')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.font%20%3D%20'60px%20Arial'%20%2F%2F%20%E5%B0%86%E5%AD%97%E5%8F%B7%E8%AE%BE%E7%BD%AE%E6%88%90%2060px%EF%BC%8C%E6%96%B9%E4%BE%BF%E8%A7%82%E5%AF%9F%5Cn%20%20%20%20cxt.strokeText('%E9%9B%B7%E7%8C%B4'%2C%2030%2C%2090)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_034<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_034'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>font <span>=</span> <span>'60px Arial'</span> <span>// 将字号设置成 60px，方便观察</span>\n    cxt<span>.</span><span>strokeText</span><span>(</span><span>'雷猴'</span><span>,</span> <span>30</span><span>,</span> <span>90</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"strokestyle-设置描边颜色\" tabindex=\"-1\"> strokeStyle 设置描边颜色</h5>\n\n<CodeDemo id=\"code-demo-24933c6c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_035%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_035')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.font%20%3D%20'60px%20Arial'%20%2F%2F%20%E5%B0%86%E5%AD%97%E5%8F%B7%E8%AE%BE%E7%BD%AE%E6%88%90%2060px%EF%BC%8C%E6%96%B9%E4%BE%BF%E8%A7%82%E5%AF%9F%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'pink'%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E6%8F%8F%E8%BE%B9%E9%A2%9C%E8%89%B2%5Cn%20%20%20%20cxt.strokeText('%E9%9B%B7%E7%8C%B4'%2C%2030%2C%2090)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_035<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_035'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>font <span>=</span> <span>'60px Arial'</span> <span>// 将字号设置成 60px，方便观察</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'pink'</span> <span>// 设置文本描边颜色</span>\n    cxt<span>.</span><span>strokeText</span><span>(</span><span>'雷猴'</span><span>,</span> <span>30</span><span>,</span> <span>90</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"filltext-填充\" tabindex=\"-1\"> fillText() 填充</h4>\n<p>语法：<code>fillText(text, x, y, maxWidth)</code></p>\n\n<CodeDemo id=\"code-demo-41f19b5c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_036%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_036')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.font%20%3D%20'60px%20Arial'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4'%2C%2030%2C%2090)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_036<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_036'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>font <span>=</span> <span>'60px Arial'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴'</span><span>,</span> <span>30</span><span>,</span> <span>90</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"fillstyle-设置填充颜色\" tabindex=\"-1\"> fillStyle 设置填充颜色</h5>\n\n<CodeDemo id=\"code-demo-f1d5dfc0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_037%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_037')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20cxt.font%20%3D%20'60px%20Arial'%5Cn%20%20%20%20cxt.fillStyle%20%3D%20'pink'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4'%2C%2030%2C%2090)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_037<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_037'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    cxt<span>.</span>font <span>=</span> <span>'60px Arial'</span>\n    cxt<span>.</span>fillStyle <span>=</span> <span>'pink'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴'</span><span>,</span> <span>30</span><span>,</span> <span>90</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"measuretext-获取文本长度\" tabindex=\"-1\"> measureText() 获取文本长度</h4>\n<p><code>measureText().width</code> 方法可以获取文本的<code>长度</code>，单位是 <code>px</code> 。</p>\n\n<CodeDemo id=\"code-demo-fcce3622\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_038%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_038')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20let%20text%20%3D%20'%E9%9B%B7%E7%8C%B4'%5Cn%20%20%20%20cxt.font%20%3D%20'bold%2040px%20Arial'%5Cn%20%20%20%20cxt.fillText(text%2C%2040%2C%2080)%5Cn%20%20%20%20console.log(cxt.measureText(text).width)%20%2F%2F%2080%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_038<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_038'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>let</span> text <span>=</span> <span>'雷猴'</span>\n    cxt<span>.</span>font <span>=</span> <span>'bold 40px Arial'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span>text<span>,</span> <span>40</span><span>,</span> <span>80</span><span>)</span>\n    console<span>.</span><span>log</span><span>(</span>cxt<span>.</span><span>measureText</span><span>(</span>text<span>)</span><span>.</span>width<span>)</span> <span>// 80</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"textalign-水平对齐方式\" tabindex=\"-1\"> textAlign 水平对齐方式</h4>\n<ul>\n<li>start: 默认。在指定位置的<code>横坐标开始</code>。</li>\n<li>end: 在指定坐标的<code>横坐标结束</code>。</li>\n<li>left: <code>左</code>对齐。</li>\n<li>right: <code>右</code>对齐。</li>\n<li>center: <code>居中</code>对齐。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-36353a14\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_039%5C%22%20width%3D%5C%22350%5C%22%20height%3D%5C%22350%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_039')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%5Cn%20%20%20%20%2F%2F%20%E7%AB%96%E5%90%91%E7%9A%84%E8%BE%85%E5%8A%A9%E7%BA%BF%EF%BC%88%E5%8F%82%E8%80%83%E7%BA%BF%EF%BC%8C%E5%9C%A8%E7%94%BB%E5%B8%83%E4%B8%AD%E9%97%B4%EF%BC%89%5Cn%20%20%20%20cxt.moveTo(200%2C%200)%5Cn%20%20%20%20cxt.lineTo(200%2C%20400)%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'red'%5Cn%20%20%20%20cxt.stroke()%5Cn%5Cn%20%20%20%20cxt.font%20%3D%20'30px%20Arial'%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%A8%AA%E5%9D%90%E6%A0%87%E5%BC%80%E5%A7%8B%E4%BD%8D%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.textAlign%20%3D%20'start'%20%2F%2F%20%E9%BB%98%E8%AE%A4%E5%80%BC%2C%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20start'%2C%20200%2C%2040)%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%A8%AA%E5%9D%90%E6%A0%87%E7%BB%93%E6%9D%9F%E4%BD%8D%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.textAlign%20%3D%20'end'%20%2F%2F%20%E7%BB%93%E6%9D%9F%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20end'%2C%20200%2C%20100)%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%B7%A6%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.textAlign%20%3D%20'left'%20%2F%2F%20%E5%B7%A6%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20left'%2C%20200%2C%20160)%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%8F%B3%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.textAlign%20%3D%20'right'%20%2F%2F%20%E5%8F%B3%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20right'%2C%20200%2C%20220)%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.textAlign%20%3D%20'center'%20%2F%2F%20%E5%8F%B3%E5%AF%B9%E9%BD%90%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20center'%2C%20200%2C%20280)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_039<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>350<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>350<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_039'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n\n    <span>// 竖向的辅助线（参考线，在画布中间）</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>200</span><span>,</span> <span>0</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>200</span><span>,</span> <span>400</span><span>)</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'red'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n\n    cxt<span>.</span>font <span>=</span> <span>'30px Arial'</span>\n\n    <span>// 横坐标开始位对齐</span>\n    cxt<span>.</span>textAlign <span>=</span> <span>'start'</span> <span>// 默认值,</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 start'</span><span>,</span> <span>200</span><span>,</span> <span>40</span><span>)</span>\n\n    <span>// 横坐标结束位对齐</span>\n    cxt<span>.</span>textAlign <span>=</span> <span>'end'</span> <span>// 结束对齐</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 end'</span><span>,</span> <span>200</span><span>,</span> <span>100</span><span>)</span>\n\n    <span>// 左对齐</span>\n    cxt<span>.</span>textAlign <span>=</span> <span>'left'</span> <span>// 左对齐</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 left'</span><span>,</span> <span>200</span><span>,</span> <span>160</span><span>)</span>\n\n    <span>// 右对齐</span>\n    cxt<span>.</span>textAlign <span>=</span> <span>'right'</span> <span>// 右对齐</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 right'</span><span>,</span> <span>200</span><span>,</span> <span>220</span><span>)</span>\n\n    <span>// 居中对齐</span>\n    cxt<span>.</span>textAlign <span>=</span> <span>'center'</span> <span>// 右对齐</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 center'</span><span>,</span> <span>200</span><span>,</span> <span>280</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>从上面的例子看，<code>start</code> 和 <code>left</code> 的效果好像是一样的，<code>end</code> 和 <code>right</code> 也好像是一样的。</p>\n<p>在大多数情况下，它们的确一样。</p>\n<p>但在某些国家或者某些场合，阅读文字的习惯是 <code>从右往左</code> 时，<code>start</code> 就和 <code>right</code> 一样了，<code>end</code> 和 <code>left</code> 也一样。这是需要注意的地方。</p>\n</div>\n<h4 id=\"textbaseline-垂直对齐方式\" tabindex=\"-1\"> textBaseline 垂直对齐方式</h4>\n<ul>\n<li>alphabetic: 默认。文本基线是普通的<code>字母基线</code>。</li>\n<li>top: 文本基线是 em 方框的<code>顶端</code>。</li>\n<li>bottom: 文本基线是 em 方框的<code>底端</code>。</li>\n<li>middle: 文本基线是 em 方框的<code>正中</code>。</li>\n<li>hanging: 文本基线是<code>悬挂基线</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-fc6107c8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_040%5C%22%20width%3D%5C%22800%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_040')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%A8%AA%E5%90%91%E7%9A%84%E8%BE%85%E5%8A%A9%E7%BA%BF%EF%BC%88%E5%8F%82%E8%80%83%E7%BA%BF%EF%BC%8C%E5%9C%A8%E7%94%BB%E5%B8%83%E4%B8%AD%E9%97%B4%EF%BC%89%5Cn%20%20%20%20cxt.moveTo(0%2C%20150)%5Cn%20%20%20%20cxt.lineTo(800%2C%20150)%5Cn%20%20%20%20cxt.strokeStyle%20%3D%20'red'%5Cn%20%20%20%20cxt.stroke()%5Cn%5Cn%20%20%20%20cxt.font%20%3D%20'20px%20Arial'%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%20alphabetic%5Cn%20%20%20%20cxt.textBaseline%20%3D%20'alphabetic'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20alphabetic'%2C%2010%2C%20150)%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%20top%5Cn%20%20%20%20cxt.textBaseline%20%3D%20'top'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20top'%2C%20200%2C%20150)%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%20bottom%5Cn%20%20%20%20cxt.textBaseline%20%3D%20'bottom'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20bottom'%2C%20320%2C%20150)%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%20middle%5Cn%20%20%20%20cxt.textBaseline%20%3D%20'middle'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20middle'%2C%20480%2C%20150)%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%20hanging%5Cn%20%20%20%20cxt.textBaseline%20%3D%20'hanging'%5Cn%20%20%20%20cxt.fillText('%E9%9B%B7%E7%8C%B4%20hanging'%2C%20640%2C%20150)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_040<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>800<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_040'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n\n    <span>// 横向的辅助线（参考线，在画布中间）</span>\n    cxt<span>.</span><span>moveTo</span><span>(</span><span>0</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span><span>lineTo</span><span>(</span><span>800</span><span>,</span> <span>150</span><span>)</span>\n    cxt<span>.</span>strokeStyle <span>=</span> <span>'red'</span>\n    cxt<span>.</span><span>stroke</span><span>(</span><span>)</span>\n\n    cxt<span>.</span>font <span>=</span> <span>'20px Arial'</span>\n\n    <span>// 默认 alphabetic</span>\n    cxt<span>.</span>textBaseline <span>=</span> <span>'alphabetic'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 alphabetic'</span><span>,</span> <span>10</span><span>,</span> <span>150</span><span>)</span>\n\n    <span>// 默认 top</span>\n    cxt<span>.</span>textBaseline <span>=</span> <span>'top'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 top'</span><span>,</span> <span>200</span><span>,</span> <span>150</span><span>)</span>\n\n    <span>// 默认 bottom</span>\n    cxt<span>.</span>textBaseline <span>=</span> <span>'bottom'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 bottom'</span><span>,</span> <span>320</span><span>,</span> <span>150</span><span>)</span>\n\n    <span>// 默认 middle</span>\n    cxt<span>.</span>textBaseline <span>=</span> <span>'middle'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 middle'</span><span>,</span> <span>480</span><span>,</span> <span>150</span><span>)</span>\n\n    <span>// 默认 hanging</span>\n    cxt<span>.</span>textBaseline <span>=</span> <span>'hanging'</span>\n    cxt<span>.</span><span>fillText</span><span>(</span><span>'雷猴 hanging'</span><span>,</span> <span>640</span><span>,</span> <span>150</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>在绘制文字的时候，默认是以文字的左下角作为参考点进行绘制</p>\n</div>\n<h3 id=\"图片\" tabindex=\"-1\"> 图片</h3>\n<p>在 Canvas 中可以使用 drawImage() 方法绘制图片。</p>\n<h4 id=\"渲染图片\" tabindex=\"-1\"> 渲染图片</h4>\n<p>渲染图片的方式有两种，一种是在<code>JS里加载图片</code>再渲染，另一种是把<code>DOM里的图片</code>拿到 <code>canvas</code> 里渲染。</p>\n<p>语法：<code>drawImage(image, dx, dy)</code></p>\n<ul>\n<li>image: 要渲染的图片对象。</li>\n<li>dx: 图片左上角的横坐标位置。</li>\n<li>dy: 图片左上角的纵坐标位置。</li>\n</ul>\n<h5 id=\"js版\" tabindex=\"-1\"> JS版</h5>\n<p>在 JS 里加载图片并渲染，有以下几个步骤：</p>\n<ol>\n<li>创建 Image 对象</li>\n<li>引入图片</li>\n<li>等待图片加载完成</li>\n<li>使用 drawImage() 方法渲染图片</li>\n</ol>\n\n<CodeDemo id=\"code-demo-24796840\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_041%5C%22%20width%3D%5C%22900%5C%22%20height%3D%5C%22500%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_041')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%5Cn%20%20%20%20%2F%2F%201%20%E5%88%9B%E5%BB%BA%20Image%20%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20const%20image%20%3D%20new%20Image()%5Cn%5Cn%20%20%20%20%2F%2F%202%20%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87%5Cn%20%20%20%20image.src%20%3D%20'%2Fassets%2Fknowledge%2FfrontEnd%2Fcanvas%2FKFC_001.jpg'%5Cn%5Cn%20%20%20%20%2F%2F%203%20%E7%AD%89%E5%BE%85%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%5Cn%20%20%20%20image.onload%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%2F%2F%204%20%E4%BD%BF%E7%94%A8%20drawImage()%20%E6%96%B9%E6%B3%95%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87%5Cn%20%20%20%20%20%20cxt.drawImage(image%2C%2030%2C%2030)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_041<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>900<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_041'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n\n    <span>// 1 创建 Image 对象</span>\n    <span>const</span> image <span>=</span> <span>new</span> <span>Image</span><span>(</span><span>)</span>\n\n    <span>// 2 引入图片</span>\n    image<span>.</span>src <span>=</span> <span>'/assets/knowledge/frontEnd/canvas/KFC_001.jpg'</span>\n\n    <span>// 3 等待图片加载完成</span>\n    image<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>// 4 使用 drawImage() 方法渲染图片</span>\n      cxt<span>.</span><span>drawImage</span><span>(</span>image<span>,</span> <span>30</span><span>,</span> <span>30</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"dom版\" tabindex=\"-1\"> DOM版</h5>\n\n<CodeDemo id=\"code-demo-17badd96\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Cstyle%3E%5Cn%20%20%23dogImg%20%7B%5Cn%20%20%20%20display%3A%20none%3B%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%3Cimg%20src%3D%5C%22%2Fassets%2Fknowledge%2FfrontEnd%2Fcanvas%2FKFC_001.jpg%5C%22%20id%3D%5C%22dogImg%5C%22%2F%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_042%5C%22%20width%3D%5C%22900%5C%22%20height%3D%5C%22500%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_042')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%20%20%20%20const%20image%20%3D%20document.getElementById('dogImg')%5Cn%20%20%20%20image.onload%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%2F%2F%204%20%E4%BD%BF%E7%94%A8%20drawImage()%20%E6%96%B9%E6%B3%95%E6%B8%B2%E6%9F%93%E5%9B%BE%E7%89%87%5Cn%20%20%20%20%20%20cxt.drawImage(image%2C%2070%2C%2070)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>#dogImg</span> <span>{</span>\n    <span>display</span><span>:</span> none<span>;</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n\n<span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>/assets/knowledge/frontEnd/canvas/KFC_001.jpg<span>\"</span></span> <span>id</span><span><span>=</span><span>\"</span>dogImg<span>\"</span></span><span>/></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_042<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>900<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_042'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n    <span>const</span> image <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'dogImg'</span><span>)</span>\n    image<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>// 4 使用 drawImage() 方法渲染图片</span>\n      cxt<span>.</span><span>drawImage</span><span>(</span>image<span>,</span> <span>70</span><span>,</span> <span>70</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>因为图片是从 <code>DOM</code> 里获取到的，所以一般来说，只要在 <code>window.onload</code> 这个生命周期内使用 <code>drawImage</code> 都可以<code>正常渲染</code>图片。前提是dom元素图片<code>加载完成</code>。</p>\n<h4 id=\"设置图片宽高\" tabindex=\"-1\"> 设置图片宽高</h4>\n<p>前面的例子都是直接加载图片，图片<code>默认</code>的宽高是多少就加载多少。</p>\n<p>如果需要指定图片宽高，可以在前面的基础上再添加两个参数：</p>\n<p><code>drawImage(image, dx, dy, dw, dh)</code></p>\n\n<CodeDemo id=\"code-demo-c19f02b4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_043%5C%22%20width%3D%5C%22500%5C%22%20height%3D%5C%22200%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_043')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%5Cn%20%20%20%20const%20image%20%3D%20new%20Image()%5Cn%20%20%20%20image.src%20%3D%20'%2Fassets%2Fknowledge%2FfrontEnd%2Fcanvas%2FKFC_001.jpg'%5Cn%5Cn%20%20%20%20image.onload%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20cxt.drawImage(image%2C%2030%2C%2030%2C%20100%2C%20100)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_043<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_043'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n\n    <span>const</span> image <span>=</span> <span>new</span> <span>Image</span><span>(</span><span>)</span>\n    image<span>.</span>src <span>=</span> <span>'/assets/knowledge/frontEnd/canvas/KFC_001.jpg'</span>\n\n    image<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      cxt<span>.</span><span>drawImage</span><span>(</span>image<span>,</span> <span>30</span><span>,</span> <span>30</span><span>,</span> <span>100</span><span>,</span> <span>100</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"截取图片\" tabindex=\"-1\"> 截取图片</h4>\n<p>截图图片同样使用<code>drawImage()</code> 方法，只不过传入的参数<code>数量</code>比之前都<code>多</code>，而且<code>顺序</code>也有点<code>不一样</code>了。</p>\n<p><code>drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)</code></p>\n<ul>\n<li>image: 图片对象</li>\n<li>sx: 开始截取的横坐标</li>\n<li>sy: 开始截取的纵坐标</li>\n<li>sw: 截取的宽度</li>\n<li>sh: 截取的高度</li>\n<li>dx: 图片左上角的横坐标位置</li>\n<li>dy: 图片左上角的纵坐标位置</li>\n<li>dw: 图片宽度</li>\n<li>dh: 图片高度</li>\n</ul>\n\n<CodeDemo id=\"code-demo-1a03d090\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%3Ccanvas%20id%3D%5C%22canvas_044%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20style%3D%5C%22border%3A%201px%20solid%20%23ccc%3B%5C%22%3E%3C%2Fcanvas%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20cnv%20%3D%20document.getElementById('canvas_044')%5Cn%20%20%20%20const%20cxt%20%3D%20cnv.getContext('2d')%5Cn%5Cn%20%20%20%20const%20image%20%3D%20new%20Image()%5Cn%20%20%20%20image.src%20%3D%20'%2Fassets%2Fknowledge%2FfrontEnd%2Fcanvas%2FKFC_001.jpg'%5Cn%5Cn%20%20%20%20image.onload%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20cxt.drawImage(image%2C%200%2C%200%2C%20200%2C%20200%2C%200%2C%200%2C%20200%2C%20200)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>canvas</span> <span>id</span><span><span>=</span><span>\"</span>canvas_044<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>border</span><span>:</span> 1px solid #ccc<span>;</span></span><span>\"</span></span></span><span>></span></span><span><span><span>&lt;/</span>canvas</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> cnv <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas_044'</span><span>)</span>\n    <span>const</span> cxt <span>=</span> cnv<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>\n\n    <span>const</span> image <span>=</span> <span>new</span> <span>Image</span><span>(</span><span>)</span>\n    image<span>.</span>src <span>=</span> <span>'/assets/knowledge/frontEnd/canvas/KFC_001.jpg'</span>\n\n    image<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      cxt<span>.</span><span>drawImage</span><span>(</span>image<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>200</span><span>,</span> <span>200</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>200</span><span>,</span> <span>200</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo>",
      "image": "https://jin-shaohui.gitee.io/background/black-001.jpg",
      "date_published": "2022-07-25T16:17:25.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Canvas"
      ]
    },
    {
      "title": "Svg 入门",
      "url": "https://jin-shaohui.gitee.io/Draw/Svg/",
      "id": "https://jin-shaohui.gitee.io/Draw/Svg/",
      "summary": " 简介\nSVG 是 Scalable Vector Graphics 的缩写，意为可缩放矢量图形。于 2003年1月14日 SVG 1.1 被Sun公司（已被Oracle公司收购）、Adobe、苹果公司、IBM 以及柯达共同确立成为W3C推荐标准。\n 概念\n\nSVG是 Scalable Vector Graphics 的缩写 意为可缩放矢量图形\nSVG是一个基于文本的开放网络标准，用来定义用于网络的矢量图形\nSVG图像在放大或改变尺寸的情况下其图形质量不会有所损失，因此能够优雅而简洁地渲染不同大小的图形，并和CSS，DOM，JavaScript和SMIL等其他网络标准无缝衔接\nSVG 使用 XML 格式定义图形\nSVG是万维网联盟的标准与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体\n\n",
      "content_html": "<h2 id=\"简介\" tabindex=\"-1\"> 简介</h2>\n<p>SVG 是 <code>Scalable Vector Graphics</code> 的缩写，意为<code>可缩放矢量图形</code>。于 2003年1月14日 SVG 1.1 被Sun公司（已被Oracle公司收购）、Adobe、苹果公司、IBM 以及柯达共同确立成为<code>W3C</code>推荐标准。</p>\n<h3 id=\"概念\" tabindex=\"-1\"> 概念</h3>\n<ol>\n<li>SVG是 <code>Scalable Vector Graphics</code> 的缩写 意为<code>可缩放矢量图形</code></li>\n<li>SVG是一个基于<code>文本</code>的<code>开放网络标准</code>，用来定义用于<code>网络</code>的<code>矢量图形</code></li>\n<li>SVG图像在<code>放大</code>或<code>改变尺寸</code>的情况下其图形<code>质量不会有所损失</code>，因此能够优雅而简洁地渲染不同大小的图形，并和<code>CSS</code>，<code>DOM</code>，<code>JavaScript</code>和<code>SMIL</code>等其他网络标准无缝衔接</li>\n<li>SVG 使用 <code>XML</code> 格式定义图形</li>\n<li>SVG是万维网联盟的标准与诸如 <code>DOM</code> 和 <code>XSL</code> 之类的 <code>W3C</code> 标准是一个整体</li>\n</ol>\n\n<h3 id=\"优势\" tabindex=\"-1\"> 优势</h3>\n<ol>\n<li><code>SVG</code> 与 <code>JPEG</code> 和 <code>GIF</code> 图像比起来，<code>尺寸更小</code>，且<code>可压缩性更强</code>。</li>\n<li>SVG图像中的文本是<code>可选</code>的，同时也是<code>可搜索</code>的，且可以与 <code>JavaScript</code> 技术一起运行</li>\n<li>SVG可在图像<code>质量不下降</code>的情况下被<code>放大</code>和<code>缩小</code></li>\n<li>SVG可被非常多的工具<code>读取</code>和<code>修改</code>（比如文本编辑器）</li>\n<li>SVG图像<code>不依赖分辨率</code>，可在任何的分辨率下被<code>高质量</code>地打印</li>\n<li>SVG文件是纯粹的<code>XML</code></li>\n<li>SVG是<code>开放的标准</code></li>\n</ol>\n<h3 id=\"缺点\" tabindex=\"-1\"> 缺点</h3>\n<ol>\n<li>SVG<code>复杂度</code>越<code>高</code>渲染速度就会越<code>慢</code>（任何过度使用DOM的应用都不快）</li>\n<li>SVG<code>不适合游戏</code>应用，只能结合<code>Canvas</code>来实现</li>\n<li>SVG不能动态的<code>修改动画</code>内容</li>\n</ol>\n<p><strong>PS</strong>: 需要注意的是因为<code>XML</code>和<code>HTML</code>不同，<code>XML</code>是区分大小写的，而<code>SVG</code>是使用<code>XML</code>格式来定义图形，所以在编写SVG的的时候<code>元素</code>和<code>属性</code>必须按<code>标准格式</code>书写。</p>\n<h3 id=\"浏览器兼容性\" tabindex=\"-1\"> 浏览器兼容性</h3>\n<p>这里直接放一张 Can I Use 的详细兼容表。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/svg/canIUse.png')\"/>\n<h2 id=\"语法\" tabindex=\"-1\"> 语法</h2>\n<p>SVG的语法如下：</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>如上面的语法所示，SVG的<code>绘制</code>其实就是一个<code>SVG标签</code>，然后在标签内绘制要绘制的内容，比如上面的语法是在SVG标签中绘制了一个圆形<code>(cx、cy为圆的坐标，r为圆的半径)</code>。</p>\n<h3 id=\"属性\" tabindex=\"-1\"> 属性</h3>\n<h4 id=\"width、height-svg的宽高\" tabindex=\"-1\"> width、height <code>SVG</code>的<code>宽高</code></h4>\n\n<CodeDemo id=\"code-demo-d53f55b0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22100%5C%22%20cy%3D%5C%22100%5C%22%20r%3D%5C%22100%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>注意：在<code>不设置</code>宽高的情况下，默认为<code>300 * 150</code>，当<code>内部元素</code>大于<code>300 * 150</code>时，大于部分会被隐藏。</p>\n</div>\n<p>在坐标为<code>（100， 100）</code>的地方绘制一个<code>半径</code>为<code>100</code>的<code>圆</code></p>\n\n<CodeDemo id=\"code-demo-51be53d4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22100%5C%22%20cy%3D%5C%22100%5C%22%20r%3D%5C%22100%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"viewbox-可以显示的区域。\" tabindex=\"-1\"> viewBox 可以<code>显示</code>的<code>区域</code>。</h4>\n<p><strong>语法：</strong> <code>viewBox=&quot;x y w h&quot;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为<code>起始点</code></li>\n<li>w、h为<code>显示区域</code>的<code>宽高</code></li>\n</ul>\n\n<CodeDemo id=\"code-demo-35bb239b\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%20viewBox%3D%5C%220%200%20100%20100%5C%22%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22100%5C%22%20cy%3D%5C%22100%5C%22%20r%3D%5C%22100%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>viewBox</span><span><span>=</span><span>\"</span>0 0 100 100<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>如图SVG里面的圆只显示了一部份，原因是<code>viewBox</code>定义了一个：从·点开始，宽高为<code>100 * 100</code>的显示区域。而这个<code>100 * 100</code>的显示区域会放到<code>300 * 300(svg宽高)</code>的SVG中去显示，整体就<code>放大</code>了<code>3</code>倍。</p>\n<h4 id=\"version-指明svg的版本\" tabindex=\"-1\"> version 指明SVG的版本</h4>\n<p>version属性纯粹就是一个<code>说明</code>，对<code>渲染</code>或<code>处理</code>没有任何影响。且目前只有 <code>1.0</code> 和 <code>1.1</code> 这两个版本。</p>\n<p><strong>语法：</strong> <code>version=&quot;1.1&quot;</code></p>\n<div>\n<p>Tips</p>\n<p>下面是来自维基百科的一些版本信息：</p>\n<ul>\n<li>版本 1.x</li>\n</ul>\n<ol>\n<li><code>SVG 1.0</code>于 2001 年 9 月 4 日成为 <code>W3C</code> 推荐标准。</li>\n<li><code>SVG 1.1</code> 于 2003 年 1 月 14 日成为 <code>W3C</code> 推荐标准。SVG 1.1 规范是<code>模块化</code>的，以便允许将<code>子集</code>定义为<code>配置文件</code>。除此之外，SVG 1.1 和 SVG 1.0 之间几乎没有区别。</li>\n<li><code>SVG Tiny</code> 和 <code>SVG Basic</code>（移动 SVG 配置文件）于 2003 年 1 月 14 日成为 <code>W3C</code> 推荐标准。这些被描述为 SVG 1.1 的<code>配置文件</code>。</li>\n<li><code>SVG Tiny 1.2</code> 于 2008 年 12 月 22 日成为 <code>W3C</code> 推荐标准。它最初是作为计划中的 <code>SVG Full 1.2</code> 的配置文件（后来被 SVG 2 放弃），但后来被重构为<code>独立规范</code>。它通常得不到很好的支持。</li>\n<li><code>SVG 1.1 第二版</code>，包括所有勘误表和说明，但在 2011 年 8 月 16 日发布的原始 <code>SVG 1.1</code> 没有新功能。</li>\n<li><code>SVG Tiny 1.2 Portable/Secure</code>，<code>SVG Tiny 1.2</code> 配置文件的<code>更安全</code>子集，于 2020 年 7 月 29 日作为 <code>IETF</code> 草案标准引入。也称为 <code>SVG Tiny P/S</code>。<code>SVG Tiny 1.2 Portable/Secure</code> 是<code>BIMI</code>草案标准的要求。</li>\n</ol>\n<ul>\n<li>版本 2</li>\n</ul>\n<ol>\n<li><code>SVG 2</code> 删除了几个<code>字体元素</code>，例如<code>glyph</code>和altGlyph（由 <code>WOFF</code> 字体格式替换）。</li>\n<li>不推荐使用该<code>xml:space</code>属性以支持 CSS。</li>\n<li>添加了 <code>HTML5</code> 功能，例如 <code>translate</code> 和 <code>data-*</code> 属性。</li>\n<li><code>SVG Tiny 1.2</code> 中的<code>文本处理功能</code>被注释为包含在内，但<code>尚未</code>在文本中<code>正式化</code>。其他一些 <code>1.2</code> 特性是<code>精选</code>的。但 <code>SVG 2</code> 通常 <code>不是</code> <code>SVG tiny 1.2</code> 的<code>超集</code>。</li>\n<li><code>SVG 2</code> 于 2016 年 9 月 15 日进入候选推荐阶段，修订版于 2018 年 8 月 7 日和 2018 年 10 月 4 日发布。最新草案于 2022 年 3 月 21 日发布。</li>\n</ol>\n</div>\n<h4 id=\"xmlns-和-xmlns-xlink\" tabindex=\"-1\"> xmlns 和 xmlns:xlink</h4>\n<p>上面我们说过SVG使用XML格式定义图形，SVG文件是纯粹的XML文件。</p>\n<p>在XML中，<code>标签</code>和<code>属性</code>属于<code>命名空间</code>，这是为了防止来自不同技术的<code>标签</code>和<code>属性</code>发生<code>冲突</code>。</p>\n<ul>\n<li>案例</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>svg</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://www.w3.org/2000/svg<span>\"</span></span> <span><span>xmlns:</span>xlink</span><span><span>=</span><span>\"</span>http://www.w3.org/1999/xlink<span>\"</span></span><span>></span></span>\n    // ......\n<span><span><span>&lt;/</span>svg</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>在<code>SVG</code>中存在<code>a标签</code>，在<code>HTML</code>中也存在<code>a标签</code>，那么怎么区分这个a标签属于哪一种技术，这就需要使用<code>命名空间</code>了。</p>\n<p>加入命名空间以后就能知道哪一个是<code>svg:a</code>，哪一个又是<code>html:a</code>，这样就可以区分出不同的<code>标签</code>和<code>属性</code>。</p>\n</div>\n<h5 id=\"xmlns\" tabindex=\"-1\"> xmlns</h5>\n<p>xmlns用于声明<code>命名空间</code>（<code>namespace</code>），在此声明之下的所有<code>子标签</code>都属于这个空间内。这里看起来是一个<code>url</code>，但实际上仅仅是一个字符串，这样使用只是惯例。因此很多时候都会被称为 <code>namespace url</code> 而不是 <code>namespace name</code>。</p>\n<p>在SVG中加入xmlns时，因为它定义了<code>默认命名空间</code>，因此不需要前缀，直接在SVG标签中写一个a标签，<code>a标签</code>和<code>UA</code>就知道它是SVG的a标签而不是HTML的a标签</p>\n<h5 id=\"xmlns-xlink\" tabindex=\"-1\"> xmlns:xlink</h5>\n<p><code>xmlns:xlink</code> 表示前缀为<code>xlink</code>的<code>标签</code>和<code>属性</code>，应该由理解该规范的 <code>UA</code> 使用 <code>xlink</code> 规范 来解释。</p>\n<p>注解：UA是<code>User Agent</code>的简称。<code>User Agent</code>是<code>Http</code>协议中的一部分，属于<code>头域</code>的组成部分。通俗地讲<code>UA</code>是一种向<code>访问网站</code>提供你所使用的<code>浏览器类型</code>、<code>操作系统</code>、<code>浏览器内核</code>等信息的<code>标识</code>。通过这个标识，用户所访问的网站可以显示不同的排版，从而为用户提供更好的<code>体验</code>或者进行<code>信息统计</code>。</p>\n<h3 id=\"基本图形\" tabindex=\"-1\"> 基本图形</h3>\n<h4 id=\"圆形-circle\" tabindex=\"-1\"> 圆形（circle）</h4>\n<p><strong>语法：</strong> <code>&lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;100&quot;/&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>cx</code>、<code>cy</code>为圆的坐标</li>\n<li><code>r</code>为圆的半径</li>\n</ul>\n\n<CodeDemo id=\"code-demo-d53f55b0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22100%5C%22%20cy%3D%5C%22100%5C%22%20r%3D%5C%22100%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"矩形-rect\" tabindex=\"-1\"> 矩形（rect）</h4>\n<p><strong>语法：</strong> <code>&lt;rect x=&quot;0&quot; y=&quot;0&quot; rx=&quot;5&quot; ry=&quot;5&quot; width=&quot;300&quot; height=&quot;200&quot;/&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为矩形的起<code>始点坐标</code></li>\n<li>rx、ry为圆角x、y轴方向的半径</li>\n<li>width、height为矩形的宽高</li>\n</ul>\n\n<CodeDemo id=\"code-demo-730097e2\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20rx%3D%5C%225%5C%22%20ry%3D%5C%225%5C%22%20width%3D%5C%22300%5C%22%20height%3D%5C%22200%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"椭圆-ellipse\" tabindex=\"-1\"> 椭圆（ellipse）</h4>\n<p><code>ellipse</code>标签比<code>circle</code>标签功能更强大，<code>ellipse</code>标签也可以实现<code>圆形</code>的绘制，并且还可以分别缩放圆形的<code>长轴半径</code>和<code>短轴半径</code>，从而达到<code>椭圆</code>的效果。</p>\n<p><strong>语法：</strong> <code>&lt;ellipse cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;100&quot; ry=&quot;50&quot;/&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>cx</code>、<code>cy</code>为椭圆的坐标</li>\n<li><code>rx</code>为椭圆的x轴半径</li>\n<li><code>ry</code>为椭圆的y轴半径</li>\n</ul>\n\n<CodeDemo id=\"code-demo-fabb6dfc\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22600%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22100%5C%22%20cy%3D%5C%22100%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%2F%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22400%5C%22%20cy%3D%5C%22100%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%22100%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>600<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>400<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"线条-line\" tabindex=\"-1\"> 线条（line）</h4>\n<p><strong>语法：</strong> <code>&lt;line x1=&quot;10&quot; x2=&quot;50&quot; y1=&quot;110&quot; y2=&quot;150&quot;/&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>x1</code>、<code>y1</code>为<code>起点</code>的坐标</li>\n<li><code>x2</code>、<code>y2</code>为<code>终点</code>的坐标</li>\n</ul>\n\n<CodeDemo id=\"code-demo-1d2d4380\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E4%B8%8D%E8%AE%BE%E7%BD%AE%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7%20style%20%E6%98%AF%E7%9C%8B%E4%B8%8D%E5%87%BA%E6%95%88%E6%9E%9C%E7%9A%84%20--%3E%5Cn%20%20%20%20%3Cline%20x1%3D%5C%2250%5C%22%20x2%3D%5C%2250%5C%22%20y1%3D%5C%22200%5C%22%20y2%3D%5C%2250%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 不设置样式属性 style 是看不出效果的 --></span>\n    <span><span><span>&lt;</span>line</span> <span>x1</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"折线-polyline\" tabindex=\"-1\"> 折线（polyline）</h4>\n<p><strong>语法：</strong> <code>&lt;polyline points=&quot;0 0, 20 40, 70 80, 100 90, 200 30, 250 50&quot; /&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>points</code>为<code>点集数列</code>，其中每个点都必须包含<code>2个数字</code>，一个是<code>x坐标</code>，一个是<code>y坐标</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-7cee406e\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22100%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E4%B8%8D%E8%AE%BE%E7%BD%AE%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7style%E6%98%AF%E7%9C%8B%E4%B8%8D%E5%87%BA%E6%95%88%E6%9E%9C%E7%9A%84%20%E5%B9%B6%E4%B8%94polyline%E9%BB%98%E8%AE%A4%E4%B8%BA%E5%A1%AB%E5%85%85%E9%9C%80%E8%A6%81%E6%8A%8Afill%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E4%B8%BAnone%20--%3E%5Cn%20%20%20%20%3Cpolyline%20points%3D%5C%220%200%2C%2020%2040%2C%2070%2080%2C%20100%2090%2C%20200%2030%2C%20250%2050%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 不设置样式属性style是看不出效果的 并且polyline默认为填充需要把fill属性设置为none --></span>\n    <span><span><span>&lt;</span>polyline</span> <span>points</span><span><span>=</span><span>\"</span>0 0, 20 40, 70 80, 100 90, 200 30, 250 50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"多边形-polygon\" tabindex=\"-1\"> 多边形（polygon）</h4>\n<p><code>polygon</code>标签和<code>polyline</code>标签类似，都是由很多个点链接在一起的。但不同的是<code>polygon</code>路径中的<code>最后一个点</code>和<code>第一个点</code>是默认闭合的。</p>\n<p><strong>语法：</strong> <code>&lt;polygon points=&quot;0 0, 20 40, 70 80, 100 90, 200 30, 250 50&quot; /&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>points</code>为<code>点集数列</code>，其中每个点都必须包含<code>2个数字</code>，一个是<code>x坐标</code>，一个是<code>y坐标</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-b6473896\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E4%B8%8D%E8%AE%BE%E7%BD%AE%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7style%E6%98%AF%E7%9C%8B%E4%B8%8D%E5%87%BA%E6%95%88%E6%9E%9C%E7%9A%84%20%E5%B9%B6%E4%B8%94polygon%E9%BB%98%E8%AE%A4%E4%B8%BA%E5%A1%AB%E5%85%85%E9%9C%80%E8%A6%81%E6%8A%8Afill%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E4%B8%BAnone%20--%3E%5Cn%20%20%20%20%3Cpolygon%20points%3D%5C%220%200%2C%2020%2040%2C%2070%2080%2C%20100%2090%2C%20200%2030%2C%20250%2050%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 不设置样式属性style是看不出效果的 并且polygon默认为填充需要把fill属性设置为none --></span>\n    <span><span><span>&lt;</span>polygon</span> <span>points</span><span><span>=</span><span>\"</span>0 0, 20 40, 70 80, 100 90, 200 30, 250 50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"路径-path\" tabindex=\"-1\"> 路径（path）</h4>\n<p>path标签是所有图形中最复杂的，但他也是最强大的。在SVG中最常用的图形就是path标签，他可以绘制圆形、椭圆、矩形、线条、折线、多边形、贝塞尔曲线等。</p>\n<p><strong>语法：</strong> <code>&lt;path d=&quot;M50 50 H 200 V 200 H 50 L 50 50&quot;/&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>d为一个<code>点集数列</code>以及其它<code>绘制路径</code>的<code>信息</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-4b95d943\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctempalte%3E%5Cn%20%20%3Csvg%20width%3D%5C%22200%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2050%20H%20200%20V%20200%20H%2050%20L%2050%2050%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftempalte%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>tempalte</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 50 H 200 V 200 H 50 L 50 50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>tempalte</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"命令\" tabindex=\"-1\"> 命令</h5>\n<p><code>path标签</code>的图形形状是通过<code>属性d</code>来定义的，属性d的值是以：<code>命令 + 参数</code> 的形式进行组合的，命令又是通过<code>关键字</code>来表示的。</p>\n<p>那么究竟有哪些命令呢？总结了一下概括为以下<code>10</code>个命令：</p>\n<ul>\n<li>M = Move to</li>\n<li>L = Line to</li>\n<li>H = Horizontal Line to</li>\n<li>V = Vertical Line to</li>\n<li>Q = Quadratic Bezier Curve to</li>\n<li>T = Smooth Quadratic Bezier Curve to</li>\n<li>C = Curve to</li>\n<li>S = Smooth Curve to</li>\n<li>A = Elliptical Arc</li>\n<li>Z = close path</li>\n</ul>\n<div>\n<p>Tips</p>\n<p>所有命令中，<code>大写</code>为<code>绝对定位</code>，<code>小写</code>为<code>相对定位</code>。</p>\n</div>\n<h5 id=\"直线命令\" tabindex=\"-1\"> 直线命令</h5>\n<h6 id=\"m-move-to\" tabindex=\"-1\"> M（Move to）</h6>\n<p><code>M</code>命令其实就是把画笔<code>移动</code>到<code>某个点</code>，就好像画笔提起来以后移动到一个新的位置准备开始绘制。但因为仅仅是<code>移动</code>画笔而<code>没有绘制</code>，所以M命令经常出现在路径的<code>起始点</code>，用来<code>指明</code>画笔应该从<code>何处</code>开始<code>绘制</code>。</p>\n<p>每一段路径都<code>必须</code>以<code>M</code>命令<code>开头</code>，如果有<code>多个</code>M命令则表示<code>新路径</code>的<code>开始</code>。</p>\n<p><strong>语法：</strong> M x y 或者 m x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为坐标</li>\n</ul>\n<h6 id=\"l-line-to\" tabindex=\"-1\"> L（Line to）</h6>\n<p><code>L</code>命令会<code>绘制一点</code>并且和之前的点（也就是L命令<code>前面的点</code>）连成一条<code>直线</code>。</p>\n<p><strong>语法：</strong> L x y 或者 l x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为坐标</li>\n</ul>\n\n<CodeDemo id=\"code-demo-292db1dd\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%2020%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1%E5%88%B0%EF%BC%88250%EF%BC%8C%2020%EF%BC%89%E7%9A%84%E7%9B%B4%E7%BA%BF%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2020%20L250%2020%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%2050%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1%E5%88%B0%EF%BC%88250%EF%BC%8C%2050%EF%BC%89%E7%9A%84%E7%9B%B4%E7%BA%BF%20%E5%92%8C%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%20100%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1%E5%88%B0%EF%BC%88250%EF%BC%8C%20100%EF%BC%89%E7%9A%84%E7%9B%B4%E7%BA%BF%20--%3E%5Cn%20%20%20%20%3C!--%20M%E5%91%BD%E4%BB%A4%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%97%B6%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84M%E5%91%BD%E4%BB%A4%E4%B8%BA%E5%85%88%E7%BA%BF%E6%AE%B5%E7%9A%84%E8%B5%B7%E5%A7%8B%E7%82%B9%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2050%20L250%2050%20M50%20100%20L250%20100%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%20150%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1%E5%88%B0%EF%BC%88250%EF%BC%8C%20150%EF%BC%89%E7%9A%84%E7%9B%B4%E7%BA%BF%20--%3E%5Cn%20%20%20%20%3C!--%20M%E5%91%BD%E4%BB%A4%E5%90%8E%E9%9D%A2%E8%BF%9E%E7%BB%AD%E8%B7%9F%E7%9D%80%E5%A4%9A%E4%B8%AA%E5%9D%90%E6%A0%87%E7%82%B9%EF%BC%8C%E9%99%A4%E4%BA%86%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9D%90%E6%A0%87%E7%82%B9%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84%E5%85%A8%E9%83%A8%E9%BB%98%E8%AE%A4%E4%B8%BA%E9%9A%90%E5%BC%8F%E7%9A%84L%E5%91%BD%E4%BB%A4%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%20150%20250%20150%5C%22%20style%3D%5C%22stroke%3A%20%2300ff00%3B%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%20200%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1%E5%88%B0%EF%BC%88250%EF%BC%8C%20200%EF%BC%89%E5%8F%88%E5%88%B0%EF%BC%88250%EF%BC%8C250%EF%BC%89%E7%9A%84%E6%8A%98%E7%BA%BF%20--%3E%5Cn%20%20%20%20%3C!--%20%E5%A4%9A%E4%B8%AAL%E5%91%BD%E4%BB%A4%E8%BF%9E%E7%BB%AD%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E5%90%8E%E9%9D%A2%E7%9A%84L%E5%91%BD%E4%BB%A4%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%20200%20L250%20200%20250%20250%20%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%230000ff%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 从起始点（50， 20）画一条到（250， 20）的直线 --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 20 L250 20<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!-- 从起始点（50， 50）画一条到（250， 50）的直线 和 从起始点（50， 100）画一条到（250， 100）的直线 --></span>\n    <span>&lt;!-- M命令为多个时，后面的M命令为先线段的起始点 --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 50 L250 50 M50 100 L250 100<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!-- 从起始点（50， 150）画一条到（250， 150）的直线 --></span>\n    <span>&lt;!-- M命令后面连续跟着多个坐标点，除了第一个坐标点，后面的全部默认为隐式的L命令 --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 150 250 150<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #00ff00<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!-- 从起始点（50， 200）画一条到（250， 200）又到（250，250）的折线 --></span>\n    <span>&lt;!-- 多个L命令连续可以省略后面的L命令 --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 200 L250 200 250 250 <span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #0000ff<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"h-horizontal-line-to\" tabindex=\"-1\"> H（Horizontal Line to）</h6>\n<p><code>H</code>命令可以从之前的点绘制一条<code>水平</code>的<code>直线</code>，<code>H</code>命令可以等价于<code>y值</code>和<code>之前点</code>相同的<code>L</code>命令</p>\n<p><strong>语法：</strong> H x 或者 h x</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x 为X轴坐标</li>\n</ul>\n\n<CodeDemo id=\"code-demo-8276ab12\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22100%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%2020%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1X%E8%BD%B4%E4%B8%BA250%E7%9A%84%E6%B0%B4%E5%B9%B3%E7%9B%B4%E7%BA%BF%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2020%20H250%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 从起始点（50， 20）画一条X轴为250的水平直线 --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 20 H250<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"v-vertical-line-to\" tabindex=\"-1\"> V（Vertical Line to）</h6>\n<p><code>V</code>命令可以从之前的点绘制一条<code>垂直</code>的<code>直线</code>，<code>V</code>命令可以等价于<code>x值</code>和<code>之前点</code>相同的<code>L</code>命令</p>\n<p><strong>语法：</strong> V y 或者 v y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>y 为Y轴坐标</li>\n</ul>\n\n<CodeDemo id=\"code-demo-34cacfd5\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22250%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E4%BB%8E%E8%B5%B7%E5%A7%8B%E7%82%B9%EF%BC%8850%EF%BC%8C%2020%EF%BC%89%E7%94%BB%E4%B8%80%E6%9D%A1Y%E8%BD%B4%E4%B8%BA250%E7%9A%84%E5%9E%82%E7%9B%B4%E7%9B%B4%E7%BA%BF%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2020%20V250%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>250<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 从起始点（50， 20）画一条Y轴为250的垂直直线 --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 20 V250<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>PS：注意连续的<code>H</code>命令和<code>V</code>命令取<code>大值</code></p>\n</div>\n\n<CodeDemo id=\"code-demo-309b1658\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2020%20H200%20100%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2020%20V200%20100%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 20 H200 100<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 20 V200 100<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"z-close-path\" tabindex=\"-1\"> Z（Close path）</h6>\n<p><code>Z</code>命令是一个<code>闭合命令</code>，会从<code>当前点</code>画一条直线到路径的<code>起始点</code>。<code>Z</code>命令因为<code>没有参数</code>所以<code>Z</code>和<code>z</code>效果一样，所以不区分大小写，</p>\n<p><strong>语法：</strong> Z 或者 z</p>\n\n<CodeDemo id=\"code-demo-3e080afa\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2020%20H200%20V200%20Z%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 20 H200 V200 Z<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"曲线命令\" tabindex=\"-1\"> 曲线命令</h5>\n<h6 id=\"q-quadratic-bezier-curve-to\" tabindex=\"-1\"> Q（Quadratic Bezier Curve to）</h6>\n<p><code>Q</code>命令可以用来绘制一条<code>二次贝塞尔曲线</code>，<code>二次贝塞尔曲线</code>需要一个<code>控制点</code>，用来确定<code>起点</code>和<code>终点</code>的<code>曲线斜率</code>。</p>\n<p><strong>语法：</strong> Q x1 y1, x y 或者 q x1 y1, x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为<code>终点位置</code></li>\n<li>x1、y1为<code>控制点</code></li>\n</ul>\n\n<CodeDemo id=\"code-demo-7dfd7cf4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300px%5C%22%20height%3D%5C%22200px%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%20100%20Q%20175%20200%20300%20100%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300px<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200px<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 100 Q 175 200 300 100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000</span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"t-smooth-quadratic-bezier-curve-to\" tabindex=\"-1\"> T（Smooth Quadratic Bezier Curve to）</h6>\n<p><code>T</code>命令是一个 <code>延长</code> <code>二次贝塞尔曲线</code>的简化命令，<code>T</code>命令可以通过<code>前一个控制点</code>推断出<code>后一个控制点</code>，这也就是为什么<code>T</code>命令只需要<code>一个坐标</code>的原因。</p>\n<p>需要注意的是<code>T</code>命令的的前面必须有一个<code>Q</code>命令或者其他的<code>T</code>命令。如果<code>T</code>命令单独使用，那么<code>控制点</code>就会被认为和<code>终点</code>是同一个点，所以画出来的将是<code>一条直线</code></p>\n<p><strong>语法：</strong> T x y 或者 t x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为终点位置</li>\n</ul>\n\n<CodeDemo id=\"code-demo-5c6b4238\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22600px%5C%22%20height%3D%5C%22300px%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%20100%20Q%20175%20200%20300%20100%20T%20600%20100%20%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%E4%B8%8A%E4%B8%8B%E7%AD%89%E5%90%8C--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%20150%20Q%20175%20250%20300%20150%20Q%20425%2050%20600%20150%20%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23002aff%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>600px<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300px<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 100 Q 175 200 300 100 T 600 100 <span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!--上下等同--></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 150 Q 175 250 300 150 Q 425 50 600 150 <span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #002aff<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"c-curve-to\" tabindex=\"-1\"> C（Curve to）</h6>\n<p><code>C</code>命令可用来绘制一条<code>三次贝塞尔曲线</code>，相对于<code>二次贝塞尔曲线</code>多了<code>一个控制点</code>。</p>\n<p><strong>语法：</strong> C x1 y1, x2 y2, x y 或者 c x1 y1, x2 y2, x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为<code>终点位置</code></li>\n<li>x1、y1为曲线<code>起始点</code>的<code>控制点</code></li>\n<li>x2、y2为<code>曲线终止</code>的<code>控制点</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-cfdfdbf2\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%2050%20C%20100%20100%2C%20200%20100%2C%20250%2050%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23000000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M50%20200%20C%20100%20250%2C%20200%20150%2C%20250%20200%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 50 C 100 100, 200 100, 250 50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #000000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 200 C 100 250, 200 150, 250 200<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"s-smooth-curve-to\" tabindex=\"-1\"> S（Smooth Curve to）</h6>\n<p><code>三次贝塞尔曲线</code>的<code>S</code>命令和<code>二次贝塞尔曲线</code>的<code>T</code>命令比较相似。<code>S</code>命令也可以用来创建与前面一样的<code>贝塞尔曲线</code>，但如果<code>S</code>命令跟在一个<code>C</code>命令或者另一个<code>S</code>命令的后面，那么它的第一个<code>控制点</code>，就会被假设成前一个<code>控制点</code>的<code>对称点</code>。</p>\n<p>如果S命令单独使用，前面没有<code>C</code>命令或者另一个<code>S</code>命令，那么它的<code>两个控制点</code>就会被假设为<code>同一个点</code>。</p>\n<p><strong>语法：</strong> S x2 y2, x y 或者 s x2 y2, x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>x、y为终点位置</li>\n<li>x2、y2为曲线终止的控制点</li>\n</ul>\n\n<CodeDemo id=\"code-demo-322de868\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300px%5C%22%20height%3D%5C%22300px%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20100%20C%2040%2010%2C%2065%2010%2C%2095%20100%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20200%20C%2040%20110%2C%2065%20110%2C%2095%20200%20S%20150%20290%2C%20180%20200%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%E4%B8%8A%E4%B8%8B%E7%AD%89%E5%90%8C--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20210%20C%2040%20120%2C%2065%20120%2C%2095%20210%20M95%20210%20C%20125%20300%2C%20150%20300%2C%20180%20210%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%3B%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300px<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300px<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 100 C 40 10, 65 10, 95 100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 200 C 40 110, 65 110, 95 200 S 150 290, 180 200<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!--上下等同--></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 210 C 40 120, 65 120, 95 210 M95 210 C 125 300, 150 300, 180 210<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000<span>;</span></span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p><code>三次贝塞尔曲线</code>相对于<code>二次贝塞尔曲线</code>拥有更大的自由度，但两种曲线能达到的<code>效果</code>是差不多的。最终选择使用哪种贝塞尔曲线，通常取决于需求，以及对曲线对称性的依赖程度。</p>\n<h6 id=\"a-elliptical-arc\" tabindex=\"-1\"> A（Elliptical Arc）</h6>\n<p><code>A</code>命令用于画<code>弧形</code>，它可以截取<code>圆</code>或<code>椭圆</code>的<code>弧形</code>成的曲线</p>\n<p><strong>语法：</strong> A rx ry x-axis-rotation large-arc-flag sweep-flag x y 或者 a rx ry x-axis-rotation large-arc-flag sweep-flag x y</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>rx、ry 分别为<code>X</code>轴的半径和<code>Y</code>轴的半径</li>\n<li>x-axis-rotation 为弧度在<code>X</code>轴的<code>旋转角度</code></li>\n<li>large-arc-flag 决定弧线是<code>大于</code>还是<code>小于</code>180度，<code>0</code>表示<code>小角度弧</code>，<code>1</code>表示<code>大角度弧</code></li>\n<li>sweep-flag 为<code>弧</code>的<code>方向</code>，<code>0</code>表示从起点到终点沿<code>逆时针</code>画弧，1表示从起点到终点沿<code>顺时针</code>画弧</li>\n<li>x、y 为弧形的<code>终点</code></li>\n</ul>\n\n<CodeDemo id=\"code-demo-9b13f488\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300px%5C%22%20height%3D%5C%22500px%5C%22%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20100%2050%20100%20%20A%2030%2050%200%200%201%20150%20100%20L%20200%20100%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%20%E6%97%8B%E8%BD%AC45%E5%BA%A6%E7%9A%84%E5%BC%A7%EF%BC%88%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%89%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20200%2050%20200%20%20A%2030%2050%2045%200%201%20150%20200%20L%20200%20200%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%201%E8%A1%A8%E7%A4%BA%E5%A4%A7%E8%A7%92%E5%BA%A6%E5%BC%A7%EF%BC%88%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%89%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20300%2050%20300%20%20A%2030%2050%20-45%201%201%20150%20300%20L%20200%20300%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%5C%22%2F%3E%5Cn%20%20%20%20%3C!--%200%E9%80%86%E6%97%B6%E9%92%88%EF%BC%88%E7%AC%AC%E4%BA%94%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%89%20--%3E%5Cn%20%20%20%20%3Cpath%20d%3D%5C%22M10%20400%2050%20400%20%20A%2030%2050%200%201%200%20150%20400%20L%20200%20400%5C%22%20fill%3D%5C%22none%5C%22%20style%3D%5C%22stroke%3A%20%23ff0000%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300px<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>500px<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 100 50 100  A 30 50 0 0 1 150 100 L 200 100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000</span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!-- 旋转45度的弧（第三个参数） --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 200 50 200  A 30 50 45 0 1 150 200 L 200 200<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000</span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!-- 1表示大角度弧（第四个参数） --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 300 50 300  A 30 50 -45 1 1 150 300 L 200 300<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000</span><span>\"</span></span></span><span>/></span></span>\n    <span>&lt;!-- 0逆时针（第五个参数） --></span>\n    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 400 50 400  A 30 50 0 1 0 150 400 L 200 400<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span><span>style</span><span><span>=</span><span>\"</span><span><span>stroke</span><span>:</span> #ff0000</span><span>\"</span></span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"填充和轮廓\" tabindex=\"-1\"> 填充和轮廓</h5>\n<h6 id=\"fill\" tabindex=\"-1\"> fill</h6>\n<p><code>fill</code>属性用于<code>填充</code>图形的<code>颜色</code></p>\n<p><strong>语法：</strong><code> fill= &quot;color&quot;</code> 或者 <code>style=&quot;fill: color&quot;</code></p>\n\n<CodeDemo id=\"code-demo-1e2b9ff0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20fill%3D%5C%22%23ff0000%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>从上面的示例中可以看出，在<code>不设置</code>fill属性的时候，其实<code>默认</code>是<code>黑色</code>的填充，这也就是为什么上面的很多例子设置了 <code>fill='none'</code> 其实就是去掉默认填充。</p>\n<p>fill属性其实还有一些延伸属性：</p>\n<h6 id=\"fill-opacity\" tabindex=\"-1\"> fill-opacity</h6>\n<p><code>fill-opacity</code>属性用于设置填充颜色的<code>透明度</code></p>\n\n<CodeDemo id=\"code-demo-1b40b7fe\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22400%5C%22%20height%3D%5C%22250%5C%22%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20fill%3D%5C%22%23ff0000%5C%22%2F%3E%5Cn%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%22130%5C%22%20r%3D%5C%2250%5C%22%20fill%3D%5C%22%2300ff00%5C%22%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%22130%5C%22%20r%3D%5C%2250%5C%22%20fill%3D%5C%22%2300ff00%5C%22%20fill-opacity%3D%5C%220.5%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>400<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>250<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span><span>/></span></span>\n\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>130<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#00ff00<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>130<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#00ff00<span>\"</span></span> <span>fill-opacity</span><span><span>=</span><span>\"</span>0.5<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"fill-rule\" tabindex=\"-1\"> fill-rule</h6>\n<p><code>fill-rule</code>属性用来设置<code>复杂形状</code>的<code>填充规则</code>。它有两种填充方式：<code>nonzero</code> 和 <code>evenodd</code>。该属性简单说就是判断某点属于该形状的<code>内部</code>还是<code>外部</code>。那么判断的规则是什么呢？</p>\n<ul>\n<li>nonzero</li>\n</ul>\n<p>nonzero为<code>默认值</code>，</p>\n<p>规则为：要判断一个点是否在图形内，从该点作<code>任意方向</code>的一条射线，然后检测<code>射线</code>与<code>图形路径</code>的<code>交点</code>情况。从0开始计数，路径从左向右（<code>顺时针</code>）穿过射线则计数<code>加1</code>，\n从右向左（<code>逆时针</code>）穿过射线则计数<code>减1</code>。得出计数结果后，如果结果是<code>0</code>，则认为点在图形<code>外部</code>，否则认为在<code>内部</code>。</p>\n\n<CodeDemo id=\"code-demo-6fed23da\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%2212cm%5C%22%20height%3D%5C%224cm%5C%22%20viewBox%3D%5C%220%200%201200%20400%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%3Cpath%20id%3D%5C%22Triangle%5C%22%20d%3D%5C%22M%2016%2C0%20L%20-8%2C9%20v-18%20z%5C%22%20fill%3D%5C%22%2366ff66%5C%22%20stroke%3D%5C%22none%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3Cg%20fill-rule%3D%5C%22nonzero%5C%22%20fill%3D%5C%22%236666ff%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20stroke-width%3D%5C%223%5C%22%20%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M%20250%2C75%20L%20323%2C301%20131%2C161%20369%2C161%20177%2C301%20z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(306.21%20249)%20rotate(72)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(175.16%2C193.2)%20rotate(216)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(314.26%2C161)%20rotate(0)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(221.16%2C268.8)%20rotate(144)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(233.21%2C126.98)%20rotate(288)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M%20600%2C81%20A%20107%2C107%200%200%2C1%20600%2C295%20A%20107%2C107%200%200%2C1%20600%2C81%20z%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20M%20600%2C139%20A%2049%2C49%200%200%2C1%20600%2C237%20A%2049%2C49%200%200%2C1%20600%2C139%20z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(0)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(120)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(240)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(60)%20translate(49%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(180)%20translate(49%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(300)%20translate(49%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M%20950%2C81%20A%20107%2C107%200%200%2C1%20950%2C295%20A%20107%2C107%200%200%2C1%20950%2C81%20z%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20M%20950%2C139%20A%2049%2C49%200%200%2C0%20950%2C237%20A%2049%2C49%200%200%2C0%20950%2C139%20z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(0)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(120)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(240)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(60)%20translate(49%2C0)%20rotate(-90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(180)%20translate(49%2C0)%20rotate(-90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(300)%20translate(49%2C0)%20rotate(-90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>12cm<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>4cm<span>\"</span></span> <span>viewBox</span><span><span>=</span><span>\"</span>0 0 1200 400<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>id</span><span><span>=</span><span>\"</span>Triangle<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M 16,0 L -8,9 v-18 z<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#66ff66<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill-rule</span><span><span>=</span><span>\"</span>nonzero<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#6666ff<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>3<span>\"</span></span> <span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M 250,75 L 323,301 131,161 369,161 177,301 z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(306.21 249) rotate(72)<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(175.16,193.2) rotate(216)<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(314.26,161) rotate(0)<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(221.16,268.8) rotate(144)<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(233.21,126.98) rotate(288)<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M 600,81 A 107,107 0 0,1 600,295 A 107,107 0 0,1 600,81 z\n              M 600,139 A 49,49 0 0,1 600,237 A 49,49 0 0,1 600,139 z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(0) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(120) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(240) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(60) translate(49,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(180) translate(49,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(300) translate(49,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M 950,81 A 107,107 0 0,1 950,295 A 107,107 0 0,1 950,81 z\n              M 950,139 A 49,49 0 0,0 950,237 A 49,49 0 0,0 950,139 z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(0) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(120) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(240) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(60) translate(49,0) rotate(-90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(180) translate(49,0) rotate(-90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(300) translate(49,0) rotate(-90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>PS：示例中的<code>绿色三角形</code>只是用来辅助理解的，可以忽略，只需要了解规则是<code>如何填充</code>的就行。</p>\n</div>\n<ul>\n<li>evenodd</li>\n</ul>\n<p>规则为：要判断一个点是否在图形内，从该点作<code>任意方向</code>的一条射线，然后检测<code>射线</code>与<code>图形路径</code>的<code>交点</code>的<code>数量</code>。如果结果是<code>奇数</code>则认为点在<code>内部</code>，是<code>偶数</code>则认为点在<code>外部</code>。</p>\n\n<CodeDemo id=\"code-demo-326e6f62\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%2212cm%5C%22%20height%3D%5C%224cm%5C%22%20viewBox%3D%5C%220%200%201200%20400%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%3Cpath%20id%3D%5C%22Triangle2%5C%22%20d%3D%5C%22M%2016%2C0%20L%20-8%2C9%20v-18%20z%5C%22%20fill%3D%5C%22%2366ff66%5C%22%20stroke%3D%5C%22none%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3Cg%20fill-rule%3D%5C%22evenodd%5C%22%20fill%3D%5C%22%236666ff%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20stroke-width%3D%5C%223%5C%22%20%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M%20250%2C75%20L%20323%2C301%20131%2C161%20369%2C161%20177%2C301%20z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(306.21%20249)%20rotate(72)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(175.16%2C193.2)%20rotate(216)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(314.26%2C161)%20rotate(0)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(221.16%2C268.8)%20rotate(144)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(233.21%2C126.98)%20rotate(288)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M%20600%2C81%20A%20107%2C107%200%200%2C1%20600%2C295%20A%20107%2C107%200%200%2C1%20600%2C81%20z%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20M%20600%2C139%20A%2049%2C49%200%200%2C1%20600%2C237%20A%2049%2C49%200%200%2C1%20600%2C139%20z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(0)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(120)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(240)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(60)%20translate(49%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(180)%20translate(49%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(600%2C188)%20rotate(300)%20translate(49%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M%20950%2C81%20A%20107%2C107%200%200%2C1%20950%2C295%20A%20107%2C107%200%200%2C1%20950%2C81%20z%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20M%20950%2C139%20A%2049%2C49%200%200%2C0%20950%2C237%20A%2049%2C49%200%200%2C0%20950%2C139%20z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(0)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(120)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(240)%20translate(107%2C0)%20rotate(90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(60)%20translate(49%2C0)%20rotate(-90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(180)%20translate(49%2C0)%20rotate(-90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%3Cuse%20xlink%3Ahref%3D%5C%22%23Triangle2%5C%22%20transform%3D%5C%22translate(950%2C188)%20rotate(300)%20translate(49%2C0)%20rotate(-90)%5C%22%20overflow%3D%5C%22visible%5C%22%20%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>12cm<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>4cm<span>\"</span></span> <span>viewBox</span><span><span>=</span><span>\"</span>0 0 1200 400<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>id</span><span><span>=</span><span>\"</span>Triangle2<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M 16,0 L -8,9 v-18 z<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#66ff66<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill-rule</span><span><span>=</span><span>\"</span>evenodd<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#6666ff<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>3<span>\"</span></span> <span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M 250,75 L 323,301 131,161 369,161 177,301 z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(306.21 249) rotate(72)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(175.16,193.2) rotate(216)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(314.26,161) rotate(0)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(221.16,268.8) rotate(144)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(233.21,126.98) rotate(288)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M 600,81 A 107,107 0 0,1 600,295 A 107,107 0 0,1 600,81 z\n                M 600,139 A 49,49 0 0,1 600,237 A 49,49 0 0,1 600,139 z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(0) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(120) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(240) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(60) translate(49,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(180) translate(49,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(600,188) rotate(300) translate(49,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M 950,81 A 107,107 0 0,1 950,295 A 107,107 0 0,1 950,81 z\n                M 950,139 A 49,49 0 0,0 950,237 A 49,49 0 0,0 950,139 z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(0) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(120) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(240) translate(107,0) rotate(90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(60) translate(49,0) rotate(-90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(180) translate(49,0) rotate(-90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n      <span><span><span>&lt;</span>use</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#Triangle2<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(950,188) rotate(300) translate(49,0) rotate(-90)<span>\"</span></span> <span>overflow</span><span><span>=</span><span>\"</span>visible<span>\"</span></span>  <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>PS：上面示例中的绿色三角形只是用来辅助理解的，可以忽略，咱们只需要了解规则是如何填充的就行。</p>\n</div>\n<h6 id=\"stroke\" tabindex=\"-1\"> stroke</h6>\n<p>stroke属性用来定义<code>线条</code>、<code>文本</code>或<code>元素</code> <code>轮廓</code> 的颜色。</p>\n<p><strong>语法：</strong> <code>stroke=&quot;color&quot;</code> 或者 <code>style=&quot;stroke: color&quot;</code></p>\n\n<CodeDemo id=\"code-demo-852b2e1a\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-width\" tabindex=\"-1\"> stroke-width</h6>\n<p><code>stroke-width</code>属性定义了轮廓的<code>宽度</code></p>\n\n<CodeDemo id=\"code-demo-9dd704e8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%22200%5C%22%20r%3D%5C%2250%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20stroke-width%3D%5C%225%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%22200%5C%22%20r%3D%5C%2250%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20stroke-width%3D%5C%2210%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>10<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-opacity\" tabindex=\"-1\"> stroke-opacity</h6>\n<p><code>stroke-opacity</code>属性用于设置轮廓的<code>透明度</code></p>\n\n<CodeDemo id=\"code-demo-39e08670\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%2250%5C%22%20r%3D%5C%2250%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%2280%5C%22%20cy%3D%5C%22100%5C%22%20r%3D%5C%2210%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20stroke-width%3D%5C%2250%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ccircle%20cx%3D%5C%22200%5C%22%20cy%3D%5C%22100%5C%22%20r%3D%5C%2210%5C%22%20stroke%3D%5C%22%23ff6666%5C%22%20fill%3D%5C%22none%5C%22%20stroke-width%3D%5C%2250%5C%22%20stroke-opacity%3D%5C%220.5%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>10<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>circle</span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>10<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff6666<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>stroke-opacity</span><span><span>=</span><span>\"</span>0.5<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-linecap\" tabindex=\"-1\"> stroke-linecap</h6>\n<p><code>stroke-linecap</code>属性定义了轮廓<code>终点</code>的<code>形状</code>，该属性有三个值：</p>\n<ul>\n<li>butt：默认值，以<code>直边</code>结束线段</li>\n<li>round：以<code>圆角</code>结束线段，圆角的半径由<code>stroke-width（轮廓宽度）</code>控制的</li>\n<li>square：也是以<code>直边</code>结束线段，但和<code>butt</code>不同的是会在结束位置多出一段由<code>stroke-width（轮廓宽度）</code>大小控制的长度。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-8e64aaa0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cg%20fill%3D%5C%22%23ffff00%5C%22%20stroke%3D%5C%22%23ff0000%5C%22%20stroke-width%3D%5C%2210%5C%22%3E%5Cn%20%20%20%20%20%20%3Cpath%20stroke-linecap%3D%5C%22butt%5C%22%20d%3D%5C%22M20%2050%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20stroke-linecap%3D%5C%22round%5C%22%20d%3D%5C%22M20%20100%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20stroke-linecap%3D%5C%22square%5C%22%20d%3D%5C%22M20%20150%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill</span><span><span>=</span><span>\"</span>#ffff00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>10<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>butt<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M20 50 l200 0<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>round<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M20 100 l200 0<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>square<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M20 150 l200 0<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-linejoin\" tabindex=\"-1\"> stroke-linejoin</h6>\n<p><code>stroke-linejoin</code>属性定义了轮廓<code>连接处</code>的<code>样式</code>。样式有三种类型：</p>\n<ul>\n<li>miter：默认值，表示用方形画笔在连接处形成<code>尖角</code></li>\n<li>round：用<code>圆角</code>连接，实现<code>平滑</code>效果</li>\n<li>bevel：连接处会形成一个<code>斜面</code></li>\n</ul>\n\n<CodeDemo id=\"code-demo-fe8a1098\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22160%5C%22%20height%3D%5C%22280%5C%22%3E%5Cn%20%20%20%20%3Cg%20fill%3D%5C%22none%5C%22%20stroke%3D%5C%22%23ff0000%5C%22%20stroke-width%3D%5C%2220%5C%22%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%2060%2080%2020%20120%2060%5C%22%20stroke-linecap%3D%5C%22butt%5C%22%20%20stroke-linejoin%3D%5C%22miter%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%20140%2080%20100%20120%20140%5C%22%20stroke-linecap%3D%5C%22round%5C%22%20%20stroke-linejoin%3D%5C%22round%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%20220%2080%20180%20120%20220%5C%22%20stroke-linecap%3D%5C%22square%5C%22%20%20stroke-linejoin%3D%5C%22bevel%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>160<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>280<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>20<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 60 80 20 120 60<span>\"</span></span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>butt<span>\"</span></span>  <span>stroke-linejoin</span><span><span>=</span><span>\"</span>miter<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 140 80 100 120 140<span>\"</span></span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>round<span>\"</span></span>  <span>stroke-linejoin</span><span><span>=</span><span>\"</span>round<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 220 80 180 120 220<span>\"</span></span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>square<span>\"</span></span>  <span>stroke-linejoin</span><span><span>=</span><span>\"</span>bevel<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-dasharray\" tabindex=\"-1\"> stroke-dasharray</h6>\n<p><code>stroke-dasharray</code>属性可以定义轮廓为<code>虚线</code></p>\n<p><strong>语法：</strong> <code>stroke-dasharray=&quot;xxx&quot;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>xxx 为一列数字字符串，对应的是：线段 空格 线段 空格......</li>\n</ul>\n\n<CodeDemo id=\"code-demo-031d9a0e\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Cg%20fill%3D%5C%22%23ffff00%5C%22%20stroke%3D%5C%22%23ff0000%5C%22%20stroke-width%3D%5C%225%5C%22%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M20%2050%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20stroke-dasharray%3D%5C%225%2C%2010%5C%22%20d%3D%5C%22M20%20100%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20stroke-dasharray%3D%5C%225%2C%2010%2C%205%5C%22%20d%3D%5C%22M20%20150%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20stroke-dasharray%3D%5C%2210%2C%205%2C%2020%5C%22%20d%3D%5C%22M20%20200%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill</span><span><span>=</span><span>\"</span>#ffff00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>5<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M20 50 l200 0<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>stroke-dasharray</span><span><span>=</span><span>\"</span>5, 10<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M20 100 l200 0<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>stroke-dasharray</span><span><span>=</span><span>\"</span>5, 10, 5<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M20 150 l200 0<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>stroke-dasharray</span><span><span>=</span><span>\"</span>10, 5, 20<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M20 200 l200 0<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-dashoffset\" tabindex=\"-1\"> stroke-dashoffset</h6>\n<p><code>stroke-dashoffset</code> 属性用于指定路径<code>开始</code>的<code>距离</code>。值可为<code>正值</code>、<code>负值</code>、<code>百分比</code>。</p>\n\n<CodeDemo id=\"code-demo-5bb8c404\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Cg%20fill%3D%5C%22%23ffff00%5C%22%20stroke%3D%5C%22%23ff0000%5C%22%20stroke-width%3D%5C%225%5C%22%20stroke-dasharray%3D%5C%2220%5C%22%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M50%2050%20l200%200%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M50%20100%20l200%200%5C%22%20stroke-dashoffset%3D%5C%2210%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M50%20150%20l200%200%5C%22%20%20stroke-dashoffset%3D%5C%221%25%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M50%20200%20l200%200%5C%22%20stroke-dashoffset%3D%5C%22-10%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill</span><span><span>=</span><span>\"</span>#ffff00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>stroke-dasharray</span><span><span>=</span><span>\"</span>20<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 50 l200 0<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 100 l200 0<span>\"</span></span> <span>stroke-dashoffset</span><span><span>=</span><span>\"</span>10<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 150 l200 0<span>\"</span></span>  <span>stroke-dashoffset</span><span><span>=</span><span>\"</span>1%<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M50 200 l200 0<span>\"</span></span> <span>stroke-dashoffset</span><span><span>=</span><span>\"</span>-10<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"stroke-miterlimit\" tabindex=\"-1\"> stroke-miterlimit</h6>\n<p>如果两条线交汇在一起形成一个<code>尖角</code>，而且属性 <code>stroke-linejoin</code> 指定了 <code>miter</code>，斜接有可能扩展到远远超过路径轮廓线的线宽。属性 stroke-miterlimit` 对斜接长度和stroke-width的比率强加了一个极限。当极限到达时，交汇处由斜接变成倒角。</p>\n\n<CodeDemo id=\"code-demo-228b84fe\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22200%5C%22%20height%3D%5C%22400%5C%22%3E%5Cn%20%20%20%20%3Cg%20fill%3D%5C%22none%5C%22%20stroke%3D%5C%22%23ff0000%5C%22%20stroke-width%3D%5C%2220%5C%22%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%2060%2080%2020%20120%2060%20120%2020%20150%2070%5C%22%20stroke-linejoin%3D%5C%22miter%5C%22%20stroke-miterlimit%3D%5C%221%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%20140%2080%20100%20120%20140%20120%20100%20150%20150%5C%22%20stroke-linejoin%3D%5C%22miter%5C%22%20stroke-miterlimit%3D%5C%222%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%20220%2080%20180%20120%20220%20120%20180%20150%20230%5C%22%20stroke-linejoin%3D%5C%22miter%5C%22%20stroke-miterlimit%3D%5C%223%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%20300%2080%20260%20120%20300%20120%20260%20150%20310%5C%22%20stroke-linejoin%3D%5C%22miter%5C%22%20stroke-miterlimit%3D%5C%224%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M40%20380%2080%20340%20120%20380%20120%20340%20150%20390%5C%22%20stroke-linejoin%3D%5C%22miter%5C%22%20stroke-miterlimit%3D%5C%225%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2Fg%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>400<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>g</span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#ff0000<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>20<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 60 80 20 120 60 120 20 150 70<span>\"</span></span> <span>stroke-linejoin</span><span><span>=</span><span>\"</span>miter<span>\"</span></span> <span>stroke-miterlimit</span><span><span>=</span><span>\"</span>1<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 140 80 100 120 140 120 100 150 150<span>\"</span></span> <span>stroke-linejoin</span><span><span>=</span><span>\"</span>miter<span>\"</span></span> <span>stroke-miterlimit</span><span><span>=</span><span>\"</span>2<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 220 80 180 120 220 120 180 150 230<span>\"</span></span> <span>stroke-linejoin</span><span><span>=</span><span>\"</span>miter<span>\"</span></span> <span>stroke-miterlimit</span><span><span>=</span><span>\"</span>3<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 300 80 260 120 300 120 260 150 310<span>\"</span></span> <span>stroke-linejoin</span><span><span>=</span><span>\"</span>miter<span>\"</span></span> <span>stroke-miterlimit</span><span><span>=</span><span>\"</span>4<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M40 380 80 340 120 380 120 340 150 390<span>\"</span></span> <span>stroke-linejoin</span><span><span>=</span><span>\"</span>miter<span>\"</span></span> <span>stroke-miterlimit</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;/</span>g</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"文字\" tabindex=\"-1\"> 文字</h4>\n<h5 id=\"text\" tabindex=\"-1\"> text</h5>\n<p>通过<code>text</code>标签可以在SVG中<code>添加文字</code>，</p>\n\n<CodeDemo id=\"code-demo-8c1edcf4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%2280%5C%22%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%3EHello%20Svg%20!%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>80<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span><span>></span></span>Hello Svg !<span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"x-和-y\" tabindex=\"-1\"> x 和 y</h6>\n<p><code>x</code>和<code>y</code>属性决定了文字的<code>绘制起点</code>。</p>\n<p>但需要注意的是<code>x</code>和<code>y</code>的值可以是一个<code>数列</code>。如果设置为了一个数列则会应用到<code>每一个字符</code>上</p>\n\n<CodeDemo id=\"code-demo-f40f5e54\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Ctext%20%5Cn%20%20%20%20%20%20x%3D%5C%2230%2060%2090%20120%20150%20180%20210%20240%20270%5C%22%20%5Cn%20%20%20%20%20%20y%3D%5C%2260%2090%20120%20150%20180%20150%20120%2090%2060%5C%22%5Cn%20%20%20%20%20%20fill%3D%5C%22%23f00%5C%22%20%5Cn%20%20%20%20%20%20stroke%3D%5C%22%230f0%5C%22%20%5Cn%20%20%20%20%20%20font-size%3D%5C%2250%5C%22%5Cn%20%20%20%20%20%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> \n      <span>x</span><span><span>=</span><span>\"</span>30 60 90 120 150 180 210 240 270<span>\"</span></span> \n      <span>y</span><span><span>=</span><span>\"</span>60 90 120 150 180 150 120 90 60<span>\"</span></span>\n      <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> \n      <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> \n      <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span>\n      <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"dx-和-dy\" tabindex=\"-1\"> dx 和 dy</h6>\n<p><code>dx</code>和<code>dy</code>属性与<code>x</code>和<code>y</code>属性不同的是，<code>x</code>和<code>y</code>属性是<code>绝对的坐标</code>，而<code>dx</code>和<code>dy</code>属性是相对于当前位置的<code>偏移量</code>。</p>\n<p>参数也可以是一个<code>数列</code>。如果设置为了一个数列则会应用到<code>每一个字符</code>上</p>\n\n<CodeDemo id=\"code-demo-9f2d49f4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%2280%5C%22%3E%5Cn%20%20%20%20%3Ctext%20%5Cn%20%20%20%20%20%20dx%3D%5C%2250%2010%2010%2010%2010%2010%2010%2010%2010%5C%22%20%5Cn%20%20%20%20%20%20dy%3D%5C%2250%2020%20-20%2020%20-20%2020%20-20%2020%20-20%5C%22%20%5Cn%20%20%20%20%20%20fill%3D%5C%22%23f00%5C%22%20%5Cn%20%20%20%20%20%20stroke%3D%5C%22%230f0%5C%22%20%5Cn%20%20%20%20%20%20font-size%3D%5C%2250%5C%22%5Cn%20%20%20%20%20%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>80<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> \n      <span>dx</span><span><span>=</span><span>\"</span>50 10 10 10 10 10 10 10 10<span>\"</span></span> \n      <span>dy</span><span><span>=</span><span>\"</span>50 20 -20 20 -20 20 -20 20 -20<span>\"</span></span> \n      <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> \n      <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> \n      <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span>\n      <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"rotate\" tabindex=\"-1\"> rotate</h6>\n<p><code>rotate</code>属性可以把文字<code>旋转</code>一个<code>角度</code>。</p>\n<p>同样的参数也可以是一个<code>数列</code>。如果设置为了一个数列则会应用到<code>每一个字符</code>上</p>\n\n<CodeDemo id=\"code-demo-be61b0d4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22150%5C%22%3E%5Cn%20%20%20%20%3Ctext%20%5Cn%20%20%20%20%20%20x%3D%5C%2250%5C%22%20%5Cn%20%20%20%20%20%20y%3D%5C%2250%5C%22%20%5Cn%20%20%20%20%20%20rotate%3D%5C%2210%5C%22%5Cn%20%20%20%20%20%20fill%3D%5C%22%23f00%5C%22%20%5Cn%20%20%20%20%20%20stroke%3D%5C%22%230f0%5C%22%20%5Cn%20%20%20%20%20%20font-size%3D%5C%2250%5C%22%5Cn%20%20%20%20%20%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%5Cn%20%20%20%20%20%20%20%20dx%3D%5C%2250%2020%2020%2020%2020%2020%2020%2020%2020%2020%2020%5C%22%5Cn%20%20%20%20%20%20%20%20y%3D%5C%22100%5C%22%5Cn%20%20%20%20%20%20%20%20rotate%3D%5C%220%2020%2040%2060%2080%20100%20120%20140%20160%20180%20200%5C%22%5Cn%20%20%20%20%20%20%20%20fill%3D%5C%22%23f00%5C%22%5Cn%20%20%20%20%20%20%20%20stroke%3D%5C%22%230f0%5C%22%5Cn%20%20%20%20%20%20%20%20font-size%3D%5C%2250%5C%22%5Cn%20%20%20%20%20%20%20%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>150<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> \n      <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> \n      <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> \n      <span>rotate</span><span><span>=</span><span>\"</span>10<span>\"</span></span>\n      <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> \n      <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> \n      <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span>\n      <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span>\n        <span>dx</span><span><span>=</span><span>\"</span>50 20 20 20 20 20 20 20 20 20 20<span>\"</span></span>\n        <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span>\n        <span>rotate</span><span><span>=</span><span>\"</span>0 20 40 60 80 100 120 140 160 180 200<span>\"</span></span>\n        <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span>\n        <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span>\n        <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span>\n        <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"textlength\" tabindex=\"-1\"> textLength</h6>\n<p><code>textLength</code>属性给定了一个<code>字符串</code>的<code>计算长度</code>。在文字的<code>长度</code>和<code>textLength</code>属性给定的长度<code>不一致</code>的情况下渲染引擎会精细<code>调整字型的位置</code>。</p>\n\n<CodeDemo id=\"code-demo-0360418c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22550%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%22110%5C%22%20textLength%3D%5C%22150%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20%20x%3D%5C%2250%5C%22%20y%3D%5C%22170%5C%22%20textLength%3D%5C%22500%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>550<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>110<span>\"</span></span> <span>textLength</span><span><span>=</span><span>\"</span>150<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span>  <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>170<span>\"</span></span> <span>textLength</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hello Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"lengthadjust\" tabindex=\"-1\"> lengthAdjust</h6>\n<p><code>lengthadjust</code>属性可以控制文本以<code>什么方式</code>伸展到由<code>_textLength_</code>属性定义的长度。</p>\n<p><strong>参数：</strong></p>\n<ul>\n<li>spacing：只<code>拉伸</code>或<code>压缩间距</code>（文字<code>不变形</code>）</li>\n<li>spacingAndGlyphs：同时<code>拉伸</code>或<code>压缩间距</code>和<code>文字本身</code>（文字变形）</li>\n</ul>\n\n<CodeDemo id=\"code-demo-9aa13ff8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22250%5C%22%3E%5Cn%20%20%20%20%3Ctext%20%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20textLength%3D%5C%22200%5C%22%20lengthadjust%3D%5C%22spacing%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Welcome%20to%20the%20world%20of%20svg%20!%20%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20%20x%3D%5C%2250%5C%22%20y%3D%5C%22100%5C%22%20textLength%3D%5C%22200%5C%22%20lengthadjust%3D%5C%22spacingAndGlyphs%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Welcome%20to%20the%20world%20of%20svg%20!%20%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20%20x%3D%5C%2250%5C%22%20y%3D%5C%22150%5C%22%20textLength%3D%5C%22400%5C%22%20lengthadjust%3D%5C%22spacing%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hi%20svg%20!%20%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20%20x%3D%5C%2250%5C%22%20y%3D%5C%22200%5C%22%20textLength%3D%5C%22400%5C%22%20lengthadjust%3D%5C%22spacingAndGlyphs%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20font-weight%3D%5C%22bold%5C%22%20%3E%5Cn%20%20%20%20%20%20Hi%20svg%20!%20%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>250<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span>  <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>textLength</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>lengthadjust</span><span><span>=</span><span>\"</span>spacing<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Welcome to the world of svg ! \n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span>  <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>textLength</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>lengthadjust</span><span><span>=</span><span>\"</span>spacingAndGlyphs<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Welcome to the world of svg ! \n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span>  <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>150<span>\"</span></span> <span>textLength</span><span><span>=</span><span>\"</span>400<span>\"</span></span> <span>lengthadjust</span><span><span>=</span><span>\"</span>spacing<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hi svg ! \n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span>  <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>textLength</span><span><span>=</span><span>\"</span>400<span>\"</span></span> <span>lengthadjust</span><span><span>=</span><span>\"</span>spacingAndGlyphs<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>></span></span>\n      Hi svg ! \n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"fill-和-stroke\" tabindex=\"-1\"> fill 和 stroke</h6>\n<p><code>填充</code>和<code>轮廓</code>也都可以应用于文字</p>\n\n<CodeDemo id=\"code-demo-5dc0aafc\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22100%5C%22%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-weight%3D%5C%22bold%5C%22%3EHello%20Svg%20!%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span><span>></span></span>Hello Svg !<span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h6 id=\"css文字属性\" tabindex=\"-1\"> CSS文字属性</h6>\n<p>一些<code>CSS</code>中的文字样式属性同样也可以应用于SVG的文字中。</p>\n<p><strong>例如</strong>：<code>font-size</code>、<code>font-family</code>、<code>font-style</code>、<code>font-variant</code>、<code>font-stretch</code>、<code>font-size-adjust</code>、<code>kerning</code>、<code>letter-spacing</code>、<code>word-spacing</code>、<code>text-decoration</code>等。</p>\n\n<CodeDemo id=\"code-demo-e6aef130\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22400%5C%22%20height%3D%5C%22100%5C%22%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-weight%3D%5C%22bold%5C%22%20font-size%3D%5C%2250%5C%22%20font-family%3D%5C%22arial%5C%22%3EHello%20Svg%20!%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>400<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>font-family</span><span><span>=</span><span>\"</span>arial<span>\"</span></span><span>></span></span>Hello Svg !<span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"tspan\" tabindex=\"-1\"> tspan</h5>\n<p><code>tspan</code>标签和<code>text</code>标签一样都可以用来<code>添加文字</code>，但不同的是<code>tspan标</code>签的作用为标记<code>大块文本</code>内的<code>部分内容</code>。比如一段文本其中某个字需要<code>加粗</code>或者<code>颜色</code>不一致，就可以用到<code>tspan</code>标签。</p>\n<p><code>tspan</code>标签的属性和<code>text</code>标签一致，上面说到的text标签的<code>属性</code>在tspan标签中也<code>适用</code>。</p>\n<p>需注意的是<code>tspan</code>标签<code>必须</code>是一个text<code>元素的</code>子元素<code>或别的</code>子元素tspan<code>的</code>子元素`。</p>\n\n<CodeDemo id=\"code-demo-f106ee1c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22550%5C%22%20height%3D%5C%22100%5C%22%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20%3Ctspan%20fill%3D%5C%22%23f0f%5C%22%20font-weight%3D%5C%22bold%5C%22%3E%20%E5%B0%8F%20%3C%2Ftspan%3E%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>550<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>></span></span>\n      Hello <span><span><span>&lt;</span>tspan</span> <span>fill</span><span><span>=</span><span>\"</span>#f0f<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span><span>></span></span> 小 <span><span><span>&lt;/</span>tspan</span><span>></span></span> Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>需要注意的是<code>tspan</code>标签的<code>x</code>、<code>y</code> 和 <code>dx</code>、<code>dy</code> 会对标签后面的内容造成影响</p>\n\n<CodeDemo id=\"code-demo-0f4b22f8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22550%5C%22%20height%3D%5C%22150%5C%22%3E%5Cn%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20fill%3D%5C%22%23f00%5C%22%20stroke%3D%5C%22%230f0%5C%22%20font-size%3D%5C%2250%5C%22%20%3E%5Cn%20%20%20%20%20%20Hello%20%3Ctspan%20x%3D%5C%22150%5C%22%20dy%3D%5C%2270%5C%22%20fill%3D%5C%22%23f0f%5C%22%20font-weight%3D%5C%22bold%5C%22%3E%20%E5%B0%8F%20%3C%2Ftspan%3E%20Svg%20!%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>550<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>150<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>></span></span>\n      Hello <span><span><span>&lt;</span>tspan</span> <span>x</span><span><span>=</span><span>\"</span>150<span>\"</span></span> <span>dy</span><span><span>=</span><span>\"</span>70<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f0f<span>\"</span></span> <span>font-weight</span><span><span>=</span><span>\"</span>bold<span>\"</span></span><span>></span></span> 小 <span><span><span>&lt;/</span>tspan</span><span>></span></span> Svg !\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"tref\" tabindex=\"-1\"> tref</h5>\n<p><code>tref</code>标签配合<code>xlink:href</code>属性能<code>引用</code>已经<code>定义的文本</code>，实现<code>复制</code>的效果。并且引用之后还可以单独定义样式。</p>\n<p>但遗憾的是<code>tref</code>标签是<code>SVG 1.1</code>规范的内容，它已经从<code>SVG 2.0</code>规范中<code>删除</code>了。</p>\n<p>因此此处可以使用<code>use</code>标签来代替它，这里说明一下：</p>\n<p><code>defs</code>标签可以定义一些之后绘制中需要<code>重复使用</code>的图形元素，<code>defs</code>是<code>definitions</code>的缩写。 <code>use</code>标签可以在SVG文档内<code>读取目标节点</code>，并在别的地方<code>复制使用</code>。</p>\n\n<CodeDemo id=\"code-demo-76012c80\" type=\"vue\" code=\"%7B%22html%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%20%20%5Cn%20%20%20%20%20%20%3Ctext%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20id%3D%5C%22tref-demo%5C%22%20stroke%3D%5C%22%23000%5C%22%20font-size%3D%5C%2230%5C%22%20%3E%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%E4%B8%8D%E9%94%99%EF%BC%81%3C%2Ftext%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3C!--%20tref%20%E5%B7%B2%E5%BA%9F%E5%BC%83%20--%3E%5Cn%20%20%20%20%3C!--%20%3Ctref%20x%3D%5C%2250%5C%22%20y%3D%5C%22100%5C%22%20fill%3D%5C%22%23f00%5C%22%20xlink%3Ahref%3D%5C%22%23text%5C%22%20%2F%3E%20--%3E%5Cn%20%20%20%20%3Cuse%20x%3D%5C%2250%5C%22%20y%3D%5C%2250%5C%22%20fill%3D%5C%22%230f0%5C%22%20xlink%3Ahref%3D%5C%22%23tref-demo%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cuse%20x%3D%5C%2250%5C%22%20y%3D%5C%22100%5C%22%20fill%3D%5C%22%230f0%5C%22%20rotate%3D%5C%2245%5C%22%20xlink%3Ahref%3D%5C%22%23tref-demo%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>  \n      <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>id</span><span><span>=</span><span>\"</span>tref-demo<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#000<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>></span></span>今天天气不错！<span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span>&lt;!-- tref 已废弃 --></span>\n    <span>&lt;!-- &lt;tref x=\"50\" y=\"100\" fill=\"#f00\" xlink:href=\"#text\" /> --></span>\n    <span><span><span>&lt;</span>use</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#tref-demo<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>use</span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#0f0<span>\"</span></span> <span>rotate</span><span><span>=</span><span>\"</span>45<span>\"</span></span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#tref-demo<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"textpath\" tabindex=\"-1\"> textPath</h5>\n<p><code>textPath</code>标签可以利用它的<code>xlink:href</code>属性取得一个<code>任意路径</code>，并且可以让字符顺着路径渲染。</p>\n\n<CodeDemo id=\"code-demo-6d805d8c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22600%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cpath%20id%3D%5C%22pathM%5C%22%20d%3D%5C%22M%2050%2050%20100%20100%20200%2050%20300%20100%5C%22%20fill%3D%5C%22none%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cpath%20id%3D%5C%22pathQ%5C%22%20d%3D%5C%22M50%20100%20Q%20175%20200%20300%20100%20T%20600%20100%5C%22%20fill%3D%5C%22none%5C%22%20%2F%3E%5Cn%20%20%20%20%3Ctext%3E%5Cn%20%20%20%20%20%20%3CtextPath%20xlink%3Ahref%3D%5C%22%23pathM%5C%22%3E%20Welcome%20to%20the%20world%20of%20SVG%20!%20%3C%2FtextPath%3E%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%3E%5Cn%20%20%20%20%20%20%3CtextPath%20xlink%3Ahref%3D%5C%22%23pathQ%5C%22%3E%20Welcome%20to%20the%20world%20of%20SVG%20!%20Welcome%20to%20the%20world%20of%20SVG%20!%20%3C%2FtextPath%3E%5Cn%20%20%20%20%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>600<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>id</span><span><span>=</span><span>\"</span>pathM<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M 50 50 100 100 200 50 300 100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>path</span> <span>id</span><span><span>=</span><span>\"</span>pathQ<span>\"</span></span> <span>d</span><span><span>=</span><span>\"</span>M50 100 Q 175 200 300 100 T 600 100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>text</span><span>></span></span>\n      <span><span><span>&lt;</span>textPath</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#pathM<span>\"</span></span><span>></span></span> Welcome to the world of SVG ! <span><span><span>&lt;/</span>textPath</span><span>></span></span>\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span><span>></span></span>\n      <span><span><span>&lt;</span>textPath</span> <span><span>xlink:</span>href</span><span><span>=</span><span>\"</span>#pathQ<span>\"</span></span><span>></span></span> Welcome to the world of SVG ! Welcome to the world of SVG ! <span><span><span>&lt;/</span>textPath</span><span>></span></span>\n    <span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"渐变\" tabindex=\"-1\"> 渐变</h3>\n<p>渐变就是从一个颜色<code>过渡</code>到另一个颜色，且渐变都分为<code>两种</code>渐变：<code>线性渐变</code>和<code>径向渐变</code></p>\n<p>但需要注意的是这里我们需要接触两个新的标签：</p>\n<ul>\n<li><code>defs</code>标签用来定义渐变</li>\n<li><code>stop</code>标签用来定义渐变的颜色坡度，具有三个属性：<code>offset</code>定义渐变开始和结束的位置、<code>stop-color</code>（定义颜色）和<code>stop-opacity</code>（定义透明度）</li>\n</ul>\n<h4 id=\"线性渐变-lineargradient\" tabindex=\"-1\"> 线性渐变（linearGradient）</h4>\n<p><strong>语法：</strong> <code>&lt;linearGradient x1=&quot;&quot; y1=&quot;&quot; x2=&quot;&quot; y2=&quot;&quot;&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>x1</code>、<code>y1</code>定义线性渐变的<code>起点</code></li>\n<li><code>x2</code>、<code>y2</code>定义渐变的<code>终点</code>。</li>\n</ul>\n\n<CodeDemo id=\"code-demo-5b2ba866\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22700%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%3ClinearGradient%20id%3D%5C%22linearGradient%5C%22%20x1%3D%5C%220%5C%22%20y1%3D%5C%220%5C%22%20x2%3D%5C%22100%25%5C%22%20y2%3D%5C%220%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C255%2C0)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C0%2C0)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FlinearGradient%3E%5Cn%20%20%20%20%20%20%3ClinearGradient%20id%3D%5C%22linearGradient1%5C%22%20x1%3D%5C%220%25%5C%22%20y1%3D%5C%220%25%5C%22%20x2%3D%5C%220%25%5C%22%20y2%3D%5C%22100%25%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C255%2C0)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C0%2C0)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FlinearGradient%3E%5Cn%20%20%20%20%20%20%3ClinearGradient%20id%3D%5C%22linearGradient2%5C%22%20x1%3D%5C%22100%25%5C%22%20y1%3D%5C%220%25%5C%22%20x2%3D%5C%220%25%5C%22%20y2%3D%5C%22100%25%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C255%2C0)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C0%2C0)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FlinearGradient%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22100%5C%22%20cy%3D%5C%2270%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%20fill%3D%5C%22url(%23linearGradient)%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22350%5C%22%20cy%3D%5C%2270%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%20fill%3D%5C%22url(%23linearGradient1)%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22600%5C%22%20cy%3D%5C%2270%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%20fill%3D%5C%22url(%23linearGradient2)%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>700<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>\n      <span><span><span>&lt;</span>linearGradient</span> <span>id</span><span><span>=</span><span>\"</span>linearGradient<span>\"</span></span> <span>x1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>0<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,255,0)<span>\"</span></span>  <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,0,0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>linearGradient</span><span>></span></span>\n      <span><span><span>&lt;</span>linearGradient</span> <span>id</span><span><span>=</span><span>\"</span>linearGradient1<span>\"</span></span> <span>x1</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>100%<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,255,0)<span>\"</span></span>  <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,0,0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>linearGradient</span><span>></span></span>\n      <span><span><span>&lt;</span>linearGradient</span> <span>id</span><span><span>=</span><span>\"</span>linearGradient2<span>\"</span></span> <span>x1</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>100%<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,255,0)<span>\"</span></span>  <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,0,0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>linearGradient</span><span>></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>70<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#linearGradient)<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>350<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>70<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#linearGradient1)<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>600<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>70<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#linearGradient2)<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"径向渐变-radialgradient\" tabindex=\"-1\"> 径向渐变（radialGradient）</h4>\n<p><strong>语法：</strong> <code>&lt;radialGradient cx=&quot;&quot; cy=&quot;&quot; r=&quot;&quot; fx=&quot;&quot; fy=&quot;&quot;&gt;</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><code>cx</code>、<code>cy</code>、<code>r</code>分别为圆的<code>坐标</code>和<code>半径</code>，也就是渐变的<code>范围</code></li>\n<li><code>fx</code>、<code>fy</code>定义渐变的<code>中心点</code>，也叫渐变的焦点</li>\n</ul>\n\n<CodeDemo id=\"code-demo-6768dcda\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22700%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%3CradialGradient%20id%3D%5C%22radialGradient%5C%22%20cx%3D%5C%2250%25%5C%22%20cy%3D%5C%2250%25%5C%22%20r%3D%5C%2250%25%5C%22%20fx%3D%5C%2250%25%5C%22%20fy%3D%5C%2250%25%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%20255%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%200%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FradialGradient%3E%5Cn%20%20%20%20%20%20%3CradialGradient%20id%3D%5C%22radialGradient1%5C%22%20cx%3D%5C%2250%25%5C%22%20cy%3D%5C%2250%25%5C%22%20r%3D%5C%2250%25%5C%22%20fx%3D%5C%2250%25%5C%22%20fy%3D%5C%220%25%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%20255%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%200%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FradialGradient%3E%5Cn%20%20%20%20%20%20%3CradialGradient%20id%3D%5C%22radialGradient2%5C%22%20cx%3D%5C%2250%25%5C%22%20cy%3D%5C%2250%25%5C%22%20r%3D%5C%2250%25%5C%22%20fx%3D%5C%220%25%5C%22%20fy%3D%5C%2250%25%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%20255%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%200%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FradialGradient%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22100%5C%22%20cy%3D%5C%22100%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%20fill%3D%5C%22url(%23radialGradient)%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22350%5C%22%20cy%3D%5C%22100%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%20fill%3D%5C%22url(%23radialGradient1)%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cellipse%20cx%3D%5C%22600%5C%22%20cy%3D%5C%22100%5C%22%20rx%3D%5C%22100%5C%22%20ry%3D%5C%2250%5C%22%20fill%3D%5C%22url(%23radialGradient2)%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>700<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>\n      <span><span><span>&lt;</span>radialGradient</span> <span>id</span><span><span>=</span><span>\"</span>radialGradient<span>\"</span></span> <span>cx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fy</span><span><span>=</span><span>\"</span>50%<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 255, 0)<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 0, 0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>radialGradient</span><span>></span></span>\n      <span><span><span>&lt;</span>radialGradient</span> <span>id</span><span><span>=</span><span>\"</span>radialGradient1<span>\"</span></span> <span>cx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fy</span><span><span>=</span><span>\"</span>0%<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 255, 0)<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 0, 0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>radialGradient</span><span>></span></span>\n      <span><span><span>&lt;</span>radialGradient</span> <span>id</span><span><span>=</span><span>\"</span>radialGradient2<span>\"</span></span> <span>cx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fx</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>fy</span><span><span>=</span><span>\"</span>50%<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 255, 0)<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 0, 0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>radialGradient</span><span>></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#radialGradient)<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>350<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#radialGradient1)<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>ellipse</span> <span>cx</span><span><span>=</span><span>\"</span>600<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>rx</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>ry</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#radialGradient2)<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"文字的渐变\" tabindex=\"-1\"> 文字的渐变</h4>\n\n<CodeDemo id=\"code-demo-2760c70d\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22600%5C%22%20height%3D%5C%22250%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%3ClinearGradient%20id%3D%5C%22linearGradient3%5C%22%20x1%3D%5C%220%5C%22%20y1%3D%5C%220%5C%22%20x2%3D%5C%22100%25%5C%22%20y2%3D%5C%220%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C255%2C0)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C0%2C0)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FlinearGradient%3E%5Cn%20%20%20%20%20%20%3CradialGradient%20id%3D%5C%22radialGradient3%5C%22%20cx%3D%5C%2250%25%5C%22%20cy%3D%5C%2250%25%5C%22%20r%3D%5C%2250%25%5C%22%20fx%3D%5C%2250%25%5C%22%20fy%3D%5C%22100%25%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%20255%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C%200%2C%200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FradialGradient%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3Ctext%20fill%3D%5C%22url(%23linearGradient3)%5C%22%20font-size%3D%5C%22100%5C%22%20font-family%3D%5C%22Verdana%5C%22%20x%3D%5C%2250%5C%22%20y%3D%5C%22100%5C%22%3ESVG%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20stroke%3D%5C%22url(%23linearGradient3)%5C%22%20stroke-width%3D%5C%225%5C%22%20fill%3D%5C%22none%5C%22%20font-size%3D%5C%22100%5C%22%20font-family%3D%5C%22Verdana%5C%22%20x%3D%5C%2250%5C%22%20y%3D%5C%22200%5C%22%3ESVG%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20fill%3D%5C%22url(%23radialGradient3)%5C%22%20font-size%3D%5C%22100%5C%22%20font-family%3D%5C%22Verdana%5C%22%20x%3D%5C%22300%5C%22%20y%3D%5C%22100%5C%22%3ESVG%3C%2Ftext%3E%5Cn%20%20%20%20%3Ctext%20stroke%3D%5C%22url(%23radialGradient3)%5C%22%20stroke-width%3D%5C%225%5C%22%20fill%3D%5C%22none%5C%22%20font-size%3D%5C%22100%5C%22%20font-family%3D%5C%22Verdana%5C%22%20x%3D%5C%22300%5C%22%20y%3D%5C%22200%5C%22%3ESVG%3C%2Ftext%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>600<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>250<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>\n      <span><span><span>&lt;</span>linearGradient</span> <span>id</span><span><span>=</span><span>\"</span>linearGradient3<span>\"</span></span> <span>x1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>0<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,255,0)<span>\"</span></span>  <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,0,0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>linearGradient</span><span>></span></span>\n      <span><span><span>&lt;</span>radialGradient</span> <span>id</span><span><span>=</span><span>\"</span>radialGradient3<span>\"</span></span> <span>cx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fx</span><span><span>=</span><span>\"</span>50%<span>\"</span></span> <span>fy</span><span><span>=</span><span>\"</span>100%<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 255, 0)<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255, 0, 0)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>radialGradient</span><span>></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>fill</span><span><span>=</span><span>\"</span>url(#linearGradient3)<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>font-family</span><span><span>=</span><span>\"</span>Verdana<span>\"</span></span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>SVG<span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>stroke</span><span><span>=</span><span>\"</span>url(#linearGradient3)<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>font-family</span><span><span>=</span><span>\"</span>Verdana<span>\"</span></span> <span>x</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>SVG<span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>fill</span><span><span>=</span><span>\"</span>url(#radialGradient3)<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>font-family</span><span><span>=</span><span>\"</span>Verdana<span>\"</span></span> <span>x</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span><span>></span></span>SVG<span><span><span>&lt;/</span>text</span><span>></span></span>\n    <span><span><span>&lt;</span>text</span> <span>stroke</span><span><span>=</span><span>\"</span>url(#radialGradient3)<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>5<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>font-size</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>font-family</span><span><span>=</span><span>\"</span>Verdana<span>\"</span></span> <span>x</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>SVG<span><span><span>&lt;/</span>text</span><span>></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"裁剪和蒙层\" tabindex=\"-1\"> 裁剪和蒙层</h3>\n<h4 id=\"裁剪\" tabindex=\"-1\"> 裁剪</h4>\n<p>使用<code>clipPath</code>标签定义一条裁剪路径，用来裁<code>剪掉元素的部分内容</code>。且任何<code>透明度</code>的效果都是<code>无效的</code>，它只能要么裁剪掉要么不裁剪。</p>\n\n<CodeDemo id=\"code-demo-e5368b22\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%3CclipPath%20id%3D%5C%22clipPath%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M10%2050%20A50%2050%200%200%201%20100%2050%20A50%2050%200%200%201%20190%2050%20Q210%20100%20100%20200%20%20Q-5%20100%2010%2050%20Z%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FclipPath%3E%5Cn%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22200%5C%22%20height%3D%5C%22200%5C%22%20fill%3D%5C%22%23fa0%5C%22%20clip-path%3D%5C%22url(%23clipPath)%5C%22%20%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>defs</span><span>></span></span>\n      <span><span><span>&lt;</span>clipPath</span> <span>id</span><span><span>=</span><span>\"</span>clipPath<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 50 A50 50 0 0 1 100 50 A50 50 0 0 1 190 50 Q210 100 100 200  Q-5 100 10 50 Z<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>clipPath</span><span>></span></span>\n    <span><span><span>&lt;/</span>defs</span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#fa0<span>\"</span></span> <span>clip-path</span><span><span>=</span><span>\"</span>url(#clipPath)<span>\"</span></span>  <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"蒙层\" tabindex=\"-1\"> 蒙层</h4>\n<p>蒙层的功能主要实现标签就是<code>mask</code>标签，他的功能和名字正好相反，他<code>不是</code>用来<code>遮住元素</code>的部分内容，而是用来<code>显示元素</code>中<code>mask</code>标签<code>遮住的内容</code>。他和<code>clipPath</code>标签<code>不同</code>的是允许使用<code>透明度</code>（<code>透明度为0则无蒙层效果</code>）和<code>灰度值遮罩</code>计算得的<code>软边缘</code>。</p>\n\n<CodeDemo id=\"code-demo-99d4fb6c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%20%3Csvg%20width%3D%5C%22300%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%20%3Cmask%20id%3D%5C%22Mask%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cpath%20d%3D%5C%22M10%2050%20A50%2050%200%200%201%20100%2050%20A50%2050%200%200%201%20190%2050%20Q210%20100%20100%20200%20%20Q-5%20100%2010%2050%20Z%5C%22%20fill%3D%5C%22%23fff%5C%22%20fill-opacity%3D%5C%220.5%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%3C%2Fmask%3E%5Cn%20%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22200%5C%22%20height%3D%5C%22200%5C%22%20fill%3D%5C%22%23f00%5C%22%20mask%3D%5C%22url(%23Mask)%5C%22%20%2F%3E%5Cn%20%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n   <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n     <span><span><span>&lt;</span>defs</span><span>></span></span>\n       <span><span><span>&lt;</span>mask</span> <span>id</span><span><span>=</span><span>\"</span>Mask<span>\"</span></span><span>></span></span>\n         <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>\"</span>M10 50 A50 50 0 0 1 100 50 A50 50 0 0 1 190 50 Q210 100 100 200  Q-5 100 10 50 Z<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#fff<span>\"</span></span> <span>fill-opacity</span><span><span>=</span><span>\"</span>0.5<span>\"</span></span> <span>/></span></span>\n       <span><span><span>&lt;/</span>mask</span><span>></span></span>\n     <span><span><span>&lt;/</span>defs</span><span>></span></span>\n     <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#f00<span>\"</span></span> <span>mask</span><span><span>=</span><span>\"</span>url(#Mask)<span>\"</span></span> <span>/></span></span>\n   <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h3 id=\"动画\" tabindex=\"-1\"> 动画</h3>\n<h4 id=\"基础动画\" tabindex=\"-1\"> 基础动画</h4>\n<h5 id=\"translate-平移\" tabindex=\"-1\"> translate（平移）</h5>\n<p><strong>语法：</strong> <code>transform=&quot;translate(x, y)&quot;</code>\n<strong>参数：</strong></p>\n<ul>\n<li>x为<code>X轴</code>上的平移距离</li>\n<li>y为<code>Y轴</code>上的平移距离</li>\n</ul>\n\n<CodeDemo id=\"code-demo-0c27182c\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22150%5C%22%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%2250%5C%22%20fill%3D%5C%22%23ff770f%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20%20width%3D%5C%22100%5C%22%20height%3D%5C%2250%5C%22%20fill%3D%5C%22%23ff770f%5C%22%20transform%3D%5C%22translate(100%2C%2050)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20%20width%3D%5C%22100%5C%22%20height%3D%5C%2250%5C%22%20fill%3D%5C%22%23ff770f%5C%22%20transform%3D%5C%22translate(200%2C%20100)%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>150<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span>  <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(100, 50)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span>  <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>translate(200, 100)<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"scale-缩放\" tabindex=\"-1\"> scale（缩放）</h5>\n<p><strong>语法：</strong>  <code>transform=&quot;scale(x, y)&quot;</code>\n<strong>参数：</strong></p>\n<ul>\n<li>x为<code>X轴</code>上的缩放大小</li>\n<li>y为<code>Y轴</code>上的缩放大小</li>\n</ul>\n\n<CodeDemo id=\"code-demo-eecc56f8\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22300%5C%22%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23ff770f%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%22200%5C%22%20%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%237e9178%5C%22%20transform%3D%5C%22scale(0.5)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%22100%5C%22%20%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23183c78%5C%22%20%20transform%3D%5C%22scale(1.5)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%22100%5C%22%20%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23cccccc%5C%22%20%20transform%3D%5C%22scale(1%2C%200.5)%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>300<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>200<span>\"</span></span>  <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#7e9178<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>scale(0.5)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span>  <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#183c78<span>\"</span></span>  <span>transform</span><span><span>=</span><span>\"</span>scale(1.5)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>100<span>\"</span></span>  <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#cccccc<span>\"</span></span>  <span>transform</span><span><span>=</span><span>\"</span>scale(1, 0.5)<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"rotate-旋转\" tabindex=\"-1\"> rotate（旋转）</h5>\n<p><strong>语法：</strong> <code>transform=&quot;rotate(deg)&quot;</code></p>\n<p><strong>参数：</strong> <code>deg</code>为旋转的角度。</p>\n\n<CodeDemo id=\"code-demo-18d5d238\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22320%5C%22%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23ff770f%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23cccccc%5C%22%20transform%3D%5C%22rotate(20)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%237e9178%5C%22%20transform%3D%5C%22rotate(40)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23183c78%5C%22%20%20transform%3D%5C%22rotate(60)%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>320<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#cccccc<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>rotate(20)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#7e9178<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>rotate(40)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#183c78<span>\"</span></span>  <span>transform</span><span><span>=</span><span>\"</span>rotate(60)<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"transform-origin-旋转中心点\" tabindex=\"-1\"> transform-origin（旋转中心点）</h5>\n<div>\n<p>Tips</p>\n<p>元素的<code>旋转中心点</code>是<code>(0, 0)</code>。如果想要<code>只是旋转而不位移</code>，那么就需要把旋转的中心点设置在<code>元素</code>的<code>中心点</code>。</p>\n<p>以上面的例子为例，\n元素的x坐标为<code>200</code>，本身宽度为<code>100</code>，则<code>x轴元素</code>的中心点就为<code>250</code>。\n元素的y坐标为<code>0</code>，高度为<code>100</code>，则<code>y轴元素</code>的中心点为<code>50</code>。\n因此元素的中心点就为<code>(250, 50)</code>。\n但是原地旋转导致部分遮挡，所以稍微调整<code>初始y坐标</code>及<code>中心点y坐标</code>。</p>\n</div>\n\n<CodeDemo id=\"code-demo-68711bf0\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22160%5C%22%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%2230%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23ff770f%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%2230%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23cccccc%5C%22%20transform-origin%3D%5C%22250%2065%5C%22%20transform%3D%5C%22rotate(20)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%2230%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%237e9178%5C%22%20transform-origin%3D%5C%22250%2065%5C%22%20transform%3D%5C%22rotate(40)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22200%5C%22%20y%3D%5C%2230%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23183c78%5C%22%20transform-origin%3D%5C%22250%2065%5C%22%20transform%3D%5C%22rotate(60)%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>160<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#cccccc<span>\"</span></span> <span>transform-origin</span><span><span>=</span><span>\"</span>250 65<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>rotate(20)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#7e9178<span>\"</span></span> <span>transform-origin</span><span><span>=</span><span>\"</span>250 65<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>rotate(40)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#183c78<span>\"</span></span> <span>transform-origin</span><span><span>=</span><span>\"</span>250 65<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>rotate(60)<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h5 id=\"skew-倾斜\" tabindex=\"-1\"> skew（倾斜）</h5>\n<p><strong>语法：</strong> <code>transform=&quot;skewX(x) skewY(y)&quot;</code></p>\n<p><strong>参数：</strong> x为X轴上的<code>倾斜度</code>，y为Y轴上的<code>倾斜度</code>。</p>\n<p>在SVG中<code>skew</code>属性需要分开设置，x轴设置为<code>skewX</code>，y轴设置为<code>skewY</code>，不能合并起来用，写成 <code>skew(x, y)</code> 是<strong>不生效</strong>的。</p>\n\n<CodeDemo id=\"code-demo-256ac903\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22700%5C%22%20height%3D%5C%22200%5C%22%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23ff770f%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22150%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23cccccc%5C%22%20transform%3D%5C%22skewX(10)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22300%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%237e9178%5C%22%20transform%3D%5C%22skewY(10)%5C%22%2F%3E%5Cn%20%20%20%20%3Crect%20x%3D%5C%22450%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23183c78%5C%22%20transform%3D%5C%22skewX(10)%20skewY(10)%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>700<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>150<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#cccccc<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>skewX(10)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>300<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#7e9178<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>skewY(10)<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>x</span><span><span>=</span><span>\"</span>450<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#183c78<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>skewX(10) skewY(10)<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"js动画\" tabindex=\"-1\"> JS动画</h4>\n<p>在文章最开始的时候就说过：SVG <code>不能</code> <code>动态</code> 的 <code>修改</code> 动画 <code>内容</code>。</p>\n<p>所以CSS3的过渡属性就不好使了，那么想实现动画就只能使用js的定时器（setInterval）来实现。</p>\n\n<CodeDemo id=\"code-demo-34eb7b70\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22500%5C%22%3E%5Cn%20%20%20%20%3Crect%20id%3D%5C%22transform-svg%5C%22%20x%3D%5C%220%5C%22%20y%3D%5C%220%5C%22%20width%3D%5C%22100%5C%22%20height%3D%5C%22100%5C%22%20fill%3D%5C%22%23ff770f%5C%22%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20export%20default%20%7B%5Cn%20%20%20%20mounted()%20%7B%5Cn%20%20%20%20%20%20const%20svgEl%20%3D%20document.getElementById('transform-svg')%5Cn%20%20%20%20%20%20let%20x%20%3D%200%2C%20y%20%3D%200%2C%20add%20%3D%20true%5Cn%20%20%20%20%20%20setInterval(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if(x%20%3C%20400)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20x%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20x%20%3D%200%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20if(y%20%3C%20400)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20y%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20y%20%3D%200%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20svgEl.setAttribute('transform'%2C%20%60translate(%24%7Bx%7D%2C%20%24%7By%7D)%60)%5Cn%20%20%20%20%20%20%7D%2C%2010)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>500<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>rect</span> <span>id</span><span><span>=</span><span>\"</span>transform-svg<span>\"</span></span> <span>x</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#ff770f<span>\"</span></span><span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>export</span> <span>default</span> <span>{</span>\n    <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n      <span>const</span> svgEl <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'transform-svg'</span><span>)</span>\n      <span>let</span> x <span>=</span> <span>0</span><span>,</span> y <span>=</span> <span>0</span><span>,</span> add <span>=</span> <span>true</span>\n      <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n        <span>if</span><span>(</span>x <span>&lt;</span> <span>400</span><span>)</span> <span>{</span>\n          x <span>+=</span> <span>1</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          x <span>=</span> <span>0</span>\n        <span>}</span>\n        <span>if</span><span>(</span>y <span>&lt;</span> <span>400</span><span>)</span> <span>{</span>\n          y <span>+=</span> <span>1</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          y <span>=</span> <span>0</span>\n        <span>}</span>\n        svgEl<span>.</span><span>setAttribute</span><span>(</span><span>'transform'</span><span>,</span> <span><span>`</span><span>translate(</span><span><span>${</span>x<span>}</span></span><span>, </span><span><span>${</span>y<span>}</span></span><span>)</span><span>`</span></span><span>)</span>\n      <span>}</span><span>,</span> <span>10</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>那么SVG最拿得出手的<code>线条动画</code>又如何用js来实现呢？</p>\n<p>比如需要变换图形：</p>\n\n<CodeDemo id=\"code-demo-b0f64ce4\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20width%3D%5C%22500%5C%22%20height%3D%5C%22200%5C%22%20fill%3D%5C%22orange%5C%22%3E%5Cn%20%20%20%20%3Cpath%20id%3D%5C%22svgPath%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20mounted()%20%7B%5Cn%20%20%20%20const%20svgPath%20%3D%20document.getElementById('svgPath')%5Cn%20%20%20%20let%20x%20%3D%20250%2C%20x1%20%3D%20250%2C%20y%20%3D%20100%5Cn%20%20%20%20setInterval(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if(x%20%3C%20350)%20%7B%5Cn%20%20%20%20%20%20%20%20x%20%2B%3D%200.1%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20x1%20%3D%20300%5Cn%20%20%20%20%20%20%20%20if(y%20%3C%20200%20)%20y%20%2B%3D%200.1%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20svgPath.setAttribute('d'%2C%20%60M%20250%20100%20300%200%20%24%7Bx%7D%20100%20%24%7Bx1%7D%20%24%7By%7D%20z%60)%5Cn%20%20%20%20%7D%2C%200)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>orange<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>path</span> <span>id</span><span><span>=</span><span>\"</span>svgPath<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> svgPath <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'svgPath'</span><span>)</span>\n    <span>let</span> x <span>=</span> <span>250</span><span>,</span> x1 <span>=</span> <span>250</span><span>,</span> y <span>=</span> <span>100</span>\n    <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>if</span><span>(</span>x <span>&lt;</span> <span>350</span><span>)</span> <span>{</span>\n        x <span>+=</span> <span>0.1</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        x1 <span>=</span> <span>300</span>\n        <span>if</span><span>(</span>y <span>&lt;</span> <span>200</span> <span>)</span> y <span>+=</span> <span>0.1</span>\n      <span>}</span>\n      svgPath<span>.</span><span>setAttribute</span><span>(</span><span>'d'</span><span>,</span> <span><span>`</span><span>M 250 100 300 0 </span><span><span>${</span>x<span>}</span></span><span> 100 </span><span><span>${</span>x1<span>}</span></span><span> </span><span><span>${</span>y<span>}</span></span><span> z</span><span>`</span></span><span>)</span>\n    <span>}</span><span>,</span> <span>0</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><h4 id=\"css动画\" tabindex=\"-1\"> CSS动画</h4>\n<p>这里需要用上三个属性：分别是 <code>stroke</code>、<code>stroke-dasharray</code>、<code>stroke-dashoffset</code>。</p>\n\n<CodeDemo id=\"code-demo-5daf392e\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Csvg%20id%3D%5C%22css-demo-svg%5C%22%20width%3D%5C%22500%5C%22%20height%3D%5C%2250%5C%22%20xmlns%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%5C%22%20version%3D%5C%221.1%5C%22%3E%5Cn%20%20%20%20%3Cline%20id%3D%5C%22css-svg-demo-line%5C%22%20x1%3D%5C%220%5C%22%20x2%3D%5C%22500%5C%22%20y1%3D%5C%220%5C%22%20y2%3D%5C%220%5C%22%20stroke%3D%5C%22orange%5C%22%20stroke-width%3D%5C%2210%5C%22%20%2F%3E%5Cn%20%20%3C%2Fsvg%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cstyle%3E%5Cn%20%20%23css-demo-svg%20%7B%5Cn%20%20%20%20display%3A%20block%3B%5Cn%20%20%20%20margin%3A%2050px%20auto%3B%5Cn%20%20%7D%5Cn%20%20%23css-demo-svg-line%20%7B%5Cn%20%20%20%20stroke-dasharray%3A%20500%3B%5Cn%20%20%20%20stroke-dashoffset%3A%20500%3B%5Cn%20%20%20%20animation%3A%20animation%202s%20linear%20infinite%3B%5Cn%20%20%7D%5Cn%20%20%40keyframes%20animation%20%7B%5Cn%20%20%20%20to%20%7B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%200%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>svg</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>50<span>\"</span></span> <span>xmlns</span><span><span>=</span><span>\"</span>http://www.w3.org/2000/svg<span>\"</span></span> <span>version</span><span><span>=</span><span>\"</span>1.1<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>line</span> <span>id</span><span><span>=</span><span>\"</span>css-svg-demo-line<span>\"</span></span> <span>x1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>orange<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>10<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>svg</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>#css-demo-svg</span> <span>{</span>\n    <span>display</span><span>:</span> block<span>;</span>\n    <span>margin</span><span>:</span> 50px auto<span>;</span>\n  <span>}</span>\n  <span>#css-demo-svg-line</span> <span>{</span>\n    <span>stroke-dasharray</span><span>:</span> 500<span>;</span>\n    <span>stroke-dashoffset</span><span>:</span> 500<span>;</span>\n    <span>animation</span><span>:</span> animation 2s linear infinite<span>;</span>\n  <span>}</span>\n  <span><span>@keyframes</span> animation</span> <span>{</span>\n    <span>to</span> <span>{</span>\n      <span>stroke-dashoffset</span><span>:</span> 0<span>;</span>\n    <span>}</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>按照这个逻辑搞一个按钮的线条动画吧。</p>\n\n<CodeDemo id=\"code-demo-35996ace\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20id%3D%5C%22css-demo-svg-body%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22css-demo-svg-div%5C%22%3E%5Cn%20%20%20%20%20%20%3Csvg%20height%3D%5C%2260%5C%22%20width%3D%5C%22320%5C%22%20xmlns%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Ctext%20x%3D%5C%2280%5C%22%20y%3D%5C%2240%5C%22%20class%3D%5C%22text%5C%22%20%20font-size%3D%5C%2230%5C%22%20fill%3D%5C%22%23fff%5C%22%3EHello%20SVG%3C%2Ftext%3E%5Cn%20%20%20%20%20%20%20%20%3Crect%20id%3D%5C%22css-demo-svg-rect%5C%22%20height%3D%5C%2260%5C%22%20width%3D%5C%22320%5C%22%20stroke%3D%5C%22%23fff%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2Fsvg%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cstyle%3E%5Cn%20%20%23css-demo-svg-body%20%7B%5Cn%20%20%20%20background%3A%20%23000000%3B%5Cn%20%20%20%20%2F*margin-top%3A%20100px%3B*%2F%5Cn%20%20%20%20height%3A%20100px%3B%5Cn%20%20%7D%5Cn%20%20%23css-demo-svg-div%20%7B%5Cn%20%20%20%20height%3A%2050px%3B%5Cn%20%20%20%20margin%3A%200%20auto%3B%5Cn%20%20%20%20position%3A%20relative%3B%5Cn%20%20%20%20top%3A%2050%25%3B%5Cn%20%20%20%20transform%3A%20translateY(-50%25)%3B%5Cn%20%20%20%20width%3A%20320px%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%23css-demo-svg-rect%20%7B%5Cn%20%20%20%20fill%3A%20transparent%3B%5Cn%20%20%20%20stroke-dasharray%3A%20200%20540%3B%5Cn%20%20%20%20stroke-dashoffset%3A%20-445%3B%5Cn%20%20%20%20stroke-width%3A%208px%3B%5Cn%20%20%7D%5Cn%20%20%40keyframes%20draw%20%7B%5Cn%20%20%20%200%25%20%7B%5Cn%20%20%20%20%20%20stroke-dasharray%3A%20200%20540%3B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%20-445%3B%5Cn%20%20%20%20%20%20stroke-width%3A%208px%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20100%25%20%7B%5Cn%20%20%20%20%20%20stroke-dasharray%3A%20760%3B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%200%3B%5Cn%20%20%20%20%20%20stroke-width%3A%202px%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20%23css-demo-svg-div%3Ahover%20%23css-demo-svg-rect%20%7B%5Cn%20%20%20%20-webkit-animation%3A%200.5s%20draw%20linear%20forwards%3B%5Cn%20%20%20%20animation%3A%200.5s%20draw%20linear%20forwards%3B%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg-body<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg-div<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>svg</span> <span>height</span><span><span>=</span><span>\"</span>60<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>320<span>\"</span></span> <span>xmlns</span><span><span>=</span><span>\"</span>http://www.w3.org/2000/svg<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>40<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>text<span>\"</span></span>  <span>font-size</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>#fff<span>\"</span></span><span>></span></span>Hello SVG<span><span><span>&lt;/</span>text</span><span>></span></span>\n        <span><span><span>&lt;</span>rect</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg-rect<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>60<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>320<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#fff<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>svg</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>#css-demo-svg-body</span> <span>{</span>\n    <span>background</span><span>:</span> #000000<span>;</span>\n    <span>/*margin-top: 100px;*/</span>\n    <span>height</span><span>:</span> 100px<span>;</span>\n  <span>}</span>\n  <span>#css-demo-svg-div</span> <span>{</span>\n    <span>height</span><span>:</span> 50px<span>;</span>\n    <span>margin</span><span>:</span> 0 auto<span>;</span>\n    <span>position</span><span>:</span> relative<span>;</span>\n    <span>top</span><span>:</span> 50%<span>;</span>\n    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>-50%<span>)</span><span>;</span>\n    <span>width</span><span>:</span> 320px<span>;</span>\n  <span>}</span>\n\n  <span>#css-demo-svg-rect</span> <span>{</span>\n    <span>fill</span><span>:</span> transparent<span>;</span>\n    <span>stroke-dasharray</span><span>:</span> 200 540<span>;</span>\n    <span>stroke-dashoffset</span><span>:</span> -445<span>;</span>\n    <span>stroke-width</span><span>:</span> 8px<span>;</span>\n  <span>}</span>\n  <span><span>@keyframes</span> draw</span> <span>{</span>\n    <span>0%</span> <span>{</span>\n      <span>stroke-dasharray</span><span>:</span> 200 540<span>;</span>\n      <span>stroke-dashoffset</span><span>:</span> -445<span>;</span>\n      <span>stroke-width</span><span>:</span> 8px<span>;</span>\n    <span>}</span>\n    <span>100%</span> <span>{</span>\n      <span>stroke-dasharray</span><span>:</span> 760<span>;</span>\n      <span>stroke-dashoffset</span><span>:</span> 0<span>;</span>\n      <span>stroke-width</span><span>:</span> 2px<span>;</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>#css-demo-svg-div:hover #css-demo-svg-rect</span> <span>{</span>\n    <span>-webkit-animation</span><span>:</span> 0.5s draw linear forwards<span>;</span>\n    <span>animation</span><span>:</span> 0.5s draw linear forwards<span>;</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><p>把<code>填充</code>和<code>轮廓</code>弄一些填充，效果就更好看了</p>\n\n<CodeDemo id=\"code-demo-44219d4a\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20id%3D%5C%22css-demo-svg-body2%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22css-demo-svg-div2%5C%22%3E%5Cn%20%20%20%20%20%20%3Csvg%20height%3D%5C%2260%5C%22%20width%3D%5C%22320%5C%22%20xmlns%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cdefs%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3ClinearGradient%20id%3D%5C%22linearGradient%5C%22%20x1%3D%5C%220%5C%22%20y1%3D%5C%220%5C%22%20x2%3D%5C%22100%25%5C%22%20y2%3D%5C%220%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%220%25%5C%22%20stop-color%3D%5C%22rgb(255%2C255%2C0)%5C%22%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cstop%20offset%3D%5C%22100%25%5C%22%20stop-color%3D%5C%22rgb(255%2C0%2C0)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3C%2FlinearGradient%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdefs%3E%5Cn%20%20%20%20%20%20%20%20%3Ctext%20x%3D%5C%2280%5C%22%20y%3D%5C%2240%5C%22%20class%3D%5C%22text%5C%22%20%20font-size%3D%5C%2230%5C%22%20fill%3D%5C%22url(%23linearGradient)%5C%22%3EHello%20SVG%3C%2Ftext%3E%5Cn%20%20%20%20%20%20%20%20%3Crect%20id%3D%5C%22css-demo-svg-rect2%5C%22%20height%3D%5C%2260%5C%22%20width%3D%5C%22320%5C%22%20stroke%3D%5C%22url(%23linearGradient)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2Fsvg%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cstyle%3E%5Cn%23css-demo-svg-body2%20%7B%5Cn%20%20background%3A%20%23000000%3B%5Cn%20%20height%3A%20100px%3B%5Cn%7D%5Cn%5Cn%23css-demo-svg-div2%20%7B%5Cn%20%20height%3A%2060px%3B%5Cn%20%20margin%3A%200%20auto%3B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20transform%3A%20translateY(-50%25)%3B%5Cn%20%20width%3A%20320px%3B%5Cn%7D%5Cn%5Cn%23css-demo-svg-rect2%20%7B%5Cn%20%20fill%3A%20transparent%3B%5Cn%20%20stroke-dasharray%3A%20200%20540%3B%5Cn%20%20stroke-dashoffset%3A%20-445%3B%5Cn%20%20stroke-width%3A%208px%3B%5Cn%7D%5Cn%40keyframes%20draw2%20%7B%5Cn%20%200%25%20%7B%5Cn%20%20%20%20stroke-dasharray%3A%20200%20540%3B%5Cn%20%20%20%20stroke-dashoffset%3A%20-445%3B%5Cn%20%20%20%20stroke-width%3A%208px%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20stroke-dasharray%3A%20760%3B%5Cn%20%20%20%20stroke-dashoffset%3A%200%3B%5Cn%20%20%20%20stroke-width%3A%202px%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23css-demo-svg-div2%3Ahover%20%23css-demo-svg-rect2%20%7B%5Cn%20%20-webkit-animation%3A%200.5s%20draw2%20linear%20forwards%3B%5Cn%20%20animation%3A%200.5s%20draw2%20linear%20forwards%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg-body2<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg-div2<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>svg</span> <span>height</span><span><span>=</span><span>\"</span>60<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>320<span>\"</span></span> <span>xmlns</span><span><span>=</span><span>\"</span>http://www.w3.org/2000/svg<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>defs</span><span>></span></span>\n          <span><span><span>&lt;</span>linearGradient</span> <span>id</span><span><span>=</span><span>\"</span>linearGradient<span>\"</span></span> <span>x1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>y1</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>x2</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>y2</span><span><span>=</span><span>\"</span>0<span>\"</span></span><span>></span></span>\n            <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>0%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,255,0)<span>\"</span></span>  <span>/></span></span>\n            <span><span><span>&lt;</span>stop</span> <span>offset</span><span><span>=</span><span>\"</span>100%<span>\"</span></span> <span>stop-color</span><span><span>=</span><span>\"</span>rgb(255,0,0)<span>\"</span></span> <span>/></span></span>\n          <span><span><span>&lt;/</span>linearGradient</span><span>></span></span>\n        <span><span><span>&lt;/</span>defs</span><span>></span></span>\n        <span><span><span>&lt;</span>text</span> <span>x</span><span><span>=</span><span>\"</span>80<span>\"</span></span> <span>y</span><span><span>=</span><span>\"</span>40<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>text<span>\"</span></span>  <span>font-size</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>url(#linearGradient)<span>\"</span></span><span>></span></span>Hello SVG<span><span><span>&lt;/</span>text</span><span>></span></span>\n        <span><span><span>&lt;</span>rect</span> <span>id</span><span><span>=</span><span>\"</span>css-demo-svg-rect2<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>60<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>320<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>url(#linearGradient)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;/</span>svg</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n<span>#css-demo-svg-body2</span> <span>{</span>\n  <span>background</span><span>:</span> #000000<span>;</span>\n  <span>height</span><span>:</span> 100px<span>;</span>\n<span>}</span>\n\n<span>#css-demo-svg-div2</span> <span>{</span>\n  <span>height</span><span>:</span> 60px<span>;</span>\n  <span>margin</span><span>:</span> 0 auto<span>;</span>\n  <span>position</span><span>:</span> relative<span>;</span>\n  <span>top</span><span>:</span> 50%<span>;</span>\n  <span>transform</span><span>:</span> <span>translateY</span><span>(</span>-50%<span>)</span><span>;</span>\n  <span>width</span><span>:</span> 320px<span>;</span>\n<span>}</span>\n\n<span>#css-demo-svg-rect2</span> <span>{</span>\n  <span>fill</span><span>:</span> transparent<span>;</span>\n  <span>stroke-dasharray</span><span>:</span> 200 540<span>;</span>\n  <span>stroke-dashoffset</span><span>:</span> -445<span>;</span>\n  <span>stroke-width</span><span>:</span> 8px<span>;</span>\n<span>}</span>\n<span><span>@keyframes</span> draw2</span> <span>{</span>\n  <span>0%</span> <span>{</span>\n    <span>stroke-dasharray</span><span>:</span> 200 540<span>;</span>\n    <span>stroke-dashoffset</span><span>:</span> -445<span>;</span>\n    <span>stroke-width</span><span>:</span> 8px<span>;</span>\n  <span>}</span>\n  <span>100%</span> <span>{</span>\n    <span>stroke-dasharray</span><span>:</span> 760<span>;</span>\n    <span>stroke-dashoffset</span><span>:</span> 0<span>;</span>\n    <span>stroke-width</span><span>:</span> 2px<span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>#css-demo-svg-div2:hover #css-demo-svg-rect2</span> <span>{</span>\n  <span>-webkit-animation</span><span>:</span> 0.5s draw2 linear forwards<span>;</span>\n  <span>animation</span><span>:</span> 0.5s draw2 linear forwards<span>;</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo><div>\n<p>Tips</p>\n<p>到此就看完了SVG分别用<code>js</code>和<code>css</code>来实现<code>动画</code>的方法。</p>\n<p>那是不是觉得都比较<code>繁琐</code>呢？首先想绘制一个复杂的SVG就很复杂，其次用<code>js</code>去<code>变化坐标</code>也很复杂，用<code>css</code>去做<code>动画</code>简单点，但实现的动画也相对简单。</p>\n<p>那么有没有什么<code>捷径</code>可以走呢？那回答肯定是：必须有啊！<strong><code>GreenSock</code></strong> 这里就不多介绍了</p>\n</div>\n",
      "image": "https://jin-shaohui.gitee.io/background/black-001.jpg",
      "date_published": "2022-08-19T11:33:25.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Svg"
      ]
    },
    {
      "title": "请使用JS完成一个LRU缓存",
      "url": "https://jin-shaohui.gitee.io/InterviewQuestion/FrontEnd/LRU/",
      "id": "https://jin-shaohui.gitee.io/InterviewQuestion/FrontEnd/LRU/",
      "content_html": "<h2 id=\"什么是-lru\" tabindex=\"-1\"> 什么是 LRU？</h2>\n<p><code>LRU</code> 英文全称是 <code>Least Recently Used</code>，英译过来就是 <code>最近最少使用</code> 的意思。</p>\n<h3 id=\"百度百科\" tabindex=\"-1\"> 百度百科</h3>\n<p>LRU 是一种常用的页面置换算法，选择 <code>最近</code> <code>最久</code> <code>未使用</code> 的页面予以<code>淘汰</code>。</p>\n<p>该算法赋予<code>每个页面</code>一个<code>访问字段</code>，用来记录一个页面自上次被访问以来所 <code>经历的时间t</code>，当须淘汰一个页面时，选择现有页面中其 <code>t</code> 值最大的，即<code>最近最少使用</code>的页面予以淘汰。</p>\n<h3 id=\"通俗的解释\" tabindex=\"-1\"> 通俗的解释</h3>\n<p>假如我们有一块<code>内存</code>，专门用来缓存我们<code>最近访问</code>的网页，访问一个<code>新网页</code>，我们就会往内存中添加一个<code>网页地址</code>，随着网页的不断增加，内存存满了，这个时候我们就需要考虑删除一些网页了。这个时候我们找到内存中<code>最早访问</code>的那个网页地址，然后把它<code>删掉</code>。\n这一整个过程就可以称之为 L<code>RU</code> 算法。</p>\n<p>虽然上面的解释比较好懂了，但是我们还有很多地方没有考虑到，比如如下几点：</p>\n<ul>\n<li>当我们访问内存中<code>已经存在</code>的<code>网址</code>，那么该网址是否需要<code>更新</code>在内存中的<code>存储顺序</code>。</li>\n<li>当我们内存中还没有数据的时候，是否需要执行删除操作。</li>\n</ul>\n<h2 id=\"使用场景\" tabindex=\"-1\"> 使用场景</h2>\n<p><code>LRU</code> 算法使用的场景非常多，这里简单举几个例子即可：</p>\n<ol>\n<li>操作系统底层的内存管理，其中就包括有 LRU 算法</li>\n<li>我们常见的缓存服务，比如 redis 等等</li>\n<li>浏览器的最近浏览记录存储，如下图：</li>\n</ol>\n<p>总之 LRU 算法的运用场景还是蛮多的，所以我们很有必要掌握它。</p>\n<h2 id=\"梳理-lru-思路\" tabindex=\"-1\"> 梳理 LRU 思路</h2>\n<h3 id=\"特点\" tabindex=\"-1\"> 特点</h3>\n<ol>\n<li>需要一块<code>有限</code>的<code>存储空间</code>，因为无限的化就没必要使用 <code>LRU</code> 算法<code>删除数据</code>了。</li>\n<li><code>存储空间</code>里面存储的数据需要是<code>有序的</code>，因为必须要<code>顺序</code>来<code>删除数据</code>，所以可以考虑使用 <code>Array</code>、<code>Map</code> 数据结构来存储。</li>\n<li>能够<code>删除</code>或者<code>添加</code>以及<code>获取</code>到这块存储空间中的<code>指定数据</code>。</li>\n<li>存储空间<code>存满</code>之后，在添加数据时，会自动删除时间<code>最久远</code>的那条数据。</li>\n</ol>\n<h3 id=\"实现需求\" tabindex=\"-1\"> 实现需求</h3>\n<ol>\n<li>实现一个 <code>LRUCache</code> 类型，用来充当<code>存储空间</code></li>\n<li>采用 <code>Map</code> 数据结构<code>存储数据</code>，因为它的存取时间复杂度为 <code>O(1)</code>，数组为 <code>O(n)</code></li>\n<li>实现 <code>get</code> 和 <code>set</code> 方法，用来<code>获取</code>和<code>添加</code>数据</li>\n<li>存储空间有<code>长度限制</code>，所以<code>无需</code>提供<code>删除方法</code>，存储满之后，自动删除最久远的那条数据</li>\n<li>当使用 <code>get</code> 获取数据后，该条数据需要<code>更新</code>到<code>最前面</code></li>\n</ol>\n<p>现在已经把 <code>LRU</code> 算法的特点以及实现思路列了出来，那么接下来就去实现它吧！</p>\n<h2 id=\"实现\" tabindex=\"-1\"> 实现</h2>\n<p>首先我们定义一个 <code>LRUCache</code> 类，封装所有的方法和变量。</p>\n<div><pre><code><span>class</span> <span>LRUCache</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>lenght</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>length <span>=</span> lenght<span>;</span> <span>// 存储长度</span>\n    <span>this</span><span>.</span>data <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span><span>;</span> <span>// 存储数据</span>\n  <span>}</span>\n  <span>// 存储数据，通过键值对的方式</span>\n  <span>set</span><span>(</span>key<span>,</span> value<span>)</span> <span>{</span> <span>}</span>\n  <span>// 获取数据</span>\n  <span>get</span><span>(</span>key<span>)</span> <span>{</span> <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上段代码只是最简单的一个架子，我们需要去实现具体的 <code>get</code> 和 <code>set</code> 方法。</p>\n<div><pre><code><span>class</span> <span>LRUCache</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>lenght</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>length <span>=</span> lenght<span>;</span> <span>// 存储长度</span>\n    <span>this</span><span>.</span>data <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span><span>;</span> <span>// 存储数据</span>\n  <span>}</span>\n  <span>// 存储数据，通过键值对的方式</span>\n  <span>set</span><span>(</span>key<span>,</span> value<span>)</span> <span>{</span>\n    <span>const</span> data <span>=</span> <span>this</span><span>.</span>data<span>;</span>\n    <span>if</span> <span>(</span>data<span>.</span><span>has</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>\n      data<span>.</span><span>delete</span><span>(</span>key<span>)</span>\n    <span>}</span>\n    data<span>.</span><span>set</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>\n\n\n    <span>// 如果超出了容量，则需要删除最久的数据</span>\n    <span>if</span> <span>(</span>data<span>.</span>size <span>></span> <span>this</span><span>.</span>length<span>)</span> <span>{</span>\n      <span>const</span> delKey <span>=</span> data<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span>\n      data<span>.</span><span>delete</span><span>(</span>delKey<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n  <span>// 获取数据</span>\n  <span>get</span><span>(</span>key<span>)</span> <span>{</span>\n    <span>const</span> data <span>=</span> <span>this</span><span>.</span>data<span>;</span>\n    <span>// 未找到</span>\n    <span>if</span> <span>(</span><span>!</span>data<span>.</span><span>has</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>\n      <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n    <span>const</span> value <span>=</span> data<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span> <span>// 获取元素</span>\n    data<span>.</span><span>delete</span><span>(</span>key<span>)</span><span>;</span> <span>// 删除元素</span>\n    data<span>.</span><span>set</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span> <span>// 重新插入元素</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上段代码中实现实现了 <code>get</code> 和 <code>set</code> 方法，下面说一下这两个方法的<code>实现思路</code>：</p>\n<p><code>set</code> 方法：往 <code>map</code> 里面<code>添加</code>新数据，如果添加的数据<code>存在</code>了，则<code>先删除</code>该条数据，然后<code>再添加</code>。如果添加数据后<code>超长</code>了，则需要删除<code>最久远</code>的一条数据。<code>data.keys().next().value</code> 便是获取最后一条数据的意思。\n<code>get</code> 方法：首先从 <code>map</code> 对象中<code>拿出</code>该条数据，然后<code>删除</code>该条数据，最后再重新<code>插入</code>该条数据，确保将该条数据移动到<code>最前面</code>。</p>\n<h2 id=\"测试\" tabindex=\"-1\"> 测试</h2>\n<p>存储数据 set：</p>\n<div><pre><code><span>const</span> lruCache <span>=</span> <span>new</span> <span>LRUCache</span><span>(</span><span>5</span><span>)</span><span>;</span>\nlruCache<span>.</span><span>set</span><span>(</span><span>'name'</span><span>,</span> <span>'小猪课堂'</span><span>)</span><span>;</span>\nlruCache<span>.</span><span>set</span><span>(</span><span>'age'</span><span>,</span> <span>22</span><span>)</span><span>;</span>\nlruCache<span>.</span><span>set</span><span>(</span><span>'sex'</span><span>,</span> <span>'男'</span><span>)</span><span>;</span>\nlruCache<span>.</span><span>set</span><span>(</span><span>'height'</span><span>,</span> <span>176</span><span>)</span><span>;</span>\nlruCache<span>.</span><span>set</span><span>(</span><span>'weight'</span><span>,</span> <span>'100'</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>lruCache<span>)</span><span>;</span>\n\n<span>//  LRUCache {length: 5, data: Map(5)}</span>\n<span>//    data: Map(5)</span>\n<span>//      [[Entries]]</span>\n<span>//        0: {\"name\" => \"小猪课堂\"}</span>\n<span>//        1: {\"age\" => 22}</span>\n<span>//        2: {\"sex\" => \"男\"}</span>\n<span>//        3: {\"height\" => 176}</span>\n<span>//        4: {\"weight\" => \"100\"}</span>\n<span>//      size: 5</span>\n<span>//      [[Prototype]]: Map</span>\n<span>//    length: 5</span>\n<span>//    [[Prototype]]: Object</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>继续插入数据，此时会超长，代码如下：</p>\n<div><pre><code>lruCache<span>.</span><span>set</span><span>(</span><span>'grade'</span><span>,</span> <span>'10000'</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>lruCache<span>)</span><span>;</span>\n\n<span>//  LRUCache {length: 5, data: Map(5)}</span>\n<span>//    data: Map(5)</span>\n<span>//      [[Entries]]</span>\n<span>//        0: {\"age\" => 22}</span>\n<span>//        1: {\"sex\" => \"男\"}</span>\n<span>//        2: {\"height\" => 176}</span>\n<span>//        3: {\"weight\" => \"100\"}</span>\n<span>//        4: {\"grade\" => \"10000\"}</span>\n<span>//      size: 5</span>\n<span>//      [[Prototype]]: Map</span>\n<span>//    length: 5</span>\n<span>//    [[Prototype]]: Object</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时我们发现存储时间最久的 name 已经被移除了，新插入的数据变为了最前面的一个。</p>\n<p>我们使用 <code>get</code> 获取数据，代码如下：</p>\n<div><pre><code>lruCache<span>.</span><span>get</span><span>(</span><span>'sex'</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>lruCache<span>)</span><span>;</span>\n\n<span>//  LRUCache {length: 5, data: Map(5)}</span>\n<span>//    data: Map(5)</span>\n<span>//      [[Entries]]</span>\n<span>//        0: {\"age\" => 22}</span>\n<span>//        1: {\"height\" => 176}</span>\n<span>//        2: {\"weight\" => \"100\"}</span>\n<span>//        3: {\"grade\" => \"10000\"}</span>\n<span>//        4: {\"sex\" => \"男\"}</span>\n<span>//      size: 5</span>\n<span>//      [[Prototype]]: Map</span>\n<span>//    length: 5</span>\n<span>//    [[Prototype]]: Object</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我们发现此时 sex 字段已经跑到最前面去了。</p>\n<h2 id=\"总结\" tabindex=\"-1\"> 总结</h2>\n<p><code>LRU</code> 算法其实逻辑非常的简单，明白了原理之后实现起来非常的简单。</p>\n<p>最主要的是需要使用什么<code>数据结构</code>来<code>存储数据</code>，因为 <code>map</code> 的存取非常快，所以采用了它，当然数组其实也可以实现的。还有一些小伙伴使用链表来实现 <code>LRU</code>，这当然也是可以的。</p>\n",
      "date_published": "2022-08-18T16:16:37.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "JS代码题"
      ]
    },
    {
      "title": "dependencies和devDependencies区分",
      "url": "https://jin-shaohui.gitee.io/Configuration/Dependencies/",
      "id": "https://jin-shaohui.gitee.io/Configuration/Dependencies/",
      "content_html": "<h2 id=\"浑水摸鱼的说法\" tabindex=\"-1\"> 浑水摸鱼的说法？</h2>\n<p>以前说到 <code>dependencies</code> 和 <code>devDependencies</code> 的时候，大家会想到啥？</p>\n<ul>\n<li><code>dependencies</code>：生产环境需要的依赖</li>\n<li><code>devDependencies</code>：开发环境需要的依赖</li>\n</ul>\n<p>但是我们装依赖的时候真的会去考虑 <code>npm install -D</code> 还是 <code>npm install -S</code> 吗？</p>\n<p>其实<code>并不会</code>去关心哪些是<code>生产环境</code>所需依赖，哪些是<code>开发环境</code>所需依赖，但是这也正常，因为其实在<code>SPA</code>项目中，这两个东西并<code>不需要区分</code>！所以平时没有过多了解也正常！！！</p>\n<h2 id=\"spa项目\" tabindex=\"-1\"> SPA项目</h2>\n<p>所谓SPA项目，其实指的就是<code>单页面应用</code>，比如说<code>Vue</code>、<code>React</code>项目这些</p>\n<h3 id=\"开发环境\" tabindex=\"-1\"> 开发环境</h3>\n<p>开发项目时，肯定是两种包都需要安装的</p>\n<h3 id=\"生产环境\" tabindex=\"-1\"> 生产环境</h3>\n<p>生产环境中，是将开发环境的代码，使用某些打包工具，例如<code>Webpack</code>，将整个项目代码<code>打包</code>成一些<code>静态的文件</code>，然后将这些<code>静态文件</code>部署到<code>服务器</code>上，也就是到达生产环境。</p>\n<p>所以大家也看到了，只有<code>开发环境</code>时需要<code>装包</code>，<code>生产环境</code>是<code>不需要装包</code>的，所以把包放在<code>dependencies</code>和<code>devDependencies</code>中是<code>没有区别</code>的。</p>\n<p>为什么这么说呢？因为其实无论把包放在哪里都好，只要你代码中<code>引用</code>到了这个包，那么<code>Webpack</code>打包时就会把这个包<code>打包</code>进静态文件中。</p>\n<p>所以，在开发SPA项目时，<code>dependencies和devDependencies并没啥区分意义</code>。</p>\n<h2 id=\"nodejs项目\" tabindex=\"-1\"> Nodejs项目</h2>\n<p><code>Nodejs</code>项目<code>上线</code>的话，是<code>不用打包</code>的，是将整个<code>完整项目代码</code>扔到<code>服务器</code>上，然后运行，所以它是<code>需要</code>区分<code>dependencies</code>和<code>devDependencies</code>的。</p>\n<p>因为当它部署到服务器上之后，也就是生产环境之后，它是需要再 <code>npm install</code> 一次的。</p>\n<div>\n<p>警告</p>\n<i>Content not supported</i> <p>在开发环境的时候，需要做<code>单元测试</code>，装了单元测试所需要的<code>依赖包</code>，那么这个包是放在 <code>dependencies</code> 还是放在 <code>devDependencies</code> 呢？</p>\n<p>如果放在<code>devDependencies</code>，那么<code>开发环境</code>下进行<code>npm install</code>时是会安装的，而<code>生产环境</code>下<code>npm install</code>是不会安装的，这很合理，因为肯定是生产环境测试无误后再上生产环境，所以单元测试所需依赖包<code>只需要</code>在开发环境安装即可，到了生产环境我并不需要这个包</p>\n<p>如果放在<code>dependencies</code>，那么<code>开发环境</code>、<code>生产环境</code>下进行<code>npm install</code>时<code>都</code>是会安装的，这并不合理啊，我生产环境时并不需要用到这些单元测试的包啊！</p>\n<p>所以在<code>Nodejs</code>项目中，<code>dependencies</code> 和 <code>devDependencies</code>是有区分意义的。</p>\n</div>\n<h2 id=\"npm包\" tabindex=\"-1\"> NPM包</h2>\n<p>开发了一个NPM包，叫做<code>npm-lsx</code>，在开发的过程中，需要对所开发的这个包进行<code>单元测试</code>，所以安装了所需的依赖包<code>npm-test</code>，也就是依赖关系是<code>npm-lsx -&gt; npm-test</code></p>\n<p>小明在做一个<code>项目A</code>，他项目中装了<code>npm-lsx</code>这个包，而大家都知道，装一个包时，会连同这个包所依赖的包都一起装，所以按理说<code>npm-lsx</code>、<code>npm-test</code>都会装，但是大家想想，<code>项目A</code>需要<code>npm-test</code>这个包吗？</p>\n<p>并不需要，这个包对于项目A来说<code>没意义</code>。</p>\n<p>你可以理解为，项目A的 <code>开发环境</code>，其实就是 <code>npm-lsx</code> 的 <code>生产环境</code>。</p>\n<p>所以在开发<code>npm-lsx</code>的时候会把<code>npm-test</code>装在<code>devDependencies</code>中，这样，项目A就可以少装一些<code>没意义的包</code>，加快整体装包速度！</p>\n<p>所以在<code>NPM</code>项目中，<code>dependencies</code> 和 <code>devDependencies</code>是有区分意义的。</p>\n",
      "date_published": "2022-05-27T15:54:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "PackageJson"
      ]
    },
    {
      "title": "Webpack",
      "url": "https://jin-shaohui.gitee.io/Configuration/Webpack/",
      "id": "https://jin-shaohui.gitee.io/Configuration/Webpack/",
      "summary": " 前言\nWebpack在前端构建工具中可以堪称中流砥柱般的存在，日常业务开发、前端基建工具、高级前端面试...任何场景都会出现它的身影。\n也许对于它的内部实现机制，我们也许会感到疑惑，日常工作中基于Webpack Plugin/Loader之类查阅API仍然不明白各个参数的含义和应用方式。其实这一切原因本质上都是基于Webpack工作流没有一个清晰的认知导致了所谓的“面对API无从下手”开发。\n下面，我们会从如何实现 模块分析项目打包 的角度出发，使用 最通俗，最简洁，最明了 的代码带你揭开Webpack背后的神秘面纱，带你实现一个简易版Webpack，从此对于任何webpack相关底层开发了然于胸。用最通俗易懂的代码带你走进webpack的工作流。\n\n可以根据 代码 一边看一边尝试\n\n",
      "content_html": "<h2 id=\"前言\" tabindex=\"-1\"> 前言</h2>\n<p><code>Webpack</code>在前端构建工具中可以堪称中流砥柱般的存在，日常业务开发、前端基建工具、高级前端面试...任何场景都会出现它的身影。</p>\n<p>也许对于它的内部实现机制，我们也许会感到疑惑，日常工作中基于<code>Webpack Plugin/Loader</code>之类查阅<code>API</code>仍然不明白各个参数的含义和应用方式。其实这一切原因本质上都是基于<code>Webpack</code>工作流没有一个清晰的认知导致了所谓的“面对<code>API</code>无从下手”开发。</p>\n<p>下面，我们会从如何实现 <strong>模块分析项目打包</strong> 的角度出发，使用 <strong>最通俗，最简洁，最明了</strong> 的代码带你揭开<code>Webpack</code>背后的神秘面纱，带你实现一个简易版<code>Webpack</code>，从此对于任何<code>webpack</code>相关底层开发了然于胸。用最通俗易懂的代码带你走进<code>webpack</code>的工作流。</p>\n<blockquote>\n<p>可以根据 <a href=\"https://gitee.com/jin-shaohui/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">代码</a> 一边看一边尝试</p>\n</blockquote>\n\n<h2 id=\"前置知识\" tabindex=\"-1\"> 前置知识</h2>\n<ul>\n<li>\n<p><strong>Tapable</strong></p>\n<p>Tapable包本质上是为我们更方面创建自定义事件和触发自定义事件的库，类似于<code>Nodejs</code>中的<code>EventEmitter Api</code>。<code>Webpack</code>中的插件机制就是基于Tapable实现与打包流程解耦，插件的所有形式都是基于<code>Tapable</code>实现。</p>\n</li>\n<li>\n<p><strong>Webpack Node Api</strong></p>\n<p>基于学习目的，会着重于<code>Webpack Node Api</code>流程去讲解，实际上前端日常使用的<code>npm run build</code>命令也是通过环境变量调用<code>bin</code>脚本去调用<code>Node Api</code>去执行编译打包。</p>\n</li>\n<li>\n<p><strong>Babel</strong></p>\n<p><code>Webpack</code>内部的<code>AST</code>分析同样依赖于<code>Babel</code>进行处理，如果你对<code>Babel</code>不是很熟悉。建议可以先去阅读下这两篇文章 <strong>「前端基建」带你在Babel的世界中畅游</strong>、<strong>从Tree Shaking来走进Babel插件开发者的世界</strong>。</p>\n</li>\n</ul>\n<blockquote>\n<p>当然后续也会去详解这些内容在<code>Webpack</code>中的应用，但是我更加希望在阅读文章之前你可以去点一点上方的文档稍微了解一下前置知识。</p>\n</blockquote>\n<h2 id=\"流程梳理\" tabindex=\"-1\"> 流程梳理</h2>\n<p>在开始之前我们先对于整个打包流程进行一次梳理。这里仅仅是一个全流程的梳理，现在没有必要非常详细的去思考每一个步骤发生了什么，我们会在接下来的步骤中去一步一步带你串联它们。</p>\n<i>Content not supported</i><p>整体将会从上边5个方面来分析<code>Webpack</code>打包流程:</p>\n<ol>\n<li>\n<p>初始化参数阶段</p>\n<p>这一步会从配置的<code>webpack.config.js</code>中读取到对应的配置参数和<code>shell</code>命令中传入的参数进行合并得到最终打包配置参数。</p>\n</li>\n<li>\n<p>开始编译准备阶段</p>\n<p>这一步我们会通过调用<code>webpack()</code>方法返回一个<code>compiler</code>方法，创建我们的<code>compiler</code>对象，并且注册各个<code>Webpack Plugin</code>。找到配置入口中的<code>entry</code>代码，调用<code>compiler.run()</code>方法进行编译。</p>\n</li>\n<li>\n<p>模块编译阶段</p>\n<p>从入口模块进行分析，调用匹配文件的<code>loaders</code>对文件进行处理。同时分析模块依赖的模块，递归进行模块编译工作。</p>\n</li>\n<li>\n<p>完成编译阶段</p>\n<p>在递归完成后，每个引用模块通过<code>loaders</code>处理完成同时得到模块之间的相互依赖关系。</p>\n</li>\n<li>\n<p>输出文件阶段</p>\n<p>整理模块依赖关系，同时将处理后的文件输出到<code>ouput</code>的磁盘目录中。\nd</p>\n</li>\n</ol>\n<h2 id=\"创建目录\" tabindex=\"-1\"> 创建目录</h2>\n<p>工欲善其事，必先利其器。首先让我们创建一个良好的目录来管理我们需要实现的<code>Packing tool</code>吧！</p>\n<p>让我们来创建这样一个目录:</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/configuration/webpack/fileDirectory.jpg')\" />\n<h2 id=\"初始化参数阶段\" tabindex=\"-1\"> 初始化参数阶段</h2>\n<p>往往，我们在日常使用阶段有两种方式去给<code>webpack</code>传递打包参数，让我们先来看看如何传递参数:</p>\n<h3 id=\"cli命令行传递参数\" tabindex=\"-1\"> <code>Cli</code>命令行传递参数</h3>\n<p>通常，我们在使用调用<code>webpack</code>命令时，有时会传入一定命令行参数，比如:</p>\n<div><pre><code>webpack <span>--mode</span><span>=</span>production\n<span># 调用webpack命令执行打包 同时传入mode为production</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h3 id=\"webpack-config-js传递参数\" tabindex=\"-1\"> <code>webpack.config.js</code>传递参数</h3>\n<p>另一种方式，我相信就更加老生常谈了。</p>\n<p>我们在项目根目录下使用<code>webpack.config.js</code>导出一个对象进行<code>webpack</code>配置:</p>\n<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>\n<span>const</span> Plugin1 <span>=</span> <span>require</span><span>(</span><span>'./plugins/plugin1'</span><span>)</span>\n<span>const</span> Plugin2 <span>=</span> <span>require</span><span>(</span><span>'./plugins/plugin2'</span><span>)</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>mode</span><span>:</span> <span>'development'</span><span>,</span>\n  <span>entry</span><span>:</span> <span>{</span>\n    <span>main</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/entry1.js'</span><span>)</span><span>,</span>\n    <span>second</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/entry2.js'</span><span>)</span>\n  <span>}</span><span>,</span>\n  <span>devtool</span><span>:</span> <span>false</span><span>,</span>\n  <span>// 基础目录，绝对路径，用于从配置中解析入口点(entry point)和 加载器(loader)。换而言之entry和loader的所有相对路径都是相对于这个路径而言的</span>\n  <span>context</span><span>:</span> process<span>.</span><span>cwd</span><span>(</span><span>)</span><span>,</span>\n  <span>output</span><span>:</span> <span>{</span>\n    <span>path</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./build'</span><span>)</span><span>,</span>\n    <span>filename</span><span>:</span> <span>'[name].js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>plugins</span><span>:</span> <span>[</span><span>new</span> <span>Plugin1</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>Plugin2</span><span>(</span><span>)</span><span>]</span><span>,</span>\n  <span>resolve</span><span>:</span> <span>{</span>\n    <span>extensions</span><span>:</span> <span>[</span><span>'.js'</span><span>,</span> <span>'.ts'</span><span>,</span> <span>'.vue'</span><span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>module</span><span>:</span> <span>{</span>\n    <span>rules</span><span>:</span> <span>[</span>\n      <span>{</span>\n        <span>test</span><span>:</span> <span><span>/</span><span>\\.js</span><span>/</span></span><span>,</span>\n        <span>use</span><span>:</span> <span>[</span>\n          path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./loaders/loader1.js'</span><span>)</span><span>,</span>\n          path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./loaders/loader2.js'</span><span>)</span><span>,</span>\n        <span>]</span>\n      <span>}</span>\n    <span>]</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>\n<p>当然这里的<code>loader</code>和<code>plugin</code>目前你可以不用理解，接下来我们会逐步实现这些东西并且添加到我们的打包流程中去。</p>\n</blockquote>\n<h3 id=\"实现合并参数阶段\" tabindex=\"-1\"> 实现合并参数阶段</h3>\n<p>这一步，让我们真正开始动手实现我们的<code>webpack</code>吧！</p>\n<p>首先让我们在<code>webpack/core</code>下新建一个<code>index.js</code>文件作为核心入口文件。</p>\n<p>同时建立一个<code>webpack/core</code>下新建一个<code>webpack.js</code>文件作为<code>webpack()</code>方法的实现文件。</p>\n<p>首先，我们清楚在<code>NodeJs Api</code>中是通过<code>webpack()</code>方法去得到<code>compiler</code>对象的。</p>\n<div><pre><code><span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span>\n\n<span>const</span> compiler <span>=</span>  <span>webpack</span><span>(</span><span>{</span>\n  <span>// ...</span>\n<span>}</span><span>)</span>\n\ncompiler<span>.</span><span>run</span><span>(</span><span>(</span><span>err<span>,</span> status</span><span>)</span> <span>=></span> <span>{</span>\n  <span>// ...</span>\n  compiler<span>.</span><span>close</span><span>(</span><span>(</span><span>closeErr</span><span>)</span> <span>=></span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span><span>)</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时让我们按照原本的<code>webpack</code>接口格式来补充一下<code>index.js</code>中的逻辑:</p>\n<ul>\n<li>我们需要一个<code>webpack</code>方法去执行调用命令。</li>\n<li>同时我们引入<code>webpack.config.js</code>配置文件传入<code>webpack</code>方法。</li>\n</ul>\n<div><pre><code><span>// index.js</span>\n<span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'./webpack'</span><span>)</span><span>;</span>\n\n<span>const</span> config <span>=</span> <span>require</span><span>(</span><span>'../example/webpack.config'</span><span>)</span><span>;</span>\n\n<span>// 步骤1: 初始化参数 根据配置文件和shell参数合成参数</span>\n<span>const</span> compiler <span>=</span> <span>webpack</span><span>(</span>config<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>嗯，看起来还不错。接下来让我们去实现一下<code>webpack.js</code>:</p>\n<div><pre><code><span>function</span> <span>webpack</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  <span>// 合并参数 得到合并后的参数 mergeOptions</span>\n  <span>const</span> mergeOption <span>=</span> <span>_mergeOptions</span><span>(</span>options<span>)</span>\n<span>}</span>\n\n<span>// 合并配置参数</span>\n<span>function</span> <span>_mergeOptions</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  <span>const</span> shellOption <span>=</span> process<span>.</span>argv<span>.</span><span>slice</span><span>(</span><span>2</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>option<span>,</span> argv</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>=</span> argv<span>.</span><span>split</span><span>(</span><span>'='</span><span>)</span>\n    <span>if</span> <span>(</span>key <span>&amp;&amp;</span> value<span>)</span> <span>{</span>\n      <span>const</span> parseKey <span>=</span> key<span>.</span><span>slice</span><span>(</span><span>2</span><span>)</span>\n      option<span>[</span>parseKey<span>]</span> <span>=</span> value\n    <span>}</span>\n    <span>return</span> option\n  <span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span>\n  <span>return</span> <span>{</span><span>...</span>options<span>,</span> <span>...</span>shellOption<span>}</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> webpack<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里我们需要额外说明的是</p>\n<p><code>webpack</code>文件中需要导出一个名为<code>webpack</code>的方法，同时接受外部传入的配置对象。这个是我们在上述讲述过的。</p>\n<p>当然关于我们合并参数的逻辑，是将<strong>外部传入的对象和执行<code>shell</code>时的传入参数进行最终合并</strong>。</p>\n<p>在<code>Node Js</code>中我们可以通过<code>process.argv.slice(2)</code>来获得<code>shell</code>命令中传入的参数，比如:</p>\n<div><pre><code><span>// core/index.js</span>\nconsole<span>.</span><span>log</span><span>(</span>process<span>.</span>argv<span>.</span><span>slice</span><span>(</span><span>2</span><span>)</span><span>)</span>\n\n<span>// Terminal</span>\n<span>C</span><span>:</span>\\Users\\Administrator\\Desktop\\webpack<span>-</span>demo<span>></span>node core<span>/</span>index<span>.</span>js <span>--</span>mode<span>=</span>production <span>--</span>devtool<span>=</span><span>false</span>\n<span>[</span> <span>'--mode=production'</span><span>,</span> <span>'--devtool=false'</span> <span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>当然<code>_mergeOptions</code>方法就是一个简单的合并配置参数的方法，相信对于大家来说就是小菜一碟。</p>\n<p>恭喜大家🎉，千里之行始于足下。<strong>这一步我们已经完成了打包流程中的第一步：合并配置参数</strong>。</p>\n<h2 id=\"编译阶段\" tabindex=\"-1\"> 编译阶段</h2>\n<p>在得到最终的配置参数之后，我们需要在<code>webpack()</code>函数中做以下几件事情:</p>\n<ul>\n<li>通过参数创建<code>compiler</code>对象。我们看到官方案例中通过调用<code>webpack(options)</code>方法返回的是一个<code>compiler</code>对象。并且同时调用<code>compiler.run()</code>方法启动的代码进行打包。</li>\n<li>注册我们定义的<code>webpack plugin</code>插件。</li>\n<li>根据传入的配置对象寻找对应的打包入口文件。</li>\n</ul>\n<h3 id=\"创建compiler对象\" tabindex=\"-1\"> 创建<code>compiler</code>对象</h3>\n<p>让我们先来完成<code>index.js</code>中的逻辑代码补全:</p>\n<div><pre><code>const webpack = require('./webpack');\n\nconst config = require('../example/webpack.config');\n\n/**\n * 初始化参数 根据配置文件和shell参数合成参数\n * 调用 Webpack(options) 初始化compiler对象\n * webpack()方法会返回一个compiler对象\n * */\nconst compiler = webpack(config);\n\n/**\n * 调用run方法进行打包\n * */\ncompiler.run((err, status) => {\n  if(err) {\n    console.log(err)\n  }\n  // ...\n})\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以看到，核心编译实现在于<code>webpack()</code>方法返回的<code>compiler.run()</code>方法上。</p>\n<p>一步一步让我们来完善这个<code>webpack()</code>方法：</p>\n<div><pre><code><span>function</span> <span>webpack</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  <span>// 合并参数 得到合并后的参数 mergeOptions</span>\n  <span>const</span> mergeOption <span>=</span> <span>_mergeOptions</span><span>(</span>options<span>)</span>\n  <span>// 创建 compiler 对象 </span>\n  <span>const</span> compiler <span>=</span> <span>new</span> <span>Compiler</span><span>(</span>mergeOption<span>)</span>\n  <span>return</span> compiler\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>让我们在<code>webpack/core</code>目录下同样新建一个<code>compiler.js</code>文件，作为<code>compiler</code>的核心实现文件:</p>\n<div><pre><code><span>/**\n * Compiler 类进行核心编译实现\n */</span>\n\n<span>class</span> <span>Compiler</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>options <span>=</span> options\n  <span>}</span>\n\n  <span>// run方法启动编译, 同时run方法接受外部传递的callback</span>\n  <span>run</span><span>(</span><span>callback</span><span>)</span> <span>{</span><span>}</span>\n  \n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> Compiler\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时我们的<code>Compiler</code>类就先搭建一个基础的骨架代码。</p>\n<p>目前，我们拥有了:</p>\n<ul>\n<li><code>webpack/core/index.js</code>作为打包命令的入口文件，这个文件引用了我们自己实现的<code>webpack</code>，同时引用了外部的<code>webpack.config.js(options)</code>。调用<code>webpack(options).run()</code>开始编译。</li>\n<li><code>webpack/core/webpack.js</code>这个文件目前处理了参数的合并以及传入合并后的参数<code>new Compiler(mergeOptions)</code>，同时返回创建的<code>Compiler</code>实力对象。</li>\n<li><code>webpack/core/compiler</code>，此时我们的<code>compiler</code>仅仅是作为一个基础的骨架，存在一个<code>run()</code>启动方法。</li>\n</ul>\n<h3 id=\"编写plugin\" tabindex=\"-1\"> 编写<code>Plugin</code></h3>\n<p>还记得我们在<code>webpack.config.js</code>中使用了两个<code>plugin</code>---<code>pluginA</code>、<code>pluginB</code>插件吗。接下来让我们来依次实现它们:</p>\n<p>在实现<code>Plugin</code>前，我们需要先来完善一下<code>compiler</code>方法:</p>\n<div><pre><code><span>/**\n * Compiler 类进行核心编译实现\n */</span>\n<span>const</span> <span>{</span> SyncHook <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'tapable'</span><span>)</span>\n<span>class</span> <span>Compiler</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>options <span>=</span> options\n    <span>// 创建plugin的hooks</span>\n    <span>this</span><span>.</span>hooks <span>=</span> <span>{</span>\n      <span>// 开始编译的hook</span>\n      <span>run</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span><span>,</span>\n      <span>// 输出 asset 到 output 目录之前的hook， 即写入文件之前</span>\n      <span>emit</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span><span>,</span>\n      <span>// 在 compilation 完成时执行 全部完成编译执行</span>\n      <span>done</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>// run方法启动编译, 同时run方法接受外部传递的callback</span>\n  <span>run</span><span>(</span><span>callback</span><span>)</span> <span>{</span><span>}</span>\n\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> Compiler\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里，我们在<code>Compiler</code>这个类的构造函数中创建了一个属性<code>hooks</code>，它的值是三个属性<code>run</code>、<code>emit</code>、<code>done</code>。</p>\n<p>关于这三个属性的值就是我们上文提到前置知识的<code>tapable</code>的<code>SyncHook</code>方法，本质上你可以简单将<code>SyncHook()</code>方法理解称为一个<code>Emitter Event</code>类。</p>\n<p>当我们通过<code>new SyncHook()</code>返回一个对象实例后，我们可以通过<code>this.hook.run.tap('name',callback)</code>方法为这个对象上添加事件监听，然后在通过<code>this.hook.run.call()</code>执行所有<code>tap</code>注册的事件。</p>\n<blockquote>\n<p>当然<code>webpack</code>真实源码中，这里有非常多的<code>hook</code>。以及分别存在同步/异步钩子，这里更多的是为大家讲解清楚流程，所以仅列举了三个常见且简单的同步钩子。</p>\n</blockquote>\n<p>此时，我们需要明白，我们可以通过<code>Compiler</code>类返回的实例对象上<code>compiler.hooks.run.tap</code>注册钩子。</p>\n<p>接下来让我们切回到<code>webpack.js</code>中，让我们来填充关于插件注册的逻辑:</p>\n<div><pre><code><span>const</span> Compiler <span>=</span> <span>require</span><span>(</span><span>'./compiler'</span><span>)</span>\n\n<span>function</span> <span>webpack</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  <span>// 合并参数 得到合并后的参数 mergeOptions</span>\n  <span>const</span> mergeOption <span>=</span> <span>_mergeOptions</span><span>(</span>options<span>)</span>\n  <span>// 创建 compiler 对象</span>\n  <span>const</span> compiler <span>=</span> <span>new</span> <span>Compiler</span><span>(</span>mergeOption<span>)</span>\n  <span>// 加载插件</span>\n  <span>_loadPlugin</span><span>(</span>options<span>.</span>plugins<span>,</span> compiler<span>)</span>\n\n  <span>return</span> compiler\n<span>}</span>\n\n<span>/**\n * 合并配置参数\n * */</span>\n<span>function</span> <span>_mergeOptions</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n  <span>const</span> shellOption <span>=</span> process<span>.</span>argv<span>.</span><span>slice</span><span>(</span><span>2</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>option<span>,</span> argv</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>=</span> argv<span>.</span><span>split</span><span>(</span><span>'='</span><span>)</span>\n    <span>if</span> <span>(</span>key <span>&amp;&amp;</span> value<span>)</span> <span>{</span>\n      <span>const</span> parseKey <span>=</span> key<span>.</span><span>slice</span><span>(</span><span>2</span><span>)</span>\n      option<span>[</span>parseKey<span>]</span> <span>=</span> value\n    <span>}</span>\n    <span>return</span> option\n  <span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span>\n  <span>return</span> <span>{</span><span>...</span>options<span>,</span> <span>...</span>shellOption<span>}</span>\n<span>}</span>\n\n<span>/**\n * 加载插件函数\n * */</span>\n<span>function</span> <span>_loadPlugin</span><span>(</span><span>plugins<span>,</span> compiler</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>plugins <span>&amp;&amp;</span> Array<span>.</span><span>isArray</span><span>(</span>plugins<span>)</span><span>)</span> <span>{</span>\n    plugins<span>.</span><span>forEach</span><span>(</span><span>(</span><span>plugin</span><span>)</span> <span>=></span> <span>{</span>\n      <span>plugin</span><span>.</span><span>apply</span><span>(</span>compiler<span>)</span>\n    <span>}</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> webpack<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里我们在创建完成<code>compiler</code>对象后，调用了<code>_loadPlugin</code>方法进行<strong>注册插件</strong>。</p>\n<p>有接触过<code>webpack</code>插件开发的同学，或多或少可能都有了解过。<strong>任何一个<code>webpack</code>插件都是一个类(当然类本质上都是funciton的语法糖)，每个插件都必须存在一个<code>apply</code>方法</strong>。</p>\n<p>这个<code>apply</code>方法会接受一个<code>compiler</code>对象。我们上边做的就是依次调用传入的<code>plugin</code>的<code>apply</code>方法并且传入我们的<code>compiler</code>对象。</p>\n<blockquote>\n<p><strong>这里请记住上边的流程，日常我们编写<code>webpack plugin</code>时本质上就是操作<code>compiler</code>对象从而影响打包结果进行。</strong></p>\n</blockquote>\n<p>接下来让我们去编写这些个插件:</p>\n<p>不了解插件开发的同学可以去稍微看一下<strong>官方的介绍</strong>，其实不是很难，强烈建议如果不了解可以先去看看再回来结合上变讲的内容你一定会有所收获的。</p>\n<p>首先让我们先创建文件（plugin1.js、plugin2.js）:</p>\n<div><pre><code><span>class</span> <span>Plugin1</span> <span>{</span>\n  <span>apply</span><span>(</span><span>compiler</span><span>)</span> <span>{</span>\n    <span>// 注册同步的钩子</span>\n    <span>// 这里的 compiler 对象就是我们 new Compiler() 创建的实例</span>\n    compiler<span>.</span>hooks<span>.</span>run<span>.</span><span>tap</span><span>(</span><span>'Plugin 1'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>// 调用</span>\n      console<span>.</span><span>log</span><span>(</span><span>'注册插件 Plugin 1'</span><span>)</span>\n    <span>}</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> Plugin1\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>class</span> <span>Plugin2</span> <span>{</span>\n  <span>apply</span><span>(</span><span>compiler</span><span>)</span> <span>{</span>\n    compiler<span>.</span>hooks<span>.</span>done<span>.</span><span>tap</span><span>(</span><span>'Plugin 2'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>// 调用</span>\n      console<span>.</span><span>log</span><span>(</span><span>'注册插件 Plugin 2'</span><span>)</span>\n    <span>}</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> Plugin2\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>看到这里我相信大部分同学都已经反应过来了，<code>compiler.hooks.run.tap</code>和<code>compiler.hooks.done.tap</code>不就是上边讲到的通过<code>tapable</code>创建一个<code>SyncHook</code>实例然后通过<code>tap</code>方法注册事件吗？</p>\n<p>没错！的确是这样，关于<code>webpack</code>插件<strong>本质上就是通过发布订阅的模式，通过<code>compiler</code>上监听事件。然后再打包编译过程中触发监听的事件从而添加一定的逻辑影响打包结果</strong>。</p>\n<p>我们在每个插件的<code>apply</code>方法上通过<code>tap</code>在编译准备阶段(也就是调用<code>webpack()</code>函数时)进行订阅对应的事件，当我们的编译执行到一定阶段时发布对应的事件告诉订阅者去执行监听的事件，从而达到在编译阶段的不同生命周期内去触发对应的<code>plugin</code>。</p>\n<blockquote>\n<p>所以这里应该清楚，在进行<code>webpack</code>插件开发时，<code>compiler</code>对象上存放着本次打包的所有相关属性，比如<code>options</code>打包的配置，以及之后讲到的各种属性。</p>\n</blockquote>\n<h3 id=\"寻找entry入口\" tabindex=\"-1\"> 寻找<code>entry</code>入口</h3>\n<p>这之后，绝大多数内容都会放在<code>compiler.js</code>中去实现<code>Compiler</code>这个类实现打包的核心流程。</p>\n<p><strong>任何一次打包都需要入口文件，接下来让我们就从真正进入打包编译阶段。首当其冲的事情就是，我们需要根据入口配置文件路径寻找到对应入口文件。</strong></p>\n<div><pre><code><span>/**\n * Compiler 类进行核心编译实现\n */</span>\n<span>const</span> <span>{</span> SyncHook <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'tapable'</span><span>)</span>\n<span>const</span> <span>{</span> toUnixPath <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'./utils'</span><span>)</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>\n<span>class</span> <span>Compiler</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>options <span>=</span> options\n\n    <span>// 相对路径根路径 Context 参数</span>\n    <span>this</span><span>.</span>rootPath <span>=</span> <span>this</span><span>.</span>options<span>.</span>context <span>||</span> <span>toUnixPath</span><span>(</span>process<span>.</span><span>cwd</span><span>(</span><span>)</span><span>)</span>\n\n    <span>// 创建plugin的hooks</span>\n    <span>this</span><span>.</span>hooks <span>=</span> <span>{</span>\n      <span>// 开始编译的hook</span>\n      <span>run</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span><span>,</span>\n      <span>// 输出 asset 到 output 目录之前的hook， 即写入文件之前</span>\n      <span>emit</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span><span>,</span>\n      <span>// 在 compilation 完成时执行 全部完成编译执行</span>\n      <span>done</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>// run方法启动编译, 同时run方法接受外部传递的callback</span>\n  <span>run</span><span>(</span><span>callback</span><span>)</span> <span>{</span>\n    <span>// 当调用run方法时，触发开始编译的plugin</span>\n    <span>this</span><span>.</span>hooks<span>.</span><span>run</span><span>.</span><span>call</span><span>(</span><span>)</span>\n    <span>// 获取入口配置对象</span>\n    <span>const</span> entry <span>=</span> <span>this</span><span>.</span><span>getEntry</span><span>(</span><span>)</span>\n  <span>}</span>\n\n  <span>getEntry</span><span>(</span><span>)</span> <span>{</span>\n    <span>let</span> entry <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>null</span><span>)</span>\n    <span>const</span> <span>{</span> <span>entry</span><span>:</span> optionEntry <span>}</span> <span>=</span> <span>this</span><span>.</span>options\n    <span>if</span> <span>(</span><span>typeof</span> optionEntry <span>===</span> <span>'string'</span><span>)</span> <span>{</span>\n      entry<span>[</span><span>'main'</span><span>]</span> <span>=</span> optionEntry\n    <span>}</span> <span>else</span> <span>{</span>\n      entry <span>=</span> optionEntry\n    <span>}</span>\n\n    Object<span>.</span><span>keys</span><span>(</span>entry<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>entryKey</span><span>)</span> <span>=></span> <span>{</span>\n      <span>const</span> entryValue <span>=</span> entry<span>[</span>entryKey<span>]</span>\n      <span>if</span> <span>(</span><span>!</span>path<span>.</span><span>isAbsolute</span><span>(</span>entryValue<span>)</span><span>)</span> <span>{</span>\n        <span>// 转化为绝对路径的同时同意路径分隔符诶 /</span>\n        entry<span>[</span>entryKey<span>]</span> <span>=</span> <span>toUnixPath</span><span>(</span>path<span>.</span><span>join</span><span>(</span><span>this</span><span>.</span>rootPath<span>,</span> entryValue<span>)</span><span>)</span>\n      <span>}</span>\n    <span>}</span><span>)</span>\n    <span>return</span> entry\n  <span>}</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> Compiler\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>/**\n * 统一路径分隔符 主要是为了后续生成模块ID方便\n * <span>@param</span> <span><span>{</span><span>*</span><span>}</span></span> <span>path</span>\n * <span>@returns</span>\n */</span>\n<span>function</span> <span>toUnixPath</span><span>(</span><span>path</span><span>)</span> <span>{</span>\n  <span>return</span> path<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\\\\</span><span>/</span><span>g</span></span><span>,</span> <span>'/'</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这一步我们通过<code>options.entry</code>处理获得入口文件的绝对路径。</p>\n<p>这里有几个需要注意的小点:</p>\n<ul>\n<li><code>this.hooks.run.call()</code></li>\n</ul>\n<p>在我们<code>_loadePlugins</code>函数中对于每一个传入的插件在<code>compiler</code>实例对象中进行了订阅，那么当我们调用<code>run</code>方法时，等于真正开始执行编译。这个阶段<strong>相当于我们需要告诉订阅者，发布开始执行的订阅</strong>。此时我们通过<code>this.hooks.run.call()</code>执行关于<code>run</code>的所有<code>tap</code>监听方法，从而触发对应的<code>plugin</code>逻辑。</p>\n<ul>\n<li><code>this.rootPath</code>:</li>\n</ul>\n<p>在上述的外部<code>webpack.config.js</code>中我们配置了一个 <code>context: process.cwd()</code>，其实真实<code>webpack</code>中这个<code>context</code>值默认也是<code>process.cwd()</code>。</p>\n<p>简而言之，这个路径就是我们项目启动的目录路径，任何<code>entry</code>和<code>loader</code>中的相对路径都是针对于<code>context</code>这个参数的相对路径。</p>\n<p>这里我们使用<code>this.rootPath</code>在构造函数中来保存这个变量。</p>\n<ul>\n<li><code>toUnixPath</code>工具方法:</li>\n</ul>\n<p>因为不同操作系统下，文件分隔路径是不同的。这里我们统一使用<code>\\</code>来替换路径中的<code>//</code>来替换模块路径。后续我们会<strong>使用模块相对于<code>rootPath</code>的路径作为每一个文件的唯一ID</strong>，所以这里统一处理下路径分隔符。</p>\n<ul>\n<li><code>entry</code>的处理方法:</li>\n</ul>\n<p>关于<code>entry</code>配置，<code>webpack</code>中其实有很多种。我们这里考虑了比较常见的两种配置方式:</p>\n<div><pre><code><span>entry</span><span>:</span><span>'entry1.js'</span>\n\n<span>// 本质上这段代码在webpack中会被转化为</span>\n<span>entry</span><span>:</span> <span>{</span>\n  <span>main</span><span>:</span>'entry1<span>.</span>js\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>entry</span><span>:</span> <span>{</span>\n  <span>'entry1'</span><span>:</span><span>'./entry1.js'</span><span>,</span>\n  <span>'entry2'</span><span>:</span><span>'/user/wepback/example/src/entry2.js'</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>这两种方式任何方式都会经过<code>getEntry</code>方法最终转化称为<code>{ [模块名]:[模块绝对路径]... }</code>的形式，关于<code>getEntry()</code>方法其实非常简单，这里就不过于累赘这个方法的实现过程了。</p>\n<p>这一步，我们就通过<code>getEntry</code>方法获得了一个<code>key</code>为<code>entryName</code>,<code>value</code>为<code>entryAbsolutePath</code>的对象了，接来下就让我们从入口文件出发进行编译流程吧。</p>\n<h2 id=\"模块编译阶段\" tabindex=\"-1\"> 模块编译阶段</h2>\n<p>上边我们讲述了关于编译阶段的准备工作:</p>\n<ul>\n<li>目录/文件基础逻辑补充。</li>\n<li>通过<code>hooks.tap</code>注册<code>webpack</code>插件。</li>\n<li><code>getEntry</code>方法获得各个入口的对象。</li>\n</ul>\n<p>接下来让我们继续完善<code>compiler.js</code>。</p>\n<p>在模块编译阶段，我们需要做的事件:</p>\n<ul>\n<li>根据入口文件路径，分析入口文件，对于入口文件进行匹配对应的<code>loader</code>进行处理入口文件。</li>\n<li>将<code>loader</code>处理完成的入口文件使用<code>webpack</code>进行编译。</li>\n<li>分析入口文件依赖，重复上边两个步骤编译对应依赖。</li>\n<li>如果嵌套文件存在依赖文件，递归调用依赖模块进行编译。</li>\n<li>递归编译完成后，组装一个个包含多个模块的<code>chunk</code></li>\n</ul>\n<p>首先，我们先来给<code>compiler.js</code>的构造函数中补充一下对应的逻辑:</p>\n<div><pre><code><span>class</span> <span>Compiler</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>options</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n    <span>this</span><span>.</span>options <span>=</span> options\n    <span>this</span><span>.</span>entries <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span> <span>// 保存所有入口模块对象</span>\n    <span>this</span><span>.</span>modules <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span> <span>// 保存所有依赖模块对象</span>\n    <span>this</span><span>.</span>chunks <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>)</span> <span>// 所有的代码块对象</span>\n    <span>this</span><span>.</span>assets <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span> <span>// 存放本次产出的文件对象</span>\n    <span>this</span><span>.</span>files <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>)</span> <span>// 存放本次编译所有产出的文件名</span>\n\n    <span>// 创建plugin的hooks</span>\n    <span>this</span><span>.</span>hooks <span>=</span> <span>{</span>\n      <span>// 开始编译的hook</span>\n      <span>run</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span><span>,</span>\n      <span>// 输出 asset 到 output 目录之前的hook， 即写入文件之前</span>\n      <span>emit</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span><span>,</span>\n      <span>// 在 compilation 完成时执行 全部完成编译执行</span>\n      <span>done</span><span>:</span> <span>new</span> <span>SyncHook</span><span>(</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n  <span>// ...</span>\n<span>}</span>\n  <span>// ...</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里我们通过给<code>compiler</code>构造函数中添加一些列属性来保存关于编译阶段生成的对应资源/模块对象。</p>\n<blockquote>\n<p>关于<code>entries\\modules\\chunks\\assets\\files</code>这几个<code>Set</code>对象是贯穿我们核心打包流程的属性，它们各自用来储存编译阶段不同的资源，从而最终通过对应的属性进行生成编译后的文件。</p>\n</blockquote>\n<h3 id=\"根据入口文件路径分析入口文件\" tabindex=\"-1\"> 根据入口文件路径分析入口文件</h3>\n<p>上边说到我们在<code>run</code>方法中已经可以通过<code>this.getEntry();</code>获得对应的入口对象了～</p>\n<p>接下来就让我们从入口文件开始去分析入口文件吧！</p>\n<div><pre><code><span>/**\n * Compiler 类进行核心编译实现\n */</span>\n<span>const</span> <span>{</span>SyncHook<span>}</span> <span>=</span> <span>require</span><span>(</span><span>'tapable'</span><span>)</span>\n<span>const</span> <span>{</span>toUnixPath<span>}</span> <span>=</span> <span>require</span><span>(</span><span>'./utils'</span><span>)</span>\n\n<span>class</span> <span>Compiler</span> <span>{</span>\n  <span>// ...</span>\n  <span>// run方法启动编译, 同时run方法接受外部传递的callback</span>\n  <span>run</span><span>(</span><span>callback</span><span>)</span> <span>{</span>\n    <span>// 当调用run方法时，触发开始编译的plugin</span>\n    <span>this</span><span>.</span>hooks<span>.</span><span>run</span><span>.</span><span>call</span><span>(</span><span>)</span>\n    <span>// 获取入口配置对象</span>\n    <span>const</span> entry <span>=</span> <span>this</span><span>.</span><span>getEntry</span><span>(</span><span>)</span>\n    <span>// 编译入口文件</span>\n    <span>this</span><span>.</span><span>buildEntryModule</span><span>(</span>entry<span>)</span>\n  <span>}</span>\n  \n  <span>// ...</span>\n  \n  <span>buildEntryModule</span><span>(</span><span>entry</span><span>)</span> <span>{</span>\n    Object<span>.</span><span>keys</span><span>(</span>entry<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>entryName</span><span>)</span> <span>=></span> <span>{</span>\n      <span>const</span> entryPath <span>=</span> entry<span>[</span>entryName<span>]</span>\n      <span>const</span> entityObj <span>=</span> <span>this</span><span>.</span><span>buildModule</span><span>(</span>entryName<span>,</span> entryPath<span>)</span>\n      <span>this</span><span>.</span>entries<span>.</span><span>add</span><span>(</span>entityObj<span>)</span>\n    <span>}</span><span>)</span>\n  <span>}</span>\n\n  <span>buildModule</span><span>(</span><span>moduleName<span>,</span> modulePath</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span><span>}</span>\n  <span>}</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> Compiler\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里我们添加了一个名为<code>buildEntryModule</code>方法作为入口模块编译方法。循环入口对象，得到每一个入口对象的名称和路径。</p>\n<blockquote>\n<p>假使我们在开头传入<code>entry:{ main:'./src/main.js' }</code>的话，<code>buildEntryModule</code>获得的形参<code>entry</code>为<code>{ main: &quot;/src...[你的绝对路径]&quot; }</code>，此时我们<code>buildModule</code>方法接受的<code>entryName</code>为<code>main</code>，<code>entryPath</code>为入口文件<code>main</code>对应的的绝对路径。单个入口编译完成后，我们会在<code>buildModule</code>方法中返回一个对象。这个对象就是我们编译入口文件后的对象。</p>\n</blockquote>\n<h3 id=\"buildmodule模块编译方法\" tabindex=\"-1\"> buildModule模块编译方法</h3>\n<p>在进行代码编写之前，我们先来梳理一下<code>buildModule</code>方法它需要做哪些事情:</p>\n<ul>\n<li><code>buildModule</code>接受两个参数进行模块编译，<strong>第一个为模块所属的入口文件名称</strong>，第二个为需要编译的模块路径。</li>\n<li><code>buildModule</code>方法要进行代码编译的前提就是，通过<code>fs</code>模块根据入口文件路径读取文件源代码。</li>\n<li>读取文件内容之后，调用所有匹配的loader对模块进行处理得到返回后的结果。</li>\n<li>得到<code>loader</code>处理后的结果，通过<code>babel</code>分析<code>loader</code>处理后的代码，进行代码编译。(这一步编译主要是针对<code>require</code>语句，修改源代码中<code>require</code>语句的路径)。</li>\n<li>如果该入口文件没有依赖与任何模块(<code>require</code>语句)，那么返回编译后的模块对象。</li>\n<li>如果该入口文件存在依赖的模块，递归<code>buildModule</code>方法进行模块编译。</li>\n</ul>\n<h4 id=\"读取文件内容\" tabindex=\"-1\"> 读取文件内容</h4>\n<p>我们先调用<code>fs</code>模块读取文件内容。</p>\n<div><pre><code><span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span>\n<span>buildModule</span><span>(</span><span>moduleName<span>,</span> modulePath</span><span>)</span> <span>{</span>\n  <span>// 1.读取文件原始代码</span>\n  <span>const</span> originalSourceCode <span>=</span> fs<span>.</span><span>readFileSync</span><span>(</span>modulePath<span>,</span> <span>'utf-8'</span><span>)</span>\n  <span>// moduleCode 为修改后代码</span>\n  <span>this</span><span>.</span>moduleCode <span>=</span> originalSourceCode\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"调用loader处理匹配后缀文件\" tabindex=\"-1\"> 调用<code>loader</code>处理匹配后缀文件</h4>\n<p>​\t接下来我们获得了文件的具体内容之后，就需要匹配对应<code>loader</code>对我们的源代码进行编译了。</p>\n<h5 id=\"实现简单自定义loader\" tabindex=\"-1\"> 实现简单自定义loader</h5>\n<p>在进行<code>loader</code>编译前，先来实现一下上方传入的自定义<code>loader</code>吧。<code>webpack-demo/loader</code>目录下新建<code>loader1.js</code>,<code>loader2.js</code>:</p>\n<p>首先我们需要清楚<strong>简单来说<code>loader</code>本质上就是一个函数，接受我们的源代码作为入参同时返回处理后的结果。</strong></p>\n<blockquote>\n<p>因为文章主要讲述打包流程所以<code>loader</code>简单的作为倒序处理。</p>\n</blockquote>\n<div><pre><code><span>// loader本质上就是一个函数，接受原始内容，返回转换后的内容</span>\n<span>function</span> <span>loader1</span><span>(</span><span>sourceCode</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'use loader1'</span><span>)</span>\n  <span>return</span> sourceCode <span>+</span> <span><span>`</span><span>\\n const loader1 = \"I'm loader1\";</span><span>`</span></span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> loader1\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>// loader本质上就是一个函数，接受原始内容，返回转换后的内容</span>\n<span>function</span> <span>loader2</span><span>(</span><span>sourceCode</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'use loader2'</span><span>)</span>\n  <span>return</span> sourceCode <span>+</span> <span><span>`</span><span>\\n const loader2 = \"I'm loader2\";</span><span>`</span></span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> loader2\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h5 id=\"使用loader处理文件\" tabindex=\"-1\"> 使用loader处理文件</h5>\n<p>搞清楚了<code>loader</code>就是一个单纯的函数之后，让我们在进行模块分析之前将内容先交给匹配的loader去处理下吧。</p>\n<div><pre><code><span>buildModule</span><span>(</span><span>moduleName<span>,</span> modulePath</span><span>)</span> <span>{</span>\n  <span>// 1.读取文件原始代码</span>\n  <span>const</span> originalSourceCode <span>=</span> <span>(</span><span>this</span><span>.</span>originalSourceCode <span>=</span> fs<span>.</span><span>readFileSync</span><span>(</span>modulePath<span>,</span> <span>'utf-8'</span><span>)</span><span>)</span>\n  <span>// moduleCode 为修改后代码</span>\n  <span>this</span><span>.</span>moduleCode <span>=</span> originalSourceCode\n  <span>// 2.调用 loader 进行处理</span>\n  <span>this</span><span>.</span><span>handleLoader</span><span>(</span>modulePath<span>)</span>\n<span>}</span>\n\n<span>handleLoader</span><span>(</span><span>modulePath</span><span>)</span> <span>{</span>\n  <span>const</span> matchLoaders <span>=</span> <span>[</span><span>]</span>\n  <span>// 1.获取所有传入的loader规则</span>\n  <span>const</span> rules <span>=</span> <span>this</span><span>.</span>options<span>.</span>module<span>.</span>rules\n  rules<span>.</span><span>forEach</span><span>(</span><span>(</span><span>loader</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> testRule <span>=</span> loader<span>.</span>test\n    <span>if</span> <span>(</span>testRule<span>.</span><span>test</span><span>(</span>modulePath<span>)</span><span>)</span> <span>{</span>\n      <span>// 仅考虑loader { test:/\\.js$/g, use:['babel-loader'] } }</span>\n      <span>if</span> <span>(</span>loader<span>.</span>loader<span>)</span> <span>{</span>\n        matchLoaders<span>.</span><span>push</span><span>(</span>loader<span>.</span>loader<span>)</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        matchLoaders<span>.</span><span>push</span><span>(</span><span>...</span>loader<span>.</span>use<span>)</span>\n      <span>}</span>\n    <span>}</span>\n    <span>// 2.倒序执行loader传入的源代码</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> matchLoaders<span>.</span>length <span>-</span> <span>1</span><span>;</span> i <span>>=</span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>\n      <span>// 目前我们外部仅支持传入绝对路径的loader模式</span>\n      <span>// require 引入对应的loader</span>\n      <span>const</span> loaderFn <span>=</span> <span>require</span><span>(</span>matchLoaders<span>[</span>i<span>]</span><span>)</span>\n      <span>// 通过 loader 同步处理每一次编译的moduleCode</span>\n      <span>this</span><span>.</span>moduleCode <span>=</span> <span>loaderFn</span><span>(</span><span>this</span><span>.</span>moduleCode<span>)</span>\n    <span>}</span>\n  <span>}</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里通过<code>handleLoader</code>函数，对于传入的文件路径匹配到对应后缀的<code>loader</code>后，依次倒序执行loader处理代码<code>this.moduleCode</code>并且同步更新每次<code>moduleCode</code>。</p>\n<p>最终，在每一个模块编译中<code>this.moduleCode</code>都会经过对应的<code>loader</code>处理。</p>\n<h4 id=\"webpack模块编译阶段\" tabindex=\"-1\"> webpack模块编译阶段</h4>\n<p>上一步经历过<code>loader</code>处理了入口文件代码，并且得到了处理后的代码保存在了<code>this.moduleCode</code>中。</p>\n<p>此时，经过<code>loader</code>处理后就要进入<code>webpack</code>内部的编译阶段了。</p>\n<p>这里我们需要做的是：<strong>针对当前模块进行编译，将当前模块所有依赖的模块(<code>require()</code>)语句引入的路径变为相对于跟路径(<code>this.rootPath</code>)的相对路径</strong>。</p>\n<blockquote>\n<p>总之需要搞明白的是，这里编译的结果是期望将源代码中的依赖模块路径变为相对跟路径的路径，同时建立基础的模块依赖关系。后续会说明为什么针对路径进行编译。</p>\n</blockquote>\n<p>继续来完善<code>buildModule</code>方法:</p>\n<div><pre><code><span>const</span> <span>{</span>toUnixPath<span>,</span> tryExtensions<span>}</span> <span>=</span> <span>require</span><span>(</span><span>'./utils/index'</span><span>)</span>\n<span>const</span> parser <span>=</span> <span>require</span><span>(</span><span>'@babel/parser'</span><span>)</span>\n<span>const</span> traverse <span>=</span> <span>require</span><span>(</span><span>'@babel/traverse'</span><span>)</span><span>.</span>default\n<span>const</span> generator <span>=</span> <span>require</span><span>(</span><span>'@babel/generator'</span><span>)</span><span>.</span>default\n<span>const</span> t <span>=</span> <span>require</span><span>(</span><span>'@babel/types'</span><span>)</span>\n<span>// ...</span>\n<span>class</span> <span>Compiler</span> <span>{</span>\n  <span>// ...</span>\n  <span>buildModule</span><span>(</span><span>moduleName<span>,</span> modulePath</span><span>)</span> <span>{</span>\n    <span>// 1.读取文件原始代码</span>\n    <span>// const originalSourceCode = (this.originalSourceCode = fs.readFileSync(modulePath, 'utf-8'))</span>\n    <span>const</span> originalSourceCode <span>=</span> fs<span>.</span><span>readFileSync</span><span>(</span>modulePath<span>,</span> <span>'utf-8'</span><span>)</span>\n    <span>// moduleCode 为修改后代码</span>\n    <span>this</span><span>.</span>moduleCode <span>=</span> originalSourceCode\n    <span>// 2.调用 loader 进行处理</span>\n    <span>this</span><span>.</span><span>handleLoader</span><span>(</span>modulePath<span>)</span>\n    <span>// 3.调用 webpack 进行模块编译 获得最终的 module 对象</span>\n    <span>const</span> module <span>=</span> <span>this</span><span>.</span><span>handleWebpackCompiler</span><span>(</span>moduleName<span>,</span> modulePath<span>)</span>\n    <span>return</span> module\n  <span>}</span>\n\n  <span>// ...</span>\n    \n  <span>// 使用 webpack 进行模块编译</span>\n  <span>handleWebpackCompiler</span><span>(</span><span>moduleName<span>,</span> modulePath</span><span>)</span> <span>{</span>\n    <span>// 将当前模块相对于启动根目录计算出相对路径 作为模块ID</span>\n    <span>const</span> moduleId <span>=</span> <span>'./'</span> <span>+</span> <span>toUnixPath</span><span>(</span>path<span>.</span><span>relative</span><span>(</span><span>this</span><span>.</span>rootPath<span>,</span> modulePath<span>)</span><span>)</span>\n    <span>// 创建模块对象</span>\n    <span>const</span> module <span>=</span> <span>{</span>\n      <span>id</span><span>:</span> moduleId<span>,</span>\n      <span>dependencies</span><span>:</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>,</span> <span>// 该模块所依赖模块绝对路径地址</span>\n      <span>name</span><span>:</span> <span>[</span>moduleName<span>]</span><span>,</span> <span>// 该模快所属的入口文件</span>\n    <span>}</span>\n    <span>// 调用 babel 分析代码</span>\n    <span>const</span> ast <span>=</span> parser<span>.</span><span>parse</span><span>(</span><span>this</span><span>.</span>moduleCode<span>,</span> <span>{</span>\n      <span>sourceType</span><span>:</span> <span>'module'</span><span>,</span>\n    <span>}</span><span>)</span>\n\n    <span>// 深度优化 遍历语法tree</span>\n    <span>traverse</span><span>(</span>ast<span>,</span> <span>{</span>\n      <span>CallExpression</span><span>:</span> <span>(</span><span>nodePath</span><span>)</span> <span>=></span> <span>{</span>\n        <span>const</span> node <span>=</span> nodePath<span>.</span>node\n        <span>// 当遇到 require 语句时</span>\n        <span>if</span> <span>(</span>node<span>.</span>callee<span>.</span>name <span>===</span> <span>'require'</span><span>)</span> <span>{</span>\n          <span>// 获得源代码中引入模块相对路径</span>\n          <span>const</span> moduleName <span>=</span> node<span>.</span>arguments<span>[</span><span>0</span><span>]</span><span>.</span>value\n          <span>// 寻找模块相对路径 当前模块路径 + require() 对应的相对路径</span>\n          <span>const</span> moduleDirName <span>=</span> path<span>.</span><span>dirname</span><span>(</span>modulePath<span>)</span>\n          <span>const</span> absolutePath <span>=</span> <span>tryExtensions</span><span>(</span>\n            <span>toUnixPath</span><span>(</span>path<span>.</span><span>join</span><span>(</span>moduleDirName<span>,</span> moduleName<span>)</span><span>)</span><span>,</span>\n            <span>this</span><span>.</span>options<span>.</span>resolve<span>.</span>extensions<span>,</span>\n            moduleName<span>,</span>\n            <span>toUnixPath</span><span>(</span>moduleDirName<span>)</span>\n          <span>)</span>\n          <span>// 生成 moduleId - 针对于根路径的模块ID 添加进入新的依赖模块路径</span>\n          <span>const</span> moduleId <span>=</span> <span>'./'</span> <span>+</span> path<span>.</span><span>relative</span><span>(</span><span>this</span><span>.</span>rootPath<span>,</span> absolutePath<span>)</span>\n          <span>// 通过 babel 修改源代码中的 require 变成 __webpack_require__ 语句</span>\n          node<span>.</span>callee <span>=</span> t<span>.</span><span>identifier</span><span>(</span><span>'__webpack_require__'</span><span>)</span>\n          <span>// 修改源代码中 require 语句引入的模块 全部修改问相对于根路径来处理</span>\n          node<span>.</span>arguments <span>=</span> <span>[</span>t<span>.</span><span>stringLiteral</span><span>(</span>moduleId<span>)</span><span>]</span>\n          <span>// 为当前模块添加 require 语句造成的依赖(内容为相对于根路径的模块ID)</span>\n          module<span>.</span>dependencies<span>.</span><span>add</span><span>(</span>moduleId<span>)</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span><span>)</span>\n\n    <span>// 遍历结束根据 AST 生成新的代码</span>\n    <span>const</span> <span>{</span>code<span>}</span> <span>=</span> <span>generator</span><span>(</span>ast<span>)</span>\n    <span>// 为当前模块挂载新的生成的代码</span>\n    module<span>.</span>_source <span>=</span> code\n    <span>// 返回当前模块对象</span>\n    <span>return</span> module\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这一步关于<code>webpack</code>编译的阶段就完成了。</p>\n<p>需要注意的是:</p>\n<ul>\n<li>\n<p>这里使用<code>babel</code>相关的<code>API</code>针对于<code>require</code>语句进行了编译。</p>\n</li>\n<li>\n<p>同时代码中引用了一个<code>tryExtensions()</code>工具方法，这个方法是针对于后缀名不全的工具方法，稍后你就可以看到这个方法的具体内容。</p>\n</li>\n<li>\n<p>针对于每一次文件编译，我们都会返回一个<strong>module</strong>对象，这个对象是重中之重。</p>\n</li>\n<li>\n<ul>\n<li><code>id</code>属性，表示当前模块针对于<code>this.rootPath</code>的相对目录。</li>\n<li><code>dependencies</code>属性，它是一个<code>Set</code>内部保存了该模块依赖的所有模块的模块ID。</li>\n<li><code>name</code>属性,它表示该模块属于哪个入口文件。</li>\n<li><code>_source</code>属性，它存放模块自身经过<code>babel</code>编译后的字符串代码。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"tryextensions方法实现\" tabindex=\"-1\"> tryExtensions方法实现</h5>\n<p>在上文的<code>webpack.config.js</code>有这么一个配置：</p>\n<div><pre><code><span>resolve</span><span>:</span> <span>{</span>\n  <span>extensions</span><span>:</span> <span>[</span><span>'.js'</span><span>,</span> <span>'.ts'</span><span>,</span> <span>'.vue'</span><span>]</span><span>,</span>\n<span>}</span><span>,</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>熟悉<code>webpack</code>配置可能清楚，<strong>resolve.extensions</strong>是针对于引入依赖时，在没有书写文件后缀的情况下，<code>webpack</code>会自动帮我们按照传入的规则为文件添加后缀。</p>\n<p>在清楚了原理后我们来一起看看<code>utils/tryExtensions</code>方法的实现:</p>\n<div><pre><code><span>/**\n * <span>@param</span> <span><span>{</span><span>*</span><span>}</span></span> <span>modulePath</span> path.posix.join拿到的模块绝对路径\n * <span>@param</span> <span><span>{</span><span>*</span><span>}</span></span> <span>extensions</span> 扩展名数组\n * <span>@param</span> <span><span>{</span><span>*</span><span>}</span></span> <span>originModulePath</span> 原始引入模块路径\n * <span>@param</span> <span><span>{</span><span>*</span><span>}</span></span> <span>moduleContext</span> path.posix.dirname拿到的当前模块所在目录，模块上下文\n * */</span>\n<span>function</span> <span>tryExtensions</span><span>(</span><span>modulePath<span>,</span> extensions<span>,</span> originModulePath<span>,</span> moduleContext</span><span>)</span> <span>{</span>\n  <span>// 优先尝试不需要拓展名的选项</span>\n  extensions<span>.</span><span>unshift</span><span>(</span><span>''</span><span>)</span>\n  <span>for</span> <span>(</span><span>let</span> extension <span>of</span> extensions<span>)</span> <span>{</span>\n    <span>// 判断路径是否存在</span>\n    <span>if</span> <span>(</span>fs<span>.</span><span>existsSync</span><span>(</span>modulePath <span>+</span> extension<span>)</span><span>)</span> <span>{</span>\n      <span>return</span> modulePath <span>+</span> extension\n    <span>}</span>\n  <span>}</span>\n  <span>// 未匹配到对应文件</span>\n  <span>throw</span> <span>new</span> <span>Error</span><span>(</span>\n    <span><span>`</span><span>No module, Error: Can't resolve </span><span><span>${</span>originModulePath<span>}</span></span><span> in  </span><span><span>${</span>moduleContext<span>}</span></span><span>`</span></span>\n  <span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个方法很简单，我们通过<code>fs.existsSync</code>检查传入文件结合<code>extensions</code>依次遍历寻找对应匹配的路径是否存在，如果找到则直接返回。如果未找到则给予用于一个友好的提示错误。</p>\n<blockquote>\n<p>需要注意 <code>extensions.unshift('');</code>是防止用户如果已经传入了后缀时，我们优先尝试直接寻找，如果可以找到文件那么就直接返回。找不到的情况下才会依次尝试。</p>\n</blockquote>\n<h4 id=\"递归处理\" tabindex=\"-1\"> 递归处理</h4>\n<p>经过上一步处理，针对入口文件我们调用<code>buildModule</code>可以得到这样的返回对象。</p>\n<p>我们先来看看运行<code>webpack/core/index.js</code>得到的返回结果吧。</p>\n<div><pre><code>entries Set <span>{</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry1.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'main'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span><span>`</span><span>const loader2 = \"I'm loader2\";\\nconst loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry2.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'second'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span><span>`</span><span>const loader2 = \"I'm loader2\";\\nconst loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我在<code>buildEntryModule</code>中打印了处理完成后的<code>entries</code>对象。可以看到正如我们之前所期待的:</p>\n<ul>\n<li><code>id</code>为每个模块相对于跟路径的模块.(这里我们配置的<code>context:process.cwd()</code>)为<code>webpack</code>目录。</li>\n<li><code>dependencies</code>为该模块内部依赖的模块，这里目前还没有添加。</li>\n<li><code>name</code>为该模块所属的入口文件名称。</li>\n<li><code>_source</code>为该模块编译后的源代码。</li>\n</ul>\n<p>此时打开<code>src</code>目录为入口文件添加一些依赖和内容吧:</p>\n<div><pre><code><span>// webpack/example/entry1.js</span>\n<span>const</span> demo <span>=</span> <span>require</span><span>(</span><span>'./demo'</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>'demo'</span><span>,</span> demo<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'This is entry 1 !'</span><span>)</span><span>;</span>\n\n\n<span>// webpack/example/entry2.js</span>\n<span>const</span> demo <span>=</span> <span>require</span><span>(</span><span>'./demo'</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>'demo'</span><span>,</span> demo<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'This is entry 2 !'</span><span>)</span><span>;</span>\n\n\n<span>// webpack/example/demo.js</span>\n<span>const</span> name <span>=</span> <span>'JSH'</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  name<span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时让我们重新运行<code>webpack-demo/core/index.js</code>:</p>\n<div><pre><code>entries Set <span>{</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry1.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span> <span>'./example/src/demo.js'</span> <span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'main'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n      <span>'\\n'</span> <span>+</span>\n      <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n      <span>\"console.log('This is entry 1 !');\\n\"</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry2.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span> <span>'./example/src/demo.js'</span> <span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'second'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n      <span>'\\n'</span> <span>+</span>\n      <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n      <span>\"console.log('This is entry 2 !');\\n\"</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>OK，目前为止针对于<code>entry</code>的编译可以暂时告一段落了。</p>\n<p><strong>总之也就是，这一步通过方法将<code>entry</code>进行分析编译后得到一个对象。将这个对象添加到<code>this.entries</code>中去。</strong></p>\n<p>接下来去处理依赖的模块。</p>\n<p>其实对于依赖的模块无非也是相同的步骤：</p>\n<ul>\n<li>检查入口文件中是否存在依赖。</li>\n<li>存在依赖的话，递归调用<code>buildModule</code>方法编译模块。传入<code>moduleName</code>为当前模块所属的入口文件。<code>modulePath</code>为当前被依赖模块的绝对路径。</li>\n<li>同理检查递归检查被依赖的模块内部是否仍然存在依赖，存在的话递归依赖进行模块编译。这是一个<strong>深度优先</strong>的过程。</li>\n<li>将每一个编译后的模块保存进入<code>this.modules</code>中去。</li>\n</ul>\n<p>接下来只要稍稍在<code>handleWebpackCompiler</code>方法中稍稍改动就可以了:</p>\n<div><pre><code><span>// 递归依赖深度遍历 存在依赖模块则加入</span>\nmodule<span>.</span>dependencies<span>.</span><span>forEach</span><span>(</span><span>(</span><span>dependency</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> depModule <span>=</span> <span>this</span><span>.</span><span>buildModule</span><span>(</span>moduleName<span>,</span> dependency<span>)</span><span>;</span>\n  <span>// 将编译后的任何依赖模块对象加入到modules对象中去</span>\n  <span>this</span><span>.</span>modules<span>.</span><span>add</span><span>(</span>depModule<span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里对于依赖的模块进行了递归调用<code>buildModule</code>,将输出的模块对象添加进入了<code>this.modules</code>中去。</p>\n<p>此时让重新运行<code>webpack/core/index.js</code>进行编译，这里在<code>buildEntryModule</code>编译结束后打印了<code>assets</code>和<code>modules</code>:</p>\n<div><pre><code><span>buildEntryModule</span><span>(</span><span>entry</span><span>)</span> <span>{</span>\n  Object<span>.</span><span>keys</span><span>(</span>entry<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>entryName</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> entryPath <span>=</span> entry<span>[</span>entryName<span>]</span>\n    <span>const</span> entityObj <span>=</span> <span>this</span><span>.</span><span>buildModule</span><span>(</span>entryName<span>,</span> entryPath<span>)</span>\n    <span>this</span><span>.</span>entries<span>.</span><span>add</span><span>(</span>entityObj<span>)</span>\n  <span>}</span><span>)</span>\n  console<span>.</span><span>log</span><span>(</span><span>'entries'</span><span>,</span> <span>this</span><span>.</span>entries<span>)</span>\n  console<span>.</span><span>log</span><span>(</span><span>'modules'</span><span>,</span> <span>this</span><span>.</span>modules<span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>entries Set <span>{</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry1.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span> <span>'./example/src/demo.js'</span> <span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'main'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n      <span>'\\n'</span> <span>+</span>\n      <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n      <span>\"console.log('This is entry 1 !');\\n\"</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry2.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span> <span>'./example/src/demo.js'</span> <span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'second'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n      <span>'\\n'</span> <span>+</span>\n      <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n      <span>\"console.log('This is entry 2 !');\\n\"</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span>\n<span>}</span>\nmodules Set <span>{</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/demo.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'main'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>\"const name = 'JSH';\\n\"</span> <span>+</span>\n      <span>'module.exports = {\\n'</span> <span>+</span>\n      <span>'  name\\n'</span> <span>+</span>\n      <span>'};\\n'</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/demo.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'second'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>\"const name = 'JSH';\\n\"</span> <span>+</span>\n      <span>'module.exports = {\\n'</span> <span>+</span>\n      <span>'  name\\n'</span> <span>+</span>\n      <span>'};\\n'</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以看到已经将<code>demo.js</code>这个依赖如愿以偿加入到<code>modules</code>中了，同时它也经过<code>loader</code>的处理。但是我们发现它被重复加入了两次。</p>\n<p>这是因为<strong>demo.js</strong>这个模块被引用了两次，它被<code>entry1</code>和<code>entry2</code>都已进行了依赖，在进行递归编译时进行了两次<code>buildModule</code>相同模块。</p>\n<p>那么来处理下这个问题：</p>\n<div><pre><code><span>// 生成 moduleId - 针对于根路径的模块ID 添加进入新的依赖模块路径</span>\n<span>const</span> moduleId <span>=</span> <span>'./'</span> <span>+</span> <span>toUnixPath</span><span>(</span>path<span>.</span><span>relative</span><span>(</span><span>this</span><span>.</span>rootPath<span>,</span> absolutePath<span>)</span><span>)</span>\n<span>// 通过 babel 修改源代码中的 require 变成 __webpack_require__ 语句</span>\nnode<span>.</span>callee <span>=</span> t<span>.</span><span>identifier</span><span>(</span><span>'__webpack_require__'</span><span>)</span>\n<span>// 修改源代码中 require 语句引入的模块 全部修改问相对于根路径来处理</span>\nnode<span>.</span>arguments <span>=</span> <span>[</span>t<span>.</span><span>stringLiteral</span><span>(</span>moduleId<span>)</span><span>]</span>\n<span>// 转化当前 this.modules 为 ids</span>\n<span>const</span> alreadyModules <span>=</span> Array<span>.</span><span>from</span><span>(</span><span>this</span><span>.</span>modules<span>)</span><span>.</span><span>map</span><span>(</span><span>e</span> <span>=></span> e<span>.</span>id<span>)</span>\n<span>if</span> <span>(</span><span>!</span>alreadyModules<span>.</span><span>includes</span><span>(</span>moduleId<span>)</span><span>)</span> <span>{</span>\n  <span>// 为当前模块添加 require 语句造成的依赖(内容为相对于根路径的模块ID)</span>\n  module<span>.</span>dependencies<span>.</span><span>add</span><span>(</span>moduleId<span>)</span>\n<span>}</span> <span>else</span> <span>{</span>\n  <span>this</span><span>.</span>modules<span>.</span><span>forEach</span><span>(</span><span>(</span><span>value</span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span>value<span>.</span>id <span>===</span> moduleId<span>)</span> <span>{</span>\n      value<span>.</span>name<span>.</span><span>push</span><span>(</span>moduleName<span>)</span>\n    <span>}</span>\n  <span>}</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里在每一次代码分析的依赖转化中，首先判断<code>this.module</code>对象是否已经存在当前模块了（通过唯一的模块id路径判断）。</p>\n<p>如果不存在则添加进入依赖中进行编译，如果该模块已经存在过了就证明这个模块已经被编译过了。所以此时不需要将它再次进行编译，仅仅需要更新这个模块所属的chunk，为它的<code>name</code>属性添加当前所属的<code>chunk</code>名称。</p>\n<p>重新运行，再来看看打印结果:</p>\n<div><pre><code>entries Set <span>{</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry1.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span> <span>'./example/src/demo.js'</span> <span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'main'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n      <span>'\\n'</span> <span>+</span>\n      <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n      <span>\"console.log('This is entry 1 !');\\n\"</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/entry2.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'second'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n      <span>'\\n'</span> <span>+</span>\n      <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n      <span>\"console.log('This is entry 2 !');\\n\"</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span>\n<span>}</span>\nmodules Set <span>{</span>\n  <span>{</span>\n    <span>id</span><span>:</span> <span>'./example/src/demo.js'</span><span>,</span>\n    <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n    <span>name</span><span>:</span> <span>[</span> <span>'main'</span><span>,</span> <span>'./demo'</span> <span>]</span><span>,</span>\n    <span>_source</span><span>:</span> <span>\"const name = 'JSH';\\n\"</span> <span>+</span>\n      <span>'module.exports = {\\n'</span> <span>+</span>\n      <span>'  name\\n'</span> <span>+</span>\n      <span>'};\\n'</span> <span>+</span>\n      <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n      <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时针对“模块编译阶段”基本已经结束了，这一步对于所有模块从入口文件开始进行分析。</p>\n<ul>\n<li>从入口出发，读取入口文件内容调用匹配<code>loader</code>处理入口文件。</li>\n<li>通过<code>babel</code>分析依赖，并且同时将所有依赖的路径更换为相对于项目启动目录<code>options.context</code>的路径。</li>\n<li>入口文件中如果存在依赖的话，递归上述步骤编译依赖模块。</li>\n<li>将每个依赖的模块编译后的对象加入<code>this.modules</code>。</li>\n<li>将每个入口文件编译后的对象加入<code>this.entries</code>。</li>\n</ul>\n<h2 id=\"编译完成阶段\" tabindex=\"-1\"> 编译完成阶段</h2>\n<p>在上一步完成了模块之间的编译，并且为<code>module</code>和<code>entry</code>分别填充了内容。</p>\n<p>在将所有模块递归编译完成后，需要<strong>根据上述的依赖关系，组合最终输出的<code>chunk</code>模块</strong>。</p>\n<p>继续改造我们的<code>Compiler</code>吧:</p>\n<div><pre><code><span>buildEntryModule</span><span>(</span><span>entry</span><span>)</span> <span>{</span>\n  Object<span>.</span><span>keys</span><span>(</span>entry<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>entryName</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> entryPath <span>=</span> entry<span>[</span>entryName<span>]</span>\n    <span>// 调用 buildModule 实现真正的模块编译逻辑</span>\n    <span>const</span> entityObj <span>=</span> <span>this</span><span>.</span><span>buildModule</span><span>(</span>entryName<span>,</span> entryPath<span>)</span>\n    <span>this</span><span>.</span>entries<span>.</span><span>add</span><span>(</span>entityObj<span>)</span>\n    <span>// 根据当前入口文件和模块的相互依赖关系，组装成为一个个包含当前入口所有依赖模块的chunk</span>\n    <span>this</span><span>.</span><span>buildUpChunk</span><span>(</span>entryName<span>,</span> entityObj<span>)</span>\n  <span>}</span><span>)</span>\n  console<span>.</span><span>log</span><span>(</span><span>'entries'</span><span>,</span> <span>this</span><span>.</span>entries<span>)</span>\n  console<span>.</span><span>log</span><span>(</span><span>'modules'</span><span>,</span> <span>this</span><span>.</span>modules<span>)</span>\n  console<span>.</span><span>log</span><span>(</span><span>'chunks'</span><span>,</span> <span>this</span><span>.</span>chunks<span>)</span>\n<span>}</span>\n\n  <span>buildUpChunk</span><span>(</span><span>entryName<span>,</span> entityObj</span><span>)</span> <span>{</span>\n    <span>const</span> chunk <span>=</span> <span>{</span>\n      <span>name</span><span>:</span> entryName<span>,</span> <span>// 每一个入口文件作为一个chunk</span>\n      <span>entryModule</span><span>:</span> entityObj<span>,</span>  <span>// entry编译后的对象</span>\n      <span>modules</span><span>:</span> Array<span>.</span><span>from</span><span>(</span><span>this</span><span>.</span>modules<span>)</span><span>.</span><span>filter</span><span>(</span><span>(</span><span>e</span> <span>=></span> e<span>.</span>name<span>.</span><span>includes</span><span>(</span>entryName<span>)</span><span>)</span><span>)</span> <span>// 寻找与当前entry有关的所有module</span>\n    <span>}</span>\n    <span>// 将chunk添加到this.chunks中去</span>\n    <span>this</span><span>.</span>chunks<span>.</span><span>push</span><span>(</span>chunk<span>)</span><span>;</span>\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里，根据对应的入口文件通过每一个模块(<code>module</code>)的<code>name</code>属性查找对应入口的所有依赖文件。</p>\n<p>先来看看<code>this.chunks</code>最终会输出什么:</p>\n<div><pre><code>chunks Set <span>{</span>\n  <span>{</span>\n    <span>name</span><span>:</span> <span>'main'</span><span>,</span>\n    <span>entryModule</span><span>:</span> <span>{</span>\n      <span>id</span><span>:</span> <span>'./example/src/entry1.js'</span><span>,</span>\n      <span>dependencies</span><span>:</span> <span>[</span>Set<span>]</span><span>,</span>\n      <span>name</span><span>:</span> <span>[</span>Array<span>]</span><span>,</span>\n      <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n        <span>'\\n'</span> <span>+</span>\n        <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n        <span>\"console.log('This is entry 1 !');\\n\"</span> <span>+</span>\n        <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n        <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n    <span>}</span><span>,</span>\n    <span>modules</span><span>:</span> <span>[</span> <span>[</span>Object<span>]</span> <span>]</span>\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>name</span><span>:</span> <span>'second'</span><span>,</span>\n    <span>entryModule</span><span>:</span> <span>{</span>\n      <span>id</span><span>:</span> <span>'./example/src/entry2.js'</span><span>,</span>\n      <span>dependencies</span><span>:</span> Set <span>{</span><span>}</span><span>,</span>\n      <span>name</span><span>:</span> <span>[</span>Array<span>]</span><span>,</span>\n      <span>_source</span><span>:</span> <span>'const demo = __webpack_require__(\"./example/src/demo.js\");\\n'</span> <span>+</span>\n        <span>'\\n'</span> <span>+</span>\n        <span>\"console.log('demo', demo);\\n\"</span> <span>+</span>\n        <span>\"console.log('This is entry 2 !');\\n\"</span> <span>+</span>\n        <span><span>`</span><span>const loader2 = \"I'm loader2\";\\n</span><span>`</span></span> <span>+</span>\n        <span><span>`</span><span>const loader1 = \"I'm loader1\";</span><span>`</span></span>\n    <span>}</span><span>,</span>\n    <span>modules</span><span>:</span> <span>[</span><span>]</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这一步，<strong>得到了<code>Webpack</code>中最终输出的两个<code>chunk</code></strong>。</p>\n<p>它们分别拥有:</p>\n<ul>\n<li><code>name</code>:当前入口文件的名称</li>\n<li><code>entryModule</code>: 入口文件编译后的对象。</li>\n<li><code>modules</code>: 该入口文件依赖的所有模块对象组成的数组，其中每一个元素的格式和<code>entryModule</code>是一致的。</li>\n</ul>\n<p>此时编译完成，拼装<code>chunk</code>的环节就圆满完成。</p>\n<h2 id=\"输出文件阶段\" tabindex=\"-1\"> 输出文件阶段</h2>\n<h3 id=\"分析原始打包输出结果\" tabindex=\"-1\"> 分析原始打包输出结果</h3>\n<p>这里，我把<code>webpack-demo/core/index.js</code>中做了如下修改:</p>\n<div><pre><code><span>-</span> <span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'./webpack'</span><span>)</span><span>;</span>\n<span>+</span> <span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>运用原本的<code>webpack</code>代替自己实现的<code>webpack</code>先进行一次打包。</p>\n<p>运行<code>webpack-demo/core/index.js</code>后，我们会在<code>webpack-demo/src/build</code>中得到两个文件:<code>main.js</code>和<code>second.js</code>，以其中一个<code>main.js</code>来看看它的内容:</p>\n<div><pre><code><span>/******/</span> <span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span> <span>// webpackBootstrap</span>\n<span>/******/</span>   <span>var</span> __webpack_modules__ <span>=</span> <span>(</span><span>{</span>\n\n<span>/***/ \"./example/src/demo.js\":\n/*!*****************************!*\\\n  !*** ./example/src/demo.js ***!\n  \\*****************************/</span>\n<span>/***/ ((module) => <span>{</span>\n\nconst name = 'JSH';\n\nmodule.exports = <span>{</span>\n  name,\n<span>}</span>;\n const loader2 = \"I'm loader2\";\n const loader1 = \"I'm loader1\";\n\n/***/</span> <span>}</span><span>)</span>\n\n<span>/******/</span>   <span>}</span><span>)</span><span>;</span>\n<span>/************************************************************************/</span>\n<span>/******/</span>   <span>// The module cache</span>\n<span>/******/</span>   <span>var</span> __webpack_module_cache__ <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>/******/</span>   \n<span>/******/</span>   <span>// The require function</span>\n<span>/******/</span>   <span>function</span> <span>__webpack_require__</span><span>(</span><span>moduleId</span><span>)</span> <span>{</span>\n<span>/******/</span>    <span>// Check if module is in cache</span>\n<span>/******/</span>    <span>var</span> cachedModule <span>=</span> __webpack_module_cache__<span>[</span>moduleId<span>]</span><span>;</span>\n<span>/******/</span>    <span>if</span> <span>(</span>cachedModule <span>!==</span> <span>undefined</span><span>)</span> <span>{</span>\n<span>/******/</span>     <span>return</span> cachedModule<span>.</span>exports<span>;</span>\n<span>/******/</span>    <span>}</span>\n<span>/******/</span>    <span>// Create a new module (and put it into the cache)</span>\n<span>/******/</span>    <span>var</span> module <span>=</span> __webpack_module_cache__<span>[</span>moduleId<span>]</span> <span>=</span> <span>{</span>\n<span>/******/</span>     <span>// no module.id needed</span>\n<span>/******/</span>     <span>// no module.loaded needed</span>\n<span>/******/</span>     <span>exports</span><span>:</span> <span>{</span><span>}</span>\n<span>/******/</span>    <span>}</span><span>;</span>\n<span>/******/</span>   \n<span>/******/</span>    <span>// Execute the module function</span>\n<span>/******/</span>    __webpack_modules__<span>[</span>moduleId<span>]</span><span>(</span>module<span>,</span> module<span>.</span>exports<span>,</span> __webpack_require__<span>)</span><span>;</span>\n<span>/******/</span>   \n<span>/******/</span>    <span>// Return the exports of the module</span>\n<span>/******/</span>    <span>return</span> module<span>.</span>exports<span>;</span>\n<span>/******/</span>   <span>}</span>\n<span>/******/</span>   \n<span>/************************************************************************/</span>\n<span>var</span> __webpack_exports__ <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span>\n<span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n<span>/*!*******************************!*\\\n  !*** ./example/src/entry1.js ***!\n  \\*******************************/</span>\n<span>const</span> demo <span>=</span> <span>__webpack_require__</span><span>(</span><span>/*! ./demo */</span> <span>\"./example/src/demo.js\"</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>'demo'</span><span>,</span> demo<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'This is entry 1 !'</span><span>)</span><span>;</span>\n\n <span>const</span> loader2 <span>=</span> <span>\"I'm loader2\"</span><span>;</span>\n <span>const</span> loader1 <span>=</span> <span>\"I'm loader1\"</span><span>;</span>\n<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>\n\n<span>/******/</span> <span>}</span><span>)</span><span>(</span><span>)</span>\n<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>来稍微分析一下原始打包生成的代码：</p>\n<p><code>webpack</code>打包后的代码内部定义了一个<code>__webpack_require__</code>的函数代替了<code>NodeJs</code>内部的<code>require</code>方法。</p>\n<div><pre><code><span>// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span>\n<span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n<span>/*!*******************************!*\\\n  !*** ./example/src/entry1.js ***!\n  \\*******************************/</span>\n<span>const</span> demo <span>=</span> <span>__webpack_require__</span><span>(</span><span>/*! ./demo */</span> <span>\"./example/src/demo.js\"</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>'demo'</span><span>,</span> demo<span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'This is entry 1 !'</span><span>)</span><span>;</span>\n\n <span>const</span> loader2 <span>=</span> <span>\"I'm loader2\"</span><span>;</span>\n <span>const</span> loader1 <span>=</span> <span>\"I'm loader1\"</span><span>;</span>\n<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>\n\n<span>/******/</span> <span>}</span><span>)</span><span>(</span><span>)</span>\n<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这块代码相比大家都很熟悉吧，这就是自己编译后的入口文件代码。同时顶部的代码是该入口文件依赖的所有模块定义的一个对象:</p>\n<div><pre><code><span>/******/</span> <span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span> <span>// webpackBootstrap</span>\n<span>/******/</span>   <span>var</span> __webpack_modules__ <span>=</span> <span>(</span><span>{</span>\n\n<span>/***/ \"./example/src/demo.js\":\n/*!*****************************!*\\\n  !*** ./example/src/demo.js ***!\n  \\*****************************/</span>\n<span>/***/ ((module) => <span>{</span>\n\nconst name = 'JSH';\n\nmodule.exports = <span>{</span>\n  name,\n<span>}</span>;\n const loader2 = \"I'm loader2\";\n const loader1 = \"I'm loader1\";\n\n/***/</span> <span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里定义了一个<code>__webpack__modules</code>的对象，对象的<code>key</code>为该依赖模块相对于跟路径的相对路径，对象的<code>value</code>该依赖模块编译后的代码。</p>\n<h3 id=\"输出文件阶段-1\" tabindex=\"-1\"> 输出文件阶段</h3>\n<p>接下里在分析完<code>webpack</code>原始打包后的代码之后，来继续上一步。通过<code>this.chunks</code>来尝试输出最终的效果吧。</p>\n<div><pre><code><span>// run方法启动编译, 同时run方法接受外部传递的callback</span>\n<span>run</span><span>(</span><span>callback</span><span>)</span> <span>{</span>\n  <span>// 当调用run方法时，触发开始编译的plugin</span>\n  <span>this</span><span>.</span>hooks<span>.</span><span>run</span><span>.</span><span>call</span><span>(</span><span>)</span>\n  <span>// 获取入口配置对象</span>\n  <span>const</span> entry <span>=</span> <span>this</span><span>.</span><span>getEntry</span><span>(</span><span>)</span>\n  <span>// 编译入口文件</span>\n  <span>this</span><span>.</span><span>buildEntryModule</span><span>(</span>entry<span>)</span>\n  <span>// 导出列表 之后将每个chunk转化为单独的文件 加入到输出列表 this.assets 中</span>\n  <span>this</span><span>.</span><span>exportFile</span><span>(</span>callback<span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在<code>buildEntryModule</code>模块编译完成之后，通过<code>this.exportFile</code>方法实现导出文件的逻辑。</p>\n<p>来一起看看<code>this.exportFile</code>方法:</p>\n<div><pre><code><span>// 将chunk加入输出列表中去</span>\n  <span>exportFile</span><span>(</span><span>callback</span><span>)</span> <span>{</span>\n    <span>const</span> output <span>=</span> <span>this</span><span>.</span>options<span>.</span>output\n    <span>// 根据 chunks 生成的 assets 内容</span>\n    <span>this</span><span>.</span>chunks<span>.</span><span>forEach</span><span>(</span><span>chunk</span> <span>=></span> <span>{</span>\n      <span>const</span> parseFileName <span>=</span> output<span>.</span>filename<span>.</span><span>replace</span><span>(</span><span>'[name]'</span><span>,</span> chunk<span>.</span>name<span>)</span>\n      <span>// assets 中 { 'main.js': '代码字符串' }</span>\n      <span>this</span><span>.</span>assets<span>[</span>parseFileName<span>]</span> <span>=</span> <span>getSourceCode</span><span>(</span>chunk<span>)</span>\n      <span>// files 中保存所有的生成文件名</span>\n      <span>this</span><span>.</span>files<span>.</span><span>push</span><span>(</span>parseFileName<span>)</span>\n    <span>}</span><span>)</span>\n\n    <span>// 调用 plugin emit 钩子</span>\n    <span>this</span><span>.</span>hooks<span>.</span><span>emit</span><span>.</span><span>call</span><span>(</span><span>)</span>\n    <span>// 判断目录是否存在 存在就直接 fs.write 不存在就需要新建目录</span>\n    <span>if</span> <span>(</span><span>!</span>fs<span>.</span><span>existsSync</span><span>(</span>output<span>.</span>path<span>)</span><span>)</span> <span>{</span>\n      fs<span>.</span><span>mkdirSync</span><span>(</span>output<span>.</span>path<span>)</span>\n    <span>}</span>\n    <span>// 将 assets 中的内容生成打包文件 写入文件系统中</span>\n    Object<span>.</span><span>keys</span><span>(</span><span>this</span><span>.</span>assets<span>)</span><span>.</span><span>forEach</span><span>(</span><span>fileName</span> <span>=></span> <span>{</span>\n      <span>const</span> filePath <span>=</span> path<span>.</span><span>join</span><span>(</span>output<span>.</span>path<span>,</span> fileName<span>)</span>\n      fs<span>.</span><span>writeFileSync</span><span>(</span>filePath<span>,</span> <span>this</span><span>.</span>assets<span>[</span>fileName<span>]</span><span>)</span>\n    <span>}</span><span>)</span>\n    <span>// 结束之后 调用 plugin done 钩子</span>\n    <span>this</span><span>.</span>hooks<span>.</span><span>done</span><span>.</span><span>call</span><span>(</span><span>)</span>\n    <span>callback</span><span>(</span><span>null</span><span>,</span> <span>{</span>\n      <span>toJSON</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n        <span>return</span> <span>{</span>\n          <span>entries</span><span>:</span> <span>this</span><span>.</span>entries<span>,</span>\n          <span>modules</span><span>:</span> <span>this</span><span>.</span>modules<span>,</span>\n          <span>chunks</span><span>:</span> <span>this</span><span>.</span>chunks<span>,</span>\n          <span>assets</span><span>:</span> <span>this</span><span>.</span>assets<span>,</span>\n          <span>files</span><span>:</span> <span>this</span><span>.</span>files<span>,</span>\n        <span>}</span>\n      <span>}</span>\n    <span>}</span><span>)</span>\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>exportFile</code>做了如下几件事:</p>\n<ul>\n<li>首先获取配置参数的输出配置，迭代我们的<code>this.chunks</code>，将<code>output.filename</code>中的<code>[name]</code>替换称为对应的入口文件名称。同时根据<code>chunks</code>的内容为<code>this.assets</code>中添加需要打包生成的文件名和文件内容。</li>\n<li>将文件写入磁盘前调用<code>plugin</code>的<code>emit</code>钩子函数。</li>\n<li>判断<code>output.path</code>文件夹是否存在，如果不存在，则通过<code>fs</code>新建这个文件夹。</li>\n<li>将本次打包生成的所有文件名(<code>this.assets</code>的<code>key</code>值组成的数组)存放进入<code>files</code>中去。</li>\n<li>循环<code>this.assets</code>，将文件依次写入对应的磁盘中去。</li>\n<li>所有打包流程结束，触发<code>webpack</code>插件的<code>done</code>钩子。</li>\n<li>同时为<code>NodeJs Webpack APi</code>呼应，调用<code>run</code>方法中外部传入的<code>callback</code>传入两个参数。</li>\n</ul>\n<p>总的来说，<code>this.assets</code>做的事情也比较简单，就是通过分析<code>chunks</code>得到<code>assets</code>然后输出对应的代码到磁盘中。</p>\n<p>仔细看过上边代码，会发现<code>this.assets</code>这个<code>Map</code>中每一个元素的<code>value</code>是通过调用<code>getSourceCode(chunk)</code>方法来生成模块对应的代码的。</p>\n<p>那么<code>getSourceCode</code>这个方法是如何根据<code>chunk</code>来生成最终编译后的代码呢？一起来看看吧！</p>\n<h3 id=\"getsourcecode方法\" tabindex=\"-1\"> <code>getSourceCode</code>方法</h3>\n<p>首先简单明确一下这个方法的职责，需要<code>getSourceCode</code>方法接受传入的<code>chunk</code>对象。从而返回该<code>chunk</code>的源代码。</p>\n<p>废话不多说，其实这里用了一个比较偷懒的办法，但是完全不妨碍理解<code>Webpack</code>流程，上边分析过原本<code>webpack</code>打包后的代码<strong>仅仅只有入口文件和模块依赖是每次打包不同的地方，关于<code>require</code>方法之类都是相通的</strong>。</p>\n<p>把握每次的不同点，直接先来看看它的实现方式:</p>\n<div><pre><code><span>/**\n * <span>@param</span> <span><span>{</span><span>*</span><span>}</span></span> <span>chunk</span>\n * name属性入口文件名称\n * entryModule入口文件module对象\n * modules 依赖模块路径\n */</span>\n<span>function</span> <span>getSourceCode</span><span>(</span><span>chunk</span><span>)</span> <span>{</span>\n  <span>const</span> <span>{</span> entryModule<span>,</span> modules <span>}</span> <span>=</span> chunk<span>;</span>\n  <span>return</span> <span><span>`</span><span>\n(() => {\nvar __webpack_modules__ = ({\n  </span><span><span>${</span> modules<span>.</span><span>map</span><span>(</span><span>(</span><span>module</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> <span><span>`</span><span>'</span><span><span>${</span>module<span>.</span>id<span>}</span></span><span>': ((module) => {</span><span><span>${</span>module<span>.</span>_source<span>}</span></span><span>})</span><span>`</span></span><span>;</span>\n  <span>}</span></span><span>).join(',') }\n \\t});\n\n \\tvar __webpack_module_cache__ = {};\n\n \\tfunction __webpack_require__(moduleId) {\n \\t\\tvar cachedModule = __webpack_module_cache__[moduleId];\n \\t\\tif (cachedModule !== undefined) {\n \\t\\t\\treturn cachedModule.exports;\n \\t\\t}\n \\t\\tvar module = __webpack_module_cache__[moduleId] = {\n \\t\\t\\texports: {}\n \\t\\t};\n\n \\t\\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n \\t\\treturn module.exports;\n\\t}\n\n  var __webpack_exports__ = {};\n  (() => {\n    </span><span><span>${</span> entryModule<span>.</span>_source <span>}</span></span><span>\n  })();\n\n })()\n;\n  </span><span>`</span></span><span>;</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这段代码其实非常简单，远远没有想象难！有点返璞归真的感觉是吗哈哈。</p>\n<p>在<code>getSourceCode</code>方法中，通过组合而来的<code>chunk</code>获得对应的:</p>\n<ul>\n<li><code>name</code>: 该入口文件对应输出文件的名称。</li>\n<li><code>entryModule</code>: 存放该入口文件编译后的对象。</li>\n<li><code>modules</code>:存放该入口文件依赖的所有模块的对象。</li>\n</ul>\n<p><strong>通过字符串拼接的方式去实现了<code>__webpack__modules</code>对象上的属性，同时也在底部通过<code>${entryModule._source}</code>拼接出入口文件的代码。</strong></p>\n<blockquote>\n<p>上文提到过为什么要将模块的<code>require</code>方法的路径转化为相对于跟路径(<code>context</code>)的路径，看到这里相信大家都已经了然于胸了。因为最终实现的<code>__webpack_require__</code>方法全都是针对于模块相对于跟路径的相对路径实现的<code>require</code>方法。同时如果不太清楚<code>require</code>方法是如何转成为<code>__webpack_require__</code>方法，可以重新回到编译环节重新阅读～通过<code>babel</code>在<code>AST</code>转化阶段将<code>require</code>方法调用变成了<code>__webpack_require__</code>。</p>\n</blockquote>\n<h1 id=\"大功告成\" tabindex=\"-1\"> 大功告成</h1>\n<p>至此，让我们回到<code>webpack-demo/core/index.js</code>中去。重新运行这个文件，你会发现<code>webpack-demo/example</code>目录下会多出一个<code>build</code>目录。</p>\n<p>到这实现属于我们自己的<code>webpack</code>。</p>\n<p>实质上，对于实现一个简单版的<code>webpack</code>核心，还是希望大家可以在理解它的工作流的同时彻底理解<code>compiler</code>这个对象。</p>\n<p>在之后的关于<code>webpack</code>相关底层开发中，真正做到对于<code>compiler</code>的用法了然于胸。了解<code>compiler</code>上的各种属性是如何影响到编译打包结果的。</p>\n",
      "image": "https://jin-shaohui.gitee.io/background/black-001.jpg",
      "date_published": "2022-05-27T15:54:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Webpack"
      ]
    },
    {
      "title": "打钩动画",
      "url": "https://jin-shaohui.gitee.io/CssComponent/Checked/",
      "id": "https://jin-shaohui.gitee.io/CssComponent/Checked/",
      "content_html": "\n<CodeDemo id=\"code-demo-6d40be14\" type=\"vue\" code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22checked-body%5C%22%3E%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22checkbox%5C%22%20checked%2F%3E%5Cn%20%20%20%20%3Csvg%20width%3D%5C%22400%5C%22%20height%3D%5C%22400%5C%22%3E%5Cn%20%20%20%20%20%20%3Ccircle%20class%3D%5C%22circle%5C%22%20fill%3D%5C%22none%5C%22%20r%3D%5C%22190%5C%22%20stroke%3D%5C%22%2368e534%5C%22%20stroke-width%3D%5C%2210%5C%22%20cx%3D%5C%22200%5C%22%20cy%3D%5C%22200%5C%22%20stroke-linecap%3D%5C%22round%5C%22%20transform%3D%5C%22rotate(-90%20200%20200)%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cpolyline%20class%3D%5C%22tick%5C%22%20fill%3D%5C%22none%5C%22%20stroke%3D%5C%22%2368e534%5C%22%20stroke-width%3D%5C%2224%5C%22%20points%3D%5C%2288%2C214%20173%2C284%20304%2C138%5C%22%20stroke-linecap%3D%5C%22round%5C%22%20stroke-linejoin%3D%5C%22round%5C%22%2F%3E%5Cn%20%20%20%20%3C%2Fsvg%3E%5Cn%20%20%20%20%3Ch2%3ESuccess%3C%2Fh2%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20export%20default%20%7B%5Cn%20%20%20%20name%3A%20%5C%22Checked%5C%22%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Cstyle%3E%5Cn%20%20.checked-body%20%7B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%20%20display%3A%20flex%3B%5Cn%20%20%20%20flex-direction%3A%20column%3B%5Cn%20%20%20%20align-items%3A%20center%3B%5Cn%20%20%7D%5Cn%5Cn%20%20h2%20%7B%5Cn%20%20%20%20font-family%3A%20Helvetica%3B%5Cn%20%20%20%20margin-top%3A%2040px%3B%5Cn%20%20%20%20font-size%3A%2036px%3B%5Cn%20%20%20%20color%3A%20%23333%3B%5Cn%20%20%20%20opacity%3A%200%3B%5Cn%20%20%7D%5Cn%5Cn%20%20input%5Btype%3D'checkbox'%5D%3Achecked%20%2B%20svg%20.circle%20%7B%5Cn%20%20%20%20animation%3A%20circle%20.8s%20ease-in-out%3B%5Cn%20%20%20%20%2F*%20%E5%81%9C%E7%95%99%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E5%B8%A7%20*%2F%5Cn%20%20%20%20animation-fill-mode%3A%20forwards%3B%5Cn%20%20%7D%5Cn%5Cn%20%20input%5Btype%3D'checkbox'%5D%3Achecked%20%2B%20svg%20.tick%20%7B%5Cn%20%20%20%20animation%3A%20tick%20.8s%20ease-in-out%3B%5Cn%20%20%20%20%2F*%20%E5%81%9C%E7%95%99%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E5%B8%A7%20*%2F%5Cn%20%20%20%20animation-fill-mode%3A%20forwards%3B%5Cn%20%20%20%20animation-delay%3A%20.8s%3B%5Cn%20%20%7D%5Cn%5Cn%20%20input%5Btype%3D'checkbox'%5D%3Achecked%20~%20h2%20%7B%5Cn%20%20%20%20animation%3A%20h2%20.6s%20ease-in-out%3B%5Cn%20%20%20%20%2F*%20%E5%81%9C%E7%95%99%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E5%B8%A7%20*%2F%5Cn%20%20%20%20animation-fill-mode%3A%20forwards%3B%5Cn%20%20%20%20animation-delay%3A%201.2s%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.circle%20%7B%5Cn%20%20%20%20%2F*%20stroke-dasharray%20%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%9C%86%E5%91%A8%E9%95%BF%EF%BC%8C%E5%8D%B3%E6%98%BE%E7%A4%BA%E7%9A%84%E4%B8%80%E6%95%B4%E4%B8%AA%E5%9C%86%E5%90%8E%E5%81%8F%E7%A7%BB%E7%9A%84%E9%83%A8%E5%88%86%E4%B8%BA%E7%A9%BA%E7%99%BD%EF%BC%8C%E4%BA%A7%E7%94%9F%E7%BB%98%E5%9B%BE%E6%95%88%E6%9E%9C*%2F%5Cn%20%20%20%20stroke-dasharray%3A%201194%3B%5Cn%20%20%20%20%2F*%20%E6%83%B3%E8%A6%81%E8%AE%BE%E7%BD%AE%E9%A1%BA%E6%97%B6%E9%92%88%EF%BC%8Cdashoffset%E5%80%BC%201194%20-%3E%200%20%E9%80%86%E6%97%B6%E9%92%88%E5%88%99%201194%20-%3E%202388%20*%2F%5Cn%20%20%20%20stroke-dashoffset%3A%201194%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F*%20polyline%20%E5%90%8C%E7%90%86%20*%2F%5Cn%20%20.tick%20%7B%5Cn%20%20%20%20stroke-dasharray%3A%20350%3B%5Cn%20%20%20%20stroke-dashoffset%3A%20350%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%40keyframes%20circle%20%7B%5Cn%20%20%20%20from%20%7B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%201194%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20to%20%7B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%202388%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20%40keyframes%20tick%20%7B%5Cn%20%20%20%20from%20%7B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%20350%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20to%20%7B%5Cn%20%20%20%20%20%20stroke-dashoffset%3A%200%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20%40keyframes%20h2%20%7B%5Cn%20%20%20%20from%20%7B%5Cn%20%20%20%20%20%20opacity%3A%200%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20to%20%7B%5Cn%20%20%20%20%20%20opacity%3A%201%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>checked-body<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>checkbox<span>\"</span></span> <span>checked</span><span>/></span></span>\n    <span><span><span>&lt;</span>svg</span> <span>width</span><span><span>=</span><span>\"</span>400<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>400<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>circle</span> <span>class</span><span><span>=</span><span>\"</span>circle<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>r</span><span><span>=</span><span>\"</span>190<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#68e534<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>10<span>\"</span></span> <span>cx</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>cy</span><span><span>=</span><span>\"</span>200<span>\"</span></span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>round<span>\"</span></span> <span>transform</span><span><span>=</span><span>\"</span>rotate(-90 200 200)<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>polyline</span> <span>class</span><span><span>=</span><span>\"</span>tick<span>\"</span></span> <span>fill</span><span><span>=</span><span>\"</span>none<span>\"</span></span> <span>stroke</span><span><span>=</span><span>\"</span>#68e534<span>\"</span></span> <span>stroke-width</span><span><span>=</span><span>\"</span>24<span>\"</span></span> <span>points</span><span><span>=</span><span>\"</span>88,214 173,284 304,138<span>\"</span></span> <span>stroke-linecap</span><span><span>=</span><span>\"</span>round<span>\"</span></span> <span>stroke-linejoin</span><span><span>=</span><span>\"</span>round<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;/</span>svg</span><span>></span></span>\n    <span><span><span>&lt;</span>h2</span><span>></span></span>Success<span><span><span>&lt;/</span>h2</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>export</span> <span>default</span> <span>{</span>\n    <span>name</span><span>:</span> <span>\"Checked\"</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>.checked-body</span> <span>{</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n    <span>display</span><span>:</span> flex<span>;</span>\n    <span>flex-direction</span><span>:</span> column<span>;</span>\n    <span>align-items</span><span>:</span> center<span>;</span>\n  <span>}</span>\n\n  <span>h2</span> <span>{</span>\n    <span>font-family</span><span>:</span> Helvetica<span>;</span>\n    <span>margin-top</span><span>:</span> 40px<span>;</span>\n    <span>font-size</span><span>:</span> 36px<span>;</span>\n    <span>color</span><span>:</span> #333<span>;</span>\n    <span>opacity</span><span>:</span> 0<span>;</span>\n  <span>}</span>\n\n  <span>input[type='checkbox']:checked + svg .circle</span> <span>{</span>\n    <span>animation</span><span>:</span> circle .8s ease-in-out<span>;</span>\n    <span>/* 停留在最后一帧 */</span>\n    <span>animation-fill-mode</span><span>:</span> forwards<span>;</span>\n  <span>}</span>\n\n  <span>input[type='checkbox']:checked + svg .tick</span> <span>{</span>\n    <span>animation</span><span>:</span> tick .8s ease-in-out<span>;</span>\n    <span>/* 停留在最后一帧 */</span>\n    <span>animation-fill-mode</span><span>:</span> forwards<span>;</span>\n    <span>animation-delay</span><span>:</span> .8s<span>;</span>\n  <span>}</span>\n\n  <span>input[type='checkbox']:checked ~ h2</span> <span>{</span>\n    <span>animation</span><span>:</span> h2 .6s ease-in-out<span>;</span>\n    <span>/* 停留在最后一帧 */</span>\n    <span>animation-fill-mode</span><span>:</span> forwards<span>;</span>\n    <span>animation-delay</span><span>:</span> 1.2s<span>;</span>\n  <span>}</span>\n\n  <span>.circle</span> <span>{</span>\n    <span>/* stroke-dasharray 设置为圆周长，即显示的一整个圆后偏移的部分为空白，产生绘图效果*/</span>\n    <span>stroke-dasharray</span><span>:</span> 1194<span>;</span>\n    <span>/* 想要设置顺时针，dashoffset值 1194 -> 0 逆时针则 1194 -> 2388 */</span>\n    <span>stroke-dashoffset</span><span>:</span> 1194<span>;</span>\n  <span>}</span>\n\n  <span>/* polyline 同理 */</span>\n  <span>.tick</span> <span>{</span>\n    <span>stroke-dasharray</span><span>:</span> 350<span>;</span>\n    <span>stroke-dashoffset</span><span>:</span> 350<span>;</span>\n  <span>}</span>\n\n  <span><span>@keyframes</span> circle</span> <span>{</span>\n    <span>from</span> <span>{</span>\n      <span>stroke-dashoffset</span><span>:</span> 1194<span>;</span>\n    <span>}</span>\n    <span>to</span> <span>{</span>\n      <span>stroke-dashoffset</span><span>:</span> 2388<span>;</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span><span>@keyframes</span> tick</span> <span>{</span>\n    <span>from</span> <span>{</span>\n      <span>stroke-dashoffset</span><span>:</span> 350<span>;</span>\n    <span>}</span>\n    <span>to</span> <span>{</span>\n      <span>stroke-dashoffset</span><span>:</span> 0<span>;</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span><span>@keyframes</span> h2</span> <span>{</span>\n    <span>from</span> <span>{</span>\n      <span>opacity</span><span>:</span> 0<span>;</span>\n    <span>}</span>\n    <span>to</span> <span>{</span>\n      <span>opacity</span><span>:</span> 1<span>;</span>\n    <span>}</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "登录页",
      "url": "https://jin-shaohui.gitee.io/CssComponent/login/",
      "id": "https://jin-shaohui.gitee.io/CssComponent/login/",
      "content_html": "\n<CodeDemo id=\"code-demo-153b0808\" type=\"vue\" code=\"%7B%22html%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22login-body%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22login-container%5C%22%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22left-container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22title%5C%22%3E%3Cspan%3E%E7%99%BB%E5%BD%95%3C%2Fspan%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22input-container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20name%3D%5C%22username%5C%22%20placeholder%3D%5C%22%E7%94%A8%E6%88%B7%E5%90%8D%5C%22%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22password%5C%22%20name%3D%5C%22password%5C%22%20placeholder%3D%5C%22%E5%AF%86%E7%A0%81%5C%22%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22message-container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22right-container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22registry-container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%E6%B3%A8%E5%86%8C%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22action-container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%E6%8F%90%E4%BA%A4%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cn%20%20export%20default%20%7B%5Cn%20%20%20%20name%3A%20%5C%22Login%5C%22%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Cstyle%3E%5Cn%20%20%2F**%20%7B*%2F%5Cn%20%20%2F*%20%20margin%3A%200%3B*%2F%5Cn%20%20%2F*%20%20padding%3A%200%3B*%2F%5Cn%20%20%2F*%7D*%2F%5Cn%5Cn%20%20%2F*.html%20%7B*%2F%5Cn%20%20%2F*%20%20height%3A%20350px%3B*%2F%5Cn%20%20%2F*%20%20width%3A%20100%25%3B*%2F%5Cn%20%20%2F*%7D*%2F%5Cn%5Cn%20%20.login-body%20%7B%5Cn%20%20%20%20display%3A%20flex%3B%5Cn%20%20%20%20justify-content%3A%20center%3B%5Cn%20%20%20%20align-items%3A%20center%3B%5Cn%20%20%20%20height%3A%20350px%3B%5Cn%20%20%20%20%2F*padding%3A%205%25%200%3B*%2F%5Cn%20%20%20%20%2F*position%3A%20relative%3B*%2F%5Cn%20%20%20%20background-image%3A%20linear-gradient(to%20bottom%20right%2C%20rgb(114%2C%20135%2C%20254)%2C%20rgb(130%2C%2088%2C%20186))%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20%7B%5Cn%20%20%20%20%2F*position%3A%20absolute%3B*%2F%5Cn%20%20%20%20width%3A%20600px%3B%5Cn%20%20%20%20height%3A%20315px%3B%5Cn%20%20%20%20margin%3A%200%20auto%3B%5Cn%20%20%20%20border-radius%3A%2015px%3B%5Cn%20%20%20%20box-shadow%3A%200%2010px%2050px%200%20rgb(59%2C%2076%2C%20194)%3B%5Cn%20%20%20%20background-color%3A%20rgb(95%2C%2076%2C%20194)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20%7B%5Cn%20%20%20%20display%3A%20inline-block%3B%5Cn%20%20%20%20width%3A%20330px%3B%5Cn%20%20%20%20border-top-left-radius%3A%2015px%3B%5Cn%20%20%20%20border-bottom-left-radius%3A%2015px%3B%5Cn%20%20%20%20padding%3A%2060px%3B%5Cn%20%20%20%20background-image%3A%20linear-gradient(to%20bottom%20right%2C%20rgb(118%2C%2076%2C%20163)%2C%20rgb(97%2C%20103%2C%20211))%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.title%20%7B%5Cn%20%20%20%20color%3A%20%23fff%3B%5Cn%20%20%20%20font-size%3A%2018px%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.title%20span%20%7B%5Cn%20%20%20%20border-bottom%3A%203px%20solid%20rgb(237%2C%20221%2C%2022)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.input-container%20%7B%5Cn%20%20%20%20padding%3A%2020px%200%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.input-container%20input%20%7B%5Cn%20%20%20%20border%3A%200%3B%5Cn%20%20%20%20background%3A%20none%3B%5Cn%20%20%20%20background-color%3A%20transparent%20!important%3B%5Cn%20%20%20%20outline%3A%200%3B%5Cn%20%20%20%20margin%3A%2020px%200%3B%5Cn%20%20%20%20color%3A%20%23fff%20!important%3B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%20%20display%3A%20block%3B%5Cn%20%20%20%20padding%3A%205px%200%3B%5Cn%20%20%20%20transition%3A%20.2s%3B%5Cn%20%20%20%20border-bottom%3A%201px%20solid%20rgb(199%2C%20191%2C%20219)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F*input%EF%BC%9A-webkit-autofill*%2F%5Cn%20%20%2F*input%3A-webkit-autofill%3Ahover*%2F%5Cn%20%20input%3A-webkit-autofill%3Afocus%5Cn%20%20%2F*input%3A-webkit-autofill%3Aactive*%2F%5Cn%20%20%7B%5Cn%20%20%20%20%2F*%E8%A7%A3%E5%86%B3%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E6%96%87%E5%AD%97%E8%83%8C%E6%99%AF%E8%89%B2*%2F%5Cn%20%20%20%20transition%3A%20background-color%20500s%20ease-in-out%200s%20!important%3B%5Cn%20%20%20%20%2F*%C2%A0%C2%A0background-color%3A%C2%A0transparent%C2%A0%3B*%2F%5Cn%20%20%7D%5Cn%5Cn%20%20-internal-autofill-selected%20%7B%5Cn%20%20%20%20transition%3A%20background-color%20500s%20ease-in-out%200s%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.input-container%20input%3Ahover%20%7B%5Cn%20%20%20%20border-bottom-color%3A%20%23fff%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%3A%3A-webkit-input-placeholder%20%7B%5Cn%20%20%20%20color%3A%20rgb(199%2C%20191%2C%20219)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.message-container%20%7B%5Cn%20%20%20%20font-size%3A%2014px%3B%5Cn%20%20%20%20transition%3A%20.2s%3B%5Cn%20%20%20%20color%3A%20rgb(199%2C%20191%2C%20219)%3B%5Cn%20%20%20%20cursor%3A%20pointer%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.left-container%20.message-container%3Ahover%20%7B%5Cn%20%20%20%20color%3A%20%23fff%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.right-container%20%7B%5Cn%20%20%20%20display%3A%20inline-block%3B%5Cn%20%20%20%20width%3A%20145px%3B%5Cn%20%20%20%20height%3A%20calc(100%25%20-%20120px)%3B%5Cn%20%20%20%20vertical-align%3A%20top%3B%5Cn%20%20%20%20padding%3A%2060px%200%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.right-container%20.registry-container%20%7B%5Cn%20%20%20%20text-align%3A%20center%3B%5Cn%20%20%20%20color%3A%20%23fff%3B%5Cn%20%20%20%20font-size%3A%2018px%3B%5Cn%20%20%20%20font-weight%3A%20200%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.right-container%20.registry-container%20span%20%7B%5Cn%20%20%20%20border-bottom%3A%203px%20solid%20rgb(237%2C%20221%2C%2022)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.right-container%20.action-container%20%7B%5Cn%20%20%20%20font-size%3A%2010px%3B%5Cn%20%20%20%20color%3A%20%23fff%3B%5Cn%20%20%20%20height%3A%20100%25%3B%5Cn%20%20%20%20text-align%3A%20center%3B%5Cn%20%20%20%20position%3A%20relative%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.right-container%20.action-container%20span%20%7B%5Cn%20%20%20%20border%3A%201px%20solid%20rgb(237%2C%20221%2C%2022)%3B%5Cn%20%20%20%20padding%3A%2010px%3B%5Cn%20%20%20%20display%3A%20inline%3B%5Cn%20%20%20%20line-height%3A%2025px%3B%5Cn%20%20%20%20border-radius%3A%2025px%3B%5Cn%20%20%20%20position%3A%20absolute%3B%5Cn%20%20%20%20bottom%3A%2010px%3B%5Cn%20%20%20%20left%3A%20calc(72px%20-%2025px)%3B%5Cn%20%20%20%20transition%3A%20.2s%3B%5Cn%20%20%20%20cursor%3A%20pointer%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.login-body%20.login-container%20.right-container%20.action-container%20span%3Ahover%20%7B%5Cn%20%20%20%20background-color%3A%20rgb(237%2C%20221%2C%2022)%3B%5Cn%20%20%20%20color%3A%20rgb(95%2C%2076%2C%20194)%3B%5Cn%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>login-body<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>login-container<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>left-container<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>title<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>登录<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>input-container<span>\"</span></span><span>></span></span>\n          <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>username<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>用户名<span>\"</span></span><span>/></span></span>\n          <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>password<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>password<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>密码<span>\"</span></span><span>/></span></span>\n        <span><span><span>&lt;/</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>message-container<span>\"</span></span><span>></span></span>\n          <span><span><span>&lt;</span>span</span><span>></span></span>忘记密码<span><span><span>&lt;/</span>span</span><span>></span></span>\n        <span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>right-container<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>registry-container<span>\"</span></span><span>></span></span>\n          <span><span><span>&lt;</span>span</span><span>></span></span>注册<span><span><span>&lt;/</span>span</span><span>></span></span>\n        <span><span><span>&lt;/</span>div</span><span>></span></span>\n        <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>action-container<span>\"</span></span><span>></span></span>\n          <span><span><span>&lt;</span>span</span><span>></span></span>提交<span><span><span>&lt;/</span>span</span><span>></span></span>\n        <span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>export</span> <span>default</span> <span>{</span>\n    <span>name</span><span>:</span> <span>\"Login\"</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>/** {*/</span>\n  <span>/*  margin: 0;*/</span>\n  <span>/*  padding: 0;*/</span>\n  <span>/*}*/</span>\n\n  <span>/*.html {*/</span>\n  <span>/*  height: 350px;*/</span>\n  <span>/*  width: 100%;*/</span>\n  <span>/*}*/</span>\n\n  <span>.login-body</span> <span>{</span>\n    <span>display</span><span>:</span> flex<span>;</span>\n    <span>justify-content</span><span>:</span> center<span>;</span>\n    <span>align-items</span><span>:</span> center<span>;</span>\n    <span>height</span><span>:</span> 350px<span>;</span>\n    <span>/*padding: 5% 0;*/</span>\n    <span>/*position: relative;*/</span>\n    <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>to bottom right<span>,</span> <span>rgb</span><span>(</span>114<span>,</span> 135<span>,</span> 254<span>)</span><span>,</span> <span>rgb</span><span>(</span>130<span>,</span> 88<span>,</span> 186<span>)</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container</span> <span>{</span>\n    <span>/*position: absolute;*/</span>\n    <span>width</span><span>:</span> 600px<span>;</span>\n    <span>height</span><span>:</span> 315px<span>;</span>\n    <span>margin</span><span>:</span> 0 auto<span>;</span>\n    <span>border-radius</span><span>:</span> 15px<span>;</span>\n    <span>box-shadow</span><span>:</span> 0 10px 50px 0 <span>rgb</span><span>(</span>59<span>,</span> 76<span>,</span> 194<span>)</span><span>;</span>\n    <span>background-color</span><span>:</span> <span>rgb</span><span>(</span>95<span>,</span> 76<span>,</span> 194<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container</span> <span>{</span>\n    <span>display</span><span>:</span> inline-block<span>;</span>\n    <span>width</span><span>:</span> 330px<span>;</span>\n    <span>border-top-left-radius</span><span>:</span> 15px<span>;</span>\n    <span>border-bottom-left-radius</span><span>:</span> 15px<span>;</span>\n    <span>padding</span><span>:</span> 60px<span>;</span>\n    <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>to bottom right<span>,</span> <span>rgb</span><span>(</span>118<span>,</span> 76<span>,</span> 163<span>)</span><span>,</span> <span>rgb</span><span>(</span>97<span>,</span> 103<span>,</span> 211<span>)</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .title</span> <span>{</span>\n    <span>color</span><span>:</span> #fff<span>;</span>\n    <span>font-size</span><span>:</span> 18px<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .title span</span> <span>{</span>\n    <span>border-bottom</span><span>:</span> 3px solid <span>rgb</span><span>(</span>237<span>,</span> 221<span>,</span> 22<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .input-container</span> <span>{</span>\n    <span>padding</span><span>:</span> 20px 0<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .input-container input</span> <span>{</span>\n    <span>border</span><span>:</span> 0<span>;</span>\n    <span>background</span><span>:</span> none<span>;</span>\n    <span>background-color</span><span>:</span> transparent <span>!important</span><span>;</span>\n    <span>outline</span><span>:</span> 0<span>;</span>\n    <span>margin</span><span>:</span> 20px 0<span>;</span>\n    <span>color</span><span>:</span> #fff <span>!important</span><span>;</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n    <span>display</span><span>:</span> block<span>;</span>\n    <span>padding</span><span>:</span> 5px 0<span>;</span>\n    <span>transition</span><span>:</span> .2s<span>;</span>\n    <span>border-bottom</span><span>:</span> 1px solid <span>rgb</span><span>(</span>199<span>,</span> 191<span>,</span> 219<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>/*input：-webkit-autofill*/</span>\n  <span>/*input:-webkit-autofill:hover*/</span>\n  <span>input</span><span>:</span><span>-webkit-autofill</span><span>:</span>focus\n  <span>/*input:-webkit-autofill:active*/</span>\n  <span>{</span>\n    <span>/*解决自动填充文字背景色*/</span>\n    <span>transition</span><span>:</span> background-color 500s ease-in-out 0s <span>!important</span><span>;</span>\n    <span>/*  background-color: transparent ;*/</span>\n  <span>}</span>\n\n  <span>-internal-autofill-selected</span> <span>{</span>\n    <span>transition</span><span>:</span> background-color 500s ease-in-out 0s<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .input-container input:hover</span> <span>{</span>\n    <span>border-bottom-color</span><span>:</span> #fff<span>;</span>\n  <span>}</span>\n\n  <span>::-webkit-input-placeholder</span> <span>{</span>\n    <span>color</span><span>:</span> <span>rgb</span><span>(</span>199<span>,</span> 191<span>,</span> 219<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .message-container</span> <span>{</span>\n    <span>font-size</span><span>:</span> 14px<span>;</span>\n    <span>transition</span><span>:</span> .2s<span>;</span>\n    <span>color</span><span>:</span> <span>rgb</span><span>(</span>199<span>,</span> 191<span>,</span> 219<span>)</span><span>;</span>\n    <span>cursor</span><span>:</span> pointer<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .left-container .message-container:hover</span> <span>{</span>\n    <span>color</span><span>:</span> #fff\n  <span>}</span>\n\n  <span>.login-body .login-container .right-container</span> <span>{</span>\n    <span>display</span><span>:</span> inline-block<span>;</span>\n    <span>width</span><span>:</span> 145px<span>;</span>\n    <span>height</span><span>:</span> <span>calc</span><span>(</span>100% - 120px<span>)</span><span>;</span>\n    <span>vertical-align</span><span>:</span> top<span>;</span>\n    <span>padding</span><span>:</span> 60px 0<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .right-container .registry-container</span> <span>{</span>\n    <span>text-align</span><span>:</span> center<span>;</span>\n    <span>color</span><span>:</span> #fff<span>;</span>\n    <span>font-size</span><span>:</span> 18px<span>;</span>\n    <span>font-weight</span><span>:</span> 200<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .right-container .registry-container span</span> <span>{</span>\n    <span>border-bottom</span><span>:</span> 3px solid <span>rgb</span><span>(</span>237<span>,</span> 221<span>,</span> 22<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .right-container .action-container</span> <span>{</span>\n    <span>font-size</span><span>:</span> 10px<span>;</span>\n    <span>color</span><span>:</span> #fff<span>;</span>\n    <span>height</span><span>:</span> 100%<span>;</span>\n    <span>text-align</span><span>:</span> center<span>;</span>\n    <span>position</span><span>:</span> relative<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .right-container .action-container span</span> <span>{</span>\n    <span>border</span><span>:</span> 1px solid <span>rgb</span><span>(</span>237<span>,</span> 221<span>,</span> 22<span>)</span><span>;</span>\n    <span>padding</span><span>:</span> 10px<span>;</span>\n    <span>display</span><span>:</span> inline<span>;</span>\n    <span>line-height</span><span>:</span> 25px<span>;</span>\n    <span>border-radius</span><span>:</span> 25px<span>;</span>\n    <span>position</span><span>:</span> absolute<span>;</span>\n    <span>bottom</span><span>:</span> 10px<span>;</span>\n    <span>left</span><span>:</span> <span>calc</span><span>(</span>72px - 25px<span>)</span><span>;</span>\n    <span>transition</span><span>:</span> .2s<span>;</span>\n    <span>cursor</span><span>:</span> pointer<span>;</span>\n  <span>}</span>\n\n  <span>.login-body .login-container .right-container .action-container span:hover</span> <span>{</span>\n    <span>background-color</span><span>:</span> <span>rgb</span><span>(</span>237<span>,</span> 221<span>,</span> 22<span>)</span><span>;</span>\n    <span>color</span><span>:</span> <span>rgb</span><span>(</span>95<span>,</span> 76<span>,</span> 194<span>)</span><span>;</span>\n\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "百叶窗",
      "url": "https://jin-shaohui.gitee.io/CssComponent/shutters/",
      "id": "https://jin-shaohui.gitee.io/CssComponent/shutters/",
      "content_html": "\n<CodeDemo id=\"code-demo-60953a04\" type=\"vue\" code=\"%7B%22html%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20id%3D%5C%22accordion%5C%22%20class%3D%5C%22accordion%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22accordion-box%5C%22%20v-for%3D%5C%22(item%2C%20index)%20in%20list%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22checkbox%5C%22%20name%3D%5C%22select%5C%22%20class%3D%5C%22accordion-select%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22accordion-title%5C%22%3E%3Cspan%3E%7B%7B%20item.title%20%7D%7D%3C%2Fspan%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22accordion-content%5C%22%3E%7B%7B%20item.content%20%7D%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cn%20%20export%20default%20%7B%5Cn%20%20%20%20name%3A%20%5C%22Shutters%5C%22%2C%5Cn%20%20%20%20data()%20%7B%5Cn%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20list%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20title%3A%20'Title1'%2C%20content%3A%20'Content1'%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20title%3A%20'Title2'%2C%20content%3A%20'Content2'%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20title%3A%20'Title3'%2C%20content%3A%20'Content3'%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Cstyle%3E%5Cn%20%20%2F*%20%E6%95%B4%E4%BD%93%E5%B8%83%E5%B1%80%20*%2F%5Cn%20%20.accordion%20%7B%5Cn%20%20%20%20box-sizing%3A%20border-box%3B%5Cn%20%20%20%20font-family%3A%20Arial%2C%20Helvetica%2C%20sans-serif%3B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%20%20%2F*border-color%3A%20%23dedede%3B*%2F%5Cn%20%20%20%20%2F*border-style%3A%20solid%3B*%2F%5Cn%20%20%20%20%2F*border-width%3A%201px%3B*%2F%5Cn%20%20%20%20border%3A%201px%20solid%20%23dedede%3B%5Cn%20%20%20%20border-radius%3A%208px%3B%5Cn%20%20%20%20%2F*height%3A%20auto%3B*%2F%5Cn%20%20%7D%5Cn%5Cn%20%20.accordion-box%20%7B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%20%20display%3A%20flex%3B%5Cn%20%20%20%20flex-direction%3A%20column%3B%5Cn%20%20%20%20overflow%3A%20hidden%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F*%20select%20%E5%92%8C%20title%20%E6%98%AF%E6%94%BE%E5%9C%A8%E5%90%8C%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%85%88%E8%AE%BE%E7%BD%AE%E5%85%AC%E7%94%A8%EF%BC%8C%E5%9C%A8%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AE%20*%2F%5Cn%20%20.accordion-title%2C%5Cn%20%20.accordion-select%20%20%7B%5Cn%20%20%20%20background-color%3A%20%23ffffff%3B%5Cn%20%20%20%20color%3A%20%237f8787%3B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%20%20height%3A%2065px%3B%5Cn%20%20%20%20font-size%3A%2015px%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.accordion-select%20%7B%5Cn%20%20%20%20cursor%3A%20pointer%3B%5Cn%20%20%20%20%2F*margin%3A%200%3B*%2F%5Cn%20%20%20%20opacity%3A%200%3B%5Cn%20%20%20%20z-index%3A%201%3B%5Cn%20%20%20%20%2F*%20%E6%8E%A8%E4%B8%8A%E5%8E%BB%EF%BC%8Cselect%E4%B8%8D%E9%9C%80%E8%A6%81%E9%AB%98%E5%BA%A6%20*%2F%5Cn%20%20%20%20margin-bottom%3A%20-65px%3B%5Cn%20%20%20%20margin-right%3A%200%3B%5Cn%20%20%20%20margin-top%3A%200%3B%5Cn%20%20%7D%5Cn%5Cn%20%20accordion-select%3Ahover%20%2B%20.accordion-title%2C%5Cn%20%20.accordion-select%3Achecked%20%2B%20.accordion-title%20%7B%5Cn%20%20%20%20background-color%3A%20%23ffffff%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.accordion-title%20%7B%5Cn%20%20%20%20position%3A%20relative%3B%5Cn%20%20%20%20border%3A%201px%20solid%20transparent%3B%5Cn%20%20%20%20border-bottom-color%3A%20rgb(234%2C%20234%2C%20234)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.accordion-title%20span%20%7B%5Cn%20%20%20%20bottom%3A%200%3B%5Cn%20%20%20%20line-height%3A%2065px%3B%5Cn%20%20%20%20box-sizing%3A%20border-box%3B%5Cn%20%20%20%20display%3A%20block%3B%5Cn%20%20%20%20position%3A%20absolute%3B%5Cn%20%20%20%20white-space%3A%20nowrap%3B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%20%20padding%3A%200%2033px%3B%5Cn%20%20%20%20transform%3A%20rotate(0deg)%3B%5Cn%20%20%20%20-ms-writing-mode%3A%20lr-tb%3B%5Cn%20%20%20%20filter%3A%20progid%3ADXImageTransform.Microsoft.BasicImage(rotation%3D0)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.accordion-content%20%7B%5Cn%20%20%20%20box-sizing%3A%20border-box%3B%5Cn%20%20%20%20overflow%3A%20auto%3B%5Cn%20%20%20%20position%3A%20relative%3B%5Cn%20%20%20%20transition%3A%20margin%200.3s%20ease%200.1s%3B%5Cn%20%20%20%20background-color%3A%20%23f7f7f7%3B%5Cn%20%20%20%20color%3A%20%237f8787%3B%5Cn%20%20%20%20height%3A%20280px%3B%5Cn%20%20%20%20margin-bottom%3A%20-280px%3B%5Cn%20%20%20%20margin-right%3A%200%3B%5Cn%20%20%20%20padding%3A%2030px%3B%5Cn%20%20%20%20width%3A%20100%25%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.accordion-select%3Achecked%20%2B%20.accordion-title%20%2B%20.accordion-content%20%20%7B%5Cn%20%20%20%20margin-bottom%3A%200%3B%5Cn%20%20%20%20margin-right%3A%200%3B%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>accordion<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>accordion<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>accordion-box<span>\"</span></span> <span>v-for</span><span><span>=</span><span>\"</span>(item, index) in list<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>checkbox<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>select<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>accordion-select<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>accordion-title<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>{{ item.title }}<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>accordion-content<span>\"</span></span><span>></span></span>{{ item.content }}<span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>export</span> <span>default</span> <span>{</span>\n    <span>name</span><span>:</span> <span>\"Shutters\"</span><span>,</span>\n    <span>data</span><span>(</span><span>)</span> <span>{</span>\n      <span>return</span> <span>{</span>\n        <span>list</span><span>:</span> <span>[</span>\n          <span>{</span> <span>title</span><span>:</span> <span>'Title1'</span><span>,</span> <span>content</span><span>:</span> <span>'Content1'</span> <span>}</span><span>,</span>\n          <span>{</span> <span>title</span><span>:</span> <span>'Title2'</span><span>,</span> <span>content</span><span>:</span> <span>'Content2'</span> <span>}</span><span>,</span>\n          <span>{</span> <span>title</span><span>:</span> <span>'Title3'</span><span>,</span> <span>content</span><span>:</span> <span>'Content3'</span> <span>}</span>\n        <span>]</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>/* 整体布局 */</span>\n  <span>.accordion</span> <span>{</span>\n    <span>box-sizing</span><span>:</span> border-box<span>;</span>\n    <span>font-family</span><span>:</span> Arial<span>,</span> Helvetica<span>,</span> sans-serif<span>;</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n    <span>/*border-color: #dedede;*/</span>\n    <span>/*border-style: solid;*/</span>\n    <span>/*border-width: 1px;*/</span>\n    <span>border</span><span>:</span> 1px solid #dedede<span>;</span>\n    <span>border-radius</span><span>:</span> 8px<span>;</span>\n    <span>/*height: auto;*/</span>\n  <span>}</span>\n\n  <span>.accordion-box</span> <span>{</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n    <span>display</span><span>:</span> flex<span>;</span>\n    <span>flex-direction</span><span>:</span> column<span>;</span>\n    <span>overflow</span><span>:</span> hidden<span>;</span>\n  <span>}</span>\n\n  <span>/* select 和 title 是放在同一行，先设置公用，在单独设置 */</span>\n  <span>.accordion-title,\n  .accordion-select</span>  <span>{</span>\n    <span>background-color</span><span>:</span> #ffffff<span>;</span>\n    <span>color</span><span>:</span> #7f8787<span>;</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n    <span>height</span><span>:</span> 65px<span>;</span>\n    <span>font-size</span><span>:</span> 15px<span>;</span>\n  <span>}</span>\n\n  <span>.accordion-select</span> <span>{</span>\n    <span>cursor</span><span>:</span> pointer<span>;</span>\n    <span>/*margin: 0;*/</span>\n    <span>opacity</span><span>:</span> 0<span>;</span>\n    <span>z-index</span><span>:</span> 1<span>;</span>\n    <span>/* 推上去，select不需要高度 */</span>\n    <span>margin-bottom</span><span>:</span> -65px<span>;</span>\n    <span>margin-right</span><span>:</span> 0<span>;</span>\n    <span>margin-top</span><span>:</span> 0<span>;</span>\n  <span>}</span>\n\n  <span>accordion-select:hover + .accordion-title,\n  .accordion-select:checked + .accordion-title</span> <span>{</span>\n    <span>background-color</span><span>:</span> #ffffff<span>;</span>\n  <span>}</span>\n\n  <span>.accordion-title</span> <span>{</span>\n    <span>position</span><span>:</span> relative<span>;</span>\n    <span>border</span><span>:</span> 1px solid transparent<span>;</span>\n    <span>border-bottom-color</span><span>:</span> <span>rgb</span><span>(</span>234<span>,</span> 234<span>,</span> 234<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.accordion-title span</span> <span>{</span>\n    <span>bottom</span><span>:</span> 0<span>;</span>\n    <span>line-height</span><span>:</span> 65px<span>;</span>\n    <span>box-sizing</span><span>:</span> border-box<span>;</span>\n    <span>display</span><span>:</span> block<span>;</span>\n    <span>position</span><span>:</span> absolute<span>;</span>\n    <span>white-space</span><span>:</span> nowrap<span>;</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n    <span>padding</span><span>:</span> 0 33px<span>;</span>\n    <span>transform</span><span>:</span> <span>rotate</span><span>(</span>0deg<span>)</span><span>;</span>\n    <span>-ms-writing-mode</span><span>:</span> lr-tb<span>;</span>\n    <span>filter</span><span>:</span> <span>progid</span><span>:</span>DXImageTransform.Microsoft.<span>BasicImage</span><span>(</span>rotation=0<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.accordion-content</span> <span>{</span>\n    <span>box-sizing</span><span>:</span> border-box<span>;</span>\n    <span>overflow</span><span>:</span> auto<span>;</span>\n    <span>position</span><span>:</span> relative<span>;</span>\n    <span>transition</span><span>:</span> margin 0.3s ease 0.1s<span>;</span>\n    <span>background-color</span><span>:</span> #f7f7f7<span>;</span>\n    <span>color</span><span>:</span> #7f8787<span>;</span>\n    <span>height</span><span>:</span> 280px<span>;</span>\n    <span>margin-bottom</span><span>:</span> -280px<span>;</span>\n    <span>margin-right</span><span>:</span> 0<span>;</span>\n    <span>padding</span><span>:</span> 30px<span>;</span>\n    <span>width</span><span>:</span> 100%<span>;</span>\n  <span>}</span>\n\n  <span>.accordion-select:checked + .accordion-title + .accordion-content</span>  <span>{</span>\n    <span>margin-bottom</span><span>:</span> 0<span>;</span>\n    <span>margin-right</span><span>:</span> 0<span>;</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "流光按钮",
      "url": "https://jin-shaohui.gitee.io/CssComponent/streamerButton/",
      "id": "https://jin-shaohui.gitee.io/CssComponent/streamerButton/",
      "content_html": "\n<CodeDemo id=\"code-demo-31cf7806\" type=\"vue\" code=\"%7B%22html%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22button-body%5C%22%3E%5Cn%20%20%20%20%3Ca%20class%3D%5C%22streamer-button%5C%22%3EStreamerButton%3C%2Fa%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cn%3Cscript%3E%5Cn%20%20export%20default%20%7B%5Cn%20%20%20%20name%3A%20%5C%22StreamerButton%5C%22%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Cstyle%3E%5Cn%20%20.button-body%20%7B%5Cn%20%20%20%20%2F*%20%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%20%E8%AE%A9%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%20%2B%20%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%20*%2F%5Cn%20%20%20%20display%3A%20flex%3B%5Cn%20%20%20%20justify-content%3A%20center%3B%5Cn%20%20%20%20align-items%3A%20center%3B%5Cn%20%20%20%20%2F*%20%E8%AE%A9%E9%A1%B5%E9%9D%A2%E5%8D%A0%E6%8D%AE%E5%B1%8F%E5%B9%95%E6%80%BB%E9%AB%98%20*%2F%5Cn%20%20%20%20height%3A%20100px%3B%5Cn%20%20%20%20%2F*background-color%3A%20%23000%3B*%2F%5Cn%20%20%7D%5Cn%5Cn%20%20.streamer-button%20%7B%5Cn%20%20%20%20%2F*%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D*%2F%5Cn%20%20%20%20position%3A%20relative%3B%5Cn%20%20%20%20width%3A%20200px%3B%5Cn%20%20%20%20height%3A%2050px%3B%5Cn%20%20%20%20line-height%3A%2050px%3B%5Cn%20%20%20%20text-align%3A%20center%3B%5Cn%20%20%20%20%2F*%E5%8E%BB%E9%99%A4%E4%B8%8B%E5%88%92%E7%BA%BF*%2F%5Cn%20%20%20%20text-decoration%3A%20none%3B%5Cn%20%20%20%20%2F*%E6%96%87%E5%AD%97%E5%A4%A7%E5%86%99*%2F%5Cn%20%20%20%20text-transform%3A%20uppercase%3B%5Cn%20%20%20%20font-size%3A%2012px%3B%5Cn%20%20%20%20color%3A%20%23fff%3B%5Cn%20%20%20%20cursor%3A%20pointer%3B%5Cn%20%20%20%20%2F*%E5%9C%86%E8%A7%92*%2F%5Cn%20%20%20%20border-radius%3A%2025px%3B%5Cn%20%20%20%20%2F*%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98%E8%89%B2*%2F%5Cn%20%20%20%20background-image%3A%20linear-gradient(to%20right%2C%20%2303a9f4%2C%20%23f441a5%2C%20%23ffeb3b%2C%20%2309a8f4)%3B%5Cn%20%20%20%20%2F*%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98%E8%89%B2%E5%A4%A7%E5%B0%8F*%2F%5Cn%20%20%20%20background-size%3A%20400%25%3B%5Cn%20%20%20%20z-index%3A%201%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.streamer-button%3A%3Abefore%20%7B%5Cn%20%20%20%20content%3A%20%5C%221%5C%22%3B%5Cn%20%20%20%20position%3A%20absolute%3B%5Cn%20%20%20%20top%3A%20-5px%3B%5Cn%20%20%20%20buttom%3A%20-5px%3B%5Cn%20%20%20%20left%3A%20-5px%3B%5Cn%20%20%20%20right%3A%20-5px%3B%5Cn%20%20%20%20%2F*%E5%9C%86%E8%A7%92*%2F%5Cn%20%20%20%20border-radius%3A%2025px%3B%5Cn%20%20%20%20%2F*%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98%E8%89%B2*%2F%5Cn%20%20%20%20background-image%3A%20linear-gradient(to%20right%2C%20%2303a9f4%2C%20%23f441a5%2C%20%23ffeb3b%2C%20%2309a8f4)%3B%5Cn%20%20%20%20%2F*%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98%E8%89%B2%E5%A4%A7%E5%B0%8F*%2F%5Cn%20%20%20%20background-size%3A%20400%25%3B%5Cn%20%20%20%20z-index%3A%20-1%3B%5Cn%20%20%20%20%2F*%E6%A8%A1%E7%B3%8A%20%E4%BA%A7%E7%94%9F%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C*%2F%5Cn%20%20%20%20filter%3A%20blur(10px)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.streamer-button%3Ahover%20%7B%5Cn%20%20%20%20%2F*%E5%8A%A8%E7%94%BB%20%E5%90%8D%E7%A7%B0%20%E6%97%B6%E9%97%B4%20%20%E6%97%A0%E7%BA%BF%E6%AC%A1%E6%92%AD%E6%94%BE*%2F%5Cn%20%20%20%20animation%3A%20sun%203s%20infinite%3B%5Cn%20%20%7D%5Cn%5Cn%20%20.streamer-button%3Ahover%3A%3Abefore%20%7B%5Cn%20%20%20%20animation%3A%20sun%203s%20infinite%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%40keyframes%20sun%20%7B%5Cn%20%20%20%20100%25%20%7B%5Cn%20%20%20%20%20%20%2F*%E8%83%8C%E6%99%AF%E4%BD%8D%E7%BD%AE*%2F%5Cn%20%20%20%20%20%20background-position%3A%20-400%25%200%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\">\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>button-body<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>a</span> <span>class</span><span><span>=</span><span>\"</span>streamer-button<span>\"</span></span><span>></span></span>StreamerButton<span><span><span>&lt;/</span>a</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>export</span> <span>default</span> <span>{</span>\n    <span>name</span><span>:</span> <span>\"StreamerButton\"</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n  <span>.button-body</span> <span>{</span>\n    <span>/* 弹性布局 让页面元素垂直 + 水平居中 */</span>\n    <span>display</span><span>:</span> flex<span>;</span>\n    <span>justify-content</span><span>:</span> center<span>;</span>\n    <span>align-items</span><span>:</span> center<span>;</span>\n    <span>/* 让页面占据屏幕总高 */</span>\n    <span>height</span><span>:</span> 100px<span>;</span>\n    <span>/*background-color: #000;*/</span>\n  <span>}</span>\n\n  <span>.streamer-button</span> <span>{</span>\n    <span>/*相对定位*/</span>\n    <span>position</span><span>:</span> relative<span>;</span>\n    <span>width</span><span>:</span> 200px<span>;</span>\n    <span>height</span><span>:</span> 50px<span>;</span>\n    <span>line-height</span><span>:</span> 50px<span>;</span>\n    <span>text-align</span><span>:</span> center<span>;</span>\n    <span>/*去除下划线*/</span>\n    <span>text-decoration</span><span>:</span> none<span>;</span>\n    <span>/*文字大写*/</span>\n    <span>text-transform</span><span>:</span> uppercase<span>;</span>\n    <span>font-size</span><span>:</span> 12px<span>;</span>\n    <span>color</span><span>:</span> #fff<span>;</span>\n    <span>cursor</span><span>:</span> pointer<span>;</span>\n    <span>/*圆角*/</span>\n    <span>border-radius</span><span>:</span> 25px<span>;</span>\n    <span>/*背景渐变色*/</span>\n    <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>to right<span>,</span> #03a9f4<span>,</span> #f441a5<span>,</span> #ffeb3b<span>,</span> #09a8f4<span>)</span><span>;</span>\n    <span>/*背景渐变色大小*/</span>\n    <span>background-size</span><span>:</span> 400%<span>;</span>\n    <span>z-index</span><span>:</span> 1<span>;</span>\n  <span>}</span>\n\n  <span>.streamer-button::before</span> <span>{</span>\n    <span>content</span><span>:</span> <span>\"1\"</span><span>;</span>\n    <span>position</span><span>:</span> absolute<span>;</span>\n    <span>top</span><span>:</span> -5px<span>;</span>\n    <span>buttom</span><span>:</span> -5px<span>;</span>\n    <span>left</span><span>:</span> -5px<span>;</span>\n    <span>right</span><span>:</span> -5px<span>;</span>\n    <span>/*圆角*/</span>\n    <span>border-radius</span><span>:</span> 25px<span>;</span>\n    <span>/*背景渐变色*/</span>\n    <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>to right<span>,</span> #03a9f4<span>,</span> #f441a5<span>,</span> #ffeb3b<span>,</span> #09a8f4<span>)</span><span>;</span>\n    <span>/*背景渐变色大小*/</span>\n    <span>background-size</span><span>:</span> 400%<span>;</span>\n    <span>z-index</span><span>:</span> -1<span>;</span>\n    <span>/*模糊 产生发光效果*/</span>\n    <span>filter</span><span>:</span> <span>blur</span><span>(</span>10px<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>.streamer-button:hover</span> <span>{</span>\n    <span>/*动画 名称 时间  无线次播放*/</span>\n    <span>animation</span><span>:</span> sun 3s infinite<span>;</span>\n  <span>}</span>\n\n  <span>.streamer-button:hover::before</span> <span>{</span>\n    <span>animation</span><span>:</span> sun 3s infinite<span>;</span>\n  <span>}</span>\n\n  <span><span>@keyframes</span> sun</span> <span>{</span>\n    <span>100%</span> <span>{</span>\n      <span>/*背景位置*/</span>\n      <span>background-position</span><span>:</span> -400% 0<span>;</span>\n    <span>}</span>\n  <span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></CodeDemo>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Lambda",
      "url": "https://jin-shaohui.gitee.io/JDK8/Lambda/",
      "id": "https://jin-shaohui.gitee.io/JDK8/Lambda/",
      "content_html": "<p>Lambda 表达式(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。</p>\n<h2 id=\"表达式的结构\" tabindex=\"-1\"> 表达式的结构</h2>\n<ul>\n<li>一个 Lambda 表达式可以有零个或多个参数</li>\n<li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同</li>\n<li>所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a, b) 或 (int a, int b) 或 (String a, int b, float c)</li>\n<li>空圆括号代表参数集为空。例如：() -&gt; 42</li>\n<li>当只有一个参数，且其类型可推导时，圆括号（）可省略。例如：a -&gt; return a * a</li>\n<li>Lambda 表达式的主体可包含零条或多条语句</li>\n<li>如果 Lambda 表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致</li>\n<li>如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li>\n</ul>\n<h2 id=\"表达式的使用\" tabindex=\"-1\"> 表达式的使用</h2>\n<p>下面我们先使用一个简单的例子来看看Lambda的效果吧。\n比如我们对Map 的遍历 传统方式遍历如下:</p>\n<div><pre><code>  <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n  map<span>.</span><span>put</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"a\"</span><span>)</span><span>;</span>\n  map<span>.</span><span>put</span><span>(</span><span>\"b\"</span><span>,</span> <span>\"b\"</span><span>)</span><span>;</span>\n  map<span>.</span><span>put</span><span>(</span><span>\"c\"</span><span>,</span> <span>\"c\"</span><span>)</span><span>;</span>\n  map<span>.</span><span>put</span><span>(</span><span>\"d\"</span><span>,</span> <span>\"d\"</span><span>)</span><span>;</span>\n\n  <span>for</span> <span>(</span><span>String</span> key <span>:</span> map<span>.</span><span>keySet</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n   <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"k=\"</span> <span>+</span> key <span>+</span> <span>\"，v=\"</span> <span>+</span> map<span>.</span><span>get</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>使用Lambda进行遍历:</p>\n<div><pre><code>  map<span>.</span><span>forEach</span><span>(</span><span>(</span>k<span>,</span> v<span>)</span> <span>-></span> <span>{</span>\n   <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"k=\"</span> <span>+</span> k <span>+</span> <span>\"，v=\"</span> <span>+</span> v<span>)</span><span>;</span>\n <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>List也同理，不过List还可以通过双冒号运算符遍历:</p>\n<div><pre><code>  <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n  list<span>.</span><span>add</span><span>(</span><span>\"a\"</span><span>)</span><span>;</span>\n  list<span>.</span><span>add</span><span>(</span><span>\"bb\"</span><span>)</span><span>;</span>\n  list<span>.</span><span>add</span><span>(</span><span>\"ccc\"</span><span>)</span><span>;</span>\n  list<span>.</span><span>add</span><span>(</span><span>\"dddd\"</span><span>)</span><span>;</span>\n\n  list<span>.</span><span>forEach</span><span>(</span>v <span>-></span> <span>{</span>\n   <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>v<span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  list<span>.</span><span>forEach</span><span>(</span><span>System</span><span>.</span>out<span>::</span><span>println</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>\n<p>Lambda除了在for循环遍历中使用外，它还可以代替匿名的内部类。比如下面这个例子的线程创建:</p>\n</blockquote>\n<div><pre><code> <span>Runnable</span> r1 <span>=</span> <span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>\n  <span>@Override</span>\n  <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n   <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"普通方式创建!\"</span><span>)</span><span>;</span>\n  <span>}</span>\n <span>}</span><span>;</span>\n \n <span>//使用拉姆达方式创建</span>\n <span>Runnable</span> r2 <span>=</span> <span>(</span><span>)</span><span>-></span> <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"拉姆达方式创建!\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>注: 这个例子中使用Lambda表达式的时候，编译器会自动推断：根据线程类的构造函数签名 Runnable r { }，将该 Lambda 表达式赋Runnable 接口。</p>\n<p>Lambda 表达式与匿名类的区别使用匿名类与 Lambda 表达式的一大区别在于关键词的使用。对于匿名类，关键词 this 解读为匿名类，而对于 Lambda 表达式，关键词 this 解读为写就 Lambda 的外部类。</p>\n<h2 id=\"注意事项\" tabindex=\"-1\"> 注意事项</h2>\n<p>Lambda虽然简化了代码的编写，但同时也减少了可读性。</p>\n",
      "date_published": "2022-05-16T11:26:43.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "JDK8"
      ]
    },
    {
      "title": "Stream",
      "url": "https://jin-shaohui.gitee.io/JDK8/Stream/",
      "id": "https://jin-shaohui.gitee.io/JDK8/Stream/",
      "content_html": "<p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。\nStream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。\n这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p>\n<h2 id=\"特性\" tabindex=\"-1\"> 特性</h2>\n<ul>\n<li>不是数据结构：它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</li>\n<li>不支持索引访问：但是很容易生成数组或者 List 。</li>\n<li>惰性化：很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。Intermediate 操作永远是惰性化的。</li>\n<li>并行能力。当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</li>\n<li>可以是无限的：集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</li>\n<li>注意事项：所有 Stream 的操作必须以 lambda 表达式为参数。</li>\n</ul>\n<h2 id=\"流操作类型\" tabindex=\"-1\"> 流操作类型</h2>\n<ul>\n<li>Intermediate：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li>\n<li>Terminal：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li>\n</ul>\n<h2 id=\"基本使用\" tabindex=\"-1\"> 基本使用</h2>\n<p>这里我们依旧使用一个简单示例来看看吧。在开发中，我们有时需要对一些数据进行过滤，如果是传统的方式，我们需要对这批数据进行遍历过滤，会显得比较繁琐，如果使用stream流方式的话，那么可以很方便的进行处理。</p>\n<div><pre><code><span>// 首先通过普通的方式进行过滤:</span>\n<span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>\"张三\"</span><span>,</span> <span>\"李四\"</span><span>,</span> <span>\"王五\"</span><span>,</span> <span>\"xuwujing\"</span><span>)</span><span>;</span>\n<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"过滤之前:\"</span> <span>+</span> list<span>)</span><span>;</span>\n<span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> result <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n<span>for</span> <span>(</span><span>String</span> str <span>:</span> list<span>)</span> <span>{</span>\n <span>if</span> <span>(</span><span>!</span><span>\"李四\"</span><span>.</span><span>equals</span><span>(</span>str<span>)</span><span>)</span> <span>{</span>\n  result<span>.</span><span>add</span><span>(</span>str<span>)</span><span>;</span>\n <span>}</span>\n<span>}</span>\n<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"过滤之后:\"</span> <span>+</span> result<span>)</span><span>;</span>\n\n<span>// 使用Steam方式进行过滤：</span>\n<span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> result2 <span>=</span> list<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span>str <span>-></span> <span>!</span><span>\"李四\"</span><span>.</span><span>equals</span><span>(</span>str<span>)</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"stream 过滤之后:\"</span> <span>+</span> result2<span>)</span><span>;</span>\n\n<span>// 输出结果:</span>\n<span>// 过滤之前:[张三, 李四, 王五, xuwujing]</span>\n<span>// 过滤之后:[张三, 王五, xuwujing]</span>\n<span>// stream 过滤之后:[张三, 王五, xuwujing]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>是不是很简洁和方便呢。其实Stream流还有更多的使用方法，filter只是其中的一角而已。那么在这里我们就来学习了解下这些用法吧。</p>\n<h2 id=\"构造stream流的方式\" tabindex=\"-1\"> 构造Stream流的方式</h2>\n<div><pre><code><span>Stream</span> stream <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>)</span><span>;</span>\n<span>String</span><span>[</span><span>]</span> strArray <span>=</span> <span>new</span> <span>String</span><span>[</span><span>]</span> <span>{</span> <span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span> <span>}</span><span>;</span>\nstream <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span>strArray<span>)</span><span>;</span>\nstream <span>=</span> <span>Arrays</span><span>.</span><span>stream</span><span>(</span>strArray<span>)</span><span>;</span>\n<span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span>strArray<span>)</span><span>;</span>\nstream <span>=</span> list<span>.</span><span>stream</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的之间的转换\" tabindex=\"-1\"> Stream流的之间的转换</h2>\n<p>注意:一个Stream流只可以使用一次，这段代码为了简洁而重复使用了数次，因此会抛出 stream has already been operated upon or closed 异常。</p>\n<div><pre><code><span>try</span> <span>{</span>\n  <span>Stream</span><span><span>&lt;</span><span>String</span><span>></span></span> stream2 <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>)</span><span>;</span>\n  <span>// 转换成 Array</span>\n  <span>String</span><span>[</span><span>]</span> strArray1 <span>=</span> stream2<span>.</span><span>toArray</span><span>(</span><span>String</span><span>[</span><span>]</span><span>::</span><span>new</span><span>)</span><span>;</span>\n\n  <span>// 转换成 Collection</span>\n  <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list1 <span>=</span> stream2<span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n  <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list2 <span>=</span> stream2<span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toCollection</span><span>(</span><span>ArrayList</span><span>::</span><span>new</span><span>)</span><span>)</span><span>;</span>   \n  <span>Set</span> set1 <span>=</span> stream2<span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toSet</span><span>(</span><span>)</span><span>)</span><span>;</span>\n  <span>Stack</span> stack1 <span>=</span> stream2<span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toCollection</span><span>(</span><span>Stack</span><span>::</span><span>new</span><span>)</span><span>)</span><span>;</span>\n\n  <span>// 转换成 String</span>\n  <span>String</span> str <span>=</span> stream<span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>joining</span><span>(</span><span>)</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>\n  e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的map使用\" tabindex=\"-1\"> Stream流的map使用</h2>\n<p>map方法用于映射每个元素到对应的结果，一对一。</p>\n<div><pre><code> <span>// 示例一：转换大写</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list3 <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>\"zhangSan\"</span><span>,</span> <span>\"liSi\"</span><span>,</span> <span>\"wangWu\"</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"转换之前的数据:\"</span> <span>+</span> list3<span>)</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list4 <span>=</span> list3<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span><span>String</span><span>::</span><span>toUpperCase</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"转换之后的数据:\"</span> <span>+</span> list4<span>)</span><span>;</span> \n <span>// 转换之后的数据:[ZHANGSAN, LISI,WANGWU]</span>\n\n <span>// 示例二：转换数据类型</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list31 <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>\"1\"</span><span>,</span> <span>\"2\"</span><span>,</span> <span>\"3\"</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"转换之前的数据:\"</span> <span>+</span> list31<span>)</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> list41 <span>=</span> list31<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span><span>Integer</span><span>::</span><span>valueOf</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"转换之后的数据:\"</span> <span>+</span> list41<span>)</span><span>;</span> \n <span>// [1, 2, 3]</span>\n\n <span>// 示例三：获取平方</span>\n <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> list5 <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>new</span> <span>Integer</span><span>[</span><span>]</span> <span>{</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span> <span>}</span><span>)</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> list6 <span>=</span> list5<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span>n <span>-></span> n <span>*</span> n<span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"平方的数据:\"</span> <span>+</span> list6<span>)</span><span>;</span>\n <span>// [1, 4, 9, 16, 25]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的filter使用\" tabindex=\"-1\"> Stream流的filter使用</h2>\n<p>filter方法用于通过设置的条件过滤出元素。</p>\n<div><pre><code> <span>// 示例一：通过与 findAny 得到 if/else 的值</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>\"张三\"</span><span>,</span> <span>\"李四\"</span><span>,</span> <span>\"王五\"</span><span>,</span> <span>\"xuwujing\"</span><span>)</span><span>;</span>\n <span>String</span> result3 <span>=</span> list<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span>str <span>-></span> <span>\"李四\"</span><span>.</span><span>equals</span><span>(</span>str<span>)</span><span>)</span><span>.</span><span>findAny</span><span>(</span><span>)</span><span>.</span><span>orElse</span><span>(</span><span>\"找不到!\"</span><span>)</span><span>;</span>\n <span>String</span> result4 <span>=</span> list<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span>str <span>-></span> <span>\"李二\"</span><span>.</span><span>equals</span><span>(</span>str<span>)</span><span>)</span><span>.</span><span>findAny</span><span>(</span><span>)</span><span>.</span><span>orElse</span><span>(</span><span>\"找不到!\"</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"stream 过滤之后 2:\"</span> <span>+</span> result3<span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"stream 过滤之后 3:\"</span> <span>+</span> result4<span>)</span><span>;</span>\n\n <span>//stream 过滤之后 2:李四</span>\n <span>//stream 过滤之后 3:找不到!</span>\n\n <span>// 示例二：通过与 mapToInt 计算和</span>\n <span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> lists <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>User</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n lists<span>.</span><span>add</span><span>(</span><span>new</span> <span>User</span><span>(</span><span>6</span><span>,</span> <span>\"张三\"</span><span>)</span><span>)</span><span>;</span>\n lists<span>.</span><span>add</span><span>(</span><span>new</span> <span>User</span><span>(</span><span>2</span><span>,</span> <span>\"李四\"</span><span>)</span><span>)</span><span>;</span>\n lists<span>.</span><span>add</span><span>(</span><span>new</span> <span>User</span><span>(</span><span>3</span><span>,</span> <span>\"王五\"</span><span>)</span><span>)</span><span>;</span>\n lists<span>.</span><span>add</span><span>(</span><span>new</span> <span>User</span><span>(</span><span>1</span><span>,</span> <span>\"张三\"</span><span>)</span><span>)</span><span>;</span>\n <span>// 计算这个list中出现 \"张三\" id的值</span>\n <span>int</span> sum <span>=</span> lists<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span>u <span>-></span> <span>\"张三\"</span><span>.</span><span>equals</span><span>(</span>u<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span><span>.</span><span>mapToInt</span><span>(</span>u <span>-></span> u<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>.</span><span>sum</span><span>(</span><span>)</span><span>;</span>\n\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"计算结果:\"</span> <span>+</span> sum<span>)</span><span>;</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的flatmap使用\" tabindex=\"-1\"> Stream流的flatMap使用</h2>\n<p>flatMap 方法用于映射每个元素到对应的结果，一对多。</p>\n<div><pre><code> <span>// 示例:从句子中得到单词</span>\n <span>String</span> worlds <span>=</span> <span>\"The way of the future\"</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list7 <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n list7<span>.</span><span>add</span><span>(</span>worlds<span>)</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list8 <span>=</span> list7<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>flatMap</span><span>(</span>str <span>-></span> <span>Stream</span><span>.</span><span>of</span><span>(</span>str<span>.</span><span>split</span><span>(</span><span>\" \"</span><span>)</span><span>)</span><span>)</span><span>.</span><span>filter</span><span>(</span>world <span>-></span> world<span>.</span><span>length</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"单词:\"</span><span>)</span><span>;</span>\n list8<span>.</span><span>forEach</span><span>(</span><span>System</span><span>.</span>out<span>::</span><span>println</span><span>)</span><span>;</span>\n <span>// 单词:</span>\n <span>// The </span>\n <span>// way </span>\n <span>// of </span>\n <span>// the </span>\n <span>// future</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的limit使用\" tabindex=\"-1\"> Stream流的limit使用</h2>\n<p>limit 方法用于获取指定数量的流。</p>\n<div><pre><code> <span>// 示例一：获取前n条数的数据</span>\n <span>Random</span> rd <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"取到的前三条数据:\"</span><span>)</span><span>;</span>\n rd<span>.</span><span>ints</span><span>(</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>3</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>System</span><span>.</span>out<span>::</span><span>println</span><span>)</span><span>;</span>\n <span>// 取到的前三条数据:</span>\n <span>// 1167267754</span>\n <span>// -1164558977</span>\n <span>// 1977868798</span>\n\n <span>// 示例二：结合skip使用得到需要的数据 skip表示的是扔掉前n个元素。</span>\n\n <span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> list9 <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>User</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> <span>4</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n  <span>User</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span>i<span>,</span> <span>\"pancm\"</span> <span>+</span> i<span>)</span><span>;</span>\n  list9<span>.</span><span>add</span><span>(</span>user<span>)</span><span>;</span>\n <span>}</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"截取之前的数据:\"</span><span>)</span><span>;</span>\n <span>// 取前3条数据，但是扔掉了前面的2条，可以理解为拿到的数据为 2&lt;=i&lt;3 (i 是数值下标)</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list10 <span>=</span> list9<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span><span>User</span><span>::</span><span>getName</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>3</span><span>)</span><span>.</span><span>skip</span><span>(</span><span>2</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"截取之后的数据:\"</span> <span>+</span> list10<span>)</span><span>;</span>\n <span>//  截取之前的数据:</span>\n <span>//  姓名:pancm1</span>\n <span>//  姓名:pancm2</span>\n <span>//  姓名:pancm3</span>\n <span>//  截取之后的数据:[pancm3]</span>\n 注<span>:</span><span>User</span>实体类中 getName 方法会打印姓名。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的sort使用\" tabindex=\"-1\"> Stream流的sort使用</h2>\n<p>sorted方法用于对流进行升序排序。</p>\n<div><pre><code> <span>// 示例一：随机取值排序</span>\n <span>Random</span> rd2 <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"取到的前三条数据然后进行排序:\"</span><span>)</span><span>;</span>\n rd2<span>.</span><span>ints</span><span>(</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>3</span><span>)</span><span>.</span><span>sorted</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>System</span><span>.</span>out<span>::</span><span>println</span><span>)</span><span>;</span>\n <span>// 取到的前三条数据然后进行排序:</span>\n <span>// -2043456377</span>\n <span>// -1778595703</span>\n <span>// 1013369565</span>\n\n <span>// 示例二：优化排序 tips:先获取在排序效率会更高!</span>\n <span>//普通的排序取值</span>\n <span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> list11 <span>=</span> list9<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>sorted</span><span>(</span><span>(</span>u1<span>,</span> u2<span>)</span> <span>-></span> u1<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>compareTo</span><span>(</span>u2<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>3</span><span>)</span>\n   <span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"排序之后的数据:\"</span> <span>+</span> list11<span>)</span><span>;</span>\n <span>//优化排序取值</span>\n <span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> list12 <span>=</span> list9<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>3</span><span>)</span><span>.</span><span>sorted</span><span>(</span><span>(</span>u1<span>,</span> u2<span>)</span> <span>-></span> u1<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>compareTo</span><span>(</span>u2<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span>\n   <span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"优化排序之后的数据:\"</span> <span>+</span> list12<span>)</span><span>;</span>\n <span>//排序之后的数据:[{\"id\":1,\"name\":\"pancm1\"}, {\"id\":2,\"name\":\"pancm2\"}, {\"id\":3,\"name\":\"pancm3\"}]</span>\n <span>//优化排序之后的数据:[{\"id\":1,\"name\":\"pancm1\"}, {\"id\":2,\"name\":\"pancm2\"}, {\"id\":3,\"name\":\"pancm3\"}]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的peek使用\" tabindex=\"-1\"> Stream流的peek使用</h2>\n<p>peek对每个元素执行操作并返回一个新的Stream</p>\n<div><pre><code> <span>// 示例:双重操作</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"peek使用:\"</span><span>)</span><span>;</span>\n <span>Stream</span><span>.</span><span>of</span><span>(</span><span>\"one\"</span><span>,</span> <span>\"two\"</span><span>,</span> <span>\"three\"</span><span>,</span> <span>\"four\"</span><span>)</span><span>.</span><span>filter</span><span>(</span>e <span>-></span> e<span>.</span><span>length</span><span>(</span><span>)</span> <span>></span> <span>3</span><span>)</span><span>.</span><span>peek</span><span>(</span>e <span>-></span> <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"转换之前: \"</span> <span>+</span> e<span>)</span><span>)</span>\n   <span>.</span><span>map</span><span>(</span><span>String</span><span>::</span><span>toUpperCase</span><span>)</span><span>.</span><span>peek</span><span>(</span>e <span>-></span> <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"转换之后: \"</span> <span>+</span> e<span>)</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n \n <span>// 转换之前: three</span>\n <span>// 转换之后: THREE</span>\n <span>// 转换之前: four</span>\n <span>// 转换之后: FOUR</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的parallel使用\" tabindex=\"-1\"> Stream流的parallel使用</h2>\n<p>parallelStream 是流并行处理程序的代替方法。</p>\n<div><pre><code> <span>// 示例:获取空字符串的数量</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> strings <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"\"</span><span>,</span> <span>\"c\"</span><span>,</span> <span>\"\"</span><span>,</span> <span>\"e\"</span><span>,</span><span>\"\"</span><span>,</span> <span>\" \"</span><span>)</span><span>;</span>\n <span>// 获取空字符串的数量</span>\n <span>long</span> count <span>=</span>  strings<span>.</span><span>parallelStream</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span>string <span>-></span> string<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span><span>.</span><span>count</span><span>(</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"空字符串的个数:\"</span><span>+</span>count<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的max-min-distinct使用\" tabindex=\"-1\"> Stream流的max/min/distinct使用</h2>\n<div><pre><code> <span>// 示例一：得到最大最小值</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list13 <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>\"zhangsan\"</span><span>,</span><span>\"lisi\"</span><span>,</span><span>\"wangwu\"</span><span>,</span><span>\"xuwujing\"</span><span>)</span><span>;</span>\n <span>int</span> maxLines <span>=</span> list13<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>mapToInt</span><span>(</span><span>String</span><span>::</span><span>length</span><span>)</span><span>.</span><span>max</span><span>(</span><span>)</span><span>.</span><span>getAsInt</span><span>(</span><span>)</span><span>;</span>\n <span>int</span> minLines <span>=</span> list13<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>mapToInt</span><span>(</span><span>String</span><span>::</span><span>length</span><span>)</span><span>.</span><span>min</span><span>(</span><span>)</span><span>.</span><span>getAsInt</span><span>(</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"最长字符的长度:\"</span> <span>+</span> maxLines<span>+</span><span>\",最短字符的长度:\"</span><span>+</span>minLines<span>)</span><span>;</span>\n <span>//最长字符的长度:8,最短字符的长度:4</span>\n\n <span>// 示例二：得到去重之后的数据</span>\n <span>String</span> lines <span>=</span> <span>\"good good study day day up\"</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> list14 <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n list14<span>.</span><span>add</span><span>(</span>lines<span>)</span><span>;</span>\n <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> words <span>=</span> list14<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>flatMap</span><span>(</span>line <span>-></span> <span>Stream</span><span>.</span><span>of</span><span>(</span>line<span>.</span><span>split</span><span>(</span><span>\" \"</span><span>)</span><span>)</span><span>)</span><span>.</span><span>filter</span><span>(</span>word <span>-></span> word<span>.</span><span>length</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span>\n   <span>.</span><span>map</span><span>(</span><span>String</span><span>::</span><span>toLowerCase</span><span>)</span><span>.</span><span>distinct</span><span>(</span><span>)</span><span>.</span><span>sorted</span><span>(</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toList</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"去重复之后:\"</span> <span>+</span> words<span>)</span><span>;</span>\n <span>//去重复之后:[day, good, study, up]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的match使用\" tabindex=\"-1\"> Stream流的Match使用</h2>\n<div><pre><code> <span>// allMatch：Stream 中全部元素符合则返回 true ;</span>\n <span>// anyMatch：Stream 中只要有一个元素符合则返回 true;</span>\n <span>// noneMatch：Stream 中没有一个元素符合则返回 true。</span>\n\n <span>// 示例:数据是否符合</span>\n <span>boolean</span> all <span>=</span> lists<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>allMatch</span><span>(</span>u <span>-></span> u<span>.</span><span>getId</span><span>(</span><span>)</span> <span>></span> <span>3</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"是否都大于3:\"</span> <span>+</span> all<span>)</span><span>;</span>\n <span>boolean</span> any <span>=</span> lists<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>anyMatch</span><span>(</span>u <span>-></span> u<span>.</span><span>getId</span><span>(</span><span>)</span> <span>></span> <span>3</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"是否有一个大于3:\"</span> <span>+</span> any<span>)</span><span>;</span>\n <span>boolean</span> none <span>=</span> lists<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>noneMatch</span><span>(</span>u <span>-></span> u<span>.</span><span>getId</span><span>(</span><span>)</span> <span>></span> <span>3</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"是否没有一个大于3的:\"</span> <span>+</span> none<span>)</span><span>;</span>  \n <span>// 是否都大于3:false</span>\n <span>// 是否有一个大于3:true</span>\n <span>// 是否没有一个大于3的:false</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的reduce使用\" tabindex=\"-1\"> Stream流的reduce使用</h2>\n<p>reduce 主要作用是把 Stream 元素组合起来进行操作。</p>\n<div><pre><code> <span>// 示例一：字符串连接</span>\n <span>String</span> concat <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>\"A\"</span><span>,</span> <span>\"B\"</span><span>,</span> <span>\"C\"</span><span>,</span> <span>\"D\"</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>\"\"</span><span>,</span> <span>String</span><span>::</span><span>concat</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"字符串拼接:\"</span> <span>+</span> concat<span>)</span><span>;</span>\n\n <span>// 示例二：得到最小值</span>\n <span>double</span> minValue <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>-</span><span>4.0</span><span>,</span> <span>1.0</span><span>,</span> <span>3.0</span><span>,</span> <span>-</span><span>2.0</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>Double</span><span>.</span><span>MAX_VALUE</span><span>,</span> <span>Double</span><span>::</span><span>min</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"最小值:\"</span> <span>+</span> minValue<span>)</span><span>;</span>\n <span>//最小值:-4.0</span>\n\n <span>// 示例三：求和</span>\n <span>// 求和, 无起始值</span>\n <span>int</span> sumValue <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>Integer</span><span>::</span><span>sum</span><span>)</span><span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"有无起始值求和:\"</span> <span>+</span> sumValue<span>)</span><span>;</span>\n <span>// 求和, 有起始值</span>\n  sumValue <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>1</span><span>,</span> <span>Integer</span><span>::</span><span>sum</span><span>)</span><span>;</span>\n  <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"有起始值求和:\"</span> <span>+</span> sumValue<span>)</span><span>;</span>\n <span>// 有无起始值求和:10</span>\n <span>// 有起始值求和:11</span>\n\n <span>// 示例四：过滤拼接</span>\n concat <span>=</span> <span>Stream</span><span>.</span><span>of</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"B\"</span><span>,</span> <span>\"c\"</span><span>,</span> <span>\"D\"</span><span>,</span> <span>\"e\"</span><span>,</span> <span>\"F\"</span><span>)</span><span>.</span><span>filter</span><span>(</span>x <span>-></span> x<span>.</span><span>compareTo</span><span>(</span><span>\"Z\"</span><span>)</span> <span>></span> <span>0</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>\"\"</span><span>,</span> <span>String</span><span>::</span><span>concat</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"过滤和字符串连接:\"</span> <span>+</span> concat<span>)</span><span>;</span>\n <span>//过滤和字符串连接:ace</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的iterate使用\" tabindex=\"-1\"> Stream流的iterate使用</h2>\n<p>iterate 跟 reduce 操作很像，接受一个种子值，和一个UnaryOperator（例如 f）。然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。在 iterate 时候管道必须有 limit 这样的操作来限制 Stream 大小。</p>\n<div><pre><code> <span>// 示例:生成一个等差队列</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"从2开始生成一个等差队列:\"</span><span>)</span><span>;</span>\n <span>Stream</span><span>.</span><span>iterate</span><span>(</span><span>2</span><span>,</span> n <span>-></span> n <span>+</span> <span>2</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>5</span><span>)</span><span>.</span><span>forEach</span><span>(</span>x <span>-></span> <span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span>x <span>+</span> <span>\" \"</span><span>)</span><span>)</span><span>;</span>\n <span>// 从2开始生成一个等差队列:</span>\n <span>// 2 4 6 8 10</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的supplier使用\" tabindex=\"-1\"> Stream流的Supplier使用</h2>\n<p>通过实现Supplier类的方法可以自定义流计算规则。</p>\n<div><pre><code> <span>// 示例：随机获取两条用户信息</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"自定义一个流进行计算输出:\"</span><span>)</span><span>;</span>\n <span>Stream</span><span>.</span><span>generate</span><span>(</span><span>new</span> <span>UserSupplier</span><span>(</span><span>)</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>2</span><span>)</span><span>.</span><span>forEach</span><span>(</span>u <span>-></span> <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>u<span>.</span><span>getId</span><span>(</span><span>)</span> <span>+</span> <span>\", \"</span> <span>+</span> u<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n \n <span>//第一次:</span>\n <span>//自定义一个流进行计算输出:</span>\n <span>//10, pancm7</span>\n <span>//11, pancm6</span>\n \n <span>//第二次:</span>\n <span>//自定义一个流进行计算输出:</span>\n <span>//10, pancm4</span>\n <span>//11, pancm2</span>\n \n <span>//第三次:</span>\n <span>//自定义一个流进行计算输出:</span>\n <span>//10, pancm4</span>\n <span>//11, pancm8</span>\n\n\n <span>class</span> <span>UserSupplier</span> <span>implements</span> <span>Supplier</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>{</span>\n  <span>private</span> <span>int</span> index <span>=</span> <span>10</span><span>;</span>\n  <span>private</span> <span>Random</span> random <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n \n  <span>@Override</span>\n  <span>public</span> <span>User</span> <span>get</span><span>(</span><span>)</span> <span>{</span>\n   <span>return</span> <span>new</span> <span>User</span><span>(</span>index<span>++</span><span>,</span> <span>\"pancm\"</span> <span>+</span> random<span>.</span><span>nextInt</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>\n  <span>}</span>\n <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的groupingby-partitioningby使用\" tabindex=\"-1\"> Stream流的groupingBy/partitioningBy使用</h2>\n<div><pre><code> <span>// groupingBy：分组排序；</span>\n <span>// partitioningBy：分区排序。</span>\n\n <span>// 示例一：分组排序</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"通过id进行分组排序:\"</span><span>)</span><span>;</span>\n <span>Map</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>List</span><span>&lt;</span><span>User</span><span>></span><span>></span></span> personGroups <span>=</span> <span>Stream</span><span>.</span><span>generate</span><span>(</span><span>new</span> <span>UserSupplier2</span><span>(</span><span>)</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>5</span><span>)</span>\n   <span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>groupingBy</span><span>(</span><span>User</span><span>::</span><span>getId</span><span>)</span><span>)</span><span>;</span>\n <span>Iterator</span> it <span>=</span> personGroups<span>.</span><span>entrySet</span><span>(</span><span>)</span><span>.</span><span>iterator</span><span>(</span><span>)</span><span>;</span>\n <span>while</span> <span>(</span>it<span>.</span><span>hasNext</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  <span>Map<span>.</span>Entry</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>List</span><span>&lt;</span><span>User</span><span>></span><span>></span></span> persons <span>=</span> <span>(</span><span>Map<span>.</span>Entry</span><span>)</span> it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>\n  <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"id \"</span> <span>+</span> persons<span>.</span><span>getKey</span><span>(</span><span>)</span> <span>+</span> <span>\" = \"</span> <span>+</span> persons<span>.</span><span>getValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>}</span>\n \n <span>// 通过id进行分组排序:</span>\n <span>// id 10 = [{\"id\":10,\"name\":\"pancm1\"}] </span>\n <span>// id 11 = [{\"id\":11,\"name\":\"pancm3\"}, {\"id\":11,\"name\":\"pancm6\"}, {\"id\":11,\"name\":\"pancm4\"}, {\"id\":11,\"name\":\"pancm7\"}]</span>\n\n <span>class</span> <span>UserSupplier2</span> <span>implements</span> <span>Supplier</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>{</span>\n  <span>private</span> <span>int</span> index <span>=</span> <span>10</span><span>;</span>\n  <span>private</span> <span>Random</span> random <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n \n  <span>@Override</span>\n  <span>public</span> <span>User</span> <span>get</span><span>(</span><span>)</span> <span>{</span>\n   <span>return</span> <span>new</span> <span>User</span><span>(</span>index <span>%</span> <span>2</span> <span>==</span> <span>0</span> <span>?</span> index<span>++</span> <span>:</span> index<span>,</span> <span>\"pancm\"</span> <span>+</span> random<span>.</span><span>nextInt</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>\n  <span>}</span>\n <span>}</span>\n\n <span>// 示例二：分区排序</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"通过年龄进行分区排序:\"</span><span>)</span><span>;</span>\n <span>Map</span><span><span>&lt;</span><span>Boolean</span><span>,</span> <span>List</span><span>&lt;</span><span>User</span><span>></span><span>></span></span> children <span>=</span> <span>Stream</span><span>.</span><span>generate</span><span>(</span><span>new</span> <span>UserSupplier3</span><span>(</span><span>)</span><span>)</span><span>.</span><span>limit</span><span>(</span><span>5</span><span>)</span>\n   <span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>partitioningBy</span><span>(</span>p <span>-></span> p<span>.</span><span>getId</span><span>(</span><span>)</span> <span>&lt;</span> <span>18</span><span>)</span><span>)</span><span>;</span>\n\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"小孩: \"</span> <span>+</span> children<span>.</span><span>get</span><span>(</span><span>true</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"成年人: \"</span> <span>+</span> children<span>.</span><span>get</span><span>(</span><span>false</span><span>)</span><span>)</span><span>;</span>\n \n <span>// 通过年龄进行分区排序:</span>\n <span>// 小孩: [{\"id\":16,\"name\":\"pancm7\"}, {\"id\":17,\"name\":\"pancm2\"}]</span>\n <span>// 成年人: [{\"id\":18,\"name\":\"pancm4\"}, {\"id\":19,\"name\":\"pancm9\"}, {\"id\":20,\"name\":\"pancm6\"}]</span>\n\n  <span>class</span> <span>UserSupplier3</span> <span>implements</span> <span>Supplier</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>{</span>\n  <span>private</span> <span>int</span> index <span>=</span> <span>16</span><span>;</span>\n  <span>private</span> <span>Random</span> random <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n \n  <span>@Override</span>\n  <span>public</span> <span>User</span> <span>get</span><span>(</span><span>)</span> <span>{</span>\n   <span>return</span> <span>new</span> <span>User</span><span>(</span>index<span>++</span><span>,</span> <span>\"pancm\"</span> <span>+</span> random<span>.</span><span>nextInt</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>\n  <span>}</span>\n <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"stream流的summarystatistics使用\" tabindex=\"-1\"> Stream流的summaryStatistics使用</h2>\n<p>IntSummaryStatistics 用于收集统计信息(如count、min、max、sum和average)的状态对象。</p>\n<div><pre><code> <span>// 示例:得到最大、最小、之和以及平均数。</span>\n <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> numbers <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>1</span><span>,</span> <span>5</span><span>,</span> <span>7</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>)</span><span>;</span>\n <span>IntSummaryStatistics</span> stats <span>=</span> numbers<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>mapToInt</span><span>(</span><span>(</span>x<span>)</span> <span>-></span> x<span>)</span><span>.</span><span>summaryStatistics</span><span>(</span><span>)</span><span>;</span>\n  \n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"列表中最大的数 : \"</span> <span>+</span> stats<span>.</span><span>getMax</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"列表中最小的数 : \"</span> <span>+</span> stats<span>.</span><span>getMin</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"所有数之和 : \"</span> <span>+</span> stats<span>.</span><span>getSum</span><span>(</span><span>)</span><span>)</span><span>;</span>\n <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"平均数 : \"</span> <span>+</span> stats<span>.</span><span>getAverage</span><span>(</span><span>)</span><span>)</span><span>;</span>\n \n <span>// 列表中最大的数 : 9</span>\n <span>// 列表中最小的数 : 1</span>\n <span>// 所有数之和 : 25</span>\n <span>// 平均数 : 5.0</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>Stream 介绍就到这里了，JDK1.8中的Stream流其实还有很多很多用法，更多的用法则需要大家去查看JDK1.8的API文档了。</p>\n",
      "date_published": "2022-05-16T11:26:43.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "JDK8"
      ]
    },
    {
      "title": "AES加解密",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/AES/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/AES/",
      "content_html": "<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n   <span>DeshfuUtil</span> desUtil <span>=</span> <span>new</span> <span>DeshfuUtil</span><span>(</span><span>)</span><span>;</span>\n   <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"加密:\"</span><span>+</span><span>encrypt</span><span>(</span><span>\"abcdef\"</span><span>)</span>\n         <span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>)</span><span>;</span>\n   <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"解密:\"</span><span>+</span><span>decrypt</span><span>(</span><span>\"7E91EA4F56943F90\"</span><span>)</span><span>)</span><span>;</span>\n\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>public</span> <span>class</span> <span>DeshfuUtil</span> <span>{</span>\n   <span>private</span> <span>static</span> <span>final</span> <span>String</span> <span>PASSWORD_CRYPT_KEY</span> <span>=</span> <span>\"TOGETHER!@#$%\"</span><span>;</span>\n   <span>// 解密数据</span>\n   <span>public</span> <span>static</span> <span>String</span> <span>decrypt</span><span>(</span><span>String</span> message<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n\n      <span>byte</span><span>[</span><span>]</span> bytesrc <span>=</span> <span>convertHexString</span><span>(</span>message<span>)</span><span>;</span>\n      <span>Cipher</span> cipher <span>=</span> <span>Cipher</span><span>.</span><span>getInstance</span><span>(</span><span>\"DES/CBC/PKCS5Padding\"</span><span>)</span><span>;</span>\n      <span>DESKeySpec</span> desKeySpec <span>=</span> <span>new</span> <span>DESKeySpec</span><span>(</span><span>JavaMD5</span><span>.</span><span>getMD5ofStr</span><span>(</span><span>PASSWORD_CRYPT_KEY</span><span>)</span>\n            <span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>8</span><span>)</span><span>.</span><span>getBytes</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>)</span><span>;</span>\n      <span>SecretKeyFactory</span> keyFactory <span>=</span> <span>SecretKeyFactory</span><span>.</span><span>getInstance</span><span>(</span><span>\"DES\"</span><span>)</span><span>;</span>\n      <span>SecretKey</span> secretKey <span>=</span> keyFactory<span>.</span><span>generateSecret</span><span>(</span>desKeySpec<span>)</span><span>;</span>\n      <span>IvParameterSpec</span> iv <span>=</span> <span>new</span> <span>IvParameterSpec</span><span>(</span><span>JavaMD5</span><span>.</span><span>getMD5ofStr</span><span>(</span><span>PASSWORD_CRYPT_KEY</span><span>)</span>\n            <span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>8</span><span>)</span><span>.</span><span>getBytes</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>)</span><span>;</span>\n      cipher<span>.</span><span>init</span><span>(</span><span>Cipher</span><span>.</span><span>DECRYPT_MODE</span><span>,</span> secretKey<span>,</span> iv<span>)</span><span>;</span>\n      <span>byte</span><span>[</span><span>]</span> retByte <span>=</span> cipher<span>.</span><span>doFinal</span><span>(</span>bytesrc<span>)</span><span>;</span>\n      <span>return</span> <span>new</span> <span>String</span><span>(</span>retByte<span>)</span><span>;</span>\n   <span>}</span>\n\n   <span>public</span> <span>static</span> <span>String</span> <span>encrypt</span><span>(</span><span>String</span> message<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n      <span>Cipher</span> cipher <span>=</span> <span>Cipher</span><span>.</span><span>getInstance</span><span>(</span><span>\"DES/CBC/PKCS5Padding\"</span><span>)</span><span>;</span>\n      <span>DESKeySpec</span> desKeySpec <span>=</span> <span>new</span> <span>DESKeySpec</span><span>(</span><span>JavaMD5</span><span>.</span><span>getMD5ofStr</span><span>(</span><span>PASSWORD_CRYPT_KEY</span><span>)</span>\n            <span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>8</span><span>)</span><span>.</span><span>getBytes</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>)</span><span>;</span>\n      <span>SecretKeyFactory</span> keyFactory <span>=</span> <span>SecretKeyFactory</span><span>.</span><span>getInstance</span><span>(</span><span>\"DES\"</span><span>)</span><span>;</span>\n      <span>SecretKey</span> secretKey <span>=</span> keyFactory<span>.</span><span>generateSecret</span><span>(</span>desKeySpec<span>)</span><span>;</span>\n      <span>IvParameterSpec</span> iv <span>=</span> <span>new</span> <span>IvParameterSpec</span><span>(</span><span>JavaMD5</span><span>.</span><span>getMD5ofStr</span><span>(</span><span>PASSWORD_CRYPT_KEY</span><span>)</span>\n            <span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>8</span><span>)</span><span>.</span><span>getBytes</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>)</span><span>;</span>\n      cipher<span>.</span><span>init</span><span>(</span><span>Cipher</span><span>.</span><span>ENCRYPT_MODE</span><span>,</span> secretKey<span>,</span> iv<span>)</span><span>;</span>\n      <span>return</span> <span>toHexString</span><span>(</span>cipher<span>.</span><span>doFinal</span><span>(</span>message<span>.</span><span>getBytes</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>)</span><span>)</span><span>;</span>\n   <span>}</span>\n\n   <span>public</span> <span>static</span> <span>byte</span><span>[</span><span>]</span> <span>convertHexString</span><span>(</span><span>String</span> ss<span>)</span> <span>{</span>\n      <span>byte</span> digest<span>[</span><span>]</span> <span>=</span> <span>new</span> <span>byte</span><span>[</span>ss<span>.</span><span>length</span><span>(</span><span>)</span> <span>/</span> <span>2</span><span>]</span><span>;</span>\n      <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> digest<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n         <span>String</span> byteString <span>=</span> ss<span>.</span><span>substring</span><span>(</span><span>2</span> <span>*</span> i<span>,</span> <span>2</span> <span>*</span> i <span>+</span> <span>2</span><span>)</span><span>;</span>\n         <span>int</span> byteValue <span>=</span> <span>Integer</span><span>.</span><span>parseInt</span><span>(</span>byteString<span>,</span> <span>16</span><span>)</span><span>;</span>\n         digest<span>[</span>i<span>]</span> <span>=</span> <span>(</span><span>byte</span><span>)</span> byteValue<span>;</span>\n      <span>}</span>\n      <span>return</span> digest<span>;</span>\n   <span>}</span>\n\n   <span>public</span> <span>static</span> <span>String</span> <span>toHexString</span><span>(</span><span>byte</span> b<span>[</span><span>]</span><span>)</span> <span>{</span>\n      <span>StringBuffer</span> hexString <span>=</span> <span>new</span> <span>StringBuffer</span><span>(</span><span>)</span><span>;</span>\n      <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n         <span>String</span> plainText <span>=</span> <span>Integer</span><span>.</span><span>toHexString</span><span>(</span><span>0xff</span> <span>&amp;</span> b<span>[</span>i<span>]</span><span>)</span><span>;</span>\n         <span>if</span> <span>(</span>plainText<span>.</span><span>length</span><span>(</span><span>)</span> <span>&lt;</span> <span>2</span><span>)</span>\n            plainText <span>=</span> <span>\"0\"</span> <span>+</span> plainText<span>;</span>\n         hexString<span>.</span><span>append</span><span>(</span>plainText<span>)</span><span>;</span>\n      <span>}</span>\n      <span>return</span> hexString<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n   <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "时间",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Date/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Date/",
      "content_html": "<div><pre><code><span>import</span> <span><span>org<span>.</span>apache<span>.</span>commons<span>.</span>lang<span>.</span></span><span>StringUtils</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>joda<span>.</span>time<span>.</span></span><span>DateTime</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>joda<span>.</span>time<span>.</span></span><span>LocalDate</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>joda<span>.</span>time<span>.</span>format<span>.</span></span><span>DateTimeFormat</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>joda<span>.</span>time<span>.</span>format<span>.</span></span><span>DateTimeFormatter</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>SimpleDateFormat</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Date</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>DateUtils</span> <span>{</span>\n   <span>/** 时间格式(yyyy-MM-dd) */</span>\n   <span>public</span> <span>final</span> <span>static</span> <span>String</span> <span>DATE_PATTERN</span> <span>=</span> <span>\"yyyy-MM-dd\"</span><span>;</span>\n   <span>/** 时间格式(yyyy-MM-dd HH:mm:ss) */</span>\n   <span>public</span> <span>final</span> <span>static</span> <span>String</span> <span>DATE_TIME_PATTERN</span> <span>=</span> <span>\"yyyy-MM-dd HH:mm:ss\"</span><span>;</span>\n\n    <span>/**\n     * 日期格式化 日期格式为：yyyy-MM-dd\n     * <span>@param</span> <span>date</span>  日期\n     * <span>@return</span>  返回yyyy-MM-dd格式日期\n     */</span>\n   <span>public</span> <span>static</span> <span>String</span> <span>format</span><span>(</span><span>Date</span> date<span>)</span> <span>{</span>\n        <span>return</span> <span>format</span><span>(</span>date<span>,</span> <span>DATE_PATTERN</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 日期格式化 日期格式为：yyyy-MM-dd\n     * <span>@param</span> <span>date</span>  日期\n     * <span>@param</span> <span>pattern</span>  格式，如：DateUtils.DATE_TIME_PATTERN\n     * <span>@return</span>  返回yyyy-MM-dd格式日期\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>format</span><span>(</span><span>Date</span> date<span>,</span> <span>String</span> pattern<span>)</span> <span>{</span>\n        <span>if</span><span>(</span>date <span>!=</span> <span>null</span><span>)</span><span>{</span>\n            <span>SimpleDateFormat</span> df <span>=</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span>pattern<span>)</span><span>;</span>\n            <span>return</span> df<span>.</span><span>format</span><span>(</span>date<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 字符串转换成日期\n     * <span>@param</span> <span>strDate</span> 日期字符串\n     * <span>@param</span> <span>pattern</span> 日期的格式，如：DateUtils.DATE_TIME_PATTERN\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>stringToDate</span><span>(</span><span>String</span> strDate<span>,</span> <span>String</span> pattern<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>strDate<span>)</span><span>)</span><span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n\n        <span>DateTimeFormatter</span> fmt <span>=</span> <span>DateTimeFormat</span><span>.</span><span>forPattern</span><span>(</span>pattern<span>)</span><span>;</span>\n        <span>return</span> fmt<span>.</span><span>parseLocalDateTime</span><span>(</span>strDate<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据周数，获取开始日期、结束日期\n     * <span>@param</span> <span>week</span>  周期  0本周，-1上周，-2上上周，1下周，2下下周\n     * <span>@return</span>  返回date[0]开始日期、date[1]结束日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span><span>[</span><span>]</span> <span>getWeekStartAndEnd</span><span>(</span><span>int</span> week<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span><span>)</span><span>;</span>\n        <span>LocalDate</span> date <span>=</span> <span>new</span> <span>LocalDate</span><span>(</span>dateTime<span>.</span><span>plusWeeks</span><span>(</span>week<span>)</span><span>)</span><span>;</span>\n\n        date <span>=</span> date<span>.</span><span>dayOfWeek</span><span>(</span><span>)</span><span>.</span><span>withMinimumValue</span><span>(</span><span>)</span><span>;</span>\n        <span>Date</span> beginDate <span>=</span> date<span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n        <span>Date</span> endDate <span>=</span> date<span>.</span><span>plusDays</span><span>(</span><span>6</span><span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n        <span>return</span> <span>new</span> <span>Date</span><span>[</span><span>]</span><span>{</span>beginDate<span>,</span> endDate<span>}</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【秒】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>seconds</span> 秒数，负数为减\n     * <span>@return</span> 加/减几秒后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateSeconds</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> seconds<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusSeconds</span><span>(</span>seconds<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【分钟】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>minutes</span> 分钟数，负数为减\n     * <span>@return</span> 加/减几分钟后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateMinutes</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> minutes<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusMinutes</span><span>(</span>minutes<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【小时】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>hours</span> 小时数，负数为减\n     * <span>@return</span> 加/减几小时后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateHours</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> hours<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusHours</span><span>(</span>hours<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【天】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>days</span> 天数，负数为减\n     * <span>@return</span> 加/减几天后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateDays</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> days<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusDays</span><span>(</span>days<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【周】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>weeks</span> 周数，负数为减\n     * <span>@return</span> 加/减几周后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateWeeks</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> weeks<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusWeeks</span><span>(</span>weeks<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【月】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>months</span> 月数，负数为减\n     * <span>@return</span> 加/减几月后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateMonths</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> months<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusMonths</span><span>(</span>months<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 对日期的【年】进行加/减\n     *\n     * <span>@param</span> <span>date</span> 日期\n     * <span>@param</span> <span>years</span> 年数，负数为减\n     * <span>@return</span> 加/减几年后的日期\n     */</span>\n    <span>public</span> <span>static</span> <span>Date</span> <span>addDateYears</span><span>(</span><span>Date</span> date<span>,</span> <span>int</span> years<span>)</span> <span>{</span>\n        <span>DateTime</span> dateTime <span>=</span> <span>new</span> <span>DateTime</span><span>(</span>date<span>)</span><span>;</span>\n        <span>return</span> dateTime<span>.</span><span>plusYears</span><span>(</span>years<span>)</span><span>.</span><span>toDate</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>String</span> <span>secondToDate</span><span>(</span><span>Long</span> result<span>)</span> <span>{</span>\n        <span>Long</span> h <span>=</span>  result <span>/</span> <span>3600</span><span>;</span>\n        <span>Long</span> m <span>=</span> result <span>/</span> <span>60</span> <span>%</span> <span>60</span><span>;</span>\n        <span>Long</span> s <span>=</span> result <span>%</span> <span>60</span><span>;</span>\n        <span>String</span> dateString <span>=</span> h <span>+</span> <span>\":\"</span> <span>+</span> m <span>+</span> <span>\":\"</span> <span>+</span> s<span>;</span>\n        <span>return</span> dateString<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "Excel",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Excel/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Excel/",
      "content_html": "<div><pre><code><span>import</span> <span><span>org<span>.</span>apache<span>.</span>poi<span>.</span>hssf<span>.</span>usermodel<span>.</span></span><span>*</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>poi<span>.</span>ss<span>.</span>usermodel<span>.</span></span><span>CellType</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>poi<span>.</span>xssf<span>.</span>usermodel<span>.</span></span><span>XSSFCell</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>poi<span>.</span>xssf<span>.</span>usermodel<span>.</span></span><span>XSSFRow</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>poi<span>.</span>xssf<span>.</span>usermodel<span>.</span></span><span>XSSFSheet</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>poi<span>.</span>xssf<span>.</span>usermodel<span>.</span></span><span>XSSFWorkbook</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletResponse</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>IOException</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>InputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>OutputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>net<span>.</span></span><span>URLEncoder</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>DecimalFormat</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>SimpleDateFormat</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>ArrayList</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Date</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>List</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>ExcelUtil</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> <span>OFFICE_EXCEL_2003_POSTFIX</span> <span>=</span> <span>\"xls\"</span><span>;</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> <span>OFFICE_EXCEL_2010_POSTFIX</span> <span>=</span> <span>\"xlsx\"</span><span>;</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> <span>EMPTY</span> <span>=</span> <span>\"\"</span><span>;</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> <span>POINT</span> <span>=</span> <span>\".\"</span><span>;</span>\n    <span>public</span> <span>static</span> <span>SimpleDateFormat</span> sdf <span>=</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span><span>\"yyyy/MM/dd\"</span><span>)</span><span>;</span>\n\n    <span>/**\n     * 获得path的后缀名\n     *\n     * <span>@param</span> <span>path</span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getPostfix</span><span>(</span><span>String</span> path<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>path <span>==</span> <span>null</span> <span>||</span> <span>EMPTY</span><span>.</span><span>equals</span><span>(</span>path<span>.</span><span>trim</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>EMPTY</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span>path<span>.</span><span>contains</span><span>(</span><span>POINT</span><span>)</span><span>)</span> <span>{</span>\n            <span>return</span> path<span>.</span><span>substring</span><span>(</span>path<span>.</span><span>lastIndexOf</span><span>(</span><span>POINT</span><span>)</span> <span>+</span> <span>1</span><span>,</span> path<span>.</span><span>length</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>EMPTY</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 单元格格式\n     *\n     * <span>@param</span> <span>hssfCell</span>\n     * <span>@return</span>\n     */</span>\n    <span>@SuppressWarnings</span><span>(</span><span>{</span><span>\"static-access\"</span><span>,</span> <span>\"deprecation\"</span><span>}</span><span>)</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getHValue</span><span>(</span><span>HSSFCell</span> hssfCell<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>hssfCell<span>.</span><span>getCellType</span><span>(</span><span>)</span> <span>==</span> <span>CellType</span><span>.</span><span>BOOLEAN</span><span>)</span> <span>{</span>\n            <span>return</span> <span>String</span><span>.</span><span>valueOf</span><span>(</span>hssfCell<span>.</span><span>getBooleanCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>hssfCell<span>.</span><span>getCellType</span><span>(</span><span>)</span> <span>==</span> <span>CellType</span><span>.</span><span>NUMERIC</span><span>)</span> <span>{</span>\n            <span>String</span> cellValue <span>=</span> <span>\"\"</span><span>;</span>\n            <span>if</span> <span>(</span><span>HSSFDateUtil</span><span>.</span><span>isCellDateFormatted</span><span>(</span>hssfCell<span>)</span><span>)</span> <span>{</span>\n                <span>Date</span> date <span>=</span> <span>HSSFDateUtil</span><span>.</span><span>getJavaDate</span><span>(</span>hssfCell<span>.</span><span>getNumericCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                cellValue <span>=</span> sdf<span>.</span><span>format</span><span>(</span>date<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>DecimalFormat</span> df <span>=</span> <span>new</span> <span>DecimalFormat</span><span>(</span><span>\"#.##\"</span><span>)</span><span>;</span>\n                cellValue <span>=</span> df<span>.</span><span>format</span><span>(</span>hssfCell<span>.</span><span>getNumericCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                <span>String</span> strArr <span>=</span> cellValue<span>.</span><span>substring</span><span>(</span>cellValue<span>.</span><span>lastIndexOf</span><span>(</span><span>POINT</span><span>)</span> <span>+</span> <span>1</span><span>,</span> cellValue<span>.</span><span>length</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                <span>if</span> <span>(</span>strArr<span>.</span><span>equals</span><span>(</span><span>\"00\"</span><span>)</span><span>)</span> <span>{</span>\n                    cellValue <span>=</span> cellValue<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> cellValue<span>.</span><span>lastIndexOf</span><span>(</span><span>POINT</span><span>)</span><span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n            <span>return</span> cellValue<span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>return</span> <span>String</span><span>.</span><span>valueOf</span><span>(</span>hssfCell<span>.</span><span>getStringCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 单元格格式\n     *\n     * <span>@param</span> <span>xssfCell</span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getXValue</span><span>(</span><span>XSSFCell</span> xssfCell<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>xssfCell<span>.</span><span>getCellType</span><span>(</span><span>)</span> <span>==</span> <span>CellType</span><span>.</span><span>BOOLEAN</span><span>)</span> <span>{</span>\n            <span>return</span> <span>String</span><span>.</span><span>valueOf</span><span>(</span>xssfCell<span>.</span><span>getBooleanCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>xssfCell<span>.</span><span>getCellType</span><span>(</span><span>)</span> <span>==</span> <span>CellType</span><span>.</span><span>NUMERIC</span><span>)</span> <span>{</span>\n            <span>String</span> cellValue <span>=</span> <span>\"\"</span><span>;</span>\n            <span>if</span> <span>(</span><span>XSSFDateUtil</span><span>.</span><span>isCellDateFormatted</span><span>(</span>xssfCell<span>)</span><span>)</span> <span>{</span>\n                <span>Date</span> date <span>=</span> <span>XSSFDateUtil</span><span>.</span><span>getJavaDate</span><span>(</span>xssfCell<span>.</span><span>getNumericCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                cellValue <span>=</span> sdf<span>.</span><span>format</span><span>(</span>date<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>DecimalFormat</span> df <span>=</span> <span>new</span> <span>DecimalFormat</span><span>(</span><span>\"#.##\"</span><span>)</span><span>;</span>\n                cellValue <span>=</span> df<span>.</span><span>format</span><span>(</span>xssfCell<span>.</span><span>getNumericCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                <span>String</span> strArr <span>=</span> cellValue<span>.</span><span>substring</span><span>(</span>cellValue<span>.</span><span>lastIndexOf</span><span>(</span><span>POINT</span><span>)</span> <span>+</span> <span>1</span><span>,</span> cellValue<span>.</span><span>length</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                <span>if</span> <span>(</span>strArr<span>.</span><span>equals</span><span>(</span><span>\"00\"</span><span>)</span><span>)</span> <span>{</span>\n                    cellValue <span>=</span> cellValue<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> cellValue<span>.</span><span>lastIndexOf</span><span>(</span><span>POINT</span><span>)</span><span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n            <span>return</span> cellValue<span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>return</span> <span>String</span><span>.</span><span>valueOf</span><span>(</span>xssfCell<span>.</span><span>getStringCellValue</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>int</span> totalCells<span>;</span> <span>//每一行总单元格数</span>\n\n    <span>/**\n     * read the Excel .xlsx,.xls\n     *\n     * <span>@param</span> <span>fileName</span> jsp中的上传文件\n     * <span>@param</span> <span>input</span>\n     * <span>@return</span>\n     * <span>@throws</span> <span><span>IOException</span></span>\n     */</span>\n    <span>public</span> <span>List</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span> <span>readExcel</span><span>(</span><span>String</span> fileName<span>,</span> <span>InputStream</span> input<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>\n        <span>if</span> <span>(</span>input <span>==</span> <span>null</span> <span>||</span> <span>ExcelUtil</span><span>.</span><span>EMPTY</span><span>.</span><span>equals</span><span>(</span>fileName<span>.</span><span>trim</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>String</span> postfix <span>=</span> <span>ExcelUtil</span><span>.</span><span>getPostfix</span><span>(</span>fileName<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span><span>ExcelUtil</span><span>.</span><span>EMPTY</span><span>.</span><span>equals</span><span>(</span>postfix<span>)</span><span>)</span> <span>{</span>\n                <span>if</span> <span>(</span><span>ExcelUtil</span><span>.</span><span>OFFICE_EXCEL_2003_POSTFIX</span><span>.</span><span>equals</span><span>(</span>postfix<span>)</span><span>)</span> <span>{</span>\n                    <span>return</span> <span>readXls</span><span>(</span>input<span>)</span><span>;</span>\n                <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>ExcelUtil</span><span>.</span><span>OFFICE_EXCEL_2010_POSTFIX</span><span>.</span><span>equals</span><span>(</span>postfix<span>)</span><span>)</span> <span>{</span>\n                    <span>return</span> <span>readXlsx</span><span>(</span>input<span>)</span><span>;</span>\n                <span>}</span> <span>else</span> <span>{</span>\n                    <span>return</span> <span>null</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * read the Excel 2010 .xlsx\n     *\n     * <span>@param</span> <span>input</span>\n     * <span>@return</span>\n     * <span>@throws</span> <span><span>IOException</span></span>\n     */</span>\n    <span>@SuppressWarnings</span><span>(</span><span>\"deprecation\"</span><span>)</span>\n    <span>public</span> <span>List</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span> <span>readXlsx</span><span>(</span><span>InputStream</span> input<span>)</span> <span>{</span>\n        <span>List</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span> list <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        <span>// IO流读取文件</span>\n        <span>XSSFWorkbook</span> wb <span>=</span> <span>null</span><span>;</span>\n        <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span> rowList <span>=</span> <span>null</span><span>;</span>\n        <span>Integer</span> totalRows<span>;</span>\n        <span>try</span> <span>{</span>\n            <span>// 创建文档</span>\n            wb <span>=</span> <span>new</span> <span>XSSFWorkbook</span><span>(</span>input<span>)</span><span>;</span>\n            <span>//读取sheet(页)</span>\n            <span>for</span> <span>(</span><span>int</span> numSheet <span>=</span> <span>0</span><span>;</span> numSheet <span>&lt;</span> wb<span>.</span><span>getNumberOfSheets</span><span>(</span><span>)</span><span>;</span> numSheet<span>++</span><span>)</span> <span>{</span>\n                <span>XSSFSheet</span> xssfSheet <span>=</span> wb<span>.</span><span>getSheetAt</span><span>(</span>numSheet<span>)</span><span>;</span>\n                <span>if</span> <span>(</span>xssfSheet <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                    <span>continue</span><span>;</span>\n                <span>}</span>\n                totalRows <span>=</span> xssfSheet<span>.</span><span>getLastRowNum</span><span>(</span><span>)</span><span>;</span>\n                <span>//读取Row,从第二行开始</span>\n                <span>for</span> <span>(</span><span>int</span> rowNum <span>=</span> <span>1</span><span>;</span> rowNum <span>&lt;=</span> totalRows<span>;</span> rowNum<span>++</span><span>)</span> <span>{</span>\n                    <span>XSSFRow</span> xssfRow <span>=</span> xssfSheet<span>.</span><span>getRow</span><span>(</span>rowNum<span>)</span><span>;</span>\n                    <span>if</span> <span>(</span>xssfRow <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                        rowList <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n                        totalCells <span>=</span> xssfRow<span>.</span><span>getLastCellNum</span><span>(</span><span>)</span><span>;</span>\n                        <span>//读取列，从第一列开始</span>\n                        <span>for</span> <span>(</span><span>int</span> c <span>=</span> <span>0</span><span>;</span> c <span>&lt;=</span> totalCells <span>+</span> <span>1</span><span>;</span> c<span>++</span><span>)</span> <span>{</span>\n                            <span>XSSFCell</span> cell <span>=</span> xssfRow<span>.</span><span>getCell</span><span>(</span>c<span>)</span><span>;</span>\n                            <span>if</span> <span>(</span>cell <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                                rowList<span>.</span><span>add</span><span>(</span><span>ExcelUtil</span><span>.</span><span>EMPTY</span><span>)</span><span>;</span>\n                                <span>continue</span><span>;</span>\n                            <span>}</span>\n                            rowList<span>.</span><span>add</span><span>(</span><span>ExcelUtil</span><span>.</span><span>getXValue</span><span>(</span>cell<span>)</span><span>.</span><span>trim</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                        <span>}</span>\n                        list<span>.</span><span>add</span><span>(</span>rowList<span>)</span><span>;</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n            <span>return</span> list<span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>finally</span> <span>{</span>\n            <span>try</span> <span>{</span>\n                input<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * read the Excel 2003-2007 .xls\n     *\n     * <span>@param</span> <span>input</span>\n     * <span>@return</span>\n     * <span>@throws</span> <span><span>IOException</span></span>\n     */</span>\n    <span>public</span> <span>List</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span> <span>readXls</span><span>(</span><span>InputStream</span> input<span>)</span> <span>{</span>\n        <span>List</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span> list <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>ArrayList</span><span>&lt;</span><span>String</span><span>></span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        <span>// IO流读取文件</span>\n        <span>HSSFWorkbook</span> wb <span>=</span> <span>null</span><span>;</span>\n        <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span> rowList <span>=</span> <span>null</span><span>;</span>\n        <span>Integer</span> totalRows<span>;</span>\n        <span>try</span> <span>{</span>\n            <span>// 创建文档</span>\n            wb <span>=</span> <span>new</span> <span>HSSFWorkbook</span><span>(</span>input<span>)</span><span>;</span>\n            <span>//读取sheet(页)</span>\n            <span>for</span> <span>(</span><span>int</span> numSheet <span>=</span> <span>0</span><span>;</span> numSheet <span>&lt;</span> wb<span>.</span><span>getNumberOfSheets</span><span>(</span><span>)</span><span>;</span> numSheet<span>++</span><span>)</span> <span>{</span>\n                <span>HSSFSheet</span> hssfSheet <span>=</span> wb<span>.</span><span>getSheetAt</span><span>(</span>numSheet<span>)</span><span>;</span>\n                <span>if</span> <span>(</span>hssfSheet <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                    <span>continue</span><span>;</span>\n                <span>}</span>\n                totalRows <span>=</span> hssfSheet<span>.</span><span>getLastRowNum</span><span>(</span><span>)</span><span>;</span>\n                <span>//读取Row,从第二行开始</span>\n                <span>for</span> <span>(</span><span>int</span> rowNum <span>=</span> <span>1</span><span>;</span> rowNum <span>&lt;=</span> totalRows<span>;</span> rowNum<span>++</span><span>)</span> <span>{</span>\n                    <span>HSSFRow</span> hssfRow <span>=</span> hssfSheet<span>.</span><span>getRow</span><span>(</span>rowNum<span>)</span><span>;</span>\n                    <span>if</span> <span>(</span>hssfRow <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                        rowList <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n                        totalCells <span>=</span> hssfRow<span>.</span><span>getLastCellNum</span><span>(</span><span>)</span><span>;</span>\n                        <span>//读取列，从第一列开始</span>\n                        <span>for</span> <span>(</span><span>short</span> c <span>=</span> <span>0</span><span>;</span> c <span>&lt;=</span> totalCells <span>+</span> <span>1</span><span>;</span> c<span>++</span><span>)</span> <span>{</span>\n                            <span>HSSFCell</span> cell <span>=</span> hssfRow<span>.</span><span>getCell</span><span>(</span>c<span>)</span><span>;</span>\n                            <span>if</span> <span>(</span>cell <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                                rowList<span>.</span><span>add</span><span>(</span><span>ExcelUtil</span><span>.</span><span>EMPTY</span><span>)</span><span>;</span>\n                                <span>continue</span><span>;</span>\n                            <span>}</span>\n                            rowList<span>.</span><span>add</span><span>(</span><span>ExcelUtil</span><span>.</span><span>getHValue</span><span>(</span>cell<span>)</span><span>.</span><span>trim</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                        <span>}</span>\n                        list<span>.</span><span>add</span><span>(</span>rowList<span>)</span><span>;</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n            <span>return</span> list<span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>finally</span> <span>{</span>\n            <span>try</span> <span>{</span>\n                input<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>exportExcel</span><span>(</span><span>HSSFWorkbook</span> wb<span>,</span> <span>HttpServletResponse</span> response<span>)</span> <span>{</span>\n        <span>// 第六步，下载excel</span>\n        <span>OutputStream</span> out <span>=</span> <span>null</span><span>;</span>\n        <span>try</span> <span>{</span>\n            out <span>=</span> response<span>.</span><span>getOutputStream</span><span>(</span><span>)</span><span>;</span>\n            <span>String</span> fileName <span>=</span> <span>\"enroll.xls\"</span><span>;</span><span>// 文件名</span>\n            response<span>.</span><span>setContentType</span><span>(</span><span>\"application/x-msdownload\"</span><span>)</span><span>;</span>\n            response<span>.</span><span>setHeader</span><span>(</span><span>\"Content-Disposition\"</span><span>,</span> <span>\"attachment; filename=\"</span>\n                    <span>+</span> <span>URLEncoder</span><span>.</span><span>encode</span><span>(</span>fileName<span>,</span> <span>\"UTF-8\"</span><span>)</span><span>)</span><span>;</span>\n            wb<span>.</span><span>write</span><span>(</span>out<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>finally</span> <span>{</span>\n            <span>try</span> <span>{</span>\n                out<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n                wb<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "文件上传下载",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/File/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/File/",
      "content_html": "<div><pre><code><span>public</span> <span>class</span> <span>ResultEntity</span> <span>{</span>\n    <span>private</span> <span>boolean</span> suceesss<span>;</span>\n    <span>private</span> <span>String</span> code<span>;</span>\n    <span>private</span> <span>String</span> msg<span>;</span>\n    <span>public</span> <span>ResultEntity</span><span>(</span><span>boolean</span> suceesss<span>,</span> <span>String</span> code<span>,</span> <span>String</span> msg<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>suceesss <span>=</span> suceesss<span>;</span>\n        <span>this</span><span>.</span>code <span>=</span> code<span>;</span>\n        <span>this</span><span>.</span>msg <span>=</span> msg<span>;</span>\n    <span>}</span>\n    <span>public</span> <span>boolean</span> <span>isSuceesss</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> suceesss<span>;</span>\n    <span>}</span>\n    <span>public</span> <span>void</span> <span>setSuceesss</span><span>(</span><span>boolean</span> suceesss<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>suceesss <span>=</span> suceesss<span>;</span>\n    <span>}</span>\n    <span>public</span> <span>String</span> <span>getCode</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> code<span>;</span>\n    <span>}</span>\n    <span>public</span> <span>void</span> <span>setCode</span><span>(</span><span>String</span> code<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>code <span>=</span> code<span>;</span>\n    <span>}</span>\n    <span>public</span> <span>String</span> <span>getMsg</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> msg<span>;</span>\n    <span>}</span>\n    <span>public</span> <span>void</span> <span>setMsg</span><span>(</span><span>String</span> msg<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> msg<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>import</span> <span><span>org<span>.</span>springframework<span>.</span>core<span>.</span>io<span>.</span></span><span>ClassPathResource</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>springframework<span>.</span>web<span>.</span>multipart<span>.</span></span><span>MultipartHttpServletRequest</span></span><span>;</span>\n\n<span>import</span> <span><span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>Cookie</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletRequest</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletResponse</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>*</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>FileUtils</span> <span>{</span>\n    <span>// 默认400像素宽度</span>\n    <span>final</span> <span>static</span> <span>double</span> <span>THUMBNAIL_WIDTH</span> <span>=</span> <span>400</span><span>;</span>\n\n    <span>public</span> <span>static</span> <span>String</span> <span>getRunPath</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>System</span><span>.</span><span>getProperty</span><span>(</span><span>\"user.dir\"</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 写文件\n     *\n     * <span>@param</span> <span>text</span>     文本\n     * <span>@param</span> <span>fileName</span> 文件流\n     */</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>writeFile</span><span>(</span><span>String</span> text<span>,</span> <span>String</span> fileName<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>File</span> file <span>=</span> <span>new</span> <span>File</span><span>(</span>fileName<span>)</span><span>;</span>\n            <span>//if file doesnt exists, then create it</span>\n            <span>if</span> <span>(</span><span>!</span>file<span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                file<span>.</span><span>createNewFile</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>//true = append file</span>\n            <span>FileWriter</span> fileWritter <span>=</span> <span>new</span> <span>FileWriter</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>,</span> <span>true</span><span>)</span><span>;</span>\n            fileWritter<span>.</span><span>write</span><span>(</span>text<span>)</span><span>;</span>\n            fileWritter<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Done\"</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 导出资源文件\n     *\n     * <span>@param</span> <span>resFullName</span> 资源文件\n     * <span>@param</span> <span>saveName</span>    保存名字\n     * <span>@param</span> <span>isDownload</span>  是否下载\n     * <span>@param</span> <span>response</span>    响应\n     */</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>exportRes</span><span>(</span><span>String</span> resFullName<span>,</span> <span>String</span> saveName<span>,</span> <span>Boolean</span> isDownload<span>,</span> <span>HttpServletResponse</span> response<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>ClassPathResource</span> resource <span>=</span> <span>new</span> <span>ClassPathResource</span><span>(</span>resFullName<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>resource<span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>throw</span> <span>new</span> <span>IOException</span><span>(</span><span>\"文件不存在\"</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>// 以流的形式下载文件。</span>\n            <span>InputStream</span> fis <span>=</span> resource<span>.</span><span>getInputStream</span><span>(</span><span>)</span><span>;</span>\n            <span>export</span><span>(</span>fis<span>,</span> saveName<span>,</span> isDownload<span>,</span> response<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> ex<span>)</span> <span>{</span>\n            ex<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 导出文件\n     *\n     * <span>@param</span> <span>fileFullName</span> 文件完整名称\n     * <span>@param</span> <span>isDownload</span>   是否下载，否则在线打开\n     * <span>@param</span> <span>response</span>     网络响应\n     */</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>export</span><span>(</span><span>String</span> fileFullName<span>,</span> <span>Boolean</span> isDownload<span>,</span> <span>HttpServletResponse</span> response<span>)</span> <span>{</span>\n        <span>export</span><span>(</span>fileFullName<span>,</span> <span>null</span><span>,</span> isDownload<span>,</span> response<span>)</span><span>;</span>\n    <span>}</span>\n\n\n    <span>/**\n     * 导出文件\n     *\n     * <span>@param</span> <span>fileFullName</span> 文件完整名称\n     * <span>@param</span> <span>saveName</span>     保存名称\n     * <span>@param</span> <span>isDownload</span>   是否下载，否则在线打开\n     * <span>@param</span> <span>response</span>     网络响应\n     */</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>export</span><span>(</span><span>String</span> fileFullName<span>,</span> <span>String</span> saveName<span>,</span> <span>Boolean</span> isDownload<span>,</span> <span>HttpServletResponse</span> response<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>File</span> file <span>=</span> <span>new</span> <span>File</span><span>(</span>fileFullName<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>file<span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>throw</span> <span>new</span> <span>IOException</span><span>(</span><span>\"文件不存在\"</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>// 如果保存名称为空，则取文件名</span>\n            <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>saveName<span>)</span><span>)</span> <span>{</span>\n                saveName <span>=</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>// 以流的形式下载文件。</span>\n            <span>InputStream</span> fis <span>=</span> <span>new</span> <span>BufferedInputStream</span><span>(</span><span>new</span> <span>FileInputStream</span><span>(</span>file<span>)</span><span>)</span><span>;</span>\n            <span>export</span><span>(</span>fis<span>,</span> saveName<span>,</span> isDownload<span>,</span> response<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> ex<span>)</span> <span>{</span>\n            ex<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 导出文件\n     *\n     * <span>@param</span> <span>fs</span>         文件流\n     * <span>@param</span> <span>saveName</span>   下载保存名字\n     * <span>@param</span> <span>isDownload</span> 是否下载\n     * <span>@param</span> <span>response</span>   响应\n     */</span>\n    <span>static</span> <span>void</span> <span>export</span><span>(</span><span>InputStream</span> fs<span>,</span> <span>String</span> saveName<span>,</span> <span>Boolean</span> isDownload<span>,</span> <span>HttpServletResponse</span> response<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>\n        saveName <span>=</span> <span>new</span> <span>String</span><span>(</span>saveName<span>.</span><span>getBytes</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>,</span> <span>\"ISO-8859-1\"</span><span>)</span><span>;</span>\n        <span>// 清空response</span>\n        response<span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>\n        <span>// 设置response的Header</span>\n        response<span>.</span><span>setCharacterEncoding</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>isDownload<span>)</span> <span>{</span>\n            response<span>.</span><span>addHeader</span><span>(</span><span>\"Content-Disposition\"</span><span>,</span> <span>\"attachment;filename=\"</span> <span>+</span> saveName<span>)</span><span>;</span>\n<span>//            response.setContentType(\"application/octet-stream\");</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            response<span>.</span><span>addHeader</span><span>(</span><span>\"Content-Disposition\"</span><span>,</span> <span>\"inline;filename=\"</span> <span>+</span> saveName<span>)</span><span>;</span>\n        <span>}</span>\n        <span>String</span> suffix <span>=</span> saveName<span>.</span><span>substring</span><span>(</span>saveName<span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n        response<span>.</span><span>setContentType</span><span>(</span><span>MimeUtils</span><span>.</span><span>getMineFormExt</span><span>(</span>suffix<span>)</span><span>)</span><span>;</span>\n        <span>// 循环取出流中的数据</span>\n        <span>byte</span><span>[</span><span>]</span> b <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>100</span><span>]</span><span>;</span>\n        <span>int</span> len<span>;</span>\n        <span>while</span> <span>(</span><span>(</span>len <span>=</span> fs<span>.</span><span>read</span><span>(</span>b<span>)</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>\n            response<span>.</span><span>getOutputStream</span><span>(</span><span>)</span><span>.</span><span>write</span><span>(</span>b<span>,</span> <span>0</span><span>,</span> len<span>)</span><span>;</span>\n        <span>}</span>\n        fs<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 上传文件\n     *\n     * <span>@param</span> <span>req</span>       请求\n     * <span>@param</span> <span>multiReq</span>  多段请求\n     * <span>@param</span> <span>basePath</span>  基本路径\n     * <span>@param</span> <span>childPath</span> 子路径\n     * <span>@param</span> <span>filterExt</span> 过滤文件扩展名\n     * <span>@param</span> <span>isImage</span>   是否图像\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>ResultEntity</span> <span>uploadFile</span><span>(</span><span>HttpServletRequest</span> req<span>,</span>\n                                          <span>MultipartHttpServletRequest</span> multiReq<span>,</span> <span>String</span> basePath<span>,</span> <span>String</span> childPath<span>,</span> <span>String</span> filterExt<span>,</span> <span>boolean</span> isImage<span>,</span> <span>boolean</span> thumbnail<span>,</span> <span>boolean</span> watermark<span>)</span> <span>{</span>\n        <span>// 获取上传文件的路径</span>\n        <span>String</span> uploadFileName <span>=</span> multiReq<span>.</span><span>getFile</span><span>(</span><span>\"file\"</span><span>)</span><span>.</span><span>getOriginalFilename</span><span>(</span><span>)</span><span>;</span>\n        <span>FileOutputStream</span> fos <span>=</span> <span>null</span><span>;</span>\n        <span>FileInputStream</span> fis <span>=</span> <span>null</span><span>;</span>\n        <span>String</span> fileUrl <span>=</span> <span>\"\"</span><span>;</span>\n        <span>ResultEntity</span> res <span>=</span> <span>null</span><span>;</span>\n        <span>try</span> <span>{</span>\n            fis <span>=</span> <span>(</span><span>FileInputStream</span><span>)</span> multiReq<span>.</span><span>getFile</span><span>(</span><span>\"file\"</span><span>)</span><span>.</span><span>getInputStream</span><span>(</span><span>)</span><span>;</span>\n            <span>String</span> ext <span>=</span> uploadFileName<span>.</span><span>substring</span><span>(</span>uploadFileName<span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>filterExt<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>indexOf</span><span>(</span>ext<span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n                res <span>=</span> <span>new</span> <span>ResultEntity</span><span>(</span><span>false</span><span>,</span> <span>\"0\"</span><span>,</span> <span>\"不支持的文件格式\"</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>// 按日期生成文件名</span>\n                <span>String</span> newFileName <span>=</span> <span>Long</span><span>.</span><span>toString</span><span>(</span><span>System</span><span>.</span><span>currentTimeMillis</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                fileUrl <span>=</span> childPath <span>+</span> newFileName <span>+</span> ext<span>;</span>\n                <span>String</span> saveFullFileName <span>=</span> basePath <span>+</span> fileUrl<span>;</span>\n                <span>File</span> dest <span>=</span> <span>new</span> <span>File</span><span>(</span>saveFullFileName<span>)</span><span>;</span>\n                <span>if</span> <span>(</span><span>!</span>dest<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span> <span>//判断文件父目录是否存在</span>\n                    dest<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>mkdirs</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span>\n                <span>// 判断是否图像，是就创建水印</span>\n                <span>if</span> <span>(</span>isImage<span>)</span> <span>{</span>\n                    <span>ImgUtils</span> imgUtils <span>=</span> <span>new</span> <span>ImgUtils</span><span>(</span><span>)</span><span>;</span>\n                    <span>String</span> err<span>;</span>\n                    <span>if</span> <span>(</span>thumbnail<span>)</span> <span>{</span>\n                        <span>// 默认400宽度</span>\n                        err <span>=</span> imgUtils<span>.</span><span>createThumbnailAndWatermark</span><span>(</span>fis<span>,</span> <span>THUMBNAIL_WIDTH</span><span>,</span> <span>false</span><span>,</span> watermark<span>,</span> saveFullFileName<span>)</span><span>;</span>\n                    <span>}</span> <span>else</span> <span>{</span>\n                        err <span>=</span> imgUtils<span>.</span><span>createThumbnailAndWatermark</span><span>(</span>fis<span>,</span> <span>1</span><span>,</span> <span>true</span><span>,</span> watermark<span>,</span> saveFullFileName<span>)</span><span>;</span>\n                    <span>}</span>\n                    <span>if</span> <span>(</span><span>!</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>err<span>)</span><span>)</span> <span>{</span>\n                        res <span>=</span> <span>new</span> <span>ResultEntity</span><span>(</span><span>false</span><span>,</span> <span>\"0\"</span><span>,</span> err<span>)</span><span>;</span>\n                    <span>}</span> <span>else</span> <span>{</span>\n                        res <span>=</span> <span>new</span> <span>ResultEntity</span><span>(</span><span>true</span><span>,</span> <span>\"1\"</span><span>,</span> fileUrl<span>)</span><span>;</span>\n                    <span>}</span>\n                <span>}</span> <span>else</span> <span>{</span>\n                    fos <span>=</span> <span>new</span> <span>FileOutputStream</span><span>(</span>dest<span>)</span><span>;</span>\n                    <span>byte</span><span>[</span><span>]</span> temp <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>1024</span><span>]</span><span>;</span>\n                    <span>int</span> i <span>=</span> fis<span>.</span><span>read</span><span>(</span>temp<span>)</span><span>;</span>\n                    <span>while</span> <span>(</span>i <span>!=</span> <span>-</span><span>1</span><span>)</span> <span>{</span>\n                        fos<span>.</span><span>write</span><span>(</span>temp<span>,</span> <span>0</span><span>,</span> temp<span>.</span>length<span>)</span><span>;</span>\n                        fos<span>.</span><span>flush</span><span>(</span><span>)</span><span>;</span>\n                        i <span>=</span> fis<span>.</span><span>read</span><span>(</span>temp<span>)</span><span>;</span>\n                    <span>}</span>\n                    res <span>=</span> <span>new</span> <span>ResultEntity</span><span>(</span><span>true</span><span>,</span> <span>\"1\"</span><span>,</span> fileUrl<span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            res <span>=</span> <span>new</span> <span>ResultEntity</span><span>(</span><span>false</span><span>,</span> <span>\"0\"</span><span>,</span> e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span> <span>finally</span> <span>{</span>\n            <span>if</span> <span>(</span>fis <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                <span>try</span> <span>{</span>\n                    fis<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n                    e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n            <span>if</span> <span>(</span>fos <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                <span>try</span> <span>{</span>\n                    fos<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n                    e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n            <span>return</span> res<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "图片处理",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/HandleImage/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/HandleImage/",
      "content_html": "<div><pre><code><span>import</span> <span><span>java<span>.</span>awt<span>.</span></span><span>Color</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>awt<span>.</span></span><span>Font</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>awt<span>.</span></span><span>FontMetrics</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>awt<span>.</span></span><span>Graphics</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>awt<span>.</span>image<span>.</span></span><span>BufferedImage</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>File</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>IOException</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>InputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Random</span></span><span>;</span>\n\n<span>import</span> <span><span>javax<span>.</span>imageio<span>.</span></span><span>ImageIO</span></span><span>;</span>\n\n<span>/**\n * 图像处理: 1、水印文字 2、水印图标 3、缩略图 4、裁剪图像\n *\n */</span>\n<span>public</span> <span>class</span> <span>ImgUtils</span> <span>{</span>\n    <span>private</span> <span>File</span> file<span>;</span> <span>// 原文件或目录</span>\n    <span>private</span> <span>String</span> text <span>=</span> <span>\"测试水印\"</span><span>;</span> <span>// 水印文字</span>\n    <span>private</span> <span>Color</span> color <span>=</span> <span>new</span> <span>Color</span><span>(</span><span>255</span><span>,</span> <span>255</span><span>,</span> <span>255</span><span>)</span><span>;</span> <span>// 水印字体颜色及透明度</span>\n    <span>private</span> <span>Font</span> font <span>=</span> <span>new</span> <span>Font</span><span>(</span><span>\"simhei\"</span><span>,</span> <span>Font</span><span>.</span><span>PLAIN</span><span>,</span> <span>14</span><span>)</span><span>;</span> <span>// 水印字体</span>\n    <span>private</span> <span>String</span> dir<span>;</span> <span>// 水印图片存放目录</span>\n    <span>private</span> <span>int</span> position <span>=</span> <span>8</span><span>;</span><span>// 水印位置</span>\n\n    <span>/**\n     * <span>@param</span> <span>file</span> 原图\n     * <span>@param</span> <span>dir</span> 存放目录\n     */</span>\n    <span>public</span> <span>ImgUtils</span><span>(</span><span>File</span> file<span>,</span> <span>String</span> dir<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>file <span>=</span> file<span>;</span>\n        <span>this</span><span>.</span>dir <span>=</span> dir<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>ImgUtils</span><span>(</span><span>)</span> <span>{</span>\n\n    <span>}</span>\n\n    <span>/**\n     * <span>@return</span> 获取文字\n     */</span>\n    <span>public</span> <span>String</span> <span>getText</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> text<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@param</span> <span>text</span> 水印文字设置\n     */</span>\n    <span>public</span> <span>void</span> <span>setText</span><span>(</span><span>String</span> text<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>text <span>=</span> text<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@return</span> 获取颜色\n     */</span>\n    <span>public</span> <span>Color</span> <span>getColor</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> color<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@param</span> <span>color</span> 设置水印字体颜色及透明度\n     */</span>\n    <span>public</span> <span>void</span> <span>setColor</span><span>(</span><span>Color</span> color<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>color <span>=</span> color<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@return</span> 获取字体\n     */</span>\n    <span>public</span> <span>Font</span> <span>getFont</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> font<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@param</span> <span>font</span> 水印字体设置\n     */</span>\n    <span>public</span> <span>void</span> <span>setFont</span><span>(</span><span>Font</span> font<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>font <span>=</span> font<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@return</span> 获取存放目录\n     */</span>\n    <span>public</span> <span>String</span> <span>getDir</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> dir<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@param</span> <span>dir</span> 设置水印图片存放目录\n     */</span>\n    <span>public</span> <span>void</span> <span>setDir</span><span>(</span><span>String</span> dir<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>dir <span>=</span> dir<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@return</span> 获取位置\n     */</span>\n    <span>public</span> <span>int</span> <span>getPosition</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> position<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * <span>@param</span> <span>position</span> 设置水印位置\n     */</span>\n    <span>public</span> <span>void</span> <span>setPosition</span><span>(</span><span>int</span> position<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>position <span>=</span> position<span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>String</span> <span>checkFile</span><span>(</span><span>)</span> <span>{</span>\n        <span>String</span> msg <span>=</span> <span>null</span><span>;</span>\n        <span>if</span> <span>(</span>file <span>==</span> <span>null</span> <span>||</span> <span>!</span>file<span>.</span><span>canRead</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n            msg <span>=</span> <span>\"文件不存在\"</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>\".jpg;.jpeg;.png;.bmp\"</span><span>.</span><span>indexOf</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n            msg <span>=</span> <span>\"图片文件格式只支持：jpg、png、bmp\"</span><span>;</span>\n        <span>}</span>\n        <span>return</span> msg<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     *\n     * <span>@param</span> <span>stream</span> 数据流\n     * <span>@param</span> <span>size</span> 大小\n     * <span>@param</span> <span>isRateSize</span> 比例还是实际宽度\n     * <span>@param</span> <span>createWatermark</span> 是否创建水印\n     * <span>@param</span> <span>saveFileName</span> 保存文件名\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>String</span> <span>createThumbnailAndWatermark</span><span>(</span><span>InputStream</span> stream<span>,</span> <span>double</span> size<span>,</span> <span>boolean</span> isRateSize<span>,</span> <span>boolean</span> createWatermark<span>,</span> <span>String</span> saveFileName<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>BufferedImage</span> bf <span>=</span> <span>ImageIO</span><span>.</span><span>read</span><span>(</span>stream<span>)</span><span>;</span>\n            <span>int</span> iw <span>=</span> bf<span>.</span><span>getWidth</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> ih <span>=</span> bf<span>.</span><span>getHeight</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> w<span>,</span>h<span>;</span>\n            <span>// 如果是比例大小，按比例缩放</span>\n            <span>if</span> <span>(</span>isRateSize<span>)</span> <span>{</span>\n                w <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span>iw <span>*</span> size<span>)</span><span>;</span>\n                h <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span>ih <span>*</span> size<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                w <span>=</span> <span>(</span><span>int</span><span>)</span> size<span>;</span>\n                h <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span><span>double</span><span>)</span> size <span>/</span> iw <span>*</span> ih<span>)</span><span>;</span>\n            <span>}</span>\n            <span>BufferedImage</span> di <span>=</span> <span>new</span> <span>BufferedImage</span><span>(</span>w<span>,</span> h<span>,</span> <span>BufferedImage</span><span>.</span><span>TYPE_INT_RGB</span><span>)</span><span>;</span>\n            <span>Graphics</span> g <span>=</span> di<span>.</span><span>getGraphics</span><span>(</span><span>)</span><span>;</span>\n            g<span>.</span><span>drawImage</span><span>(</span>bf<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> w<span>,</span> h<span>,</span> <span>null</span><span>)</span><span>;</span>\n            <span>if</span><span>(</span>createWatermark<span>)</span> <span>{</span>\n                <span>this</span><span>.</span><span>drawString</span><span>(</span>bf<span>,</span> g<span>,</span> position<span>,</span> w<span>,</span> h<span>)</span><span>;</span>\n            <span>}</span>\n            g<span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>\n            <span>File</span> dir <span>=</span> <span>new</span> <span>File</span><span>(</span>saveFileName<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>dir<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>\"指定存放目录不存在！！\"</span><span>;</span>\n            <span>}</span>\n            <span>ImageIO</span><span>.</span><span>write</span><span>(</span>di<span>,</span> <span>\"jpg\"</span><span>,</span> dir<span>)</span><span>;</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>return</span> e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>private</span> <span>void</span> <span>drawString</span><span>(</span><span>BufferedImage</span> bf<span>,</span> <span>Graphics</span> g<span>,</span> <span>int</span> position<span>,</span> <span>int</span> width<span>,</span> <span>int</span> height<span>)</span><span>{</span>\n        g<span>.</span><span>setFont</span><span>(</span>font<span>)</span><span>;</span> <span>// 设置字体</span>\n        g<span>.</span><span>setColor</span><span>(</span>color<span>)</span><span>;</span> <span>// 设置颜色</span>\n        <span>FontMetrics</span> f <span>=</span> g<span>.</span><span>getFontMetrics</span><span>(</span><span>)</span><span>;</span> <span>// 创建字体规格</span>\n        <span>int</span> fw <span>=</span> f<span>.</span><span>stringWidth</span><span>(</span>text<span>)</span><span>;</span> <span>// 获取字体宽度</span>\n        <span>int</span> fh <span>=</span> f<span>.</span><span>getHeight</span><span>(</span><span>)</span><span>;</span> <span>// 获取字体高度</span>\n        <span>int</span> x <span>=</span> <span>0</span><span>,</span> y <span>=</span> <span>0</span><span>,</span> offset <span>=</span> <span>14</span><span>;</span>\n        <span>Random</span> r <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n        <span>switch</span> <span>(</span>position<span>)</span> <span>{</span>\n            <span>case</span> <span>1</span><span>:</span> <span>// 左上</span>\n                x <span>=</span> offset<span>;</span>\n                y <span>=</span> offset <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>2</span><span>:</span> <span>// 中上</span>\n                x <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span>width <span>-</span> fw<span>)</span> <span>/</span> <span>2f</span><span>)</span><span>;</span>\n                y <span>=</span> offset <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>3</span><span>:</span> <span>// 右上</span>\n                x <span>=</span> width <span>-</span> fw <span>-</span> offset<span>;</span>\n                y <span>=</span> offset <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>4</span><span>:</span> <span>// 左中</span>\n                x <span>=</span> offset<span>;</span>\n                y <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span>height <span>-</span> fh<span>)</span> <span>/</span> <span>2f</span><span>)</span> <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>5</span><span>:</span> <span>// 中心</span>\n                x <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span>width <span>-</span> fw<span>)</span> <span>/</span> <span>2f</span><span>)</span><span>;</span>\n                y <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span>height <span>-</span> fh<span>)</span> <span>/</span> <span>2f</span><span>)</span> <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>6</span><span>:</span> <span>// 右中</span>\n                x <span>=</span> width <span>-</span> fw <span>-</span> offset<span>;</span>\n                y <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span>height <span>-</span> fh<span>)</span> <span>/</span> <span>2f</span><span>)</span> <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>7</span><span>:</span> <span>// 左下</span>\n                x <span>=</span> offset<span>;</span>\n                y <span>=</span> height <span>-</span> fh <span>-</span> offset <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>8</span><span>:</span> <span>// 中下</span>\n                x <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span>width <span>-</span> fw<span>)</span> <span>/</span> <span>2f</span><span>)</span><span>;</span>\n                y <span>=</span> height <span>-</span> fh <span>-</span> offset <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>9</span><span>:</span> <span>// 右下</span>\n                x <span>=</span> width <span>-</span> fw <span>-</span> offset<span>;</span>\n                y <span>=</span> height <span>-</span> fh <span>-</span> offset <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>default</span><span>:</span> <span>// 随机</span>\n                x <span>=</span> r<span>.</span><span>nextInt</span><span>(</span>width <span>-</span> fw <span>-</span> offset<span>)</span> <span>+</span> offset<span>;</span>\n                y <span>=</span> r<span>.</span><span>nextInt</span><span>(</span>height <span>-</span> fh <span>-</span> offset<span>)</span> <span>+</span> font<span>.</span><span>getSize</span><span>(</span><span>)</span><span>;</span>\n                <span>break</span><span>;</span>\n        <span>}</span>\n        g<span>.</span><span>drawString</span><span>(</span>text<span>,</span> x<span>,</span> y<span>)</span><span>;</span><span>// 写入文字</span>\n    <span>}</span>\n\n    <span>/**\n     * 添加水印文字\n     */</span>\n    <span>public</span> <span>String</span> <span>addWatermark</span><span>(</span><span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>String</span> msg <span>=</span> <span>checkFile</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>msg <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                <span>return</span> msg<span>;</span>\n            <span>}</span>\n            <span>BufferedImage</span> bf <span>=</span> <span>ImageIO</span><span>.</span><span>read</span><span>(</span>file<span>)</span><span>;</span> <span>// 读取文件</span>\n            <span>Graphics</span> g <span>=</span> bf<span>.</span><span>getGraphics</span><span>(</span><span>)</span><span>;</span><span>// 创建画笔</span>\n            <span>// 书写</span>\n            <span>this</span><span>.</span><span>drawString</span><span>(</span>bf<span>,</span> g<span>,</span> position<span>,</span> bf<span>.</span><span>getWidth</span><span>(</span><span>)</span><span>,</span> bf<span>.</span><span>getHeight</span><span>(</span><span>)</span><span>)</span><span>;</span>\n            g<span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span><span>// 关闭画笔</span>\n            <span>String</span> ext <span>=</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n            <span>File</span> dir <span>=</span> <span>new</span> <span>File</span><span>(</span><span>this</span><span>.</span>dir <span>+</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span><span>)</span> <span>+</span> <span>\"_text.\"</span> <span>+</span> ext<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>dir<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>\"指定存放目录不存在！！\"</span><span>;</span>\n            <span>}</span>\n            <span>ImageIO</span><span>.</span><span>write</span><span>(</span>bf<span>,</span> <span>\"jpg\"</span><span>,</span> dir<span>)</span><span>;</span><span>// 写入图片</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据百分比生成缩略图\n     *\n     * <span>@param</span> <span>thum</span> 指定缩略图的百分比\n     */</span>\n    <span>public</span> <span>String</span> <span>createImgThumbnail</span><span>(</span><span>double</span> thum<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>String</span> msg <span>=</span> <span>checkFile</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>msg <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                <span>return</span> msg<span>;</span>\n            <span>}</span>\n            <span>BufferedImage</span> i <span>=</span> <span>ImageIO</span><span>.</span><span>read</span><span>(</span>file<span>)</span><span>;</span>\n            <span>int</span> iw <span>=</span> i<span>.</span><span>getWidth</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> ih <span>=</span> i<span>.</span><span>getHeight</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> w <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span>iw <span>*</span> thum<span>)</span><span>;</span>\n            <span>int</span> h <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span>ih <span>*</span> thum<span>)</span><span>;</span>\n            <span>BufferedImage</span> di <span>=</span> <span>new</span> <span>BufferedImage</span><span>(</span>w<span>,</span> h<span>,</span> <span>BufferedImage</span><span>.</span><span>TYPE_INT_RGB</span><span>)</span><span>;</span>\n            <span>Graphics</span> g <span>=</span> di<span>.</span><span>getGraphics</span><span>(</span><span>)</span><span>;</span>\n            g<span>.</span><span>drawImage</span><span>(</span>i<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> w<span>,</span> h<span>,</span> <span>null</span><span>)</span><span>;</span>\n            g<span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>\n            <span>String</span> ext <span>=</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n            <span>File</span> dir <span>=</span> <span>new</span> <span>File</span><span>(</span><span>this</span><span>.</span>dir <span>+</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span><span>)</span> <span>+</span> <span>\"_p_thum.\"</span> <span>+</span> ext<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>dir<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>\"指定存放目录不存在！！\"</span><span>;</span>\n            <span>}</span>\n            <span>ImageIO</span><span>.</span><span>write</span><span>(</span>di<span>,</span> <span>\"jpg\"</span><span>,</span> dir<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据宽生成缩略图\n     *\n     * <span>@param</span> <span>thum</span> 指定缩略图的宽\n     */</span>\n    <span>public</span> <span>String</span> <span>createThumbnail</span><span>(</span><span>int</span> thum<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>String</span> msg <span>=</span> <span>checkFile</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>msg <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                <span>return</span> msg<span>;</span>\n            <span>}</span>\n            <span>BufferedImage</span> i <span>=</span> <span>ImageIO</span><span>.</span><span>read</span><span>(</span>file<span>)</span><span>;</span>\n            <span>int</span> iw <span>=</span> i<span>.</span><span>getWidth</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> ih <span>=</span> i<span>.</span><span>getHeight</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> w <span>=</span> thum<span>;</span>\n            <span>int</span> h <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span><span>(</span><span>double</span><span>)</span> thum <span>/</span> iw <span>*</span> ih<span>)</span><span>;</span>\n            <span>BufferedImage</span> di <span>=</span> <span>new</span> <span>BufferedImage</span><span>(</span>w<span>,</span> h<span>,</span> <span>BufferedImage</span><span>.</span><span>TYPE_INT_RGB</span><span>)</span><span>;</span>\n            <span>Graphics</span> g <span>=</span> di<span>.</span><span>getGraphics</span><span>(</span><span>)</span><span>;</span>\n            g<span>.</span><span>drawImage</span><span>(</span>i<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> w<span>,</span> h<span>,</span> <span>null</span><span>)</span><span>;</span>\n            g<span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>\n            <span>String</span> ext <span>=</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n            <span>File</span> dir <span>=</span> <span>new</span> <span>File</span><span>(</span><span>this</span><span>.</span>dir <span>+</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span><span>)</span> <span>+</span> <span>\"_w_thum.\"</span> <span>+</span> ext<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>dir<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>\"指定存放目录不存在！！\"</span><span>;</span>\n            <span>}</span>\n            <span>ImageIO</span><span>.</span><span>write</span><span>(</span>di<span>,</span> <span>\"jpg\"</span><span>,</span> dir<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 裁剪图像\n     *\n     * <span>@param</span> <span>w</span> 剪切的宽\n     * <span>@param</span> <span>h</span> 剪切的高\n     * <span>@param</span> <span>x</span> 指定从原图的宽开始\n     * <span>@param</span> <span>y</span> 指定从原图的高开始\n     */</span>\n    <span>public</span> <span>void</span> <span>imgCrop</span><span>(</span><span>int</span> w<span>,</span> <span>int</span> h<span>,</span> <span>int</span> x<span>,</span> <span>int</span> y<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>if</span> <span>(</span><span>!</span>file<span>.</span><span>canRead</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"请定义一个原图文件\"</span><span>)</span><span>;</span>\n                <span>return</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>!</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>endsWith</span><span>(</span><span>\".jpg\"</span><span>)</span><span>)</span> <span>{</span>\n                <span>if</span> <span>(</span><span>!</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>endsWith</span><span>(</span><span>\".png\"</span><span>)</span><span>)</span> <span>{</span>\n                    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"请先定义原图片文件,格式为：jpg、png\"</span><span>)</span><span>;</span>\n                    <span>return</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n            <span>BufferedImage</span> bi <span>=</span> <span>ImageIO</span><span>.</span><span>read</span><span>(</span>file<span>)</span><span>;</span>\n            <span>BufferedImage</span> ni <span>=</span> <span>new</span> <span>BufferedImage</span><span>(</span>w<span>,</span> h<span>,</span> <span>BufferedImage</span><span>.</span><span>TYPE_INT_RGB</span><span>)</span><span>;</span>\n            <span>Graphics</span> g <span>=</span> ni<span>.</span><span>getGraphics</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> nw <span>=</span> w <span>+</span> x<span>;</span>\n            <span>int</span> nh <span>=</span> h <span>+</span> y<span>;</span>\n            g<span>.</span><span>drawImage</span><span>(</span>bi<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> w<span>,</span> h<span>,</span> x<span>,</span> y<span>,</span> nw<span>,</span> nh<span>,</span> <span>null</span><span>)</span><span>;</span>\n            g<span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>\n            <span>String</span> ext <span>=</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span>file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n            <span>File</span> dir <span>=</span> <span>new</span> <span>File</span><span>(</span><span>this</span><span>.</span>dir <span>+</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> file<span>.</span><span>getName</span><span>(</span><span>)</span><span>.</span><span>lastIndexOf</span><span>(</span><span>\".\"</span><span>)</span><span>)</span> <span>+</span> <span>\"_crop.\"</span> <span>+</span> ext<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span>dir<span>.</span><span>getParentFile</span><span>(</span><span>)</span><span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"指定存放目录不存在！！\"</span><span>)</span><span>;</span>\n                <span>return</span><span>;</span>\n            <span>}</span>\n            <span>ImageIO</span><span>.</span><span>write</span><span>(</span>ni<span>,</span> <span>\"jpg\"</span><span>,</span> dir<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "驼峰转换",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Hump/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Hump/",
      "content_html": "<div><pre><code><span><span>&lt;</span>dependency<span>></span></span>\n    <span><span>&lt;</span>groupId<span>></span></span>com<span>.</span>google<span>.</span>guava<span>&lt;</span><span>/</span>groupId<span>></span>\n    <span><span>&lt;</span>artifactId<span>></span></span>guava<span>&lt;</span><span>/</span>artifactId<span>></span>\n    <span><span>&lt;</span>version<span>></span></span><span>21.0</span><span>&lt;</span><span>/</span>version<span>></span>\n<span>&lt;</span><span>/</span>dependency<span>></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>import</span> <span><span>com<span>.</span>google<span>.</span>common<span>.</span>base<span>.</span></span><span>CaseFormat</span></span><span>;</span>\n \n<span>public</span> <span>class</span> <span>GuavaTester</span> <span>{</span>\n \n    <span>@Test</span>\n    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>)</span> <span>{</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_HYPHEN</span><span>.</span><span>to</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_CAMEL</span><span>,</span> <span>\"test-data\"</span><span>)</span><span>)</span><span>;</span><span>//testData</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_UNDERSCORE</span><span>.</span><span>to</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_CAMEL</span><span>,</span> <span>\"test_data\"</span><span>)</span><span>)</span><span>;</span><span>//testData</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>CaseFormat</span><span>.</span><span>UPPER_UNDERSCORE</span><span>.</span><span>to</span><span>(</span><span>CaseFormat</span><span>.</span><span>UPPER_CAMEL</span><span>,</span> <span>\"test_data\"</span><span>)</span><span>)</span><span>;</span><span>//TestData</span>\n       <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_CAMEL</span><span>.</span><span>to</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_UNDERSCORE</span><span>,</span> <span>\"testdata\"</span><span>)</span><span>)</span><span>;</span><span>//testdata</span>\n       <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_CAMEL</span><span>.</span><span>to</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_UNDERSCORE</span><span>,</span> <span>\"TestData\"</span><span>)</span><span>)</span><span>;</span><span>//test_data</span>\n       <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_CAMEL</span><span>.</span><span>to</span><span>(</span><span>CaseFormat</span><span>.</span><span>LOWER_HYPHEN</span><span>,</span> <span>\"testData\"</span><span>)</span><span>)</span><span>;</span><span>//test-data</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "身份证校验",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/IdCard/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/IdCard/",
      "content_html": "<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>String</span> idCard <span>=</span> <span>\"3689232519900576666\"</span><span>;</span>\n    <span>boolean</span> b <span>=</span> <span>validateCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>String</span> province <span>=</span> <span>getProvinceByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>String</span> city <span>=</span> <span>getCitycodeByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>int</span> year <span>=</span> <span>getYearByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>int</span> month <span>=</span> <span>getMonthByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>int</span> date <span>=</span> <span>getDateByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>int</span> age <span>=</span> <span>getAgeByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>String</span> gender <span>=</span> <span>getGenderByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"身份证号：\"</span> <span>+</span> idCard<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"是否合法：\"</span> <span>+</span> b<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"省：\"</span> <span>+</span> province<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"城市编码：\"</span> <span>+</span> city<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"年：\"</span> <span>+</span> year<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"月：\"</span> <span>+</span> month<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"日：\"</span> <span>+</span> date<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"年龄：\"</span> <span>+</span> age<span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"性别：\"</span> <span>+</span> gender<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>代码：</strong></p>\n<div><pre><code><span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>ParseException</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>SimpleDateFormat</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Calendar</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Date</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>HashMap</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Map</span></span><span>;</span>\n\n<span>import</span> <span>static</span> <span><span>org<span>.</span>apache<span>.</span>commons<span>.</span>lang3<span>.</span></span><span>StringUtils</span><span>.</span><span>replace</span></span><span>;</span>\n<span>import</span> <span>static</span> <span><span>org<span>.</span>apache<span>.</span>commons<span>.</span>lang3<span>.</span></span><span>StringUtils</span><span>.</span><span>substring</span></span><span>;</span>\n<span>import</span> <span>static</span> <span><span>org<span>.</span>apache<span>.</span>commons<span>.</span>lang3<span>.</span>time<span>.</span></span><span>DateFormatUtils</span><span>.</span><span>ISO_DATE_FORMAT</span></span><span>;</span>\n\n<span>/**\n * 身份证工具类\n * 验证18位身份号码是否合法\n * 验证15位身份号码是否合法\n * 验证台湾身份证号码是否合法\n * 验证香港身份证号码是否合法\n * 解析身份证号获取户籍城市编码，出生日期，性别\n */</span>\n<span>public</span> <span>class</span> <span>IdcardUtils</span> <span>{</span>\n    <span>/**\n     * 中国公民身份证号码最小长度。\n     */</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>int</span> <span>CHINA_ID_MIN_LENGTH</span> <span>=</span> <span>15</span><span>;</span>\n\n    <span>/**\n     * 中国公民身份证号码最大长度。\n     */</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>int</span> <span>CHINA_ID_MAX_LENGTH</span> <span>=</span> <span>18</span><span>;</span>\n\n    <span>/**\n     * 省、直辖市代码表\n     */</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> cityCode<span>[</span><span>]</span> <span>=</span> <span>{</span><span>\"11\"</span><span>,</span> <span>\"12\"</span><span>,</span> <span>\"13\"</span><span>,</span> <span>\"14\"</span><span>,</span> <span>\"15\"</span><span>,</span> <span>\"21\"</span><span>,</span> <span>\"22\"</span><span>,</span> <span>\"23\"</span><span>,</span> <span>\"31\"</span><span>,</span> <span>\"32\"</span><span>,</span> <span>\"33\"</span><span>,</span> <span>\"34\"</span><span>,</span> <span>\"35\"</span><span>,</span> <span>\"36\"</span><span>,</span> <span>\"37\"</span><span>,</span> <span>\"41\"</span><span>,</span> <span>\"42\"</span><span>,</span> <span>\"43\"</span><span>,</span> <span>\"44\"</span><span>,</span> <span>\"45\"</span><span>,</span> <span>\"46\"</span><span>,</span> <span>\"50\"</span><span>,</span>\n            <span>\"51\"</span><span>,</span> <span>\"52\"</span><span>,</span> <span>\"53\"</span><span>,</span> <span>\"54\"</span><span>,</span> <span>\"61\"</span><span>,</span> <span>\"62\"</span><span>,</span> <span>\"63\"</span><span>,</span> <span>\"64\"</span><span>,</span> <span>\"65\"</span><span>,</span> <span>\"71\"</span><span>,</span> <span>\"81\"</span><span>,</span> <span>\"82\"</span><span>,</span> <span>\"91\"</span><span>}</span><span>;</span>\n\n    <span>/**\n     * 每位加权因子\n     */</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>int</span> power<span>[</span><span>]</span> <span>=</span> <span>{</span><span>7</span><span>,</span> <span>9</span><span>,</span> <span>10</span><span>,</span> <span>5</span><span>,</span> <span>8</span><span>,</span> <span>4</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>,</span> <span>6</span><span>,</span> <span>3</span><span>,</span> <span>7</span><span>,</span> <span>9</span><span>,</span> <span>10</span><span>,</span> <span>5</span><span>,</span> <span>8</span><span>,</span> <span>4</span><span>,</span> <span>2</span><span>}</span><span>;</span>\n\n    <span>/**\n     * 第18位校检码\n     */</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> verifyCode<span>[</span><span>]</span> <span>=</span> <span>{</span><span>\"1\"</span><span>,</span> <span>\"0\"</span><span>,</span> <span>\"X\"</span><span>,</span> <span>\"9\"</span><span>,</span> <span>\"8\"</span><span>,</span> <span>\"7\"</span><span>,</span> <span>\"6\"</span><span>,</span> <span>\"5\"</span><span>,</span> <span>\"4\"</span><span>,</span> <span>\"3\"</span><span>,</span> <span>\"2\"</span><span>}</span><span>;</span>\n    <span>/**\n     * 最低年限\n     */</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>int</span> <span>MIN</span> <span>=</span> <span>1900</span><span>;</span>\n    <span>public</span> <span>static</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> cityCodes <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n\n    <span>/**\n     * 台湾身份首字母对应数字\n     */</span>\n    <span>public</span> <span>static</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Integer</span><span>></span></span> twFirstCode <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n    <span>/**\n     * 香港身份首字母对应数字\n     */</span>\n    <span>public</span> <span>static</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Integer</span><span>></span></span> hkFirstCode <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n\n    <span>static</span> <span>{</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"11\"</span><span>,</span> <span>\"北京\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"12\"</span><span>,</span> <span>\"天津\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"13\"</span><span>,</span> <span>\"河北\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"14\"</span><span>,</span> <span>\"山西\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"15\"</span><span>,</span> <span>\"内蒙古\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"21\"</span><span>,</span> <span>\"辽宁\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"22\"</span><span>,</span> <span>\"吉林\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"23\"</span><span>,</span> <span>\"黑龙江\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"31\"</span><span>,</span> <span>\"上海\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"32\"</span><span>,</span> <span>\"江苏\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"33\"</span><span>,</span> <span>\"浙江\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"34\"</span><span>,</span> <span>\"安徽\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"35\"</span><span>,</span> <span>\"福建\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"36\"</span><span>,</span> <span>\"江西\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"37\"</span><span>,</span> <span>\"山东\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"41\"</span><span>,</span> <span>\"河南\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"42\"</span><span>,</span> <span>\"湖北\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"43\"</span><span>,</span> <span>\"湖南\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"44\"</span><span>,</span> <span>\"广东\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"45\"</span><span>,</span> <span>\"广西\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"46\"</span><span>,</span> <span>\"海南\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"50\"</span><span>,</span> <span>\"重庆\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"51\"</span><span>,</span> <span>\"四川\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"52\"</span><span>,</span> <span>\"贵州\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"53\"</span><span>,</span> <span>\"云南\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"54\"</span><span>,</span> <span>\"西藏\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"61\"</span><span>,</span> <span>\"陕西\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"62\"</span><span>,</span> <span>\"甘肃\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"63\"</span><span>,</span> <span>\"青海\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"64\"</span><span>,</span> <span>\"宁夏\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"65\"</span><span>,</span> <span>\"新疆\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"71\"</span><span>,</span> <span>\"台湾\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"81\"</span><span>,</span> <span>\"香港\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"82\"</span><span>,</span> <span>\"澳门\"</span><span>)</span><span>;</span>\n        cityCodes<span>.</span><span>put</span><span>(</span><span>\"91\"</span><span>,</span> <span>\"国外\"</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"A\"</span><span>,</span> <span>10</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"B\"</span><span>,</span> <span>11</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"C\"</span><span>,</span> <span>12</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"D\"</span><span>,</span> <span>13</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"E\"</span><span>,</span> <span>14</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"F\"</span><span>,</span> <span>15</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"G\"</span><span>,</span> <span>16</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"H\"</span><span>,</span> <span>17</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"J\"</span><span>,</span> <span>18</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"K\"</span><span>,</span> <span>19</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"L\"</span><span>,</span> <span>20</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"M\"</span><span>,</span> <span>21</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"N\"</span><span>,</span> <span>22</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"P\"</span><span>,</span> <span>23</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"Q\"</span><span>,</span> <span>24</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"R\"</span><span>,</span> <span>25</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"S\"</span><span>,</span> <span>26</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"T\"</span><span>,</span> <span>27</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"U\"</span><span>,</span> <span>28</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"V\"</span><span>,</span> <span>29</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"X\"</span><span>,</span> <span>30</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"Y\"</span><span>,</span> <span>31</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"W\"</span><span>,</span> <span>32</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"Z\"</span><span>,</span> <span>33</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"I\"</span><span>,</span> <span>34</span><span>)</span><span>;</span>\n        twFirstCode<span>.</span><span>put</span><span>(</span><span>\"O\"</span><span>,</span> <span>35</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"A\"</span><span>,</span> <span>1</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"B\"</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"C\"</span><span>,</span> <span>3</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"R\"</span><span>,</span> <span>18</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"U\"</span><span>,</span> <span>21</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"Z\"</span><span>,</span> <span>26</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"X\"</span><span>,</span> <span>24</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"W\"</span><span>,</span> <span>23</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"O\"</span><span>,</span> <span>15</span><span>)</span><span>;</span>\n        hkFirstCode<span>.</span><span>put</span><span>(</span><span>\"N\"</span><span>,</span> <span>14</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 将15位身份证号码转换为18位\n     *\n     * <span>@param</span> <span>idCard</span> 15位身份编码\n     * <span>@return</span> 18位身份编码\n     */</span>\n    <span>private</span> <span>static</span> <span>String</span> <span>conver15CardTo18</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>String</span> idCard18 <span>=</span> <span>\"\"</span><span>;</span>\n        <span>if</span> <span>(</span>idCard<span>.</span><span>length</span><span>(</span><span>)</span> <span>!=</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span><span>isNum</span><span>(</span>idCard<span>)</span><span>)</span> <span>{</span>\n            <span>// 获取出生年月日</span>\n            <span>String</span> birthday <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>6</span><span>,</span> <span>12</span><span>)</span><span>;</span>\n            <span>Date</span> birthDate <span>=</span> <span>null</span><span>;</span>\n            <span>try</span> <span>{</span>\n                birthDate <span>=</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span><span>\"yyMMdd\"</span><span>)</span><span>.</span><span>parse</span><span>(</span>birthday<span>)</span><span>;</span>\n            <span>}</span> <span>catch</span> <span>(</span><span>ParseException</span> e<span>)</span> <span>{</span>\n                <span>// TODO Auto-generated catch block</span>\n                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n\n            <span>Calendar</span> cal <span>=</span> <span>Calendar</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>birthDate <span>!=</span> <span>null</span><span>)</span>\n                cal<span>.</span><span>setTime</span><span>(</span>birthDate<span>)</span><span>;</span>\n            <span>// 获取出生年(完全表现形式,如：2010)</span>\n            <span>String</span> sYear <span>=</span> <span>String</span><span>.</span><span>valueOf</span><span>(</span>cal<span>.</span><span>get</span><span>(</span><span>Calendar</span><span>.</span><span>YEAR</span><span>)</span><span>)</span><span>;</span>\n            idCard18 <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>6</span><span>)</span> <span>+</span> sYear <span>+</span> idCard<span>.</span><span>substring</span><span>(</span><span>8</span><span>)</span><span>;</span>\n            <span>// 转换字符数组</span>\n            <span>char</span><span>[</span><span>]</span> cArr <span>=</span> idCard18<span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>cArr <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                <span>int</span><span>[</span><span>]</span> iCard <span>=</span> <span>converCharToInt</span><span>(</span>cArr<span>)</span><span>;</span>\n                <span>int</span> iSum17 <span>=</span> <span>getPowerSum</span><span>(</span>iCard<span>)</span><span>;</span>\n                <span>// 获取校验位</span>\n                <span>String</span> sVal <span>=</span> <span>getCheckCode18</span><span>(</span>iSum17<span>)</span><span>;</span>\n                <span>if</span> <span>(</span>sVal<span>.</span><span>length</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>\n                    idCard18 <span>+=</span> sVal<span>;</span>\n                <span>}</span> <span>else</span> <span>{</span>\n                    <span>return</span> <span>null</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>return</span> idCard18<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证身份证是否合法\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>validateCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>String</span> card <span>=</span> idCard<span>.</span><span>trim</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>validateIdCard18</span><span>(</span>card<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>true</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span><span>validateIdCard15</span><span>(</span>card<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>true</span><span>;</span>\n        <span>}</span>\n        <span>String</span><span>[</span><span>]</span> cardval <span>=</span> <span>validateIdCard10</span><span>(</span>card<span>)</span><span>;</span>\n        <span>if</span> <span>(</span>cardval <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span><span>\"true\"</span><span>.</span><span>equals</span><span>(</span>cardval<span>[</span><span>2</span><span>]</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>true</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> <span>false</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证18位身份编码是否合法\n     *\n     * <span>@param</span> <span>idCard</span> 身份编码\n     * <span>@return</span> 是否合法\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>validateIdCard18</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>boolean</span> bTrue <span>=</span> <span>false</span><span>;</span>\n        <span>if</span> <span>(</span>idCard<span>.</span><span>length</span><span>(</span><span>)</span> <span>==</span> <span>CHINA_ID_MAX_LENGTH</span><span>)</span> <span>{</span>\n            <span>// 前17位</span>\n            <span>String</span> code17 <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>17</span><span>)</span><span>;</span>\n            <span>// 第18位</span>\n            <span>String</span> code18 <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>17</span><span>,</span> <span>CHINA_ID_MAX_LENGTH</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>isNum</span><span>(</span>code17<span>)</span><span>)</span> <span>{</span>\n                <span>char</span><span>[</span><span>]</span> cArr <span>=</span> code17<span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>;</span>\n                <span>if</span> <span>(</span>cArr <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                    <span>int</span><span>[</span><span>]</span> iCard <span>=</span> <span>converCharToInt</span><span>(</span>cArr<span>)</span><span>;</span>\n                    <span>int</span> iSum17 <span>=</span> <span>getPowerSum</span><span>(</span>iCard<span>)</span><span>;</span>\n                    <span>// 获取校验位</span>\n                    <span>String</span> val <span>=</span> <span>getCheckCode18</span><span>(</span>iSum17<span>)</span><span>;</span>\n                    <span>if</span> <span>(</span>val<span>.</span><span>length</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>\n                        <span>if</span> <span>(</span>val<span>.</span><span>equalsIgnoreCase</span><span>(</span>code18<span>)</span><span>)</span> <span>{</span>\n                            bTrue <span>=</span> <span>true</span><span>;</span>\n                        <span>}</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> bTrue<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证15位身份编码是否合法\n     *\n     * <span>@param</span> <span>idCard</span> 身份编码\n     * <span>@return</span> 是否合法\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>validateIdCard15</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>idCard<span>.</span><span>length</span><span>(</span><span>)</span> <span>!=</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            <span>return</span> <span>false</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span><span>isNum</span><span>(</span>idCard<span>)</span><span>)</span> <span>{</span>\n            <span>String</span> proCode <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>cityCodes<span>.</span><span>get</span><span>(</span>proCode<span>)</span> <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                <span>return</span> <span>false</span><span>;</span>\n            <span>}</span>\n            <span>String</span> birthCode <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>6</span><span>,</span> <span>12</span><span>)</span><span>;</span>\n            <span>Date</span> birthDate <span>=</span> <span>null</span><span>;</span>\n            <span>try</span> <span>{</span>\n                birthDate <span>=</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span><span>\"yy\"</span><span>)</span><span>.</span><span>parse</span><span>(</span>birthCode<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span><span>)</span><span>;</span>\n            <span>}</span> <span>catch</span> <span>(</span><span>ParseException</span> e<span>)</span> <span>{</span>\n                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>Calendar</span> cal <span>=</span> <span>Calendar</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>birthDate <span>!=</span> <span>null</span><span>)</span>\n                cal<span>.</span><span>setTime</span><span>(</span>birthDate<span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>!</span><span>valiDate</span><span>(</span>cal<span>.</span><span>get</span><span>(</span><span>Calendar</span><span>.</span><span>YEAR</span><span>)</span><span>,</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>birthCode<span>.</span><span>substring</span><span>(</span><span>2</span><span>,</span> <span>4</span><span>)</span><span>)</span><span>,</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>birthCode<span>.</span><span>substring</span><span>(</span><span>4</span><span>,</span> <span>6</span><span>)</span><span>)</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>false</span><span>;</span>\n            <span>}</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>return</span> <span>false</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>true</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证10位身份编码是否合法\n     *\n     * <span>@param</span> <span>idCard</span> 身份编码\n     * <span>@return</span> 身份证信息数组\n     * <span><span><span>&lt;</span>p</span><span>></span></span>\n     * [0] - 台湾、澳门、香港 [1] - 性别(男M,女F,未知N) [2] - 是否合法(合法true,不合法false)\n     * 若不是身份证件号码则返回null\n     * <span><span><span>&lt;/</span>p</span><span>></span></span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span><span>[</span><span>]</span> <span>validateIdCard10</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>String</span><span>[</span><span>]</span> info <span>=</span> <span>new</span> <span>String</span><span>[</span><span>3</span><span>]</span><span>;</span>\n        <span>String</span> card <span>=</span> idCard<span>.</span><span>replaceAll</span><span>(</span><span>\"[\\\\(|\\\\)]\"</span><span>,</span> <span>\"\"</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>card<span>.</span><span>length</span><span>(</span><span>)</span> <span>!=</span> <span>8</span> <span>&amp;&amp;</span> card<span>.</span><span>length</span><span>(</span><span>)</span> <span>!=</span> <span>9</span> <span>&amp;&amp;</span> idCard<span>.</span><span>length</span><span>(</span><span>)</span> <span>!=</span> <span>10</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span>idCard<span>.</span><span>matches</span><span>(</span><span>\"^[a-zA-Z][0-9]{9}$\"</span><span>)</span><span>)</span> <span>{</span> <span>// 台湾</span>\n            info<span>[</span><span>0</span><span>]</span> <span>=</span> <span>\"台湾\"</span><span>;</span>\n            <span>String</span> char2 <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>char2<span>.</span><span>equals</span><span>(</span><span>\"1\"</span><span>)</span><span>)</span> <span>{</span>\n                info<span>[</span><span>1</span><span>]</span> <span>=</span> <span>\"M\"</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>char2<span>.</span><span>equals</span><span>(</span><span>\"2\"</span><span>)</span><span>)</span> <span>{</span>\n                info<span>[</span><span>1</span><span>]</span> <span>=</span> <span>\"F\"</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                info<span>[</span><span>1</span><span>]</span> <span>=</span> <span>\"N\"</span><span>;</span>\n                info<span>[</span><span>2</span><span>]</span> <span>=</span> <span>\"false\"</span><span>;</span>\n                <span>return</span> info<span>;</span>\n            <span>}</span>\n            info<span>[</span><span>2</span><span>]</span> <span>=</span> <span>validateTWCard</span><span>(</span>idCard<span>)</span> <span>?</span> <span>\"true\"</span> <span>:</span> <span>\"false\"</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>idCard<span>.</span><span>matches</span><span>(</span><span>\"^[1|5|7][0-9]{6}\\\\(?[0-9A-Z]\\\\)?$\"</span><span>)</span><span>)</span> <span>{</span> <span>// 澳门</span>\n            info<span>[</span><span>0</span><span>]</span> <span>=</span> <span>\"澳门\"</span><span>;</span>\n            info<span>[</span><span>1</span><span>]</span> <span>=</span> <span>\"N\"</span><span>;</span>\n            <span>// TODO</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>idCard<span>.</span><span>matches</span><span>(</span><span>\"^[A-Z]{1,2}[0-9]{6}\\\\(?[0-9A]\\\\)?$\"</span><span>)</span><span>)</span> <span>{</span> <span>// 香港</span>\n            info<span>[</span><span>0</span><span>]</span> <span>=</span> <span>\"香港\"</span><span>;</span>\n            info<span>[</span><span>1</span><span>]</span> <span>=</span> <span>\"N\"</span><span>;</span>\n            info<span>[</span><span>2</span><span>]</span> <span>=</span> <span>validateHKCard</span><span>(</span>idCard<span>)</span> <span>?</span> <span>\"true\"</span> <span>:</span> <span>\"false\"</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>return</span> info<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证台湾身份证号码\n     *\n     * <span>@param</span> <span>idCard</span> 身份证号码\n     * <span>@return</span> 验证码是否符合\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>validateTWCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>String</span> start <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>;</span>\n        <span>String</span> mid <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>1</span><span>,</span> <span>9</span><span>)</span><span>;</span>\n        <span>String</span> end <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>9</span><span>,</span> <span>10</span><span>)</span><span>;</span>\n        <span>Integer</span> iStart <span>=</span> twFirstCode<span>.</span><span>get</span><span>(</span>start<span>)</span><span>;</span>\n        <span>Integer</span> sum <span>=</span> iStart <span>/</span> <span>10</span> <span>+</span> <span>(</span>iStart <span>%</span> <span>10</span><span>)</span> <span>*</span> <span>9</span><span>;</span>\n        <span>char</span><span>[</span><span>]</span> chars <span>=</span> mid<span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>;</span>\n        <span>Integer</span> iflag <span>=</span> <span>8</span><span>;</span>\n        <span>for</span> <span>(</span><span>char</span> c <span>:</span> chars<span>)</span> <span>{</span>\n            sum <span>=</span> sum <span>+</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>c <span>+</span> <span>\"\"</span><span>)</span> <span>*</span> iflag<span>;</span>\n            iflag<span>--</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>(</span>sum <span>%</span> <span>10</span> <span>==</span> <span>0</span> <span>?</span> <span>0</span> <span>:</span> <span>(</span><span>10</span> <span>-</span> sum <span>%</span> <span>10</span><span>)</span><span>)</span> <span>==</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>end<span>)</span> <span>?</span> <span>true</span> <span>:</span> <span>false</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证香港身份证号码\n     * <span><span><span>&lt;</span>p</span><span>></span></span>\n     * 身份证前2位为英文字符，如果只出现一个英文字符则表示第一位是空格，对应数字58 前2位英文字符A-Z分别对应数字10-35\n     * 最后一位校验码为0-9的数字加上字符\"A\"，\"A\"代表10\n     * <span><span><span>&lt;/</span>p</span><span>></span></span>\n     * <span><span><span>&lt;</span>p</span><span>></span></span>\n     * 将身份证号码全部转换为数字，分别对应乘9-1相加的总和，整除11则证件号码有效\n     * <span><span><span>&lt;/</span>p</span><span>></span></span>\n     *\n     * <span>@param</span> <span>idCard</span> 身份证号码\n     * <span>@return</span> 验证码是否符合\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>validateHKCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>String</span> card <span>=</span> idCard<span>.</span><span>replaceAll</span><span>(</span><span>\"[\\\\(|\\\\)]\"</span><span>,</span> <span>\"\"</span><span>)</span><span>;</span>\n        <span>Integer</span> sum <span>=</span> <span>0</span><span>;</span>\n        <span>if</span> <span>(</span>card<span>.</span><span>length</span><span>(</span><span>)</span> <span>==</span> <span>9</span><span>)</span> <span>{</span>\n            sum <span>=</span> <span>(</span><span>Integer</span><span>.</span><span>valueOf</span><span>(</span>card<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>)</span> <span>-</span> <span>55</span><span>)</span> <span>*</span> <span>9</span> <span>+</span> <span>(</span><span>Integer</span><span>.</span><span>valueOf</span><span>(</span>card<span>.</span><span>substring</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>)</span> <span>-</span> <span>55</span><span>)</span> <span>*</span> <span>8</span><span>;</span>\n            card <span>=</span> card<span>.</span><span>substring</span><span>(</span><span>1</span><span>,</span> <span>9</span><span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            sum <span>=</span> <span>522</span> <span>+</span> <span>(</span><span>Integer</span><span>.</span><span>valueOf</span><span>(</span>card<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span><span>)</span> <span>-</span> <span>55</span><span>)</span> <span>*</span> <span>8</span><span>;</span>\n        <span>}</span>\n        <span>String</span> mid <span>=</span> card<span>.</span><span>substring</span><span>(</span><span>1</span><span>,</span> <span>7</span><span>)</span><span>;</span>\n        <span>String</span> end <span>=</span> card<span>.</span><span>substring</span><span>(</span><span>7</span><span>,</span> <span>8</span><span>)</span><span>;</span>\n        <span>char</span><span>[</span><span>]</span> chars <span>=</span> mid<span>.</span><span>toCharArray</span><span>(</span><span>)</span><span>;</span>\n        <span>Integer</span> iflag <span>=</span> <span>7</span><span>;</span>\n        <span>for</span> <span>(</span><span>char</span> c <span>:</span> chars<span>)</span> <span>{</span>\n            sum <span>=</span> sum <span>+</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>c <span>+</span> <span>\"\"</span><span>)</span> <span>*</span> iflag<span>;</span>\n            iflag<span>--</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span>end<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span><span>\"A\"</span><span>)</span><span>)</span> <span>{</span>\n            sum <span>=</span> sum <span>+</span> <span>10</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            sum <span>=</span> sum <span>+</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>end<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>(</span>sum <span>%</span> <span>11</span> <span>==</span> <span>0</span><span>)</span> <span>?</span> <span>true</span> <span>:</span> <span>false</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 将字符数组转换成数字数组\n     *\n     * <span>@param</span> <span>ca</span> 字符数组\n     * <span>@return</span> 数字数组\n     */</span>\n    <span>private</span> <span>static</span> <span>int</span><span>[</span><span>]</span> <span>converCharToInt</span><span>(</span><span>char</span><span>[</span><span>]</span> ca<span>)</span> <span>{</span>\n        <span>int</span> len <span>=</span> ca<span>.</span>length<span>;</span>\n        <span>int</span><span>[</span><span>]</span> iArr <span>=</span> <span>new</span> <span>int</span><span>[</span>len<span>]</span><span>;</span>\n        <span>try</span> <span>{</span>\n            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n                iArr<span>[</span>i<span>]</span> <span>=</span> <span>Integer</span><span>.</span><span>parseInt</span><span>(</span><span>String</span><span>.</span><span>valueOf</span><span>(</span>ca<span>[</span>i<span>]</span><span>)</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>NumberFormatException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> iArr<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 将身份证的每位和对应位的加权因子相乘之后，再得到和值\n     *\n     * <span>@param</span> <span>iArr</span>\n     * <span>@return</span> 身份证编码。\n     */</span>\n    <span>private</span> <span>static</span> <span>int</span> <span>getPowerSum</span><span>(</span><span>int</span><span>[</span><span>]</span> iArr<span>)</span> <span>{</span>\n        <span>int</span> iSum <span>=</span> <span>0</span><span>;</span>\n        <span>if</span> <span>(</span>power<span>.</span>length <span>==</span> iArr<span>.</span>length<span>)</span> <span>{</span>\n            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> iArr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n                <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> power<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>\n                    <span>if</span> <span>(</span>i <span>==</span> j<span>)</span> <span>{</span>\n                        iSum <span>=</span> iSum <span>+</span> iArr<span>[</span>i<span>]</span> <span>*</span> power<span>[</span>j<span>]</span><span>;</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> iSum<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 将power和值与11取模获得余数进行校验码判断\n     *\n     * <span>@param</span> <span>iSum</span>\n     * <span>@return</span> 校验位\n     */</span>\n    <span>private</span> <span>static</span> <span>String</span> <span>getCheckCode18</span><span>(</span><span>int</span> iSum<span>)</span> <span>{</span>\n        <span>String</span> sCode <span>=</span> <span>\"\"</span><span>;</span>\n        <span>switch</span> <span>(</span>iSum <span>%</span> <span>11</span><span>)</span> <span>{</span>\n            <span>case</span> <span>10</span><span>:</span>\n                sCode <span>=</span> <span>\"2\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>9</span><span>:</span>\n                sCode <span>=</span> <span>\"3\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>8</span><span>:</span>\n                sCode <span>=</span> <span>\"4\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>7</span><span>:</span>\n                sCode <span>=</span> <span>\"5\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>6</span><span>:</span>\n                sCode <span>=</span> <span>\"6\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>5</span><span>:</span>\n                sCode <span>=</span> <span>\"7\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>4</span><span>:</span>\n                sCode <span>=</span> <span>\"8\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>3</span><span>:</span>\n                sCode <span>=</span> <span>\"9\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>2</span><span>:</span>\n                sCode <span>=</span> <span>\"x\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>1</span><span>:</span>\n                sCode <span>=</span> <span>\"0\"</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>0</span><span>:</span>\n                sCode <span>=</span> <span>\"1\"</span><span>;</span>\n                <span>break</span><span>;</span>\n        <span>}</span>\n        <span>return</span> sCode<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取年龄\n     *\n     * <span>@param</span> <span>idCard</span> 身份编号\n     * <span>@return</span> 年龄\n     */</span>\n    <span>public</span> <span>static</span> <span>int</span> <span>getAgeByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>int</span> iAge <span>=</span> <span>0</span><span>;</span>\n        <span>if</span> <span>(</span>idCard<span>.</span><span>length</span><span>(</span><span>)</span> <span>==</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            idCard <span>=</span> <span>conver15CardTo18</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>}</span>\n        <span>String</span> year <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>6</span><span>,</span> <span>10</span><span>)</span><span>;</span>\n        <span>Calendar</span> cal <span>=</span> <span>Calendar</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> iCurrYear <span>=</span> cal<span>.</span><span>get</span><span>(</span><span>Calendar</span><span>.</span><span>YEAR</span><span>)</span><span>;</span>\n        iAge <span>=</span> iCurrYear <span>-</span> <span>Integer</span><span>.</span><span>valueOf</span><span>(</span>year<span>)</span><span>;</span>\n        <span>return</span> iAge<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据生日判断是否年满18周岁\n     *\n     * <span>@param</span> <span>idCard</span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>is18YearsOld</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>int</span> iAge <span>=</span> <span>getAgeByIdCard</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>return</span> iAge <span>></span> <span>18</span> <span>?</span> <span>true</span> <span>:</span> <span>(</span>iAge <span>&lt;</span> <span>18</span> <span>?</span> <span>false</span> <span>:</span> <span>substring</span><span>(</span><span>replace</span><span>(</span><span>ISO_DATE_FORMAT</span><span>.</span><span>format</span><span>(</span><span>Calendar</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>)</span><span>,</span> <span>\"-\"</span><span>,</span> <span>\"\"</span><span>)</span><span>,</span> <span>4</span><span>)</span><span>.</span><span>compareTo</span><span>(</span>\n                <span>substring</span><span>(</span><span>getBirthByIdCard</span><span>(</span>idCard<span>)</span><span>,</span> <span>4</span><span>)</span><span>)</span> <span>>=</span> <span>0</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取生日\n     *\n     * <span>@param</span> <span>idCard</span> 身份编号\n     * <span>@return</span> 生日(yyyyMMdd)\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getBirthByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>Integer</span> len <span>=</span> idCard<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>len <span>&lt;</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>len <span>==</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            idCard <span>=</span> <span>conver15CardTo18</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> idCard<span>.</span><span>substring</span><span>(</span><span>6</span><span>,</span> <span>14</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取生日年\n     *\n     * <span>@param</span> <span>idCard</span> 身份编号\n     * <span>@return</span> 生日(yyyy)\n     */</span>\n    <span>public</span> <span>static</span> <span>Short</span> <span>getYearByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>Integer</span> len <span>=</span> idCard<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>len <span>&lt;</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>len <span>==</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            idCard <span>=</span> <span>conver15CardTo18</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>Short</span><span>.</span><span>valueOf</span><span>(</span>idCard<span>.</span><span>substring</span><span>(</span><span>6</span><span>,</span> <span>10</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取生日月\n     *\n     * <span>@param</span> <span>idCard</span> 身份编号\n     * <span>@return</span> 生日(MM)\n     */</span>\n    <span>public</span> <span>static</span> <span>Short</span> <span>getMonthByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>Integer</span> len <span>=</span> idCard<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>len <span>&lt;</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>len <span>==</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            idCard <span>=</span> <span>conver15CardTo18</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>Short</span><span>.</span><span>valueOf</span><span>(</span>idCard<span>.</span><span>substring</span><span>(</span><span>10</span><span>,</span> <span>12</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取生日天\n     *\n     * <span>@param</span> <span>idCard</span> 身份编号\n     * <span>@return</span> 生日(dd)\n     */</span>\n    <span>public</span> <span>static</span> <span>Short</span> <span>getDateByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>Integer</span> len <span>=</span> idCard<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>len <span>&lt;</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>len <span>==</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            idCard <span>=</span> <span>conver15CardTo18</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>Short</span><span>.</span><span>valueOf</span><span>(</span>idCard<span>.</span><span>substring</span><span>(</span><span>12</span><span>,</span> <span>14</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取性别\n     *\n     * <span>@param</span> <span>idCard</span> 身份编号\n     * <span>@return</span> 性别(M - 男 ， F - 女 ， N - 未知)\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getGenderByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>String</span> sGender <span>=</span> <span>\"N\"</span><span>;</span>\n        <span>if</span> <span>(</span>idCard<span>.</span><span>length</span><span>(</span><span>)</span> <span>==</span> <span>CHINA_ID_MIN_LENGTH</span><span>)</span> <span>{</span>\n            idCard <span>=</span> <span>conver15CardTo18</span><span>(</span>idCard<span>)</span><span>;</span>\n        <span>}</span>\n        <span>String</span> sCardNum <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>16</span><span>,</span> <span>17</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>Integer</span><span>.</span><span>parseInt</span><span>(</span>sCardNum<span>)</span> <span>%</span> <span>2</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span>\n            sGender <span>=</span> <span>\"男\"</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            sGender <span>=</span> <span>\"女\"</span><span>;</span>\n        <span>}</span>\n        <span>return</span> sGender<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取户籍省份\n     *\n     * <span>@param</span> <span>idCard</span> 身份编码\n     * <span>@return</span> 省级编码。\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getProvinceByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>int</span> len <span>=</span> idCard<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>\n        <span>String</span> sProvince <span>=</span> <span>null</span><span>;</span>\n        <span>String</span> sProvinNum <span>=</span> <span>\"\"</span><span>;</span>\n        <span>if</span> <span>(</span>len <span>==</span> <span>CHINA_ID_MIN_LENGTH</span> <span>||</span> len <span>==</span> <span>CHINA_ID_MAX_LENGTH</span><span>)</span> <span>{</span>\n            sProvinNum <span>=</span> idCard<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n        <span>}</span>\n        sProvince <span>=</span> cityCodes<span>.</span><span>get</span><span>(</span>sProvinNum<span>)</span><span>;</span>\n        <span>return</span> sProvince<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 根据身份编号获取户籍城市编码\n     *\n     * <span>@param</span> <span>idCard</span> 身份编码\n     * <span>@return</span> 城市编码。\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getCitycodeByIdCard</span><span>(</span><span>String</span> idCard<span>)</span> <span>{</span>\n        <span>return</span> idCard<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>6</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 数字验证\n     *\n     * <span>@param</span> <span>val</span>\n     * <span>@return</span> 提取的数字。\n     */</span>\n    <span>private</span> <span>static</span> <span>boolean</span> <span>isNum</span><span>(</span><span>String</span> val<span>)</span> <span>{</span>\n        <span>return</span> val <span>==</span> <span>null</span> <span>||</span> <span>\"\"</span><span>.</span><span>equals</span><span>(</span>val<span>)</span> <span>?</span> <span>false</span> <span>:</span> val<span>.</span><span>matches</span><span>(</span><span>\"^[0-9]*$\"</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证小于当前日期 是否有效\n     *\n     * <span>@param</span> <span>iYear</span>  待验证日期(年)\n     * <span>@param</span> <span>iMonth</span> 待验证日期(月 1-12)\n     * <span>@param</span> <span>iDate</span>  待验证日期(日)\n     * <span>@return</span> 是否有效\n     */</span>\n    <span>private</span> <span>static</span> <span>boolean</span> <span>valiDate</span><span>(</span><span>int</span> iYear<span>,</span> <span>int</span> iMonth<span>,</span> <span>int</span> iDate<span>)</span> <span>{</span>\n        <span>Calendar</span> cal <span>=</span> <span>Calendar</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> year <span>=</span> cal<span>.</span><span>get</span><span>(</span><span>Calendar</span><span>.</span><span>YEAR</span><span>)</span><span>;</span>\n        <span>int</span> datePerMonth<span>;</span>\n        <span>if</span> <span>(</span>iYear <span>&lt;</span> <span>MIN</span> <span>||</span> iYear <span>>=</span> year<span>)</span> <span>{</span>\n            <span>return</span> <span>false</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span>iMonth <span>&lt;</span> <span>1</span> <span>||</span> iMonth <span>></span> <span>12</span><span>)</span> <span>{</span>\n            <span>return</span> <span>false</span><span>;</span>\n        <span>}</span>\n        <span>switch</span> <span>(</span>iMonth<span>)</span> <span>{</span>\n            <span>case</span> <span>4</span><span>:</span>\n            <span>case</span> <span>6</span><span>:</span>\n            <span>case</span> <span>9</span><span>:</span>\n            <span>case</span> <span>11</span><span>:</span>\n                datePerMonth <span>=</span> <span>30</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>case</span> <span>2</span><span>:</span>\n                <span>boolean</span> dm <span>=</span> <span>(</span><span>(</span>iYear <span>%</span> <span>4</span> <span>==</span> <span>0</span> <span>&amp;&amp;</span> iYear <span>%</span> <span>100</span> <span>!=</span> <span>0</span><span>)</span> <span>||</span> <span>(</span>iYear <span>%</span> <span>400</span> <span>==</span> <span>0</span><span>)</span><span>)</span> <span>&amp;&amp;</span> <span>(</span>iYear <span>></span> <span>MIN</span> <span>&amp;&amp;</span> iYear <span>&lt;</span> year<span>)</span><span>;</span>\n                datePerMonth <span>=</span> dm <span>?</span> <span>29</span> <span>:</span> <span>28</span><span>;</span>\n                <span>break</span><span>;</span>\n            <span>default</span><span>:</span>\n                datePerMonth <span>=</span> <span>31</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>(</span>iDate <span>>=</span> <span>1</span><span>)</span> <span>&amp;&amp;</span> <span>(</span>iDate <span>&lt;=</span> datePerMonth<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "解析IP",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Ip/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Ip/",
      "content_html": "<div><pre><code><span>package</span> <span>io<span>.</span>easy<span>.</span>common<span>.</span>utils</span><span>;</span>\n\n<span>import</span> <span><span>com<span>.</span>alibaba<span>.</span>druid<span>.</span>util<span>.</span></span><span>StringUtils</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>slf4j<span>.</span></span><span>Logger</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>slf4j<span>.</span></span><span>LoggerFactory</span></span><span>;</span>\n\n<span>import</span> <span><span>javax<span>.</span>servlet<span>.</span>http<span>.</span></span><span>HttpServletRequest</span></span><span>;</span>\n\n<span>/**\n * IP地址\n */</span>\n<span>public</span> <span>class</span> <span>IPUtils</span> <span>{</span>\n   <span>private</span> <span>static</span> <span>Logger</span> logger <span>=</span> <span>LoggerFactory</span><span>.</span><span>getLogger</span><span>(</span><span>IPUtils</span><span>.</span><span>class</span><span>)</span><span>;</span>\n\n   <span>/**\n    * 获取IP地址\n    * \n    * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址\n    * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址\n    */</span>\n   <span>public</span> <span>static</span> <span>String</span> <span>getIpAddr</span><span>(</span><span>HttpServletRequest</span> request<span>)</span> <span>{</span>\n       <span>String</span> ip <span>=</span> <span>null</span><span>;</span>\n        <span>try</span> <span>{</span>\n            ip <span>=</span> request<span>.</span><span>getHeader</span><span>(</span><span>\"x-forwarded-for\"</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isEmpty</span><span>(</span>ip<span>)</span> <span>||</span> <span>\"unknown\"</span><span>.</span><span>equalsIgnoreCase</span><span>(</span>ip<span>)</span><span>)</span> <span>{</span>\n                ip <span>=</span> request<span>.</span><span>getHeader</span><span>(</span><span>\"Proxy-Client-IP\"</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isEmpty</span><span>(</span>ip<span>)</span> <span>||</span> ip<span>.</span><span>length</span><span>(</span><span>)</span> <span>==</span> <span>0</span> <span>||</span> <span>\"unknown\"</span><span>.</span><span>equalsIgnoreCase</span><span>(</span>ip<span>)</span><span>)</span> <span>{</span>\n                ip <span>=</span> request<span>.</span><span>getHeader</span><span>(</span><span>\"WL-Proxy-Client-IP\"</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isEmpty</span><span>(</span>ip<span>)</span> <span>||</span> <span>\"unknown\"</span><span>.</span><span>equalsIgnoreCase</span><span>(</span>ip<span>)</span><span>)</span> <span>{</span>\n                ip <span>=</span> request<span>.</span><span>getHeader</span><span>(</span><span>\"HTTP_CLIENT_IP\"</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isEmpty</span><span>(</span>ip<span>)</span> <span>||</span> <span>\"unknown\"</span><span>.</span><span>equalsIgnoreCase</span><span>(</span>ip<span>)</span><span>)</span> <span>{</span>\n                ip <span>=</span> request<span>.</span><span>getHeader</span><span>(</span><span>\"HTTP_X_FORWARDED_FOR\"</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isEmpty</span><span>(</span>ip<span>)</span> <span>||</span> <span>\"unknown\"</span><span>.</span><span>equalsIgnoreCase</span><span>(</span>ip<span>)</span><span>)</span> <span>{</span>\n                ip <span>=</span> request<span>.</span><span>getRemoteAddr</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>\n           logger<span>.</span><span>error</span><span>(</span><span>\"IPUtils ERROR \"</span><span>,</span> e<span>)</span><span>;</span>\n        <span>}</span>\n        \n<span>//        //使用代理，则获取第一个IP地址</span>\n<span>//        if(StringUtils.isEmpty(ip) &amp;&amp; ip.length() > 15) {</span>\n<span>//       if(ip.indexOf(\",\") > 0) {</span>\n<span>//          ip = ip.substring(0, ip.indexOf(\",\"));</span>\n<span>//       }</span>\n<span>//    }</span>\n        <span>return</span> ip<span>;</span>\n    <span>}</span>\n   \n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "对象转换",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/ObjectConvert/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/ObjectConvert/",
      "content_html": "<div><pre><code><span>import</span> <span><span>java<span>.</span>math<span>.</span></span><span>BigDecimal</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>ParseException</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>text<span>.</span></span><span>SimpleDateFormat</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>time<span>.</span></span><span>LocalDateTime</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Date</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>ConvertUtils</span> <span>{</span>\n    <span>/**\n     * Object转成指定的类型\n     * <span>@param</span> <span>obj</span>\n     * <span>@param</span> <span>type</span>\n     * <span>@param</span> <span><span>&lt;</span>T<span>></span></span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>convert</span><span>(</span><span>Object</span> obj<span>,</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> type<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>obj <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>!</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>obj<span>)</span><span>)</span> <span>{</span>\n            <span>String</span> objStr <span>=</span> obj<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Integer</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>int</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Integer</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Long</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>long</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Long</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Boolean</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>boolean</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Boolean</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Short</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>short</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Short</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Float</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>float</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Float</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Double</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>double</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Double</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Byte</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>byte</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Byte</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Character</span><span>.</span><span>class</span><span>)</span><span>||</span>type<span>.</span><span>equals</span><span>(</span><span>char</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Character</span><span>(</span>objStr<span>.</span><span>charAt</span><span>(</span><span>0</span><span>)</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>String</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> obj<span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>BigDecimal</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>BigDecimal</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>LocalDateTime</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>//DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>LocalDateTime</span><span>.</span><span>parse</span><span>(</span>objStr<span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>Date</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>try</span>\n                <span>{</span>\n                    <span>SimpleDateFormat</span> formatter <span>=</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span><span>\"yyyy-MM-dd HH:mm:ss.SSS\"</span><span>)</span><span>;</span>\n                    <span>return</span> <span>(</span><span>T</span><span>)</span> formatter<span>.</span><span>parse</span><span>(</span>objStr<span>)</span><span>;</span>\n                <span>}</span>\n                <span>catch</span> <span>(</span><span>ParseException</span> e<span>)</span>\n                <span>{</span>\n                    <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span>e<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>\n                <span>}</span>\n\n            <span>}</span><span>else</span><span>{</span>\n                <span>return</span> <span>null</span><span>;</span>\n            <span>}</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>int</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Integer</span><span>(</span><span>0</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>long</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Long</span><span>(</span><span>0L</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>boolean</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Boolean</span><span>(</span><span>false</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>short</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span><span>new</span> <span>Short</span><span>(</span><span>\"0\"</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>float</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Float</span><span>(</span><span>0.0</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>double</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Double</span><span>(</span><span>0.0</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>byte</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Byte</span><span>(</span><span>\"0\"</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>char</span><span>.</span><span>class</span><span>)</span><span>)</span> <span>{</span>\n                <span>return</span> <span>(</span><span>T</span><span>)</span> <span>new</span> <span>Character</span><span>(</span><span>'\\u0000'</span><span>)</span><span>;</span>\n            <span>}</span><span>else</span> <span>{</span>\n                <span>return</span> <span>null</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "POJO、XML、JavaBean类型转换",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/PojoXmlJavaBean/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/PojoXmlJavaBean/",
      "content_html": "<div><pre><code><span>import</span> <span><span>javax<span>.</span>xml<span>.</span>bind<span>.</span></span><span>JAXBContext</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>xml<span>.</span>bind<span>.</span></span><span>JAXBException</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>xml<span>.</span>bind<span>.</span></span><span>Marshaller</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>xml<span>.</span>bind<span>.</span></span><span>Unmarshaller</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>StringReader</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>StringWriter</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>JaxbXmlUtils</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> <span>DEFAULT_ENCODING</span> <span>=</span> <span>\"UTF-8\"</span><span>;</span>\n\n    <span>/**\n     * pojo转换成xml 默认编码UTF-8\n     *\n     * <span>@param</span> <span>obj</span> 待转化的对象\n     * <span>@return</span> xml格式字符串\n     * <span>@throws</span> <span><span>Exception</span></span> JAXBException\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>convertToXml</span><span>(</span><span>Object</span> obj<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>return</span> <span>convertToXml</span><span>(</span>obj<span>,</span> <span>DEFAULT_ENCODING</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * pojo转换成xml\n     *\n     * <span>@param</span> <span>obj</span> 待转化的对象\n     * <span>@param</span> <span>encoding</span> 编码\n     * <span>@return</span> xml格式字符串\n     * <span>@throws</span> <span><span>Exception</span></span> JAXBException\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>convertToXml</span><span>(</span><span>Object</span> obj<span>,</span> <span>String</span> encoding<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>String</span> result <span>=</span> <span>null</span><span>;</span>\n\n        <span>JAXBContext</span> context <span>=</span> <span>JAXBContext</span><span>.</span><span>newInstance</span><span>(</span>obj<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>Marshaller</span> marshaller <span>=</span> context<span>.</span><span>createMarshaller</span><span>(</span><span>)</span><span>;</span>\n        <span>// 指定是否使用换行和缩排对已编组 XML 数据进行格式化的属性名称。</span>\n        marshaller<span>.</span><span>setProperty</span><span>(</span><span>Marshaller</span><span>.</span><span>JAXB_FORMATTED_OUTPUT</span><span>,</span> <span>true</span><span>)</span><span>;</span>\n        marshaller<span>.</span><span>setProperty</span><span>(</span><span>Marshaller</span><span>.</span><span>JAXB_ENCODING</span><span>,</span> encoding<span>)</span><span>;</span>\n\n        <span>StringWriter</span> writer <span>=</span> <span>new</span> <span>StringWriter</span><span>(</span><span>)</span><span>;</span>\n        marshaller<span>.</span><span>marshal</span><span>(</span>obj<span>,</span> writer<span>)</span><span>;</span>\n        result <span>=</span> writer<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n\n        <span>return</span> result<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * xml转换成JavaBean\n     *\n     * <span>@param</span> <span>xml</span> xml格式字符串\n     * <span>@param</span> <span>t</span> 待转化的对象\n     * <span>@return</span> 转化后的对象\n     * <span>@throws</span> <span><span>Exception</span></span> JAXBException\n     */</span>\n    <span>@SuppressWarnings</span><span>(</span><span>\"unchecked\"</span><span>)</span>\n    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>convertToJavaBean</span><span>(</span><span>String</span> xml<span>,</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> t<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>T</span> obj <span>=</span> <span>null</span><span>;</span>\n        <span>JAXBContext</span> context <span>=</span> <span>JAXBContext</span><span>.</span><span>newInstance</span><span>(</span>t<span>)</span><span>;</span>\n        <span>Unmarshaller</span> unmarshaller <span>=</span> context<span>.</span><span>createUnmarshaller</span><span>(</span><span>)</span><span>;</span>\n        obj <span>=</span> <span>(</span><span>T</span><span>)</span> unmarshaller<span>.</span><span>unmarshal</span><span>(</span><span>new</span> <span>StringReader</span><span>(</span>xml<span>)</span><span>)</span><span>;</span>\n        <span>return</span> obj<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "Redis",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Redis/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Redis/",
      "content_html": "<div><pre><code><span>import</span> <span><span>com<span>.</span>google<span>.</span>gson<span>.</span></span><span>Gson</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span></span><span>Autowired</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>springframework<span>.</span>data<span>.</span>redis<span>.</span>core<span>.</span></span><span>*</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Component</span></span><span>;</span>\n\n<span>import</span> <span><span>java<span>.</span>util<span>.</span>concurrent<span>.</span></span><span>TimeUnit</span></span><span>;</span>\n\n<span>/**\n * Redis工具类\n */</span>\n<span>@Component</span>\n<span>public</span> <span>class</span> <span>RedisUtils</span> <span>{</span>\n    <span>@Autowired</span>\n    <span>private</span> <span>RedisTemplate</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> redisTemplate<span>;</span>\n    <span>@Autowired</span>\n    <span>private</span> <span>ValueOperations</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> valueOperations<span>;</span>\n    <span>@Autowired</span>\n    <span>private</span> <span>HashOperations</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>,</span> <span>Object</span><span>></span></span> hashOperations<span>;</span>\n    <span>@Autowired</span>\n    <span>private</span> <span>ListOperations</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> listOperations<span>;</span>\n    <span>@Autowired</span>\n    <span>private</span> <span>SetOperations</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> setOperations<span>;</span>\n    <span>@Autowired</span>\n    <span>private</span> <span>ZSetOperations</span><span><span>&lt;</span><span>String</span><span>,</span> <span>Object</span><span>></span></span> zSetOperations<span>;</span>\n    <span>/**  默认过期时长，单位：秒 */</span>\n    <span>public</span> <span>final</span> <span>static</span> <span>long</span> <span>DEFAULT_EXPIRE</span> <span>=</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>24</span><span>;</span>\n    <span>/**  不设置过期时长 */</span>\n    <span>public</span> <span>final</span> <span>static</span> <span>long</span> <span>NOT_EXPIRE</span> <span>=</span> <span>-</span><span>1</span><span>;</span>\n    <span>private</span> <span>final</span> <span>static</span> <span>Gson</span> gson <span>=</span> <span>new</span> <span>Gson</span><span>(</span><span>)</span><span>;</span>\n\n    <span>public</span> <span>void</span> <span>set</span><span>(</span><span>String</span> key<span>,</span> <span>Object</span> value<span>,</span> <span>long</span> expire<span>)</span><span>{</span>\n        valueOperations<span>.</span><span>set</span><span>(</span>key<span>,</span> <span>toJson</span><span>(</span>value<span>)</span><span>)</span><span>;</span>\n        <span>if</span><span>(</span>expire <span>!=</span> <span>NOT_EXPIRE</span><span>)</span><span>{</span>\n            redisTemplate<span>.</span><span>expire</span><span>(</span>key<span>,</span> expire<span>,</span> <span>TimeUnit</span><span>.</span><span>SECONDS</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>set</span><span>(</span><span>String</span> key<span>,</span> <span>Object</span> value<span>)</span><span>{</span>\n        <span>set</span><span>(</span>key<span>,</span> value<span>,</span> <span>DEFAULT_EXPIRE</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>get</span><span>(</span><span>String</span> key<span>,</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> clazz<span>,</span> <span>long</span> expire<span>)</span> <span>{</span>\n        <span>String</span> value <span>=</span> valueOperations<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>\n        <span>if</span><span>(</span>expire <span>!=</span> <span>NOT_EXPIRE</span><span>)</span><span>{</span>\n            redisTemplate<span>.</span><span>expire</span><span>(</span>key<span>,</span> expire<span>,</span> <span>TimeUnit</span><span>.</span><span>SECONDS</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> value <span>==</span> <span>null</span> <span>?</span> <span>null</span> <span>:</span> <span>fromJson</span><span>(</span>value<span>,</span> clazz<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>get</span><span>(</span><span>String</span> key<span>,</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> clazz<span>)</span> <span>{</span>\n        <span>return</span> <span>get</span><span>(</span>key<span>,</span> clazz<span>,</span> <span>NOT_EXPIRE</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> key<span>,</span> <span>long</span> expire<span>)</span> <span>{</span>\n        <span>String</span> value <span>=</span> valueOperations<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>\n        <span>if</span><span>(</span>expire <span>!=</span> <span>NOT_EXPIRE</span><span>)</span><span>{</span>\n            redisTemplate<span>.</span><span>expire</span><span>(</span>key<span>,</span> expire<span>,</span> <span>TimeUnit</span><span>.</span><span>SECONDS</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> value<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>String</span> <span>get</span><span>(</span><span>String</span> key<span>)</span> <span>{</span>\n        <span>return</span> <span>get</span><span>(</span>key<span>,</span> <span>NOT_EXPIRE</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>delete</span><span>(</span><span>String</span> key<span>)</span> <span>{</span>\n        redisTemplate<span>.</span><span>delete</span><span>(</span>key<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * Object转成JSON数据\n     */</span>\n    <span>private</span> <span>String</span> <span>toJson</span><span>(</span><span>Object</span> object<span>)</span><span>{</span>\n        <span>if</span><span>(</span>object <span>instanceof</span> <span>Integer</span> <span>||</span> object <span>instanceof</span> <span>Long</span> <span>||</span> object <span>instanceof</span> <span>Float</span> <span>||</span>\n                object <span>instanceof</span> <span>Double</span> <span>||</span> object <span>instanceof</span> <span>Boolean</span> <span>||</span> object <span>instanceof</span> <span>String</span><span>)</span><span>{</span>\n            <span>return</span> <span>String</span><span>.</span><span>valueOf</span><span>(</span>object<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> gson<span>.</span><span>toJson</span><span>(</span>object<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * JSON数据，转成Object\n     */</span>\n    <span>private</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>fromJson</span><span>(</span><span>String</span> json<span>,</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> clazz<span>)</span><span>{</span>\n        <span>return</span> gson<span>.</span><span>fromJson</span><span>(</span>json<span>,</span> clazz<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "人民币大写",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/RmbUpper/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/RmbUpper/",
      "content_html": "<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"数字转换为人民币的大写测试\"</span><span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"193847032471.23 ==> \"</span> <span>+</span> <span>NumberToCN</span><span>.</span><span>numberToCn</span><span>(</span><span>new</span> <span>BigDecimal</span><span>(</span><span>193847032471.23</span><span>)</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>import</span> <span><span>java<span>.</span>math<span>.</span></span><span>BigDecimal</span></span><span>;</span>\n\n<span>/**\n * 数字转换为人民币的大写\n * NumberToCN.java\n *\n */</span>\n<span>public</span> <span>class</span> <span>NumberToCN</span> <span>{</span>\n    <span>/**\n     * 汉语中数字大写\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>String</span><span>[</span><span>]</span> <span>CN_UPPER_NUMBER</span> <span>=</span> <span>{</span> <span>\"零\"</span><span>,</span> <span>\"壹\"</span><span>,</span> <span>\"贰\"</span><span>,</span> <span>\"叁\"</span><span>,</span> <span>\"肆\"</span><span>,</span>\n            <span>\"伍\"</span><span>,</span> <span>\"陆\"</span><span>,</span> <span>\"柒\"</span><span>,</span> <span>\"捌\"</span><span>,</span> <span>\"玖\"</span> <span>}</span><span>;</span>\n    <span>/**\n     * 汉语中货币单位大写，这样的设计类似于占位符\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>String</span><span>[</span><span>]</span> <span>CN_UPPER_MONETRAY_UNIT</span> <span>=</span> <span>{</span> <span>\"分\"</span><span>,</span> <span>\"角\"</span><span>,</span> <span>\"元\"</span><span>,</span>\n            <span>\"拾\"</span><span>,</span> <span>\"佰\"</span><span>,</span> <span>\"仟\"</span><span>,</span> <span>\"万\"</span><span>,</span> <span>\"拾\"</span><span>,</span> <span>\"佰\"</span><span>,</span> <span>\"仟\"</span><span>,</span> <span>\"亿\"</span><span>,</span> <span>\"拾\"</span><span>,</span> <span>\"佰\"</span><span>,</span> <span>\"仟\"</span><span>,</span> <span>\"兆\"</span><span>,</span> <span>\"拾\"</span><span>,</span>\n            <span>\"佰\"</span><span>,</span> <span>\"仟\"</span> <span>}</span><span>;</span>\n    <span>/**\n     * 特殊字符：整\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>String</span> <span>CN_FULL</span> <span>=</span> <span>\"整\"</span><span>;</span>\n    <span>/**\n     * 特殊字符：负\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>String</span> <span>CN_NEGATIVE</span> <span>=</span> <span>\"负\"</span><span>;</span>\n    <span>/**\n     * 金额的精度，默认值为2\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>int</span> <span>MONEY_PRECISION</span> <span>=</span> <span>2</span><span>;</span>\n    <span>/**\n     * 特殊字符：零元整\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>String</span> <span>CN_ZEOR_FULL</span> <span>=</span> <span>\"零元\"</span> <span>+</span> <span>CN_FULL</span><span>;</span>\n\n    <span>/**\n     * 把输入的金额转换为汉语中人民币的大写\n     *\n     * <span>@param</span> <span>numberOfMoney</span>\n     *            输入的金额\n     * <span>@return</span> 对应的汉语大写\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>numberToCn</span><span>(</span><span>BigDecimal</span> numberOfMoney<span>)</span> <span>{</span>\n        <span>StringBuffer</span> sb <span>=</span> <span>new</span> <span>StringBuffer</span><span>(</span><span>)</span><span>;</span>\n        <span>// -1, 0, or 1 as the value of this BigDecimal is negative, zero, or</span>\n        <span>// positive.</span>\n        <span>int</span> signum <span>=</span> numberOfMoney<span>.</span><span>signum</span><span>(</span><span>)</span><span>;</span>\n        <span>// 零元整的情况</span>\n        <span>if</span> <span>(</span>signum <span>==</span> <span>0</span><span>)</span> <span>{</span>\n            <span>return</span> <span>CN_ZEOR_FULL</span><span>;</span>\n        <span>}</span>\n        <span>//这里会进行金额的四舍五入</span>\n        <span>long</span> number <span>=</span> numberOfMoney<span>.</span><span>movePointRight</span><span>(</span><span>MONEY_PRECISION</span><span>)</span>\n                <span>.</span><span>setScale</span><span>(</span><span>0</span><span>,</span> <span>4</span><span>)</span><span>.</span><span>abs</span><span>(</span><span>)</span><span>.</span><span>longValue</span><span>(</span><span>)</span><span>;</span>\n        <span>// 得到小数点后两位值</span>\n        <span>long</span> scale <span>=</span> number <span>%</span> <span>100</span><span>;</span>\n        <span>int</span> numUnit <span>=</span> <span>0</span><span>;</span>\n        <span>int</span> numIndex <span>=</span> <span>0</span><span>;</span>\n        <span>boolean</span> getZero <span>=</span> <span>false</span><span>;</span>\n        <span>// 判断最后两位数，一共有四中情况：00 = 0, 01 = 1, 10, 11</span>\n        <span>if</span> <span>(</span><span>!</span><span>(</span>scale <span>></span> <span>0</span><span>)</span><span>)</span> <span>{</span>\n            numIndex <span>=</span> <span>2</span><span>;</span>\n            number <span>=</span> number <span>/</span> <span>100</span><span>;</span>\n            getZero <span>=</span> <span>true</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span><span>(</span>scale <span>></span> <span>0</span><span>)</span> <span>&amp;&amp;</span> <span>(</span><span>!</span><span>(</span>scale <span>%</span> <span>10</span> <span>></span> <span>0</span><span>)</span><span>)</span><span>)</span> <span>{</span>\n            numIndex <span>=</span> <span>1</span><span>;</span>\n            number <span>=</span> number <span>/</span> <span>10</span><span>;</span>\n            getZero <span>=</span> <span>true</span><span>;</span>\n        <span>}</span>\n        <span>int</span> zeroSize <span>=</span> <span>0</span><span>;</span>\n        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>number <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span>\n                <span>break</span><span>;</span>\n            <span>}</span>\n            <span>// 每次获取到最后一个数</span>\n            numUnit <span>=</span> <span>(</span><span>int</span><span>)</span> <span>(</span>number <span>%</span> <span>10</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>numUnit <span>></span> <span>0</span><span>)</span> <span>{</span>\n                <span>if</span> <span>(</span><span>(</span>numIndex <span>==</span> <span>9</span><span>)</span> <span>&amp;&amp;</span> <span>(</span>zeroSize <span>>=</span> <span>3</span><span>)</span><span>)</span> <span>{</span>\n                    sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_MONETRAY_UNIT</span><span>[</span><span>6</span><span>]</span><span>)</span><span>;</span>\n                <span>}</span>\n                <span>if</span> <span>(</span><span>(</span>numIndex <span>==</span> <span>13</span><span>)</span> <span>&amp;&amp;</span> <span>(</span>zeroSize <span>>=</span> <span>3</span><span>)</span><span>)</span> <span>{</span>\n                    sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_MONETRAY_UNIT</span><span>[</span><span>10</span><span>]</span><span>)</span><span>;</span>\n                <span>}</span>\n                sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_MONETRAY_UNIT</span><span>[</span>numIndex<span>]</span><span>)</span><span>;</span>\n                sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_NUMBER</span><span>[</span>numUnit<span>]</span><span>)</span><span>;</span>\n                getZero <span>=</span> <span>false</span><span>;</span>\n                zeroSize <span>=</span> <span>0</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>++</span>zeroSize<span>;</span>\n                <span>if</span> <span>(</span><span>!</span><span>(</span>getZero<span>)</span><span>)</span> <span>{</span>\n                    sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_NUMBER</span><span>[</span>numUnit<span>]</span><span>)</span><span>;</span>\n                <span>}</span>\n                <span>if</span> <span>(</span>numIndex <span>==</span> <span>2</span><span>)</span> <span>{</span>\n                    <span>if</span> <span>(</span>number <span>></span> <span>0</span><span>)</span> <span>{</span>\n                        sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_MONETRAY_UNIT</span><span>[</span>numIndex<span>]</span><span>)</span><span>;</span>\n                    <span>}</span>\n                <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>(</span><span>(</span>numIndex <span>-</span> <span>2</span><span>)</span> <span>%</span> <span>4</span> <span>==</span> <span>0</span><span>)</span> <span>&amp;&amp;</span> <span>(</span>number <span>%</span> <span>1000</span> <span>></span> <span>0</span><span>)</span><span>)</span> <span>{</span>\n                    sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_UPPER_MONETRAY_UNIT</span><span>[</span>numIndex<span>]</span><span>)</span><span>;</span>\n                <span>}</span>\n                getZero <span>=</span> <span>true</span><span>;</span>\n            <span>}</span>\n            <span>// 让number每次都去掉最后一个数</span>\n            number <span>=</span> number <span>/</span> <span>10</span><span>;</span>\n            <span>++</span>numIndex<span>;</span>\n        <span>}</span>\n        <span>// 如果signum == -1，则说明输入的数字为负数，就在最前面追加特殊字符：负</span>\n        <span>if</span> <span>(</span>signum <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>\n            sb<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>CN_NEGATIVE</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>// 输入的数字小数点后两位为\"00\"的情况，则要在最后追加特殊字符：整</span>\n        <span>if</span> <span>(</span><span>!</span><span>(</span>scale <span>></span> <span>0</span><span>)</span><span>)</span> <span>{</span>\n            sb<span>.</span><span>append</span><span>(</span><span>CN_FULL</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> sb<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "RSA加解密",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/RSA/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/RSA/",
      "content_html": "<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>try</span> <span>{</span>\n        <span>// 生成密钥对</span>\n        <span>KeyPair</span> keyPair <span>=</span> <span>getKeyPair</span><span>(</span><span>)</span><span>;</span>\n        <span>String</span> privateKey <span>=</span> <span>new</span> <span>String</span><span>(</span><span>Base64</span><span>.</span><span>encodeBase64</span><span>(</span>keyPair<span>.</span><span>getPrivate</span><span>(</span><span>)</span><span>.</span><span>getEncoded</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n        <span>String</span> publicKey <span>=</span> <span>new</span> <span>String</span><span>(</span><span>Base64</span><span>.</span><span>encodeBase64</span><span>(</span>keyPair<span>.</span><span>getPublic</span><span>(</span><span>)</span><span>.</span><span>getEncoded</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"私钥:\"</span> <span>+</span> privateKey<span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"公钥:\"</span> <span>+</span> publicKey<span>)</span><span>;</span>\n        <span>// RSA加密 待加密的文字内容</span>\n        <span>String</span> data <span>=</span> <span>\"123456\"</span><span>;</span>\n        <span>String</span> encryptData <span>=</span> <span>encrypt</span><span>(</span>data<span>,</span> <span>getPublicKey</span><span>(</span>publicKey<span>)</span><span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"加密前内容:\"</span> <span>+</span> data<span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"加密后内容:\"</span> <span>+</span> encryptData<span>)</span><span>;</span>\n        <span>// RSA解密</span>\n        <span>String</span> decryptData <span>=</span> <span>decrypt</span><span>(</span>encryptData<span>,</span> <span>getPrivateKey</span><span>(</span>privateKey<span>)</span><span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"解密后内容:\"</span> <span>+</span> decryptData<span>)</span><span>;</span>\n\n        <span>// RSA签名</span>\n        <span>String</span> sign <span>=</span> <span>sign</span><span>(</span>data<span>,</span> <span>getPrivateKey</span><span>(</span>privateKey<span>)</span><span>)</span><span>;</span>\n        <span>// RSA验签</span>\n        <span>boolean</span> result <span>=</span> <span>verify</span><span>(</span>data<span>,</span> <span>getPublicKey</span><span>(</span>publicKey<span>)</span><span>,</span> sign<span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>\"验签结果:\"</span> <span>+</span> result<span>)</span><span>;</span>\n    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>\n        e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>\"加解密异常\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>ByteArrayOutputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span></span><span>KeyFactory</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span></span><span>KeyPair</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span></span><span>KeyPairGenerator</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span></span><span>PrivateKey</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span></span><span>PublicKey</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span></span><span>Signature</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span>spec<span>.</span></span><span>PKCS8EncodedKeySpec</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>security<span>.</span>spec<span>.</span></span><span>X509EncodedKeySpec</span></span><span>;</span>\n<span>import</span> <span><span>javax<span>.</span>crypto<span>.</span></span><span>Cipher</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>commons<span>.</span>codec<span>.</span>binary<span>.</span></span><span>Base64</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>RSAUtil</span> <span>{</span>\n\n    <span>/**\n     * RSA最大加密明文大小\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>int</span> <span>MAX_ENCRYPT_BLOCK</span> <span>=</span> <span>64</span><span>;</span>\n\n    <span>/**\n     * RSA最大解密密文大小\n     */</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>int</span> <span>MAX_DECRYPT_BLOCK</span> <span>=</span> <span>75</span><span>;</span>\n\n    <span>/**\n     * 获取密钥对\n     *\n     * <span>@return</span> 密钥对\n     */</span>\n    <span>public</span> <span>static</span> <span>KeyPair</span> <span>getKeyPair</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>KeyPairGenerator</span> generator <span>=</span> <span>KeyPairGenerator</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        generator<span>.</span><span>initialize</span><span>(</span><span>512</span><span>)</span><span>;</span>\n        <span>return</span> generator<span>.</span><span>generateKeyPair</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 获取私钥\n     *\n     * <span>@param</span> <span>privateKey</span> 私钥字符串\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>PrivateKey</span> <span>getPrivateKey</span><span>(</span><span>String</span> privateKey<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>KeyFactory</span> keyFactory <span>=</span> <span>KeyFactory</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        <span>byte</span><span>[</span><span>]</span> decodedKey <span>=</span> <span>Base64</span><span>.</span><span>decodeBase64</span><span>(</span>privateKey<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>PKCS8EncodedKeySpec</span> keySpec <span>=</span> <span>new</span> <span>PKCS8EncodedKeySpec</span><span>(</span>decodedKey<span>)</span><span>;</span>\n        <span>return</span> keyFactory<span>.</span><span>generatePrivate</span><span>(</span>keySpec<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 获取公钥\n     *\n     * <span>@param</span> <span>publicKey</span> 公钥字符串\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>PublicKey</span> <span>getPublicKey</span><span>(</span><span>String</span> publicKey<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>KeyFactory</span> keyFactory <span>=</span> <span>KeyFactory</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        <span>byte</span><span>[</span><span>]</span> decodedKey <span>=</span> <span>Base64</span><span>.</span><span>decodeBase64</span><span>(</span>publicKey<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>X509EncodedKeySpec</span> keySpec <span>=</span> <span>new</span> <span>X509EncodedKeySpec</span><span>(</span>decodedKey<span>)</span><span>;</span>\n        <span>return</span> keyFactory<span>.</span><span>generatePublic</span><span>(</span>keySpec<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * RSA加密\n     *\n     * <span>@param</span> <span>data</span> 待加密数据\n     * <span>@param</span> <span>publicKey</span> 公钥\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>encrypt</span><span>(</span><span>String</span> data<span>,</span> <span>PublicKey</span> publicKey<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>Cipher</span> cipher <span>=</span> <span>Cipher</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        cipher<span>.</span><span>init</span><span>(</span><span>Cipher</span><span>.</span><span>ENCRYPT_MODE</span><span>,</span> publicKey<span>)</span><span>;</span>\n        <span>int</span> inputLen <span>=</span> data<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>.</span>length<span>;</span>\n        <span>ByteArrayOutputStream</span> out <span>=</span> <span>new</span> <span>ByteArrayOutputStream</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> offset <span>=</span> <span>0</span><span>;</span>\n        <span>byte</span><span>[</span><span>]</span> cache<span>;</span>\n        <span>int</span> i <span>=</span> <span>0</span><span>;</span>\n        <span>// 对数据分段加密</span>\n        <span>while</span> <span>(</span>inputLen <span>-</span> offset <span>></span> <span>0</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>inputLen <span>-</span> offset <span>></span> <span>MAX_ENCRYPT_BLOCK</span><span>)</span> <span>{</span>\n                cache <span>=</span> cipher<span>.</span><span>doFinal</span><span>(</span>data<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>,</span> offset<span>,</span> <span>MAX_ENCRYPT_BLOCK</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                cache <span>=</span> cipher<span>.</span><span>doFinal</span><span>(</span>data<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>,</span> offset<span>,</span> inputLen <span>-</span> offset<span>)</span><span>;</span>\n            <span>}</span>\n            out<span>.</span><span>write</span><span>(</span>cache<span>,</span> <span>0</span><span>,</span> cache<span>.</span>length<span>)</span><span>;</span>\n            i<span>++</span><span>;</span>\n            offset <span>=</span> i <span>*</span> <span>MAX_ENCRYPT_BLOCK</span><span>;</span>\n        <span>}</span>\n        <span>byte</span><span>[</span><span>]</span> encryptedData <span>=</span> out<span>.</span><span>toByteArray</span><span>(</span><span>)</span><span>;</span>\n        out<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n        <span>// 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串</span>\n        <span>// 加密后的字符串</span>\n        <span>return</span> <span>new</span> <span>String</span><span>(</span><span>Base64</span><span>.</span><span>encodeBase64String</span><span>(</span>encryptedData<span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * RSA解密\n     *\n     * <span>@param</span> <span>data</span> 待解密数据\n     * <span>@param</span> <span>privateKey</span> 私钥\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>decrypt</span><span>(</span><span>String</span> data<span>,</span> <span>PrivateKey</span> privateKey<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>Cipher</span> cipher <span>=</span> <span>Cipher</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        cipher<span>.</span><span>init</span><span>(</span><span>Cipher</span><span>.</span><span>DECRYPT_MODE</span><span>,</span> privateKey<span>)</span><span>;</span>\n        <span>byte</span><span>[</span><span>]</span> dataBytes <span>=</span> <span>Base64</span><span>.</span><span>decodeBase64</span><span>(</span>data<span>)</span><span>;</span>\n        <span>int</span> inputLen <span>=</span> dataBytes<span>.</span>length<span>;</span>\n        <span>ByteArrayOutputStream</span> out <span>=</span> <span>new</span> <span>ByteArrayOutputStream</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> offset <span>=</span> <span>0</span><span>;</span>\n        <span>byte</span><span>[</span><span>]</span> cache<span>;</span>\n        <span>int</span> i <span>=</span> <span>0</span><span>;</span>\n        <span>// 对数据分段解密</span>\n        <span>while</span> <span>(</span>inputLen <span>-</span> offset <span>></span> <span>0</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>inputLen <span>-</span> offset <span>></span> <span>MAX_DECRYPT_BLOCK</span><span>)</span> <span>{</span>\n                cache <span>=</span> cipher<span>.</span><span>doFinal</span><span>(</span>dataBytes<span>,</span> offset<span>,</span> <span>MAX_DECRYPT_BLOCK</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                cache <span>=</span> cipher<span>.</span><span>doFinal</span><span>(</span>dataBytes<span>,</span> offset<span>,</span> inputLen <span>-</span> offset<span>)</span><span>;</span>\n            <span>}</span>\n            out<span>.</span><span>write</span><span>(</span>cache<span>,</span> <span>0</span><span>,</span> cache<span>.</span>length<span>)</span><span>;</span>\n            i<span>++</span><span>;</span>\n            offset <span>=</span> i <span>*</span> <span>MAX_DECRYPT_BLOCK</span><span>;</span>\n        <span>}</span>\n        <span>byte</span><span>[</span><span>]</span> decryptedData <span>=</span> out<span>.</span><span>toByteArray</span><span>(</span><span>)</span><span>;</span>\n        out<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n        <span>// 解密后的内容</span>\n        <span>return</span> <span>new</span> <span>String</span><span>(</span>decryptedData<span>,</span> <span>\"UTF-8\"</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 签名\n     *\n     * <span>@param</span> <span>data</span> 待签名数据\n     * <span>@param</span> <span>privateKey</span> 私钥\n     * <span>@return</span> 签名\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>sign</span><span>(</span><span>String</span> data<span>,</span> <span>PrivateKey</span> privateKey<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>byte</span><span>[</span><span>]</span> keyBytes <span>=</span> privateKey<span>.</span><span>getEncoded</span><span>(</span><span>)</span><span>;</span>\n        <span>PKCS8EncodedKeySpec</span> keySpec <span>=</span> <span>new</span> <span>PKCS8EncodedKeySpec</span><span>(</span>keyBytes<span>)</span><span>;</span>\n        <span>KeyFactory</span> keyFactory <span>=</span> <span>KeyFactory</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        <span>PrivateKey</span> key <span>=</span> keyFactory<span>.</span><span>generatePrivate</span><span>(</span>keySpec<span>)</span><span>;</span>\n        <span>Signature</span> signature <span>=</span> <span>Signature</span><span>.</span><span>getInstance</span><span>(</span><span>\"MD5withRSA\"</span><span>)</span><span>;</span>\n        signature<span>.</span><span>initSign</span><span>(</span>key<span>)</span><span>;</span>\n        signature<span>.</span><span>update</span><span>(</span>data<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>return</span> <span>new</span> <span>String</span><span>(</span><span>Base64</span><span>.</span><span>encodeBase64</span><span>(</span>signature<span>.</span><span>sign</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验签\n     *\n     * <span>@param</span> <span>srcData</span> 原始字符串\n     * <span>@param</span> <span>publicKey</span> 公钥\n     * <span>@param</span> <span>sign</span> 签名\n     * <span>@return</span> 是否验签通过\n     */</span>\n    <span>public</span> <span>static</span> <span>boolean</span> <span>verify</span><span>(</span><span>String</span> srcData<span>,</span> <span>PublicKey</span> publicKey<span>,</span> <span>String</span> sign<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>byte</span><span>[</span><span>]</span> keyBytes <span>=</span> publicKey<span>.</span><span>getEncoded</span><span>(</span><span>)</span><span>;</span>\n        <span>X509EncodedKeySpec</span> keySpec <span>=</span> <span>new</span> <span>X509EncodedKeySpec</span><span>(</span>keyBytes<span>)</span><span>;</span>\n        <span>KeyFactory</span> keyFactory <span>=</span> <span>KeyFactory</span><span>.</span><span>getInstance</span><span>(</span><span>\"RSA\"</span><span>)</span><span>;</span>\n        <span>PublicKey</span> key <span>=</span> keyFactory<span>.</span><span>generatePublic</span><span>(</span>keySpec<span>)</span><span>;</span>\n        <span>Signature</span> signature <span>=</span> <span>Signature</span><span>.</span><span>getInstance</span><span>(</span><span>\"MD5withRSA\"</span><span>)</span><span>;</span>\n        signature<span>.</span><span>initVerify</span><span>(</span>key<span>)</span><span>;</span>\n        signature<span>.</span><span>update</span><span>(</span>srcData<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>return</span> signature<span>.</span><span>verify</span><span>(</span><span>Base64</span><span>.</span><span>decodeBase64</span><span>(</span>sign<span>.</span><span>getBytes</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "Sftp",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Sftp/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Sftp/",
      "content_html": "<div><pre><code><span>&lt;</span><span>!</span><span>--</span> <span>Sftp</span>工具 <span>--</span><span>></span>\n<span><span>&lt;</span>dependency<span>></span></span>\n    <span><span>&lt;</span>groupId<span>></span></span>com<span>.</span>jcraft<span>&lt;</span><span>/</span>groupId<span>></span>\n    <span><span>&lt;</span>artifactId<span>></span></span>jsch<span>&lt;</span><span>/</span>artifactId<span>></span>\n    <span><span>&lt;</span>version<span>></span></span><span>0.1</span><span>.54</span><span>&lt;</span><span>/</span>version<span>></span>\n<span>&lt;</span><span>/</span>dependency<span>></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>File</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>FileOutputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>ArrayList</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Iterator</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>List</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Properties</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Vector</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>apache<span>.</span>log4j<span>.</span></span><span>Logger</span></span><span>;</span>\n<span>import</span> <span><span>com<span>.</span>jcraft<span>.</span>jsch<span>.</span></span><span>*</span></span><span>;</span>\n<span>import</span> <span><span>com<span>.</span>jcraft<span>.</span>jsch<span>.</span></span><span>ChannelSftp</span><span>.</span><span>LsEntry</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>SftpClientUtil</span>\n<span>{</span>\n    <span>private</span> <span>static</span> <span>final</span> <span>Logger</span> logger <span>=</span> <span>Logger</span><span>.</span><span>getLogger</span><span>(</span><span>SftpClientUtil</span><span>.</span><span>class</span><span>)</span><span>;</span>\n\n    <span>/** Sftp */</span>\n    <span>private</span> <span>ChannelSftp</span> sftp <span>=</span> <span>null</span><span>;</span>\n    <span>/** 主机 */</span>\n    <span>private</span> <span>String</span> host <span>=</span> <span>\"\"</span><span>;</span>\n    <span>/** 端口 */</span>\n    <span>private</span> <span>int</span> port <span>=</span> <span>0</span><span>;</span>\n    <span>/** 用户名 */</span>\n    <span>private</span> <span>String</span> username <span>=</span> <span>\"\"</span><span>;</span>\n    <span>/** 密码 */</span>\n    <span>private</span> <span>String</span> password <span>=</span> <span>\"\"</span><span>;</span>\n\n    <span>/**\n     * 构造函数\n     *\n     * <span>@param</span> <span>host</span> 主机\n     * <span>@param</span> <span>port</span> 端口\n     * <span>@param</span> <span>username</span> 用户名\n     * <span>@param</span> <span>password</span> 密码\n     *\n     */</span>\n    <span>public</span> <span>SftpClientUtil</span><span>(</span><span>String</span> host<span>,</span> <span>int</span> port<span>,</span> <span>String</span> username<span>,</span> <span>String</span> password<span>)</span>\n    <span>{</span>\n        <span>this</span><span>.</span>host <span>=</span> host<span>;</span>\n        <span>this</span><span>.</span>port <span>=</span> port<span>;</span>\n        <span>this</span><span>.</span>username <span>=</span> username<span>;</span>\n        <span>this</span><span>.</span>password <span>=</span> password<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 连接sftp服务器\n     *\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>void</span> <span>connect</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n\n        <span>JSch</span> jsch <span>=</span> <span>new</span> <span>JSch</span><span>(</span><span>)</span><span>;</span>\n        <span>Session</span> sshSession <span>=</span> jsch<span>.</span><span>getSession</span><span>(</span><span>this</span><span>.</span>username<span>,</span> <span>this</span><span>.</span>host<span>,</span> <span>this</span><span>.</span>port<span>)</span><span>;</span>\n        logger<span>.</span><span>debug</span><span>(</span><span>SftpClientUtil</span><span>.</span><span>class</span> <span>+</span> <span>\"Session created.\"</span><span>)</span><span>;</span>\n\n        sshSession<span>.</span><span>setPassword</span><span>(</span>password<span>)</span><span>;</span>\n        <span>Properties</span> sshConfig <span>=</span> <span>new</span> <span>Properties</span><span>(</span><span>)</span><span>;</span>\n        sshConfig<span>.</span><span>put</span><span>(</span><span>\"StrictHostKeyChecking\"</span><span>,</span> <span>\"no\"</span><span>)</span><span>;</span>\n        sshSession<span>.</span><span>setConfig</span><span>(</span>sshConfig<span>)</span><span>;</span>\n        sshSession<span>.</span><span>connect</span><span>(</span><span>20000</span><span>)</span><span>;</span>\n        logger<span>.</span><span>debug</span><span>(</span><span>SftpClientUtil</span><span>.</span><span>class</span> <span>+</span> <span>\" Session connected.\"</span><span>)</span><span>;</span>\n\n        logger<span>.</span><span>debug</span><span>(</span><span>SftpClientUtil</span><span>.</span><span>class</span> <span>+</span> <span>\" Opening Channel.\"</span><span>)</span><span>;</span>\n        <span>Channel</span> channel <span>=</span> sshSession<span>.</span><span>openChannel</span><span>(</span><span>\"sftp\"</span><span>)</span><span>;</span>\n        channel<span>.</span><span>connect</span><span>(</span><span>)</span><span>;</span>\n        <span>this</span><span>.</span>sftp <span>=</span> <span>(</span><span>ChannelSftp</span><span>)</span> channel<span>;</span>\n        logger<span>.</span><span>debug</span><span>(</span><span>SftpClientUtil</span><span>.</span><span>class</span> <span>+</span> <span>\" Connected to \"</span> <span>+</span> <span>this</span><span>.</span>host <span>+</span> <span>\".\"</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * Disconnect with server\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>void</span> <span>disconnect</span><span>(</span><span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n        <span>if</span> <span>(</span><span>this</span><span>.</span>sftp <span>!=</span> <span>null</span><span>)</span>\n        <span>{</span>\n            <span>if</span> <span>(</span><span>this</span><span>.</span>sftp<span>.</span><span>isConnected</span><span>(</span><span>)</span><span>)</span>\n            <span>{</span>\n                <span>this</span><span>.</span>sftp<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span>sftp<span>.</span><span>isClosed</span><span>(</span><span>)</span><span>)</span>\n            <span>{</span>\n                logger<span>.</span><span>debug</span><span>(</span><span>SftpClientUtil</span><span>.</span><span>class</span> <span>+</span> <span>\" sftp is closed already\"</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 下载单个文件\n     *\n     * <span>@param</span> <span>directory</span> 下载目录\n     * <span>@param</span> <span>downloadFile</span> 下载的文件\n     * <span>@param</span> <span>saveDirectory</span> 存在本地的路径\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>void</span> <span>download</span><span>(</span><span>String</span> directory<span>,</span> <span>String</span> downloadFile<span>,</span> <span>String</span> saveDirectory<span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n        <span>File</span> pathFile <span>=</span> <span>new</span> <span>File</span><span>(</span>saveDirectory<span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>!</span>pathFile<span>.</span><span>exists</span><span>(</span><span>)</span><span>)</span>\n        <span>{</span>\n            pathFile<span>.</span><span>mkdirs</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>String</span> saveFile <span>=</span> saveDirectory <span>+</span> <span>\"//\"</span> <span>+</span> downloadFile<span>;</span>\n        <span>this</span><span>.</span>sftp<span>.</span><span>cd</span><span>(</span>directory<span>)</span><span>;</span>\n        <span>File</span> file <span>=</span> <span>new</span> <span>File</span><span>(</span>saveFile<span>)</span><span>;</span>\n        <span>this</span><span>.</span>sftp<span>.</span><span>get</span><span>(</span>downloadFile<span>,</span> <span>new</span> <span>FileOutputStream</span><span>(</span>file<span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 下载目录下全部文件\n     *\n     * <span>@param</span> <span>directory</span> 下载目录\n     * <span>@param</span> <span>saveDirectory</span> 存在本地的路径\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>void</span> <span>downloadByDirectory</span><span>(</span><span>String</span> directory<span>,</span> <span>String</span> saveDirectory<span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n        <span>String</span> downloadFile <span>=</span> <span>\"\"</span><span>;</span>\n        <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> downloadFileList <span>=</span> <span>this</span><span>.</span><span>listFiles</span><span>(</span>directory<span>)</span><span>;</span>\n        <span>Iterator</span><span><span>&lt;</span><span>String</span><span>></span></span> it <span>=</span> downloadFileList<span>.</span><span>iterator</span><span>(</span><span>)</span><span>;</span>\n        <span>while</span> <span>(</span>it<span>.</span><span>hasNext</span><span>(</span><span>)</span><span>)</span>\n        <span>{</span>\n            downloadFile <span>=</span> it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>downloadFile<span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>indexOf</span><span>(</span><span>\".\"</span><span>)</span> <span>&lt;</span> <span>0</span><span>)</span>\n            <span>{</span>\n                <span>continue</span><span>;</span>\n            <span>}</span>\n            <span>this</span><span>.</span><span>download</span><span>(</span>directory<span>,</span> downloadFile<span>,</span> saveDirectory<span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 新建子目录\n     *\n     * <span>@param</span> <span>dst</span> 远程服务器路径\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>void</span> <span>mkdir</span><span>(</span><span>String</span> dst<span>,</span> <span>String</span> subDir<span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n        <span>this</span><span>.</span>sftp<span>.</span><span>cd</span><span>(</span>dst<span>)</span><span>;</span>\n        <span>try</span> <span>{</span>\n            <span>if</span><span>(</span><span>this</span><span>.</span>sftp<span>.</span><span>ls</span><span>(</span>subDir<span>)</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>\n                <span>return</span><span>;</span>\n            <span>}</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>SftpException</span> se<span>)</span> <span>{</span>\n            logger<span>.</span><span>error</span><span>(</span>se<span>.</span><span>getMessage</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>this</span><span>.</span>sftp<span>.</span><span>mkdir</span><span>(</span>subDir<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 上传单个文件\n     *\n     * <span>@param</span> <span>src</span> 本地文件\n     * <span>@param</span> <span>dst</span> 远程服务器路径\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>void</span> <span>upload</span><span>(</span><span>String</span> src<span>,</span> <span>String</span> dst<span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n        <span>this</span><span>.</span>sftp<span>.</span><span>put</span><span>(</span>src<span>,</span> dst<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 列出目录下的文件\n     *\n     * <span>@param</span> <span>directory</span> 要列出的目录\n     * <span>@return</span> list 文件名列表\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>@SuppressWarnings</span><span>(</span><span>\"unchecked\"</span><span>)</span>\n    <span>public</span> <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>listFiles</span><span>(</span><span>String</span> directory<span>)</span> <span>throws</span> <span>Exception</span>\n    <span>{</span>\n        <span>Vector</span> fileList<span>;</span>\n        <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> fileNameList <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        fileList <span>=</span> <span>this</span><span>.</span>sftp<span>.</span><span>ls</span><span>(</span>directory<span>)</span><span>;</span>\n        <span>Iterator</span> it <span>=</span> fileList<span>.</span><span>iterator</span><span>(</span><span>)</span><span>;</span>\n        <span>while</span> <span>(</span>it<span>.</span><span>hasNext</span><span>(</span><span>)</span><span>)</span>\n        <span>{</span>\n            <span>String</span> fileName <span>=</span><span>(</span><span>(</span><span>LsEntry</span><span>)</span> it<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>.</span><span>getFilename</span><span>(</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span><span>\".\"</span><span>.</span><span>equals</span><span>(</span>fileName<span>)</span> <span>||</span> <span>\"..\"</span><span>.</span><span>equals</span><span>(</span>fileName<span>)</span><span>)</span>\n            <span>{</span>\n                <span>continue</span><span>;</span>\n            <span>}</span>\n            fileNameList<span>.</span><span>add</span><span>(</span>fileName<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> fileNameList<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>ChannelSftp</span> <span>getSftp</span><span>(</span><span>)</span>\n    <span>{</span>\n        <span>return</span> sftp<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>setSftp</span><span>(</span><span>ChannelSftp</span> sftp<span>)</span>\n    <span>{</span>\n        <span>this</span><span>.</span>sftp <span>=</span> sftp<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "SMS",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/SMS/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/SMS/",
      "content_html": "<div><pre><code><span>import</span> <span><span>com<span>.</span>alibaba<span>.</span>fastjson<span>.</span></span><span>JSON</span></span><span>;</span>\n<span>import</span> <span><span>io<span>.</span>easy<span>.</span>modules<span>.</span>sys<span>.</span>entity<span>.</span></span><span>SysSmsLogEntity</span></span><span>;</span>\n<span>import</span> <span><span>io<span>.</span>easy<span>.</span>modules<span>.</span>sys<span>.</span>entity<span>.</span></span><span>SysSmsResponseEntity</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>slf4j<span>.</span></span><span>Logger</span></span><span>;</span>\n<span>import</span> <span><span>org<span>.</span>slf4j<span>.</span></span><span>LoggerFactory</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>IOException</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Date</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>HashMap</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>List</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Map</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>SMSUtils</span> <span>{</span>\n\n    <span>private</span> <span>static</span> <span>Logger</span> _logger <span>=</span> <span>LoggerFactory</span><span>.</span><span>getLogger</span><span>(</span><span>SMSUtils</span><span>.</span><span>class</span><span>)</span><span>;</span>\n    <span>public</span> <span>enum</span> <span>SmsConfigType</span><span>{</span>\n        <span>SEND_CODE</span><span>(</span><span>1</span><span>)</span><span>,</span> <span>CHECK_CODE</span><span>(</span><span>2</span><span>)</span><span>,</span> <span>SEND_SMS</span><span>(</span><span>3</span><span>)</span><span>;</span>\n        <span>private</span> <span>int</span> index <span>;</span>\n        <span>public</span> <span>int</span> <span>getIndex</span><span>(</span><span>)</span> <span>{</span>\n            <span>return</span> index<span>;</span>\n        <span>}</span>\n        <span>private</span> <span>SmsConfigType</span><span>(</span> <span>int</span> index <span>)</span><span>{</span>\n            <span>this</span><span>.</span>index <span>=</span> index <span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 发送短信消息\n     * <span>@param</span> <span>apiFormat</span> API地址格式\n     * <span>@param</span> <span>phone</span> 手机号码\n     * <span>@return</span> 响应结果\n     */</span>\n    <span>public</span> <span>static</span> <span>SysSmsLogEntity</span> <span>sendSMSCode</span><span>(</span><span>String</span> apiFormat<span>,</span> <span>String</span> phone<span>)</span> <span>{</span>\n        phone <span>=</span> <span>StringUtils</span><span>.</span><span>replaceBlank</span><span>(</span>phone<span>)</span><span>;</span>\n        <span>if</span><span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>phone<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>// 构建用于替换字典</span>\n        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> matchReplaceList <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        matchReplaceList<span>.</span><span>put</span><span>(</span><span>\"param1\"</span><span>,</span> phone<span>)</span><span>;</span>\n        <span>String</span> url <span>=</span> <span>StringUtils</span><span>.</span><span>parseString</span><span>(</span>apiFormat<span>,</span> matchReplaceList<span>)</span><span>;</span>\n        <span>String</span> res <span>=</span> <span>HttpUtils</span><span>.</span><span>doGet</span><span>(</span>url<span>)</span><span>;</span>\n        <span>// [{\"code\":\"00\",\"sId\":\"2015072231000100000065\"}]</span>\n        <span>List</span><span><span>&lt;</span><span>SysSmsLogEntity</span><span>></span></span> source <span>=</span> <span>JSON</span><span>.</span><span>parseArray</span><span>(</span>res<span>,</span> <span>SysSmsLogEntity</span><span>.</span><span>class</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>source <span>!=</span> <span>null</span> <span>&amp;&amp;</span> source<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>\n            <span>SysSmsLogEntity</span> result <span>=</span> source<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>\n            result<span>.</span><span>setCallUrl</span><span>(</span>url<span>)</span><span>;</span>\n            result<span>.</span><span>setMobile</span><span>(</span>phone<span>)</span><span>;</span>\n            <span>return</span> result<span>;</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 校验短信验证码\n     * <span>@param</span> <span>apiFormat</span> API地址格式\n     * <span>@param</span> <span>phone</span> 手机号\n     * <span>@param</span> <span>smsCode</span> 验证码\n     * <span>@return</span> 响应结果\n     */</span>\n    <span>public</span> <span>static</span> <span>SysSmsLogEntity</span> <span>checkSMSCode</span><span>(</span><span>String</span> apiFormat<span>,</span> <span>String</span> phone<span>,</span> <span>String</span> smsCode<span>)</span> <span>{</span>\n        phone <span>=</span> <span>StringUtils</span><span>.</span><span>replaceBlank</span><span>(</span>phone<span>)</span><span>;</span>\n        smsCode <span>=</span> <span>StringUtils</span><span>.</span><span>replaceBlank</span><span>(</span>smsCode<span>)</span><span>;</span>\n        <span>if</span><span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>phone<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>//http://120.197.89.93:80/EOPS1.0/captcha/auth/手机号码;callerId=param2;password=param3;randomCode=param4</span>\n        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> matchReplaceList <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        matchReplaceList<span>.</span><span>put</span><span>(</span><span>\"param1\"</span><span>,</span> phone<span>)</span><span>;</span>\n        matchReplaceList<span>.</span><span>put</span><span>(</span><span>\"param4\"</span><span>,</span> smsCode<span>)</span><span>;</span>\n        <span>String</span> url <span>=</span> <span>StringUtils</span><span>.</span><span>parseString</span><span>(</span>apiFormat<span>,</span> matchReplaceList<span>)</span><span>;</span>\n        <span>String</span> res <span>=</span> <span>HttpUtils</span><span>.</span><span>doGet</span><span>(</span>url<span>)</span><span>;</span>\n        <span>SysSmsLogEntity</span> result <span>=</span> <span>new</span> <span>SysSmsLogEntity</span><span>(</span><span>)</span><span>;</span>\n        result<span>.</span><span>setCode</span><span>(</span>res<span>)</span><span>;</span>\n        result<span>.</span><span>setCallUrl</span><span>(</span>url<span>)</span><span>;</span>\n        result<span>.</span><span>setMobile</span><span>(</span>phone<span>)</span><span>;</span>\n        <span>return</span> result<span>;</span>\n    <span>}</span>\n\n\n    <span>/**\n     * 发送单条模版短信\n     * <span>@param</span> <span>apiUrl</span> 请求地址\n     * <span>@param</span> <span>requestParams</span> 请求参数\n     * <span>@param</span> <span>phone</span> 手机号码\n     * <span>@return</span> 处理过结果\n     * <span>@throws</span> <span><span>IOException</span></span>\n     */</span>\n    <span>public</span> <span>static</span> <span>SysSmsLogEntity</span> <span>sendSMS</span><span>(</span><span>String</span> apiUrl<span>,</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> requestParams<span>,</span> <span>String</span> phone<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>\n        phone <span>=</span> <span>StringUtils</span><span>.</span><span>replaceBlank</span><span>(</span>phone<span>)</span><span>;</span>\n        <span>if</span><span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>phone<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>}</span>\n        <span>String</span> res <span>=</span> <span>HttpUtils</span><span>.</span><span>sendSMS2</span><span>(</span>apiUrl<span>,</span> requestParams<span>)</span><span>;</span>\n        <span>// [{\"code\":\"00\",\"sId\":\"2015072231000100000065\"}]</span>\n        <span>List</span><span><span>&lt;</span><span>SysSmsLogEntity</span><span>></span></span> source <span>=</span> <span>JSON</span><span>.</span><span>parseArray</span><span>(</span>res<span>,</span> <span>SysSmsLogEntity</span><span>.</span><span>class</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>source <span>!=</span> <span>null</span> <span>&amp;&amp;</span> source<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>\n            <span>SysSmsLogEntity</span> result <span>=</span> source<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>\n            result<span>.</span><span>setCallUrl</span><span>(</span>apiUrl<span>)</span><span>;</span>\n            result<span>.</span><span>setMobile</span><span>(</span>phone<span>)</span><span>;</span>\n            <span>return</span> result<span>;</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 处理验证码结果\n     * <span>@param</span> <span>smsResponseEntityList</span> 配置列表\n     * <span>@param</span> <span>code</span> 短信响应code\n     * <span>@param</span> <span>configId</span> 选定配置Id\n     * <span>@return</span> 响应结果\n     */</span>\n    <span>public</span> <span>static</span> <span>SysSmsResponseEntity</span> <span>handleCodeResult</span><span>(</span><span>List</span><span><span>&lt;</span><span>SysSmsResponseEntity</span><span>></span></span> smsResponseEntityList<span>,</span> <span>String</span> code<span>,</span> <span>int</span> configId<span>)</span> <span>{</span>\n        <span>for</span> <span>(</span><span>SysSmsResponseEntity</span> sysSmsResponseEntity<span>:</span> smsResponseEntityList<span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>sysSmsResponseEntity<span>.</span><span>getCode</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span>code<span>)</span> <span>&amp;&amp;</span> sysSmsResponseEntity<span>.</span><span>getConfigId</span><span>(</span><span>)</span> <span>==</span> configId<span>)</span> <span>{</span>\n                <span>return</span> sysSmsResponseEntity<span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>SysSmsResponseEntity</span> responseEntity <span>=</span> <span>new</span> <span>SysSmsResponseEntity</span><span>(</span><span>)</span><span>;</span>\n        responseEntity<span>.</span><span>setCode</span><span>(</span>code<span>)</span><span>;</span>\n        responseEntity<span>.</span><span>setStatus</span><span>(</span><span>0</span><span>)</span><span>;</span>\n        responseEntity<span>.</span><span>setMsg</span><span>(</span><span>\"未知原因\"</span><span>)</span><span>;</span>\n        <span>return</span> responseEntity<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 随机生成6位随机验证码\n     * 方法说明\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>createRandomVcode</span><span>(</span><span>)</span><span>{</span>\n        <span>//验证码</span>\n        <span>String</span> vcode <span>=</span> <span>\"\"</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>6</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            vcode <span>=</span> vcode <span>+</span> <span>(</span><span>int</span><span>)</span><span>(</span><span>Math</span><span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>9</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> vcode<span>;</span>\n    <span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "字符串",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/String/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/String/",
      "content_html": "<div><pre><code><span>import</span> <span><span>org<span>.</span>apache<span>.</span>commons<span>.</span>lang<span>.</span></span><span>StringEscapeUtils</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Map</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span>regex<span>.</span></span><span>Matcher</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span>regex<span>.</span></span><span>Pattern</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>StringUtils</span> <span>{</span>\n\n    <span>public</span> <span>static</span> <span>boolean</span> <span>isBlank</span><span>(</span><span>Object</span> str<span>)</span> <span>{</span>\n        <span>return</span> str <span>==</span> <span>null</span> <span>||</span> str<span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>boolean</span> <span>isBlank</span><span>(</span><span>String</span> str<span>)</span> <span>{</span>\n        <span>return</span> str <span>==</span> <span>null</span> <span>||</span> str<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>Pattern</span> <span>TRIM_PATTERN</span> <span>=</span> <span>Pattern</span><span>.</span><span>compile</span><span>(</span><span>\"\\\\s*|\\t|\\r|\\n\"</span><span>)</span><span>;</span>\n\n    <span>/**\n     * 去除首位空格\n     * <span>@param</span> <span>str</span> 输入字符串\n     * <span>@return</span> 去除首位空格后的字符串\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>trimString</span><span>(</span><span>String</span> str<span>)</span> <span>{</span>\n        str <span>=</span> str <span>+</span> <span>\"\"</span><span>;</span>\n        str <span>=</span> str<span>.</span><span>trim</span><span>(</span><span>)</span><span>;</span>\n        <span>return</span> str<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 替换参数格式化\n     * <span>@param</span> <span>formatString</span> 待格式化字符串\n     * <span>@param</span> <span>matchReplaceList</span> 匹配替换列表\n     * <span>@return</span> 替换结果\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>parseString</span><span>(</span><span>String</span> formatString<span>,</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> matchReplaceList<span>)</span> <span>{</span>\n        <span>int</span> count <span>=</span> matchReplaceList<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>\n        <span>String</span> url <span>=</span> formatString<span>;</span>\n        <span>for</span> <span>(</span><span>String</span> key <span>:</span> matchReplaceList<span>.</span><span>keySet</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n            url <span>=</span> url<span>.</span><span>replaceAll</span><span>(</span>key<span>,</span> matchReplaceList<span>.</span><span>get</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> url<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 限制字符串长度\n     * 如果输入字符串越界，则打印信息\n     * <span>@param</span> <span>inputStr</span> 输入字符串\n     * <span>@param</span> <span>limitLength</span> 限制字符长度\n     * <span>@return</span> 处理后的字符串\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>limitLength</span><span>(</span><span>String</span> inputStr<span>,</span> <span>int</span> limitLength<span>)</span> <span>{</span>\n        <span>// 正则表达式规则</span>\n        <span>String</span> regEx <span>=</span> <span>\"^\\\\w*\\\\s*\\\\.\\\\s*\"</span><span>;</span>\n        <span>// 编译正则表达式</span>\n        <span>Pattern</span> pattern <span>=</span> <span>Pattern</span><span>.</span><span>compile</span><span>(</span>regEx<span>)</span><span>;</span>\n        <span>// 忽略大小写的写法</span>\n        <span>// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);</span>\n        <span>Matcher</span> matcher <span>=</span> pattern<span>.</span><span>matcher</span><span>(</span>inputStr<span>.</span><span>trim</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>// 查找字符串中是否有匹配正则表达式的字符/字符串</span>\n        <span>String</span> result <span>=</span> matcher<span>.</span><span>replaceAll</span><span>(</span><span>\"\"</span><span>)</span><span>;</span>\n        <span>if</span><span>(</span>limitLength <span>></span> <span>0</span> <span>&amp;&amp;</span> result<span>.</span><span>length</span><span>(</span><span>)</span> <span>></span> limitLength<span>)</span> <span>{</span>\n            result <span>=</span> result<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> limitLength <span>-</span> <span>1</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> result<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 清除空白字符串\n     * <span>@param</span> <span>str</span> 原始字符串\n     * <span>@return</span> 清除空白字符后的字符串\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>replaceBlank</span><span>(</span><span>String</span> str<span>)</span><span>{</span>\n        <span>String</span> dest <span>=</span> <span>null</span><span>;</span>\n        <span>if</span><span>(</span>str <span>==</span> <span>null</span><span>)</span><span>{</span>\n            <span>return</span> dest<span>;</span>\n        <span>}</span><span>else</span><span>{</span>\n            <span>Matcher</span> m <span>=</span> <span>TRIM_PATTERN</span><span>.</span><span>matcher</span><span>(</span>str<span>)</span><span>;</span>\n            dest <span>=</span> m<span>.</span><span>replaceAll</span><span>(</span><span>\"\"</span><span>)</span><span>;</span>\n            <span>return</span> dest<span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>/**\n     * 隐藏信息\n     * <span>@param</span> <span>str</span> 输入字符串\n     * <span>@param</span> <span>replaceSymbol</span> 替换符号\n     * <span>@param</span> <span>beforeLength</span> 开始长度\n     * <span>@param</span> <span>afterLength</span> 尾部长度，两者之间内容用符号替换\n     * <span>@return</span> 处理后字符串\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>hideInfo</span><span>(</span><span>String</span> str<span>,</span> <span>String</span> replaceSymbol<span>,</span> <span>int</span> beforeLength<span>,</span> <span>int</span> afterLength<span>)</span> <span>{</span>\n        <span>if</span><span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>str<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> str<span>;</span>\n        <span>}</span>\n        <span>if</span><span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>replaceSymbol<span>)</span><span>)</span> <span>{</span>\n            replaceSymbol <span>=</span> <span>\"*\"</span><span>;</span>        <span>// 替换字符串，默认使用“*”</span>\n        <span>}</span>\n        <span>int</span> length <span>=</span> str<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> maxIndex <span>=</span> length <span>-</span> afterLength<span>;</span>\n        <span>StringBuffer</span> sb <span>=</span> <span>new</span> <span>StringBuffer</span><span>(</span><span>)</span><span>;</span>\n        <span>for</span><span>(</span><span>int</span> i<span>=</span><span>0</span><span>;</span> i<span>&lt;</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            <span>if</span><span>(</span>i <span>&lt;</span> beforeLength <span>||</span> <span>(</span>i <span>>=</span> maxIndex <span>&amp;&amp;</span> maxIndex<span>></span><span>1</span><span>)</span><span>)</span> <span>{</span>\n                sb<span>.</span><span>append</span><span>(</span>str<span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                sb<span>.</span><span>append</span><span>(</span>replaceSymbol<span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> sb<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     *\n     * 方法描述 隐藏银行卡号中间的字符串（使用*号），显示前四后四\n     *\n     * <span>@param</span> <span>cardNo</span> 卡号\n     * <span>@return</span> 处理后字符串\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>hideCardNo</span><span>(</span><span>String</span> cardNo<span>)</span> <span>{</span>\n        <span>return</span> <span>hideInfo</span><span>(</span>cardNo<span>,</span> <span>\"*\"</span><span>,</span> <span>4</span><span>,</span> <span>4</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     *\n     * 方法描述 隐藏手机号中间位置字符，显示前三后三个字符\n     *\n     * <span>@param</span> <span>phoneNo</span> 手机号码\n     * <span>@return</span> 处理后字符串\n     *\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>hidePhoneNo</span><span>(</span><span>String</span> phoneNo<span>)</span> <span>{</span>\n        <span>return</span> <span>hideInfo</span><span>(</span>phoneNo<span>,</span> <span>\"*\"</span><span>,</span> <span>3</span><span>,</span> <span>3</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 隐藏名字\n     * <span>@param</span> <span>name</span> 姓名\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>hideName</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>\n        <span>return</span> <span>hideInfo</span><span>(</span>name<span>,</span> <span>\"*\"</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>String</span> <span>unescapeXml</span><span>(</span><span>String</span> raw<span>)</span> <span>{</span>\n        <span>return</span> <span>StringEscapeUtils</span><span>.</span><span>unescapeXml</span><span>(</span>raw<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>String</span> <span>escapeXml</span><span>(</span><span>String</span> raw<span>)</span> <span>{</span>\n        <span>return</span> <span>StringEscapeUtils</span><span>.</span><span>escapeXml</span><span>(</span>raw<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "图片转换",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/TransformImage/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/TransformImage/",
      "content_html": "<div><pre><code><span>package</span> <span>io<span>.</span>easy<span>.</span>common<span>.</span>utils</span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>ByteArrayOutputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>FileInputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>FileOutputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>IOException</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>InputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>io<span>.</span></span><span>OutputStream</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>net<span>.</span></span><span>HttpURLConnection</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>net<span>.</span></span><span>URL</span></span><span>;</span>\n\n<span>import</span> <span><span>sun<span>.</span>misc<span>.</span></span><span>BASE64Decoder</span></span><span>;</span>\n<span>import</span> <span><span>sun<span>.</span>misc<span>.</span></span><span>BASE64Encoder</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>Base64Utils</span> <span>{</span>\n    <span>/**\n     * 测试\n     * <span>@param</span> <span>args</span>\n     * <span>@throws</span> <span><span>Exception</span></span>\n     */</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n\n        <span>//图片--->base64</span>\n        <span>//本地图片</span>\n        <span>String</span> url <span>=</span> <span>\"D:/Project/workbench-ui/src/assets/images/arc-bar.png\"</span><span>;</span>\n        <span>String</span> str <span>=</span> <span>Base64Utils<span>.</span>ImageToBase64ByLocal</span><span>(</span>url<span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"data:image/png;base64,\"</span> <span>+</span> str<span>)</span><span>;</span>\n\n        <span>//在线图片地址</span>\n        <span>String</span> string <span>=</span> <span>\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1705581946,4177791147&amp;fm=26&amp;gp=0.jpg\"</span><span>;</span>\n        <span>String</span> ste <span>=</span> <span>Base64Utils<span>.</span>ImageToBase64ByOnline</span><span>(</span>string<span>)</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"data:image/png;base64,\"</span> <span>+</span> ste<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 本地图片转换成base64字符串\n     * <span>@param</span> <span>imgFile</span>    图片本地路径\n     * <span>@author</span> jsh\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>ImageToBase64ByLocal</span><span>(</span><span>String</span> imgFile<span>)</span> <span>{</span><span>// 将图片文件转化为字节数组字符串，并对其进行Base64编码处理</span>\n        <span>InputStream</span> in <span>=</span> <span>null</span><span>;</span>\n        <span>byte</span><span>[</span><span>]</span> data <span>=</span> <span>null</span><span>;</span>\n        <span>try</span> <span>{</span>\n            in <span>=</span> <span>new</span> <span>FileInputStream</span><span>(</span>imgFile<span>)</span><span>;</span>\n\n            data <span>=</span> <span>new</span> <span>byte</span><span>[</span>in<span>.</span><span>available</span><span>(</span><span>)</span><span>]</span><span>;</span>\n            in<span>.</span><span>read</span><span>(</span>data<span>)</span><span>;</span>\n            in<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>BASE64Encoder</span> encoder <span>=</span> <span>new</span> <span>BASE64Encoder</span><span>(</span><span>)</span><span>;</span>\n        <span>return</span> encoder<span>.</span><span>encode</span><span>(</span>data<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 在线图片转换成base64字符串\n     * <span>@param</span> <span>imgURL</span>    图片线上路径\n     * <span>@author</span> jsh\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>ImageToBase64ByOnline</span><span>(</span><span>String</span> imgURL<span>)</span> <span>{</span>\n        <span>ByteArrayOutputStream</span> data <span>=</span> <span>new</span> <span>ByteArrayOutputStream</span><span>(</span><span>)</span><span>;</span>\n        <span>try</span> <span>{</span>\n            <span>URL</span> url <span>=</span> <span>new</span> <span>URL</span><span>(</span>imgURL<span>)</span><span>;</span>\n            <span>byte</span><span>[</span><span>]</span> by <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>1024</span><span>]</span><span>;</span>\n            <span>HttpURLConnection</span> conn <span>=</span> <span>(</span><span>HttpURLConnection</span><span>)</span> url<span>.</span><span>openConnection</span><span>(</span><span>)</span><span>;</span>\n            conn<span>.</span><span>setRequestMethod</span><span>(</span><span>\"GET\"</span><span>)</span><span>;</span>\n            conn<span>.</span><span>setConnectTimeout</span><span>(</span><span>5000</span><span>)</span><span>;</span>\n            <span>InputStream</span> is <span>=</span> conn<span>.</span><span>getInputStream</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> len <span>=</span> <span>-</span><span>1</span><span>;</span>\n            <span>while</span> <span>(</span><span>(</span>len <span>=</span> is<span>.</span><span>read</span><span>(</span>by<span>)</span><span>)</span> <span>!=</span> <span>-</span><span>1</span><span>)</span> <span>{</span>\n                data<span>.</span><span>write</span><span>(</span>by<span>,</span> <span>0</span><span>,</span> len<span>)</span><span>;</span>\n            <span>}</span>\n            is<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>BASE64Encoder</span> encoder <span>=</span> <span>new</span> <span>BASE64Encoder</span><span>(</span><span>)</span><span>;</span>\n        <span>return</span> encoder<span>.</span><span>encode</span><span>(</span>data<span>.</span><span>toByteArray</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * 验证字符串是否为空\n     *\n     * <span>@param</span> <span>input</span>\n     * <span>@return</span>\n     */</span>\n    <span>private</span> <span>static</span> <span>boolean</span> <span>isEmpty</span><span>(</span><span>String</span> input<span>)</span> <span>{</span>\n        <span>return</span> input <span>==</span> <span>null</span> <span>||</span> input<span>.</span><span>equals</span><span>(</span><span>\"\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "URL参数解析",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/Url/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/Url/",
      "content_html": "<div><pre><code><span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>HashMap</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span></span><span>Map</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span>regex<span>.</span></span><span>Matcher</span></span><span>;</span>\n<span>import</span> <span><span>java<span>.</span>util<span>.</span>regex<span>.</span></span><span>Pattern</span></span><span>;</span>\n\n<span>public</span> <span>class</span> <span>UrlUtils</span> <span>{</span>\n    <span>/**\n     * 解析出url请求的路径，包括页面\n     * <span>@param</span> <span>strURL</span> url地址\n     * <span>@return</span> url路径\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>GetUrl</span><span>(</span><span>String</span> strURL<span>)</span>\n    <span>{</span>\n        <span>String</span> strPage<span>=</span><span>null</span><span>;</span>\n        <span>String</span><span>[</span><span>]</span> arrSplit<span>=</span><span>null</span><span>;</span>\n        strURL<span>=</span>strURL<span>.</span><span>trim</span><span>(</span><span>)</span><span>;</span>\n        arrSplit<span>=</span>strURL<span>.</span><span>split</span><span>(</span><span>\"[?]\"</span><span>)</span><span>;</span>\n        <span>if</span><span>(</span>strURL<span>.</span><span>length</span><span>(</span><span>)</span><span>></span><span>0</span><span>)</span>\n        <span>{</span>\n            <span>if</span><span>(</span>arrSplit<span>.</span>length<span>></span><span>1</span><span>)</span>\n            <span>{</span>\n                <span>if</span><span>(</span>arrSplit<span>[</span><span>0</span><span>]</span><span>!=</span><span>null</span><span>)</span>\n                <span>{</span>\n                    strPage<span>=</span>arrSplit<span>[</span><span>0</span><span>]</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> strPage<span>;</span>\n    <span>}</span>\n    <span>/**\n     * 去掉url中的路径，留下请求参数部分\n     * <span>@param</span> <span>strURL</span> url地址\n     * <span>@return</span> url请求参数部分\n     */</span>\n    <span>private</span> <span>static</span> <span>String</span> <span>TruncateUrlPage</span><span>(</span><span>String</span> strURL<span>)</span>\n    <span>{</span>\n        <span>String</span> strAllParam<span>=</span><span>null</span><span>;</span>\n        <span>String</span><span>[</span><span>]</span> arrSplit<span>=</span><span>null</span><span>;</span>\n        strURL<span>=</span>strURL<span>.</span><span>trim</span><span>(</span><span>)</span><span>;</span>\n        arrSplit<span>=</span>strURL<span>.</span><span>split</span><span>(</span><span>\"[?]\"</span><span>)</span><span>;</span>\n        <span>if</span><span>(</span>strURL<span>.</span><span>length</span><span>(</span><span>)</span><span>></span><span>1</span><span>)</span>\n        <span>{</span>\n            <span>if</span><span>(</span>arrSplit<span>.</span>length<span>></span><span>1</span><span>)</span>\n            <span>{</span>\n                <span>if</span><span>(</span>arrSplit<span>[</span><span>1</span><span>]</span><span>!=</span><span>null</span><span>)</span>\n                <span>{</span>\n                    strAllParam<span>=</span>arrSplit<span>[</span><span>1</span><span>]</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> strAllParam<span>;</span>\n    <span>}</span>\n    <span>/**\n     * <span>@param</span> <span>URL</span>  url地址\n     * <span>@param</span> <span>name</span> 获取参数名\n     * <span>@return</span>  url请求参数部分\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>getParam</span><span>(</span><span>String</span> <span>URL</span><span>,</span><span>String</span> name<span>)</span>\n    <span>{</span>\n        <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> mapRequest <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        <span>String</span><span>[</span><span>]</span> arrSplit<span>=</span><span>null</span><span>;</span>\n        <span>String</span> strUrlParam<span>=</span><span>TruncateUrlPage</span><span>(</span><span>URL</span><span>)</span><span>;</span>\n        <span>if</span><span>(</span>strUrlParam<span>==</span><span>null</span><span>)</span>\n            <span>return</span> <span>null</span><span>;</span>\n        <span>//每个键值为一组</span>\n        arrSplit<span>=</span>strUrlParam<span>.</span><span>split</span><span>(</span><span>\"[&amp;]\"</span><span>)</span><span>;</span>\n        <span>for</span><span>(</span><span>String</span> strSplit<span>:</span>arrSplit<span>)</span>\n        <span>{</span>\n            <span>String</span><span>[</span><span>]</span> arrSplitEqual<span>=</span><span>null</span><span>;</span>\n            arrSplitEqual<span>=</span> strSplit<span>.</span><span>split</span><span>(</span><span>\"[=]\"</span><span>)</span><span>;</span>\n            <span>//解析出键值</span>\n            <span>if</span><span>(</span>arrSplitEqual<span>.</span>length<span>></span><span>1</span><span>)</span>\n            <span>{</span>\n                mapRequest<span>.</span><span>put</span><span>(</span>arrSplitEqual<span>[</span><span>0</span><span>]</span><span>,</span> arrSplitEqual<span>[</span><span>1</span><span>]</span><span>)</span><span>;</span><span>//正确解析</span>\n            <span>}</span>\n            <span>else</span>\n            <span>{</span>\n                <span>if</span><span>(</span>arrSplitEqual<span>[</span><span>0</span><span>]</span><span>!=</span><span>\"\"</span><span>)</span>\n                <span>{</span>\n                    <span>//只有参数没有值，不加入</span>\n                    mapRequest<span>.</span><span>put</span><span>(</span>arrSplitEqual<span>[</span><span>0</span><span>]</span><span>,</span> <span>\"\"</span><span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> mapRequest<span>.</span><span>get</span><span>(</span>name<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n        <span>// 请求url</span>\n        <span>String</span> str <span>=</span> <span>\"https://xxx.com/easy-xxx/xxx/xxx/xxx?fileName=dmlkZW8vMjAxOS0wOS0yNC8xNTY5MzM2NzQ0MjQ1Lm1wMw==\"</span><span>;</span>\n        <span>//url页面路径</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>UrlUtils<span>.</span>GetUrl</span><span>(</span>str<span>)</span><span>)</span><span>;</span>\n        <span>//url参数键值对</span>\n        <span>String</span> strRequestKeyAndValues <span>=</span> <span>UrlUtils</span><span>.</span><span>getParam</span><span>(</span>str<span>,</span><span>\"fileName\"</span><span>)</span><span>;</span>\n        <span>//获取无效键时，输出null</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>strRequestKeyAndValues<span>)</span><span>;</span>\n    <span>}</span>\n\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "XML转对象",
      "url": "https://jin-shaohui.gitee.io/Java/Utils/XmlToObject/",
      "id": "https://jin-shaohui.gitee.io/Java/Utils/XmlToObject/",
      "content_html": "<div><pre><code><span>package</span> <span>io<span>.</span>easy<span>.</span>common<span>.</span>utils</span><span>;</span>\n\n<span>import</span> <span><span>com<span>.</span>thoughtworks<span>.</span>xstream<span>.</span></span><span>XStream</span></span><span>;</span>\n<span>import</span> <span><span>com<span>.</span>thoughtworks<span>.</span>xstream<span>.</span>io<span>.</span>xml<span>.</span></span><span>DomDriver</span></span><span>;</span>\n<span>import</span> <span><span>com<span>.</span>thoughtworks<span>.</span>xstream<span>.</span>mapper<span>.</span></span><span>MapperWrapper</span></span><span>;</span>\n<span>import</span> <span><span>com<span>.</span>thoughtworks<span>.</span>xstream<span>.</span>security<span>.</span></span><span>AnyTypePermission</span></span><span>;</span>\n\n<span>/**\n * @Description XStream实现xml和对象互相转换的工具\n * @ClassName XmlUtils\n *\n */</span>\n<span>public</span> <span>class</span> <span>XStreamXmlUtils</span> <span>{</span>\n    <span>private</span> <span>static</span> <span>String</span> <span>XML_TAG</span> <span>=</span> <span>\"&lt;?xml version='1.0' encoding='UTF-8'?>\"</span><span>;</span>\n\n    <span>/**\n     * Description: 私有化构造\n     */</span>\n    <span>private</span> <span>XStreamXmlUtils</span><span>(</span><span>)</span> <span>{</span>\n        <span>super</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n    <span>/**\n     * @Description 为每次调用生成一个XStream\n     * @Title getInstance\n     * <span>@return</span>\n     */</span>\n    <span>private</span> <span>static</span> <span>XStream</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n        <span>XStream</span> xStream <span>=</span> <span>new</span> <span>XStream</span><span>(</span><span>new</span> <span>DomDriver</span><span>(</span><span>\"UTF-8\"</span><span>)</span><span>)</span> <span>{</span>\n            <span>/**\n             * 忽略xml中多余字段\n             */</span>\n            <span>@Override</span>\n            <span>protected</span> <span>MapperWrapper</span> <span>wrapMapper</span><span>(</span><span>MapperWrapper</span> next<span>)</span> <span>{</span>\n                <span>return</span> <span>new</span> <span>MapperWrapper</span><span>(</span>next<span>)</span> <span>{</span>\n                    <span>@SuppressWarnings</span><span>(</span><span>\"rawtypes\"</span><span>)</span>\n                    <span>@Override</span>\n                    <span>public</span> <span>boolean</span> <span>shouldSerializeMember</span><span>(</span><span>Class</span> definedIn<span>,</span> <span>String</span> fieldName<span>)</span> <span>{</span>\n                        <span>if</span> <span>(</span>definedIn <span>==</span> <span>Object</span><span>.</span><span>class</span><span>)</span> <span>{</span>\n                            <span>return</span> <span>false</span><span>;</span>\n                        <span>}</span>\n                        <span>return</span> <span>super</span><span>.</span><span>shouldSerializeMember</span><span>(</span>definedIn<span>,</span> fieldName<span>)</span><span>;</span>\n                    <span>}</span>\n                <span>}</span><span>;</span>\n            <span>}</span>\n        <span>}</span><span>;</span>\n\n        <span>// 设置默认的安全校验</span>\n        <span>XStream</span><span>.</span><span>setupDefaultSecurity</span><span>(</span>xStream<span>)</span><span>;</span>\n        <span>// 使用本地的类加载器</span>\n        xStream<span>.</span><span>setClassLoader</span><span>(</span><span>XStreamXmlUtils</span><span>.</span><span>class</span><span>.</span><span>getClassLoader</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>// 允许所有的类进行转换</span>\n        xStream<span>.</span><span>addPermission</span><span>(</span><span>AnyTypePermission</span><span>.</span><span>ANY</span><span>)</span><span>;</span>\n        <span>return</span> xStream<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * @Description 将xml字符串转化为java对象\n     * @Title xmlToBean\n     * <span>@param</span> <span>xml</span>\n     * <span>@param</span> <span>clazz</span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>xmlToBean</span><span>(</span><span>String</span> xml<span>,</span> <span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> clazz<span>)</span> <span>{</span>\n        <span>XStream</span> xStream <span>=</span> <span>getInstance</span><span>(</span><span>)</span><span>;</span>\n        xStream<span>.</span><span>processAnnotations</span><span>(</span>clazz<span>)</span><span>;</span>\n        <span>Object</span> object <span>=</span> xStream<span>.</span><span>fromXML</span><span>(</span>xml<span>)</span><span>;</span>\n        <span>T</span> cast <span>=</span> clazz<span>.</span><span>cast</span><span>(</span>object<span>)</span><span>;</span>\n        <span>return</span> cast<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * @Description 将java对象转化为xml字符串\n     * @Title beanToXml\n     * <span>@param</span> <span>object</span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>beanToXml</span><span>(</span><span>Object</span> object<span>)</span> <span>{</span>\n        <span>XStream</span> xStream <span>=</span> <span>getInstance</span><span>(</span><span>)</span><span>;</span>\n        xStream<span>.</span><span>processAnnotations</span><span>(</span>object<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>// 剔除所有tab、制表符、换行符</span>\n        <span>String</span> xml <span>=</span> xStream<span>.</span><span>toXML</span><span>(</span>object<span>)</span><span>.</span><span>replaceAll</span><span>(</span><span>\"\\\\s+\"</span><span>,</span> <span>\" \"</span><span>)</span><span>;</span>\n        <span>return</span> xml<span>;</span>\n    <span>}</span>\n\n    <span>/**\n     * @Description 将java对象转化为xml字符串（包含xml头部信息）\n     * @Title beanToXml\n     * <span>@param</span> <span>object</span>\n     * <span>@return</span>\n     */</span>\n    <span>public</span> <span>static</span> <span>String</span> <span>beanToXmlWithTag</span><span>(</span><span>Object</span> object<span>)</span> <span>{</span>\n        <span>String</span> xml <span>=</span> <span>XML_TAG</span> <span>+</span> <span>beanToXml</span><span>(</span>object<span>)</span><span>;</span>\n        <span>return</span> xml<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Java工具类"
      ]
    },
    {
      "title": "JavaScript 执行机制",
      "url": "https://jin-shaohui.gitee.io/JavaScript/EventLoop/",
      "id": "https://jin-shaohui.gitee.io/JavaScript/EventLoop/",
      "summary": " 这一次，彻底弄懂 JavaScript 执行机制\n不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，\n我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。\n因为javascript是一门单线程语言，所以我们可以得出结论：\njavascript是按照语句出现的顺序执行的\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：\nlet a = '1';\nconsole.log(a);\nlet b = '2';\nconsole.log(b);\n\n",
      "content_html": "<h1 id=\"这一次-彻底弄懂-javascript-执行机制\" tabindex=\"-1\"> 这一次，彻底弄懂 JavaScript 执行机制</h1>\n<p>不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，\n我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。\n因为javascript是一门单线程语言，所以我们可以得出结论：</p>\n<p>javascript是按照语句出现的顺序执行的\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：</p>\n<div><pre><code><span>let</span> a <span>=</span> <span>'1'</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span>\n\n<span>let</span> b <span>=</span> <span>'2'</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>b<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p><img src=\"/assets/knowledge/frontEnd/javaScript/eventLoop/001.jpg\" alt=\"microInfo\"></p>\n\n<p>然而实际上js是这样的：</p>\n<div><pre><code><span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'定时器开始啦'</span><span>)</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>new</span> <span>Promise</span><span>(</span><span>function</span><span>(</span><span>resolve</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'马上执行for循环啦'</span><span>)</span><span>;</span>\n    <span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000</span><span>;</span> i<span>++</span><span>)</span><span>{</span>\n        i <span>==</span> <span>99</span> <span>&amp;&amp;</span> <span>resolve</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'执行then函数啦'</span><span>)</span>\n<span>}</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>'代码执行结束'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><img :src=\"$withBase('/assets/knowledge/frontEnd/javaScript/eventLoop/002.jpg')\" />\n<p>依照 <strong>js是按照语句出现的顺序执行</strong> 这个理念，自信的写下输出结果：</p>\n<div><pre><code><span>//\"定时器开始啦\"</span>\n<span>//\"马上执行for循环啦\"</span>\n<span>//\"执行then函数啦\"</span>\n<span>//\"代码执行结束\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/javaScript/eventLoop/003.jpg')\" />\n<p>我们真的要彻底弄明白javascript的执行机制了。</p>\n<h2 id=\"关于javascript\" tabindex=\"-1\"> 关于javascript</h2>\n<p>javascript是一门 <strong>单线程</strong> 语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。\n所以一切javascript版的&quot;多线程&quot;都是用单线程模拟出来的，一切javascript多线程都是纸老虎！</p>\n<h2 id=\"javascript事件循环\" tabindex=\"-1\"> javascript事件循环</h2>\n<p>既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。\n如果一个任务耗时过长，那么后一个任务也必须等着。\n那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？\n因此聪明的程序员将任务分为两类：</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。\n而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。\n关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/javaScript/eventLoop/004.jpg')\" />\n<p>导图要表达的内容用文字来表述的话：</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</li>\n</ul>\n<p>说了这么多文字，不如直接一段代码更直白：</p>\n<div><pre><code><span>let</span> data <span>=</span> <span>[</span><span>]</span><span>;</span>\n$<span>.</span><span>ajax</span><span>(</span><span>{</span>\n    <span>url</span><span>:</span> www<span>.</span>javascript<span>.</span>com<span>,</span>\n    <span>data</span><span>:</span> data<span>,</span>\n    <span>success</span><span>:</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'发送成功!'</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span><span>)</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'代码执行结束'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面是一段简易的ajax请求代码：</p>\n<ul>\n<li>ajax进入Event Table，注册回调函数success。</li>\n<li>执行console.log('代码执行结束')。</li>\n<li>ajax事件完成，回调函数success进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数success并执行。\n相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</li>\n</ul>\n<h2 id=\"又爱又恨的settimeout\" tabindex=\"-1\"> 又爱又恨的setTimeout</h2>\n<p>大名鼎鼎的setTimeout无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：</p>\n<div><pre><code><span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'延时3秒'</span><span>)</span><span>;</span>\n<span>}</span><span>,</span><span>3000</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>渐渐的setTimeout用的地方多了，问题也出现了，\n有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：</p>\n<div><pre><code><span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>task</span><span>(</span><span>)</span><span>;</span>\n<span>}</span><span>,</span><span>3000</span><span>)</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'执行console'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：</p>\n<div><pre><code><span>//执行console</span>\n<span>//task()</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>去验证一下，结果正确！ 然后我们修改一下前面的代码：</p>\n<div><pre><code><span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>task</span><span>(</span><span>)</span>\n<span>}</span><span>,</span><span>3000</span><span>)</span>\n\n<span>sleep</span><span>(</span><span>10000000</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？</p>\n<p>这时候我们需要重新理解setTimeout的定义。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li>task()进入Event Table并注册,计时开始。</li>\n<li>执行sleep函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep也太慢了吧，还没执行完，只好等着。</li>\n<li>sleep终于执行完了，task()终于从Event Queue进入了主线程执行。\n上述的流程走完，我们知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，\n又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</li>\n</ul>\n<p>我们还经常遇到 <strong>setTimeout(fn,0)</strong> 这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？</p>\n<p>答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，\n只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：</p>\n<div><pre><code><span>//代码1</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'先执行这里'</span><span>)</span><span>;</span>\n<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'执行啦'</span><span>)</span>\n<span>}</span><span>,</span><span>0</span><span>)</span><span>;</span>\n<span>//先执行这里</span>\n<span>//执行啦</span>\n\n\n<span>//代码2</span>\nconsole<span>.</span><span>log</span><span>(</span><span>'先执行这里'</span><span>)</span><span>;</span>\n<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'执行啦'</span><span>)</span>\n<span>}</span><span>,</span><span>3000</span><span>)</span><span>;</span>  \n\n<span>//先执行这里</span>\n<span>// ... 3s later</span>\n<span>// 执行啦</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>关于setTimeout要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p>\n<h2 id=\"又恨又爱的setinterval\" tabindex=\"-1\"> 又恨又爱的setInterval</h2>\n<p>上面说完了setTimeout，当然不能错过它的孪生兄弟setInterval。他俩差不多，只不过后者是循环的执行。\n对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p>\n<p>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。\n一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。</p>\n<h2 id=\"promise与process-nexttick-callback\" tabindex=\"-1\"> Promise与process.nextTick(callback)</h2>\n<p>传统的定时器我们已经研究过了，接着我们探究Promise与process.nextTick(callback)的表现。</p>\n<p>Promise的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的<a href=\"https://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener noreferrer\">Promise</a>。\n而process.nextTick(callback)类似node.js版的&quot;setTimeout&quot;，在事件循环的下一次循环中调用 callback 回调函数。</p>\n<p>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<ul>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ul>\n<p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。</p>\n<p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。\n接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。\n听起来有点绕，我们用文章最开始的一段代码说明：</p>\n<div><pre><code><span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'setTimeout'</span><span>)</span><span>;</span>\n<span>}</span><span>)</span>\n\n<span>new</span> <span>Promise</span><span>(</span><span>function</span><span>(</span><span>resolve</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'promise'</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'then'</span><span>)</span><span>;</span>\n<span>}</span><span>)</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>'console'</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li>\n<li>遇到console.log()，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li>\n<li>k，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>事件循环，宏任务，微任务的关系如图所示：</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/javaScript/eventLoop/005.jpg')\" />\n<p>我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：</p>\n<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>'1'</span><span>)</span><span>;</span>\n\n<span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'2'</span><span>)</span><span>;</span>\n    process<span>.</span><span>nextTick</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'3'</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span>\n    <span>new</span> <span>Promise</span><span>(</span><span>function</span><span>(</span><span>resolve</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'4'</span><span>)</span><span>;</span>\n        <span>resolve</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'5'</span><span>)</span>\n    <span>}</span><span>)</span>\n<span>}</span><span>)</span>\nprocess<span>.</span><span>nextTick</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'6'</span><span>)</span><span>;</span>\n<span>}</span><span>)</span>\n<span>new</span> <span>Promise</span><span>(</span><span>function</span><span>(</span><span>resolve</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'7'</span><span>)</span><span>;</span>\n    <span>resolve</span><span>(</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'8'</span><span>)</span>\n<span>}</span><span>)</span>\n\n<span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>'9'</span><span>)</span><span>;</span>\n    process<span>.</span><span>nextTick</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'10'</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span>\n    <span>new</span> <span>Promise</span><span>(</span><span>function</span><span>(</span><span>resolve</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'11'</span><span>)</span><span>;</span>\n        <span>resolve</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>'12'</span><span>)</span>\n    <span>}</span><span>)</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>第一轮事件循环流程分析如下：</p>\n<ul>\n<li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li>\n<li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li>\n<li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li>\n<li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li>\n<li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">宏任务Event Queue</th>\n<th style=\"text-align:center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">setTimeout1</td>\n<td style=\"text-align:center\">process1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setTimeout2</td>\n<td style=\"text-align:center\">then1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</li>\n<li>我们发现了process1和then1两个微任务。</li>\n<li>执行process1,输出6。</li>\n<li>执行then1，输出8。</li>\n</ul>\n<p><strong>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</strong></p>\n<p>那么第二轮时间循环从setTimeout1宏任务开始：</p>\n<ul>\n<li>首先输出2。</li>\n<li>接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。</li>\n<li>new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">宏任务Event Queue</th>\n<th style=\"text-align:center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">setTimeout2</td>\n<td style=\"text-align:center\">process2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">then2</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</li>\n<li>输出3。</li>\n<li>输出5。</li>\n</ul>\n<p><strong>第二轮事件循环结束，第二轮输出2，4，3，5。</strong></p>\n<ul>\n<li>第三轮事件循环开始，此时只剩setTimeout2了，执行。</li>\n<li>直接输出9。</li>\n<li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li>\n<li>直接执行new Promise，输出11。</li>\n<li>将then分发到微任务Event Queue中，记为then3。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">宏任务Event Queue</th>\n<th style=\"text-align:center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">process3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">then3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</li>\n<li>输出10。</li>\n<li>输出12。</li>\n</ul>\n<p><strong>第三轮事件循环结束，第三轮输出9，11，10，12。</strong></p>\n<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。 (请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p>\n<h2 id=\"写在最后\" tabindex=\"-1\"> 写在最后</h2>\n<p>(1)js的异步</p>\n<p>我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p>\n<p>(2)事件循环Event Loop</p>\n<p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<p>(3)javascript的执行和运行</p>\n<p>执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。</p>\n<p>(4)setImmediate</p>\n<p>微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p>\n<p>(5)最后的最后</p>\n<ul>\n<li>javascript是一门单线程语言</li>\n<li>Event Loop是javascript的执行机制</li>\n</ul>\n<p>牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/javaScript/eventLoop/006.jpg')\">\n",
      "image": "https://jin-shaohui.gitee.io/assets/knowledge/frontEnd/javaScript/eventLoop/001.jpg",
      "date_published": "2022-06-01T16:15:33.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "JavaScript",
        "EventLoop"
      ]
    },
    {
      "title": "JavaScript相关面试问题",
      "url": "https://jin-shaohui.gitee.io/JavaScript/Question/",
      "id": "https://jin-shaohui.gitee.io/JavaScript/Question/",
      "content_html": "<h2 id=\"常问问题\" tabindex=\"-1\"> 常问问题</h2>\n<h3 id=\"回调地狱\" tabindex=\"-1\"> 回调地狱</h3>\n<details><summary>详情</summary>\n<p>人们普遍以javaScript的执行顺序来编写代码,在执行异步代码时,无论以什么顺序简单的执行代码,通常情况会变成许多层级的回调函数堆积</p>\n<p>下面代码使用promise多次加载图片，防止回调函数嵌套</p>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n<span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>title</span><span>></span></span>Title<span><span><span>&lt;/</span>title</span><span>></span></span>\n<span><span><span>&lt;/</span>head</span><span>></span></span>\n<span><span><span>&lt;</span>body</span><span>></span></span>\n\n<span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n  <span>const</span> <span>ID_BASE_URL</span> <span>=</span> <span>'https://jsonplaceholder.typicode.com/todos'</span>\n  <span>const</span> <span>ROBOT_IMG_BASE_URL</span> <span>=</span> <span>'https://robohash.org'</span>\n\n  <span>function</span> <span>getRobotId</span><span>(</span><span>url</span><span>)</span> <span>{</span>\n      <span>const</span> promise <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n          $<span>.</span><span>get</span><span>(</span>url<span>,</span> <span>function</span> <span>(</span><span>data</span><span>)</span> <span>{</span>\n              <span>const</span> id <span>=</span> data<span>.</span>id\n              <span>resolve</span><span>(</span>id<span>)</span>\n          <span>}</span><span>)</span>\n      <span>}</span><span>)</span>\n      <span>return</span> promise\n\n  <span>}</span>\n\n  <span>function</span> <span>createRobot</span><span>(</span><span>id</span><span>)</span> <span>{</span>\n      <span>const</span> img <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'img'</span><span>)</span>\n      img<span>.</span>src <span>=</span> <span>ROBOT_IMG_BASE_URL</span> <span>+</span> <span><span>`</span><span>/</span><span><span>${</span>id<span>}</span></span><span>&amp;size=200*200</span><span>`</span></span>\n      document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>img<span>)</span>\n  <span>}</span>\n\n  <span>getRobotId</span><span>(</span><span>ID_BASE_URL</span> <span>+</span> <span>'/1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res1</span> <span>=></span> <span>{</span>\n      <span>createRobot</span><span>(</span>res1<span>)</span>\n      <span>return</span> <span>getRobotId</span><span>(</span><span>ID_BASE_URL</span> <span>+</span> <span>'/2'</span><span>)</span>\n  <span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res2</span> <span>=></span> <span>{</span>\n      <span>createRobot</span><span>(</span>res2<span>)</span>\n  <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>e</span> <span>=></span> <span>{</span>\n      <span>alert</span><span>(</span>e<span>)</span>\n  <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>\n<h3 id=\"闭包\" tabindex=\"-1\"> 闭包</h3>\n<details><summary>详情</summary>\n<p>闭包就是能够读取其他函数内部变量的函数。</p>\n<p>例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成&quot;定义在一个函数内部的函数&quot;。</p>\n<p>在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p>\n</details>\n<h3 id=\"封装绑定事件处理函数\" tabindex=\"-1\"> 封装绑定事件处理函数</h3>\n<details><summary>详情</summary>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n<span><span><span>&lt;</span>body</span><span>></span></span>\n<span><span><span>&lt;</span>ul</span> <span>id</span><span><span>=</span><span>\"</span>ul<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>li</span> <span>id</span><span><span>=</span><span>\"</span>li1<span>\"</span></span><span>></span></span>test1<span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;</span>li</span> <span>id</span><span><span>=</span><span>\"</span>li2<span>\"</span></span><span>></span></span>test2<span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;</span>li</span> <span>id</span><span><span>=</span><span>\"</span>li3<span>\"</span></span><span>></span></span>test3<span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;</span>li</span> <span>id</span><span><span>=</span><span>\"</span>li4<span>\"</span></span><span>></span></span>test4<span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>\"</span>button1<span>\"</span></span><span>></span></span>test5<span><span><span>&lt;/</span>button</span><span>></span></span>\n<span><span><span>&lt;/</span>ul</span><span>></span></span>\n<span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>const</span> ul <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'ul'</span><span>)</span>\n    <span>const</span> li1 <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'li1'</span><span>)</span>\n\n    <span>function</span> <span>bindEvent</span><span>(</span><span>elem<span>,</span> type<span>,</span> selector<span>,</span> fn</span><span>)</span> <span>{</span>\n        <span>if</span><span>(</span>fn <span>===</span> <span>undefined</span><span>)</span> <span>{</span>\n            fn <span>=</span> selector\n            selector <span>=</span> <span>null</span>\n        <span>}</span>\n        elem<span>.</span><span>addEventListener</span><span>(</span>type<span>,</span> <span>(</span><span>event</span><span>)</span> <span>=></span> <span>{</span>\n            <span>const</span> target <span>=</span> event<span>.</span>target\n            <span>if</span> <span>(</span>selector<span>)</span> <span>{</span>\n                <span>if</span> <span>(</span>target<span>.</span><span>matches</span><span>(</span>selector<span>)</span><span>)</span><span>{</span>\n                    <span>// fn(event)</span>\n                    <span>fn</span><span>.</span><span>call</span><span>(</span>target<span>,</span> event<span>)</span>\n                <span>}</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>fn</span><span>(</span>event<span>)</span>\n            <span>}</span>\n        <span>}</span><span>)</span>\n    <span>}</span>\n\n    <span>bindEvent</span><span>(</span>ul<span>,</span> <span>'click'</span><span>,</span> <span>'li'</span><span>,</span> <span>function</span><span>(</span><span>e</span><span>)</span> <span>{</span>\n        <span>alert</span><span>(</span><span>this</span><span>.</span>innerHTML<span>)</span>\n    <span>}</span><span>)</span>\n\n    <span>bindEvent</span><span>(</span>li1<span>,</span> <span>'click'</span><span>,</span> <span>function</span><span>(</span><span>e</span><span>)</span> <span>{</span>\n        <span>alert</span><span>(</span>e<span>.</span>target<span>.</span>innerHTML<span>)</span>\n    <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>\n<h3 id=\"文档碎片\" tabindex=\"-1\"> 文档碎片</h3>\n<details><summary>详情</summary>\n<div><pre><code><span>const</span> list <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'list'</span><span>)</span>\n\n<span>// 文档碎片</span>\n<span>const</span> fragment <span>=</span> document<span>.</span><span>createDocumentFragment</span><span>(</span><span>)</span>\n\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>5</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>const</span> item <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'li'</span><span>)</span>\n    item<span>.</span>innerHTML <span>=</span> <span><span>`</span><span>项目</span><span><span>${</span>i<span>}</span></span><span>`</span></span>\n    <span>// list.appendChild(item) // 操作5次dom</span>\n    fragment<span>.</span><span>appendChild</span><span>(</span>item<span>)</span>\n<span>}</span>\n\nlist<span>.</span><span>appendChild</span><span>(</span>fragment<span>)</span> <span>// 操作1次dom</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>\n<h3 id=\"jsonp\" tabindex=\"-1\"> Jsonp</h3>\n<details><summary>详情</summary>\n<p>我们都知道，Ajax请求是不能跨域的，无论是静态页面、动态网页、web服务等，只要是跨域请求，一律都不允许通过浏览器跨域的检测和阻拦。\n但是，我们可以发现，web页面上调用js是不受跨域的影响，同时拥有src属性的标签也具有相同的能力，比如 &lt;<strong>script</strong>&gt;、&lt;<strong>img</strong>&gt;、&lt;<strong>iframe</strong>&gt;</p>\n<p>于是如果想通过纯web端跨域访问数据就可以这样：在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理。</p>\n<p>恰巧有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更巧的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据。</p>\n<p>这样子解决方案就呼之欲出了，web客户端通过与调用脚本一样的方式，来调用跨域服务器上动态生成的js格式文件，显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装进去。</p>\n<p>客户端在对js文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了。</p>\n<p>为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>\n<div><pre><code>    <span>(</span><span>function</span> <span>(</span><span>global</span><span>)</span> <span>{</span>\n        global<span>.</span><span>jsonp</span> <span>=</span> <span>function</span> <span>jsonp</span><span>(</span><span>url<span>,</span> params<span>,</span> callback</span><span>)</span> <span>{</span>\n            <span>// 接收接口所需的所有参数及callback的函数名</span>\n            <span>let</span> paramList <span>=</span> <span>[</span><span>]</span>\n            <span>for</span> <span>(</span><span>let</span> key <span>in</span> params<span>)</span> <span>{</span>\n                paramList<span>.</span><span>push</span><span>(</span><span><span>`</span><span><span>${</span>key<span>}</span></span><span>=</span><span><span>${</span>params<span>[</span>key<span>]</span><span>}</span></span><span>`</span></span><span>)</span>\n            <span>}</span>\n            <span>// 随机callback函数名称</span>\n            <span>let</span> random <span>=</span> Math<span>.</span><span>random</span><span>(</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>'.'</span><span>,</span> <span>''</span><span>)</span>\n            <span>const</span> callbackFunctionName <span>=</span> <span>'jsonp_'</span> <span>+</span> random\n            paramList<span>.</span><span>push</span><span>(</span><span><span>`</span><span>callback=</span><span><span>${</span>callbackFunctionName<span>}</span></span><span>`</span></span><span>)</span>\n            <span>const</span> urlStr <span>=</span> url <span>+</span> <span>'?'</span> <span>+</span> paramList<span>.</span><span>join</span><span>(</span><span>'&amp;'</span><span>)</span>\n            <span>// 定义全局函数，为后续拿到js文件调用准备</span>\n            global<span>[</span>callbackFunctionName<span>]</span> <span>=</span> <span>function</span> <span>(</span><span>param</span><span>)</span> <span>{</span>\n                <span>callback</span><span>(</span>param<span>)</span>\n            <span>}</span>\n            <span>// 生成element</span>\n            <span>const</span> script <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'script'</span><span>)</span>\n            script<span>.</span>src <span>=</span> urlStr\n            <span>// 放入body, 立即调用全局函数 callbackFunctionName</span>\n            document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>script<span>)</span>\n            <span>// js拿到后，移除文件</span>\n            document<span>.</span>body<span>.</span><span>removeChild</span><span>(</span>script<span>)</span>\n        <span>}</span>\n    <span>}</span><span>)</span><span>(</span>window<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>\n<h3 id=\"preload和prefetch的区别\" tabindex=\"-1\"> preload和prefetch的区别</h3>\n<h3 id=\"script脚本加了defer属性后-是domcontentloaded回调先执行-还是script脚本的代码先执行\" tabindex=\"-1\"> script脚本加了defer属性后，是DOMContentLoaded回调先执行，还是script脚本的代码先执行</h3>\n<h3 id=\"object-object-any的区别\" tabindex=\"-1\"> Object object any的区别</h3>\n<h3 id=\"object-definedproperty有哪些属性\" tabindex=\"-1\"> Object.definedProperty有哪些属性</h3>\n<h3 id=\"object静态方法freeze-seal-preventextension-的区别\" tabindex=\"-1\"> object静态方法freeze()，seal(),preventExtension()的区别</h3>\n<h2 id=\"promise-相关\" tabindex=\"-1\"> promise 相关</h2>\n<h3 id=\"异步加载图片\" tabindex=\"-1\"> 异步加载图片</h3>\n<details><summary>详情</summary>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n<span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>title</span><span>></span></span>Title<span><span><span>&lt;/</span>title</span><span>></span></span>\n<span><span><span>&lt;/</span>head</span><span>></span></span>\n<span><span><span>&lt;</span>body</span><span>></span></span>\n\n<span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>function</span> <span>loadImage</span><span>(</span><span>url</span><span>)</span> <span>{</span>\n        <span>const</span> promise <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n            <span>const</span> img <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'img'</span><span>)</span>\n            img<span>.</span><span>onload</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n                <span>resolve</span><span>(</span>img<span>)</span>\n            <span>}</span>\n            img<span>.</span><span>onerror</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n                <span>const</span> err <span>=</span> <span>new</span> <span>Error</span><span>(</span><span><span>`</span><span>图片加载失败，URL为： </span><span><span>${</span>url<span>}</span></span><span>`</span></span><span>)</span>\n                <span>reject</span><span>(</span>err<span>)</span>\n            <span>}</span>\n            img<span>.</span>src <span>=</span> url\n        <span>}</span><span>)</span>\n        <span>return</span> promise\n    <span>}</span>\n    <span>const</span> url1 <span>=</span> <span>'https://placeholder.pics/svg/80x80/FF2030/FFF/image1'</span>\n    <span>const</span> url2 <span>=</span> <span>'https://placeholder.pics/svg/80x80/FF2030/FFF/image2'</span>\n    <span>loadImage</span><span>(</span>url1<span>)</span>\n        <span>.</span><span>then</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> <span>{</span>\n            document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>res<span>)</span>\n            console<span>.</span><span>log</span><span>(</span><span>'图片1加载成功'</span><span>,</span> res<span>)</span>\n            <span>return</span> <span>loadImage</span><span>(</span>url2<span>)</span>\n        <span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> <span>{</span>\n            document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>res<span>)</span>\n            console<span>.</span><span>log</span><span>(</span><span>'图片2加载成功'</span><span>,</span> res<span>)</span>\n         <span>}</span><span>)</span>\n        <span>.</span><span>catch</span><span>(</span><span>(</span><span>err</span><span>)</span> <span>=></span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span>err<span>)</span>\n        <span>}</span><span>)</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>\n<h3 id=\"封装接口请求\" tabindex=\"-1\"> 封装接口请求</h3>\n<details><summary>详情</summary>\n<p><strong>注意事项：</strong></p>\n<p>为防止跨域问题，post请求采用简单请求，内容详见<a href=\"../CrossDomain\">跨域问题</a></p>\n<p>XMLHttpRequest的 <strong>readyState</strong> 状态码内容如下：</p>\n<ul>\n<li>0 - 代表未初始化。 还没有调用 open 方法</li>\n<li>1 - 代表正在加载。 open 方法已被调用，但 send 方法还没有被调用</li>\n<li>2 - 代表已加载完毕。send 已被调用。请求已经开始</li>\n<li>3 - 代表正在与服务器交互中。服务器正在解析响应内容</li>\n<li>4 - 代表完成。响应发送完毕</li>\n</ul>\n<h2 id=\"get请求\" tabindex=\"-1\"> Get请求</h2>\n<div><pre><code><span>function</span> <span>getAjax</span><span>(</span><span>url<span>,</span> query</span><span>)</span> <span>{</span>\n    <span>let</span> queryData <span>=</span> <span>[</span><span>]</span>\n    <span>for</span> <span>(</span><span>let</span> key <span>in</span> query<span>)</span> <span>{</span>\n        queryData<span>.</span><span>push</span><span>(</span><span><span>`</span><span><span>${</span>key<span>}</span></span><span>=</span><span><span>${</span>query<span>[</span>key<span>]</span><span>}</span></span><span>`</span></span><span>)</span>\n    <span>}</span>\n    url <span>=</span> <span><span>`</span><span><span>${</span>url<span>}</span></span><span>?</span><span><span>${</span>queryData<span>.</span><span>join</span><span>(</span><span>'&amp;'</span><span>)</span><span>}</span></span><span>&amp;timeStamp=</span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span>\n    <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n        <span>const</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span>\n        xhr<span>.</span><span>open</span><span>(</span><span>'get'</span><span>,</span> url<span>)</span>\n        xhr<span>.</span><span>send</span><span>(</span><span>)</span>\n        xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n            <span>if</span> <span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span><span>)</span> <span>{</span>\n                <span>if</span> <span>(</span>xhr<span>.</span>status <span>===</span> <span>200</span><span>)</span> <span>{</span>\n                    <span>resolve</span><span>(</span><span>JSON</span><span>.</span><span>parse</span><span>(</span>xhr<span>.</span>responseText<span>)</span><span>)</span>\n                <span>}</span> <span>else</span> <span>{</span>\n                    <span>reject</span><span>(</span>xhr<span>.</span>statusText<span>)</span>\n                <span>}</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>reject</span><span>(</span>xhr<span>.</span>statusText<span>)</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"post请求\" tabindex=\"-1\"> Post请求</h2>\n<div><pre><code><span>function</span> <span>postAjax</span><span>(</span><span>url<span>,</span> query</span><span>)</span> <span>{</span>\n    <span>let</span> queryData <span>=</span> <span>[</span><span>]</span>\n    <span>for</span> <span>(</span><span>let</span> key <span>in</span> query<span>)</span> <span>{</span>\n        queryData<span>.</span><span>push</span><span>(</span><span><span>`</span><span><span>${</span>key<span>}</span></span><span>=</span><span><span>${</span>query<span>[</span>key<span>]</span><span>}</span></span><span>`</span></span><span>)</span>\n    <span>}</span>\n    <span>let</span> queryStr <span>=</span> queryData<span>.</span><span>join</span><span>(</span><span>'&amp;'</span><span>)</span>\n    <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n        <span>const</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span>\n        xhr<span>.</span><span>open</span><span>(</span><span>'post'</span><span>,</span> url<span>)</span>\n        xhr<span>.</span><span>setRequestHeader</span><span>(</span><span>'Content-Type'</span><span>,</span><span>'application/x-www-form-urlencoded'</span><span>)</span>\n        xhr<span>.</span><span>send</span><span>(</span>queryStr<span>)</span>\n        xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n            <span>if</span> <span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span><span>)</span> <span>{</span>\n                <span>if</span> <span>(</span>xhr<span>.</span>status <span>===</span> <span>200</span><span>)</span> <span>{</span>\n                    <span>resolve</span><span>(</span><span>JSON</span><span>.</span><span>parse</span><span>(</span>xhr<span>.</span>responseText<span>)</span><span>)</span>\n                <span>}</span> <span>else</span> <span>{</span>\n                    <span>reject</span><span>(</span>xhr<span>.</span>statusText<span>)</span>\n                <span>}</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>reject</span><span>(</span>xhr<span>.</span>statusText<span>)</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>\n<h3 id=\"await-一个promise-promise里的执行reject的话会怎么样\" tabindex=\"-1\"> await 一个promise，promise里的执行reject的话会怎么样</h3>\n",
      "date_published": "2022-06-01T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Question"
      ]
    },
    {
      "title": "乾坤",
      "url": "https://jin-shaohui.gitee.io/Micro/QianKun/",
      "id": "https://jin-shaohui.gitee.io/Micro/QianKun/",
      "summary": "微前端 是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。\n各个前端应用还可以独立开发、独立部署。同时，它们也可以在共享组件的同时进行并行开发——这些组件可以通过 NPM 或者 Git Tag、Git Submodule 来管理。\nqiankun（乾坤） 就是一款由蚂蚁金服推出的比较成熟的微前端框架，基于 single-spa 进行二次开发，用于将Web应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。\n\n那么，话不多说，我们的源码解析正式开始。\n",
      "content_html": "<p><strong>微前端</strong> 是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。</p>\n<p>各个前端应用还可以独立开发、独立部署。同时，它们也可以在共享组件的同时进行并行开发——这些组件可以通过 NPM 或者 Git Tag、Git Submodule 来管理。</p>\n<p><strong>qiankun（乾坤）</strong> 就是一款由蚂蚁金服推出的比较成熟的微前端框架，基于 <strong>single-spa</strong> 进行二次开发，用于将Web应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。</p>\n<p><img src=\"/assets/knowledge/frontEnd/micro/qianKun/microInfo.png\" alt=\"microInfo\"></p>\n<p>那么，话不多说，我们的源码解析正式开始。</p>\n\n<p>我们从两个基础 API : <strong>registerMicroApps(apps, lifeCycles?) - 注册子应用</strong> 和 <strong>start(opts?) - 启动主应用</strong> 开始</p>\n<p>由于 <strong>registerMicroApps</strong> 函数中设置的回调函数较多，并且读取了 <strong>start</strong> 函数中设置的初始配置项，所以我们从 <strong>start</strong> 函数开始解析。</p>\n<h2 id=\"start-opts\" tabindex=\"-1\"> start(opts)</h2>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/start.png')\">\n<p>第 196 行：设置 <strong>window</strong> 的 <strong><strong>POWERED_BY_QIANKUN</strong></strong> 属性为 true，在子应用中使用 <strong>window.<strong>POWERED_BY_QIANKUN</strong></strong> 值判断是否运行在主应用容器中。</p>\n<p>第 198~199 行：设置配置参数（有默认值），将配置参数存储在 <strong>importLoaderConfiguration</strong> 对象中。</p>\n<p>第 201~203 行：检查 <strong>prefetch</strong> 属性，如果需要预加载，则添加全局事件 <strong>single-spa:first-mount</strong> 监听，在第一个子应用挂载后预加载其他子应用资源，优化后续其他子应用的加载速度。</p>\n<p>第 205 行：根据 <strong>singularMode</strong> 参数设置是否为单实例模式。</p>\n<p>第 209~217 行：根据 <strong>jsSandbox</strong> 参数设置是否启用沙箱运行环境，旧版本需要关闭该选项以兼容 IE。（新版本在单实例模式下默认支持 IE，多实例模式依然不支持 IE）。</p>\n<p>第 222 行：调用了 <strong>single-spa</strong> 的 <strong>startSingleSpa</strong> 方法启动主应用。</p>\n<p>从上面可以看出，<strong>start</strong> 函数负责初始化一些全局设置，然后启动应用。这些初始化的配置参数有一部分将在 <strong>registerMicroApps</strong> 注册子应用的回调函数中使用，我们继续往下看。</p>\n<h2 id=\"registermicroapps-apps-lifecycles\" tabindex=\"-1\"> registerMicroApps(apps, lifeCycles?)</h2>\n<p><strong>registerMicroApps</strong> 函数的作用是注册子应用，并且在子应用激活时，创建运行沙箱，在不同阶段调用不同的生命周期钩子函数。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/registerMicroApps.png')\">\n<p>从上面可以看出，在 第 70~71 行 <strong>registerMicroApps</strong> 函数做了个处理，防止重复注册相同的子应用。</p>\n<p>在 第 74 行 调用了 <strong>single-spa</strong> 的 <strong>registerApplication</strong> 方法注册了子应用。</p>\n<p>我们直接来看 <strong>registerApplication</strong> 方法，<strong>registerApplication</strong> 方法是 <strong>single-spa</strong> 中注册子应用的核心函数。该函数有四个参数，分别是</p>\n<ul>\n<li>name（子应用的名称）</li>\n<li>回调函数（activeRule 激活时调用）</li>\n<li>activeRule（子应用的激活规则）</li>\n<li>props（主应用需要传递给子应用的数据）</li>\n</ul>\n<p>这些参数都是由 <strong>single-spa</strong> 直接实现，这里可以先简单理解为注册子应用。在符合 <strong>activeRule</strong> 激活规则时将会激活子应用，执行回调函数，返回一些生命周期钩子函数。</p>\n<blockquote>\n<p>注意，这些生命周期钩子函数属于 single-spa，由 single-spa 决定在何时调用。</p>\n</blockquote>\n<p>如果你还是觉得有点懵，没关系，我们通过一张图来帮助理解。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/flow.png')\">\n<h2 id=\"import-html-entry\" tabindex=\"-1\"> import-html-entry</h2>\n<p>我们从上面分析可以看出，<strong>qiankun</strong> 的 <strong>registerMicroApps</strong> 方法中第一个入参 apps - <strong>Array&lt;RegistrableApp&lt;<strong>T</strong>&gt;&gt;</strong> 有三个参数 <strong>name、activeRule、props</strong> 都是交给 <strong>single-spa</strong> 使用，还有 <strong>entry</strong> 和 <strong>render</strong> 参数还没有用到。</p>\n<p>我们这里需要关注 <strong>entry（子应用的 entry 地址）</strong> 和 <strong>render（子应用被激活时触发的渲染规则）</strong> 这两个还没有用到的参数，这两个参数延迟到 <strong>single-spa</strong> 子应用激活后的回调函数中执行。</p>\n<p>那我们假设此时我们的子应用已激活，我们来看看这里做了什么。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/importHtmlEntry.png')\">\n<p>从上图可以看出，在子应用激活后，首先在 第 81~84 行 处使用了 import-html-entry 库从 entry 进入加载子应用，加载完成后将返回一个对象</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/entry.png')\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>template</code></td>\n<td style=\"text-align:left\">将脚本文件内容注释后的 <code>html</code> 模板文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>assetPublicPath</code></td>\n<td style=\"text-align:left\">资源地址根路径，可用于加载子应用资源</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>getExternalScripts</code></td>\n<td style=\"text-align:left\">方法：获取外部引入的脚本文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>getExternalStyleSheets</code></td>\n<td style=\"text-align:left\">方法：获取外部引入的样式表文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>execScripts</code></td>\n<td style=\"text-align:left\">方法：执行该模板文件中所有的 <code>JS</code> 脚本文件，并且可以指定脚本的作用域 - <code>proxy</code> 对象</td>\n</tr>\n</tbody>\n</table>\n<p>我们先将 <strong>template 模板</strong>、<strong>getExternalScripts</strong> 和 <strong>getExternalStyleSheets</strong> 函数的执行结果打印出来，效果如下:</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/entryDetail.png')\">\n<p>从上图我们可以看到我们外部引入的三个 <strong>js</strong> 脚本文件，这个模板文件没有外部 <strong>css</strong> 样式表，对应的样式表数组也为空。</p>\n<p>然后我们再来分析 <strong>execScripts</strong> 方法，该方法的作用就是指定一个 <strong>proxy（默认是 window）对象</strong>，然后执行该模板文件中所有的 JS，并返回 JS 执行后 proxy 对象的最后一个属性。</p>\n<p>在微前端架构中，这个对象一般会包含一些子应用的生命周期钩子函数，主应用可以通过在特定阶段调用这些生命周期钩子函数，进行挂载和销毁子应用的操作。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/execScripts.png')\">\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/proxyLastOptions.png')\">\n<p>在 qiankun 的 <strong>importEntry</strong> 函数中还传入了配置项 <strong>getTemplate</strong>，这个其实是对 html 目标文件的二次处理，这里就不作展开了，有兴趣的可以自行去了解一下。</p>\n<h2 id=\"主应用挂载子应用-html-模板\" tabindex=\"-1\"> 主应用挂载子应用 HTML 模板</h2>\n<p>我们回到 qiankun 源码部分继续看</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/render.png')\">\n<p>从上图看出，在 第 85~87 行 处，先对单实例进行检测。在单实例模式下，新的子应用挂载行为会在旧的子应用卸载之后才开始。</p>\n<p>在 第 88 行 中，执行注册子应用时传入的 render 函数，将 HTML Template 和 loading 作为入参，render 函数的内容一般是将 HTML 挂载在指定容器中（见下图）。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/mountedApp.png')\">\n<p>在这个阶段，主应用已经将子应用基础的 HTML 结构挂载在了主应用的某个容器内，接下来还需要执行子应用对应的 mount 方法（如 Vue.$mount）对子应用状态进行挂载。</p>\n<p>此时页面还可以根据 loading 参数开启一个类似加载的效果，直至子应用全部内容加载完成。</p>\n<h2 id=\"沙箱运行环境-gensandbox\" tabindex=\"-1\"> 沙箱运行环境 - genSandbox</h2>\n<p>我们回到 qiankun 源码部分继续看，此时还是子应用激活时的回调函数部分（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/genSandbox.png')\">\n<p>在 第 90~98 行 是 qiankun 比较核心的部分，也是几个子应用之间状态独立的关键，那就是 js 的沙箱运行环境。如果关闭了 useJsSandbox 选项，那么所有子应用的沙箱环境都是 window，就很容易对全局状态产生污染。</p>\n<p>我们进入到 genSandbox 内部，看看 qiankun 是如何创建的 （JS）沙箱运行环境。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/genSandboxDetail.png')\">\n<p>从上图可以看出 genSandbox 内部的沙箱主要是通过是否支持 window.Proxy 分为 LegacySandbox 和 SnapshotSandbox 两种。</p>\n<blockquote>\n<p>扩展阅读：多实例还有一种 ProxySandbox 沙箱，这种沙箱模式目前看来是最优方案。由于其表现与旧版本略有不同，所以暂时只用于多实例模式。</p>\n<p>ProxySandbox 沙箱稳定之后可能会作为单实例沙箱使用。</p>\n</blockquote>\n<h3 id=\"legacysandbox\" tabindex=\"-1\"> LegacySandbox</h3>\n<p>我们先来看看 LegacySandbox 沙箱是怎么进行状态隔离的（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/legacySandbox.png')\">\n<p>我们来分析一下 LegacySandbox 类的几个属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>addedPropsMapInSandbox</code></td>\n<td style=\"text-align:left\">记录沙箱运行期间新增的全局变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>modifiedPropsOriginalValueMapInSandbox</code></td>\n<td style=\"text-align:left\">记录沙箱运行期间更新的全局变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>currentUpdatedPropsValueMap</code></td>\n<td style=\"text-align:left\">记录沙箱运行期间操作过的全局变量。上面两个 <code>Map</code> 用于 <code>关闭沙箱</code> 时还原全局状态，而 <code>currentUpdatedPropsValueMap</code> 是在 <code>激活沙箱</code> 时还原沙箱的独立状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>name</code></td>\n<td style=\"text-align:left\">沙箱名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>proxy</code></td>\n<td style=\"text-align:left\">代理对象，可以理解为子应用的 <code>global/window</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sandboxRunning</code></td>\n<td style=\"text-align:left\">当前沙箱是否在运行中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>active</code></td>\n<td style=\"text-align:left\">激活沙箱，在子应用挂载时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>inactive</code></td>\n<td style=\"text-align:left\">关闭沙箱，在子应用卸载时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>constructor</code></td>\n<td style=\"text-align:left\">构造函数，创建沙箱环境</td>\n</tr>\n</tbody>\n</table>\n<p>我们现在从 window.Proxy 的 set 和 get 属性来详细讲解 LegacySandbox 是如何实现沙箱运行环境的。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/genSandboxProxy.png')\">\n<blockquote>\n<p>注意：子应用沙箱中的 proxy 对象（第 62 行）可以简单理解为子应用的 window 全局对象（代码如下），子应用对全局属性的操作就是对该 proxy 对象属性的操作，带着这份理解继续往下看吧。</p>\n</blockquote>\n<div><pre><code><span>// 子应用脚本文件的执行过程：</span>\n<span>eval</span><span>(</span>\n  <span>// 这里将 proxy 作为 window 参数传入</span>\n  <span>// 子应用的全局对象就是该子应用沙箱的 proxy 对象</span>\n  <span>(</span><span>function</span><span>(</span><span>window</span><span>)</span> <span>{</span>\n    <span>/* 子应用脚本文件内容 */</span>\n  <span>}</span><span>)</span><span>(</span>proxy<span>)</span>\n<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在 第 65~72 行中，当调用 set 向子应用 proxy/window 对象设置属性时，所有的属性设置和更新都会先记录在 addedPropsMapInSandbox 或 modifiedPropsOriginalValueMapInSandbox 中，然后统一记录到currentUpdatedPropsValueMap 中。</p>\n<p>在 第 73 行 中修改全局 window 的属性，完成值的设置。</p>\n<p>当调用 get 从子应用 proxy/window 对象取值时，会直接从 window 对象中取值。对于非构造函数的取值将会对 this 指针绑定到 window 对象后，再返回函数。</p>\n<p>LegacySandbox 的沙箱隔离是通过激活沙箱时还原子应用状态，卸载时还原主应用状态（子应用挂载前的全局状态）实现的，具体实现如下（见下图）。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/legacySandboxActive.png')\">\n<p>从上图可以看出：</p>\n<p>第 37 行：在激活沙箱时，沙箱会通过 currentUpdatedPropsValueMap 查询到子应用的独立状态池（沙箱可能会激活多次，这里是沙箱曾经激活期间被修改的全局变量），然后还原子应用状态。</p>\n<p>第 44~45 行：在关闭沙箱时，通过 addedPropsMapInSandbox 删除在沙箱运行期间新增的全局变量，通过 modifiedPropsOriginalValueMapInSandbox 还原沙箱运行期间被修改的全局变量，从而还原到子应用挂载前的状态。</p>\n<p>从上面的分析可以得知，LegacySandbox 的沙箱隔离机制利用快照模式实现，我们画一张图来帮助理解（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/legacySandboxFlow.png')\">\n<h3 id=\"多实例沙箱-proxysandbox\" tabindex=\"-1\"> 多实例沙箱 - ProxySandbox</h3>\n<p>ProxySandbox 是一种新的沙箱模式，目前用于多实例模式的状态隔离。在稳定后以后可能会成为 单实例沙箱，我们来看看 ProxySandbox 沙箱是怎么进行状态隔离的（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/proxySandbox.png')\">\n<p>我们来分析一下 ProxySandbox 类的几个属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>updateValueMap</code></td>\n<td style=\"text-align:left\">记录沙箱中更新的值，也就是每个子应用中独立的状态池</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>name</code></td>\n<td style=\"text-align:left\">沙箱名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>proxy</code></td>\n<td style=\"text-align:left\">代理对象，可以理解为子应用的 <code>global/window</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sandboxRunning</code></td>\n<td style=\"text-align:left\">当前沙箱是否在运行中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>active</code></td>\n<td style=\"text-align:left\">激活沙箱，在子应用挂载时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>inactive</code></td>\n<td style=\"text-align:left\">关闭沙箱，在子应用卸载时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>constructor</code></td>\n<td style=\"text-align:left\">构造函数，创建沙箱环境</td>\n</tr>\n</tbody>\n</table>\n<p>我们现在从 window.Proxy 的 set 和 get 属性来详细讲解 ProxySandbox 是如何实现沙箱运行环境的。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/proxySandboxProxy.png')\">\n<blockquote>\n<p>注意：子应用沙箱中的 proxy 对象可以简单理解为子应用的 window 全局对象（代码如下），子应用对全局属性的操作就是对该 proxy 对象属性的操作，带着这份理解继续往下看吧。</p>\n</blockquote>\n<div><pre><code><span>// 子应用脚本文件的执行过程：</span>\n<span>eval</span><span>(</span>\n  <span>// 这里将 proxy 作为 window 参数传入</span>\n  <span>// 子应用的全局对象就是该子应用沙箱的 proxy 对象</span>\n  <span>(</span><span>function</span><span>(</span><span>window</span><span>)</span> <span>{</span>\n    <span>/* 子应用脚本文件内容 */</span>\n  <span>}</span><span>)</span><span>(</span>proxy<span>)</span>\n<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>当调用 set 向子应用 proxy/window 对象设置属性时，所有的属性设置和更新都会命中 updateValueMap，存储在 updateValueMap 集合中（第 38 行），从而避免对 window 对象产生影响（旧版本则是通过 diff 算法还原 window 对象状态快照，子应用之间的状态是隔离的，而父子应用之间 window 对象会有污染）。</p>\n<p>当调用 get 从子应用 proxy/window 对象取值时，会优先从子应用的沙箱状态池 updateValueMap 中取值，如果没有命中才从主应用的 window 对象中取值（第 49 行）。对于非构造函数的取值将会对 this 指针绑定到 window 对象后，再返回函数。</p>\n<p>如此一来，ProxySandbox 沙箱应用之间的隔离就完成了，所有子应用对 proxy/window 对象值的存取都受到了控制。设置值只会作用在沙箱内部的 updateValueMap 集合上，取值也是优先取子应用独立状态池（updateValueMap）中的值，没有找到的话，再从 proxy/window 对象中取值。</p>\n<p>相比较而言，ProxySandbox 是最完备的沙箱模式，完全隔离了对 window 对象的操作，也解决了快照模式中子应用运行期间仍然会对 window 造成污染的问题。</p>\n<p>我们对 ProxySandbox 沙箱画一张图来加深理解（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/proxySandboxFlow.png')\">\n<h3 id=\"snapshotsandbox\" tabindex=\"-1\"> SnapshotSandbox</h3>\n<p>在不支持 window.Proxy 属性时，将会使用 SnapshotSandbox 沙箱，我们来看看其内部实现（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/snapshotSandbox.png')\">\n<p>我们来分析一下 SnapshotSandbox 类的几个属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>name</code></td>\n<td style=\"text-align:left\">沙箱名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>proxy</code></td>\n<td style=\"text-align:left\">代理对象，此处为 <code>window</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sandboxRunning</code></td>\n<td style=\"text-align:left\">当前沙箱是否激活</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>windowSnapshot</code></td>\n<td style=\"text-align:left\"><code>window</code> 状态快照</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>modifyPropsMap</code></td>\n<td style=\"text-align:left\">沙箱运行期间被修改过的 <code>window</code> 属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>constructor</code></td>\n<td style=\"text-align:left\">构造函数，激活沙箱</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>active</code></td>\n<td style=\"text-align:left\">激活沙箱，在子应用挂载时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>inactive</code></td>\n<td style=\"text-align:left\">关闭沙箱，在子应用卸载时启动</td>\n</tr>\n</tbody>\n</table>\n<p>SnapshotSandbox 的沙箱环境主要是通过激活时记录 window 状态快照，在关闭时通过快照还原 window 对象来实现的。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/snapshotSandboxActive.png')\">\n<p>我们先看 active 函数，在沙箱激活时，会先给当前 window 对象打一个快照，记录沙箱激活前的状态（第 38~40 行）。打完快照后，函数内部将 window 状态通过 modifyPropsMap 记录还原到上次的沙箱运行环境，也就是还原沙箱激活期间（历史记录）修改过的 window 属性。</p>\n<p>在沙箱关闭时，调用 inactive 函数，在沙箱关闭前通过遍历比较每一个属性，将被改变的 window 对象属性值（第 54 行）记录在 modifyPropsMap 集合中。在记录了 modifyPropsMap 后，将 window 对象通过快照 windowSnapshot 还原到被沙箱激活前的状态（第 55 行），相当于是将子应用运行期间对 window 造成的污染全部清除。</p>\n<p>SnapshotSandbox 沙箱就是利用快照实现了对 window 对象状态隔离的管理。相比较 ProxySandbox 而言，在子应用激活期间，SnapshotSandbox 将会对 window 对象造成污染，属于一个对不支持 Proxy 属性的浏览器的向下兼容方案。</p>\n<p>我们对 SnapshotSandbox 沙箱画一张图来加深理解（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/snapshotSandboxFlow.png')\">\n<h2 id=\"挂载沙箱-mountsandbox\" tabindex=\"-1\"> 挂载沙箱 - mountSandbox</h2>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/genSandbox.png')\">\n<p>我们继续回到这张图，genSandbox 函数不仅返回了一个 sandbox 沙箱，还返回了一个 mount 和 unmount 方法，分别在子应用挂载时和卸载时的时候调用。</p>\n<p>我们先看看 mount 函数内部（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/mount.png')\">\n<p>首先，在 mount 内部先激活了子应用沙箱（第 26 行），在沙箱启动后开始劫持各类全局监听（第 27 行），我们这里重点看看 patchAtMounting 内部是怎么实现的。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchAtMounting.png')\">\n<p>patchAtMounting 内部调用了下面四个函数：</p>\n<ul>\n<li>patchTimer（计时器劫持）</li>\n<li>patchWindowListener（window 事件监听劫持）</li>\n<li>patchHistoryListener（window.history 事件监听劫持）</li>\n<li>patchDynamicAppend（动态添加 Head 元素事件劫持）</li>\n</ul>\n<p>上面四个函数实现了对 window 指定对象的统一劫持，我们可以挑一些解析看看其内部实现。</p>\n<h3 id=\"计时器劫持-patchtimer\" tabindex=\"-1\"> 计时器劫持 - patchTimer</h3>\n<p>我们先来看看 patchTimer 对计时器的劫持（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchTimer-patch.png')\">\n<p>从上图可以看出，patchTimer 内部将 setInterval 进行重载，将每个启用的定时器的 intervalId 都收集起来（第 23~24 行），以便在子应用卸载时调用 free 函数将计时器全部清除（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchTimer-free.png')\">\n<p>我们来看看在子应用加载时的 setInterval 函数验证即可（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchTimer-setInterval-log.png')\">\n<p>从上图可以看出，在进入子应用时，setInterval 已经被替换成了劫持后的函数，防止全局计时器泄露污染。</p>\n<h3 id=\"动态添加样式表和脚本文件劫持-patchdynamicappend\" tabindex=\"-1\"> 动态添加样式表和脚本文件劫持 - patchDynamicAppend</h3>\n<p>patchWindowListener 和 patchHistoryListener 的实现都与 patchTimer 实现类似，这里就不作复述了。</p>\n<p>我们需要重点对 patchDynamicAppend 函数进行解析，这个函数的作用是劫持对 head 元素的操作（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchDynamicAppend-patch.png')\">\n<p>从上图可以看出，patchDynamicAppend 主要是对动态添加的 style 样式表和 script 标签做了处理。</p>\n<p>我们先看看对 style 样式表的处理（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchDynamicAppend-style.png')\">\n<p>从上图可以看出，主要的处理逻辑在 第 68~74 行，如果当前子应用处于激活状态（判断子应用的激活状态主要是因为：当主应用切换路由时可能会自动添加动态样式表，\n此时需要避免主应用的样式表被添加到子应用head节点中导致出错），那么动态 style 样式表就会被添加到子应用容器内（见下图），在子应用卸载时样式表也可以和子应用一起被卸载，从而避免样式污染。\n同时，动态样式表也会存储在 dynamicStyleSheetElements 数组中，在后面还会提到其用处。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchDynamicAppend-dynamicStyleSheetElements.png')\">\n<p>我们再来看看对 script 脚本文件的处理（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchDynamicAppend-script.png')\">\n<p>对动态 script 脚本文件的处理较为复杂一些，我们也来解析一波：</p>\n<p>在 第 83~101 行 处对外部引入的 script 脚本文件使用 fetch 获取，然后使用 execScripts 指定 proxy 对象（作为 window 对象）后执行脚本文件内容，同时也触发了 load 和 error 两个事件。</p>\n<p>在 第 103~106 行 处将注释后的脚本文件内容以注释的形式添加到子应用容器内。</p>\n<p>在 第 109~113 行 是对内嵌脚本文件的执行过程，就不作复述了。</p>\n<p>我们可以看出，对动态添加的脚本进行劫持的主要目的就是为了将动态脚本运行时的 window 对象替换成 proxy 代理对象，使子应用动态添加的脚本文件的运行上下文也替换成子应用自身。</p>\n<p>HTMLHeadElement.prototype.removeChild 的逻辑就是多加了个子应用容器判断，其他无异，就不展开说了。</p>\n<p>最后我们来看看 free 函数（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/patchDynamicAppend-free.png')\">\n<p>这个 free 函数与其他的 patches（劫持函数） 实现不太一样，这里缓存了一份 cssRules，在重新挂载的时候会执行 rebuild 函数将其还原。\n这是因为样式元素 DOM 从文档中删除后，浏览器会自动清除样式元素表。如果不这么做的话，在重新挂载时会出现存在 style 标签，但是没有渲染样式的问题。</p>\n<h2 id=\"卸载沙箱-unmountsandbox\" tabindex=\"-1\"> 卸载沙箱 - unmountSandbox</h2>\n<p>我们再回到 mount 函数本身（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/mount.png')\">\n<p>从上图可以看出，在 patchAtMounting 函数中劫持了各类全局监听，并返回了解除劫持的 free 函数。在卸载应用时调用 free 函数解除这些全局监听的劫持行为（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/unmount.png')\">\n<p>从上图可以看到 sideEffectsRebuilders 在 free 后被返回，在 mount 的时候又将被调用 rebuild 重建动态样式表。这块环环相扣，是稍微有点绕，没太看明白的同学可以翻上去再看一遍。</p>\n<p>到这里，qiankun 的最核心部分-沙箱机制，我们就已经解析完毕了，接下来我们继续剖析别的部分。</p>\n<p>在这里我们画一张图，对沙箱的创建过程进行一个总梳理（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/sandboxLifeCycle.png')\">\n<h3 id=\"注册内部生命周期函数\" tabindex=\"-1\"> 注册内部生命周期函数</h3>\n<p>在创建好了沙箱环境后，在 第 100~106 行 注册了一些内部生命周期函数（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/lifeCycles.png')\">\n<p>在上图中，第 106 行 的 mergeWith 方法的作用是将内置的生命周期函数与传入的 lifeCycles 生命周期函数。</p>\n<blockquote>\n<p>这里的 lifeCycles 生命周期函数指的是全子应用共享的生命周期函数，可用于执行多个子应用间相同的逻辑操作，例如 加载效果 之类的。（见下图）</p>\n</blockquote>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/registerMicroAppsLoading.png')\">\n<p>除了外部传入的生命周期函数外，我们还需要关注 qiankun 内置的生命周期函数做了些什么（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/getAddOn.png')\">\n<p>我们对上图的代码进行逐一解析：</p>\n<ul>\n<li>第 13~15 行：在加载子应用前 beforeLoad（只会执行一次）时注入一个环境变量，指示了子应用的 public 路径。</li>\n<li>第 17~19 行：在挂载子应用前 beforeMount（可能会多次执行）时可能也会注入该环境变量。</li>\n<li>第 23~30 行：在卸载子应用前 beforeUnmount 时将环境变量还原到原始状态。</li>\n</ul>\n<p>通过上面的分析我们可以得出一个结论，我们可以在子应用中获取该环境变量，将其设置为 <strong>webpack_public_path</strong> 的值，从而使子应用在主应用中运行时，可以匹配正确的资源路径。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/isInContainer.png')\">\n<h3 id=\"触发-beforeload-生命周期钩子函数\" tabindex=\"-1\"> 触发 beforeLoad 生命周期钩子函数</h3>\n<p>在注册完了生命周期函数后，立即触发了 beforeLoad 生命周期钩子函数（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/beforeLoad.png')\">\n<p>从上图可以看出，在 第 108 行 中，触发了 beforeLoad 生命周期钩子函数。</p>\n<p>随后，在 第 110 行 执行了 import-html-entry 的 execScripts 方法。指定了脚本文件的运行沙箱（jsSandbox），执行完子应用的脚本文件后，返回了一个对象，对象包含了子应用的生命周期钩子函数（见下图）。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/proxyLastOptions.png')\">\n<p>在 第 112~121 行 对子应用的生命周期钩子函数做了个检测，如果在子应用的导出对象中没有发现生命周期钩子函数，会在沙箱对象中继续查找生命周期钩子函数。如果最后没有找到生命周期钩子函数则会抛出一个错误，所以我们的子应用一定要有 bootstrap, mount, unmount 这三个生命周期钩子函数才能被 qiankun 正确嵌入到主应用中。</p>\n<p>这里我们画一张图，对子应用挂载前的初始化过程做一个总梳理（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/beforeMountFlow.png')\">\n<h3 id=\"进入到-mount-挂载流程\" tabindex=\"-1\"> 进入到 mount 挂载流程</h3>\n<p>在一些初始化配置（如 子应用资源、运行沙箱环境、生命周期钩子函数等等）准备就绪后，qiankun 内部将其组装在一起，返回了三个函数作为 single-spa 内部的生命周期函数</p>\n<p>single-spa 内部的逻辑我们后面再展开说，这里我们可以简单理解为 single-spa 内部的三个生命周期钩子函数：</p>\n<ul>\n<li>bootstrap：子应用初始化时调用，只会调用一次；</li>\n<li>mount：子应用挂载时调用，可能会调用多次；</li>\n<li>unmount：子应用卸载时调用，可能会调用多次；</li>\n</ul>\n<p>我们可以看出，在 bootstrap 阶段调用了子应用暴露的 bootstrap 生命周期函数。</p>\n<p>我们这里对 mount 阶段进行展开，看看在子应用 mount 阶段执行了哪些函数（见下</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/mount1.png')\">\n<p>我们进行逐行解析：</p>\n<ul>\n<li>第 127~133 行：对单实例模式进行检测。在单实例模式下，新的子应用挂载行为会在旧的子应用卸载之后才开始。（由于这里是串行顺序执行，所以如果某一处发生阻塞的话，会阻塞所有后续的函数执行）</li>\n<li>第 134 行：执行注册子应用时传入的 render 函数，将 HTML Template 和 loading 作为入参。这里一般是在发生了一次 unmount 后，再次进行 mount 挂载行为时将 HTML 挂载在指定容器中（见下图）</li>\n</ul>\n<blockquote>\n<p>由于初始化的时候已经调用过一次 render，所以在首次调用 mount 时可能已经执行过一次 render 方法。</p>\n<p>在下面的代码中也有对重复挂载的情况进行判断的语句 - if (frame.querySelector(&quot;div&quot;) === null，防止重复挂载子应用。</p>\n</blockquote>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/mountedApp.png')\">\n<ul>\n<li>第 135 行：触发了 beforeMount 全局生命周期钩子函数；</li>\n<li>第 136 行：挂载沙箱，这一步中激活了对应的子应用沙箱，劫持了部分全局监听（如 setInterval）。此时开始子应用的代码将在沙箱中运行。（反推可知，在 beforeMount 前的部分全局操作将会对主应用造成污染，如 setInterval）</li>\n<li>第 137 行：触发子应用的 mount 生命周期钩子函数，在这一步通常是执行对应的子应用的挂载操作（如 ReactDOM.render、Vue.$mount。（见下图）</li>\n</ul>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/mount2.png')\">\n<ul>\n<li>第 138 行：再次调用 render 函数，此时 loading 参数为 false，代表子应用已经加载完成。</li>\n<li>第 139 行：触发了 afterMount 全局生命周期钩子函数；</li>\n<li>第 140~144 行：在单实例模式下设置 prevAppUnmountedDeferred 的值，这个值是一个 promise，在当前子应用卸载时才会被 resolve，在该子应用运行期间会阻塞其他子应用的挂载动作（第 134 行）；</li>\n</ul>\n<p>我们在上面很详细的剖析了整个子应用的 mount 挂载流程，如果你还没有搞懂的话，没关系，我们再画一个流程图来帮助理解。（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/lifeCycle-mount.png')\">\n<h3 id=\"进入到-unmount-卸载流程\" tabindex=\"-1\"> 进入到 unmount 卸载流程</h3>\n<p>我们刚才梳理了子应用的 mount 挂载流程，我们现在就进入到子应用的 unmount 卸载流程。在子应用激活阶段， activeRule 未命中时将会触发 unmount 卸载行为，具体的行为如下（见下图）</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/unmount1.png')\">\n<p>从上图我们可以看出，unmount 卸载流程要比 mount 简单很多，我们直接来梳理一下：</p>\n<ul>\n<li>\n<p>第 148 行：触发了 beforeUnmount 全局生命周期钩子函数；</p>\n</li>\n<li>\n<p>第 149 行：这里与 mount 流程的顺序稍微有点不同，这里先执行了子应用的 unmount 生命周期钩子函数，保证子应用仍然是运行在沙箱内，避免造成状态污染。在这里一般是对子应用的一些状态进行清理和卸载操作。（如下图，销毁了刚才创建的 vue 实例）</p>\n</li>\n<li>\n<p>第 150 行：卸载沙箱，关闭了沙箱的激活状态。</p>\n</li>\n<li>\n<p>第 151 行：触发了 afterUnmount 全局生命周期钩子函数；</p>\n</li>\n<li>\n<p>第 152 行：触发 render 方法，并且传入的 appContent 为空字符串，此处可以清空主应用容器内的内容。</p>\n</li>\n<li>\n<p>第 153~156 行：当前子应用卸载完成后，在单实例模式下触发 prevAppUnmountedDeferred.resolve()，使其他子应用的挂载行为得以继续进行，不再阻塞。</p>\n</li>\n</ul>\n<p>我们对 unmount 卸载流程也画一张图，帮助大家理解（见下图）。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/lifeCycle-unmount.png')\">\n<h2 id=\"总结\" tabindex=\"-1\"> 总结</h2>\n<p>到这里，我们对 qiankun 框架的总流程梳理就差不多了。这里应该做个总结，大家看了这么多文字，估计大家也看累了，最后用一张图对 qiankun 的总流程进行总结吧。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/lifeCycle-flow.png')\">\n<h2 id=\"彩蛋\" tabindex=\"-1\"> 彩蛋</h2>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/deleteProperty.png')\">\n<h2 id=\"展望\" tabindex=\"-1\"> 展望</h2>\n<p>传统的云控制台应用，几乎都会面临业务快速发展之后，单体应用进化成巨石应用的问题。我们要如何维护一个巨无霸中台应用？</p>\n<p>上面这个问题引出了微前端架构理念，所以微前端的概念也越来越火，我们团队最近也在尝试转型微前端架构。</p>\n<p>工欲善其事必先利其器，所以针对 qiankun 的源码进行解读，在分享知识的同时也是帮助自己理解。</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/micro/qianKun/lifeCycle-info.png')\">\n",
      "image": "https://jin-shaohui.gitee.io/background/black-001.jpg",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "微前端"
      ]
    },
    {
      "title": "浏览器缓存",
      "url": "https://jin-shaohui.gitee.io/Network/BrowserCache/",
      "id": "https://jin-shaohui.gitee.io/Network/BrowserCache/",
      "summary": " 什么是web缓存？\nweb缓存主要指的是两部分：浏览器缓存和http缓存。\nhttp缓存是web缓存的核心，是最难懂的那一部分,也是最重要的那一部分。\n浏览器缓存：例如 localStorage(5M)、sessionStorage(5M)、cookie(4k)等等。这些功能主要用于缓存一些必要的数据，比如用户信息。比如需要携带到后端的参数。亦或者是一些列表数据等等。\n 缓存可以解决什么问题？\n\n减少不必要的网络传输，节约宽带（就是省钱）\n更快的加载页面（就是加速）\n减少服务器负载，避免服务器过载的情况出现。（就是减载）\n\n 缺点是什么？\n\n占内存（有些缓存会被存到内存中）\n\n",
      "content_html": "<h2 id=\"什么是web缓存\" tabindex=\"-1\"> 什么是web缓存？</h2>\n<p><code>web缓存</code>主要指的是两部分：<code>浏览器缓存</code>和<code>http缓存</code>。</p>\n<p>http缓存是web缓存的核心，是最难懂的那一部分,也是最重要的那一部分。</p>\n<p>浏览器缓存：例如 <code>localStorage(5M)</code>、<code>sessionStorage(5M)</code>、<code>cookie(4k)</code>等等。这些功能主要用于缓存一些必要的数据，比如用户信息。比如需要携带到后端的参数。亦或者是一些列表数据等等。</p>\n<h2 id=\"缓存可以解决什么问题\" tabindex=\"-1\"> 缓存可以解决什么问题？</h2>\n<ol>\n<li>减少不必要的网络传输，节约宽带（就是<code>省钱</code>）</li>\n<li>更快的加载页面（就是<code>加速</code>）</li>\n<li>减少服务器负载，避免服务器过载的情况出现。（就是<code>减载</code>）</li>\n</ol>\n<h2 id=\"缺点是什么\" tabindex=\"-1\"> 缺点是什么？</h2>\n<ol>\n<li>占内存（有些缓存会被存到内存中）</li>\n</ol>\n\n<h2 id=\"http缓存\" tabindex=\"-1\"> http缓存</h2>\n<div>\n<p>官方介绍</p>\n<p><code>Web缓存</code>是可以<code>自动保存</code>常见文档副本的 <code>HTTP设备</code>。当<code>Web请求</code>抵达缓存时，如果本地有<code>已缓存的</code>副本，就可以从<code>本地存储设备</code>而不是<code>原始服务器</code>中提取这个文档。</p>\n</div>\n<i>Content not supported</i><p>服务器需要处理<code>http</code>的请求，而缓存，就是为了让服务器<code>不去处理</code>这个请求，客户端也可以<code>拿到数据</code>。</p>\n<p>注意，缓存主要是针对<code>html</code>、<code>css</code>、<code>img</code>等<code>静态资源</code>，常规情况下，<strong>不会去缓存一些动态资源</strong>。</p>\n<h3 id=\"大纲\" tabindex=\"-1\"> 大纲</h3>\n<p><strong>我们把<code>http缓存</code>问题拆分下，可以从以下几个方面来回答这个问题:</strong></p>\n<ul>\n<li>缓存的类型 (<code>强缓存</code>or<code>协商缓存</code>)</li>\n<li>缓存位置 (<code>Service Worker</code>、<code>Memory Cache</code>...)</li>\n<li>缓存过程分析</li>\n<li>缓存策略的实际场景应用</li>\n</ul>\n<h3 id=\"缓存的类型\" tabindex=\"-1\"> 缓存的类型</h3>\n<p>首先从缓存的类型上来说，可以分为两种: <strong>强缓存</strong> 与 <strong>协商缓存</strong></p>\n<p>强缓存是<strong>不需要发送HTTP请求的，而协商缓存需要</strong></p>\n<p>也就是在<strong>发送HTTP请求之前</strong>，浏览器会<strong>先检查</strong>一下<code>强缓存</code>，如果命中直接使用，否则就进入下一步。</p>\n<i>Content not supported</i><h4 id=\"强缓存\" tabindex=\"-1\"> 强缓存</h4>\n<p>浏览器检查强缓存的方式主要是判断这两个字段:</p>\n<ul>\n<li><code>HTTP/1.0</code>使用的是<code>Expires</code>;</li>\n<li><code>HTTP/1.1</code>使用的是<code>Cache-Control</code>;</li>\n</ul>\n<h5 id=\"expires\" tabindex=\"-1\"> Expires</h5>\n<p>Expires字面意思是<code>有效期</code>，那么很好理解，它表示的就是一个具体的时间</p>\n<p>例如:</p>\n<div><pre><code><span><span>Expires</span><span>:</span> <span>Wed,Nov 11 2020 08:00:00 GMT</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>表示这个资源在<strong>2020年11月11日8点</strong>之前，都会去<strong>本地的磁盘（或内存）中读取</strong>，不会去服务器请求。过了这个时间就得<strong>向服务端发请求</strong>了。</p>\n<div>\n<p>很有意思的是</p>\n<p><code>Expires</code>过度<strong>依赖本地时间</strong>，如果 <strong>本地与服务器时间不同步</strong>，就会出现资源 <strong>无法被缓存</strong> 或者 <strong>资源永远被缓存</strong> 的情况。</p>\n<p>若是设置了<code>Expires</code>，但是 <strong>服务器的时间</strong> 与 <strong>浏览器的时间</strong> <strong>不一致</strong> 的时候(比如你手动修改了本地的时间)，</p>\n<p>那么就可能会造成<strong>缓存失效</strong>，因此这种方式强缓存方式并不是很准确，它也因此在<code>HTTP/1.1</code>中被<strong>摒弃</strong>了。</p>\n</div>\n<h5 id=\"cache-control\" tabindex=\"-1\"> Cache-Control</h5>\n<p>摒弃了Expires之后，HTTP/1。1采用了Cache-Control这个重要的规则。<br>\n它设置的是一个具体的过期时长，其中的一个属性是max-age。</p>\n<p>例如🌰:</p>\n<div><pre><code><span><span>Cache-Control</span><span>:</span> <span>max-age=300</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>表示的是这个资源在响应之后的300s内过期，也就是5分钟之内再次获取这个资源会直接使用缓存。</p>\n<p>Cache-Control不仅仅有max-age 这一个属性，其实它有很多的用法，你甚至可以采用组合的方式:</p>\n<div><pre><code><span><span>Cache-Control</span><span>:</span> <span>public,max-age=300</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>上面用法的意思是响应可以被任何对象(客户端，代理服务器等)缓存，且过期时长为5分钟。\n(因为一个请求经历的不仅仅是客户端(浏览器)和目标服务器，它中间有可能会经过不同的代理服务器)</p>\n<p>下面来例举一些常用的指令:</p>\n<ul>\n<li>public: 客户端和代理服务器都可以缓存。</li>\n</ul>\n<blockquote>\n<p>响应可以被中间任何的一个节点缓存，比如一个请求要经历 Browser -&gt; proxy1 -&gt; proxy2 -&gt; Server，中间的代理(proxy)可以缓存资源。 下次再请求同一资源的时候，浏览器就会直接到proxy1中拿缓存的东西而不必向proxy2拿。</p>\n</blockquote>\n<ul>\n<li>private: 这个是Cache-Control默认的取值，只有客户端可以缓存，中间节点不允许缓存。</li>\n</ul>\n<blockquote>\n<p>在 Browser -&gt; proxy1 -&gt; proxy2 -&gt; Server 这个过程中，代理(proxy)不会缓存任何数据，当Browser再次请求时，proxy会把Server返回的数据发送给Brower，做好请求转发，而不是给自己缓存的数据。</p>\n</blockquote>\n<ul>\n<li>no-cache: 表示不进行强缓存验证，而是用协商缓存来验证。</li>\n<li>no-store: 所有内容都不会被缓存，不进行强缓存，也不进行协商缓存。</li>\n<li>max-age: 表示在多久之后过期，比如max-age=300表示在300s后缓存内容失效。</li>\n<li>s-max-age: 它的作用和max-age很像， 不过max-age 用于普通缓存，而s-max-age用于代理缓存，且s-max-age的优先级更高。</li>\n<li>max-stale: 能容忍的最大过期时间。</li>\n</ul>\n<blockquote>\n<p>max-stale指令表示客户端愿意接收一个已经过期了的响应。</p>\n</blockquote>\n<ul>\n<li>min-fresh：能够容忍的最小新鲜度。</li>\n</ul>\n<blockquote>\n<p>min-fresh表示客户端不愿意接受新鲜度不多于当前的age加上min-fresh设定的时间之和的响应。</p>\n</blockquote>\n<p>基于上面的这些指令，我们可以将它们进行组合，达到多个目的， 不同的效果。\n有一张来自<a href=\"https://www.jianshu.com/p/54cc04190252\" target=\"_blank\" rel=\"noopener noreferrer\">《浪里行舟-深入理解浏览器的缓存机制》</a>中的图表述的非常好:</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/network/browserCache/001.jpg')\">\n<h4 id=\"expires和cache-control的对比\" tabindex=\"-1\"> Expires和Cache-control的对比</h4>\n<ul>\n<li>Expires产于HTTP/1。0，Cache-control产于HTTP/1。1;</li>\n<li>Expires设置的是一个具体的时间，Cache-control 可以设置具体时常还有其它的属性;</li>\n<li>两者同时存在，Cache-control的优先级更高;</li>\n<li>在不支持HTTP/1。1的环境下，Expires就会发挥作用，所以先阶段的存在是为了做一些兼容的处理。</li>\n</ul>\n<h3 id=\"协商缓存\" tabindex=\"-1\"> 协商缓存</h3>\n<p>在上面我们已经介绍了强缓存，它是不需要发送HTTP请求的，若是强缓存失效，则会进入协商缓存。</p>\n<p>协商缓存概括来说 就是浏览器会携带缓存标识(tag)向服务器发送请求，服务器会根据缓存标识(tag)来决定是否使用缓存。</p>\n<p>所以对于服务器的返回结果会有这两种情况:</p>\n<ul>\n<li>协商缓存生效，返回304和Not Modified(空的响应体)</li>\n<li>协商缓存失效，返回200和请求结果</li>\n</ul>\n<p>而刚刚提到的这个缓存标识(tag)也是有两种。</p>\n<p>分为Last-Modified和 ETag。</p>\n<h4 id=\"last-modified-和-if-modified-since\" tabindex=\"-1\"> Last-Modified 和 If-Modified-Since</h4>\n<p>从字面意思上我们可以看出，Last-Modified表示的是资源的最后修改时间，因此其中一种协商缓存判断的就是最后修改时间。</p>\n<p>那它具体是怎样实现的呢?</p>\n<p>其实使用Last-Modified进行协商缓存会经过以下几步:</p>\n<ol>\n<li>浏览器第一次向服务器请求这个资源</li>\n<li>服务器在返回这个资源的时候，在response header中添加Last-Modified的header，值为该资源在服务器上最后的修改时间</li>\n<li>浏览器接收到后缓存文件和这个header</li>\n<li>当下次浏览器再次请求这个资源的时候， 检测到有Last-Modified这个header，就会在请求头中添加If-Modified-Since这个header，该值就是Last-Modified</li>\n<li>服务器再次接收到该资源的请求，则根据If-Modified-Since与服务器中的这个资源的最后修改时间做对比</li>\n<li>对比结果相同则返回304和一个空的响应体，告诉浏览器从自己(浏览器)的缓存中拿</li>\n<li>对比结果不同(If-Modified-Since &lt; 服务器资源最后修改时间)，则表示资源被修改了，则返回200和最新的资源文件(当然还包括最新的Last-Modefied)</li>\n</ol>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/network/browserCache/002.jpg')\">\n<h4 id=\"etag-与-if-none-match\" tabindex=\"-1\"> ETag 与 If-None-Match</h4>\n<p>ETag其实与Last-Modefied的原理差不多，不过它不是根据资源的最后修改时间来判断的，而是通过一个唯一的标识。</p>\n<p>在浏览器请求服务器资源的时候，服务器会根据当前文件的内容，给文件生成一个唯一的标识，若是文件发生了改变，则这个标识就会改变。</p>\n<p>服务器会将这个标识ETag放到响应体的header中与请求的资源一起返回给浏览器，而浏览器同样也会缓存文件与这个header。</p>\n<p>在下一次再次加载该资源时，浏览器会将刚刚缓存的ETag放到请求体头部(request header)的If-None-Match里发送给服务器。</p>\n<p>同样的服务器接收到了之后与该资源自身的ETag做对比，如果一致，则表示该资源未发生改变，则直接返回304知会客户端直接使用本地缓存即可。 若是不一致，则返回200和最新的资源文件(当然还包括最新的ETag)</p>\n<p>如下图:</p>\n<img :src=\"$withBase('/assets/knowledge/frontEnd/network/browserCache/003.jpg')\">\n<h4 id=\"两者对比\" tabindex=\"-1\"> 两者对比</h4>\n<p>在进行对比之前，我们先来看看两者都有什么优缺点呢?</p>\n<p>首先对于Last-Modified:</p>\n<ul>\n<li>若是本地打开了缓存文件，并没有进行修改，也还是会改变最后修改时间，导致缓存失败;</li>\n<li>由于Last-Modified是以秒来计时的，若是某个文件在一秒内被修改了很多次，那么这时候的 Last-Modified 并没有体现出修改了。</li>\n</ul>\n<p>然后对于ETag:</p>\n<ul>\n<li>性能上的不足,只要文件发生改变,ETag就会发生改变。  ETag需要服务器通过算法来计算出一个hash值。</li>\n</ul>\n<p><strong>总结，所以对于两种协商缓存:</strong></p>\n<ul>\n<li>准确度上ETag更强;</li>\n<li>性能上Last-Modified更好;</li>\n<li>两者都支持的话，ETag优先级更高。</li>\n</ul>\n<h2 id=\"缓存位置\" tabindex=\"-1\"> 缓存位置</h2>\n<p>在上面我们已经介绍完了缓存的类型，但是之前也提到过了，若是命中了强缓存或者服务器返回了304之后，\n要浏览器从缓存中过去资源，那这些缓存具体是存储在哪里呢?</p>\n<p>从优先级上来说分为以下四种:</p>\n<ul>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>Push Cache</li>\n</ul>\n<h3 id=\"service-worker\" tabindex=\"-1\"> Service Worker</h3>\n<p>Service Worker是运行在浏览器背后的独立线程，也就是说它脱离了浏览器的窗体，无法直接访问DOM。\n功能上主要是能实现: 离线缓存、消息推送、网络代理等。比如离线缓存就是Service Worker Cache。</p>\n<p>简单来说，它有以下几个特点:</p>\n<ul>\n<li>借鉴了Web Worker的思路</li>\n<li>使用Service Worker会涉及到请求拦截，所以需要用HTTPS协议来保证安全，传输协议必须是HTTPS</li>\n<li>与浏览器其它内建的缓存机制不同，它可以让我们自由的控制缓存哪些文件、如何匹配读取缓存，且缓存是持续性的</li>\n<li>Service Worker同时也是PWA的重要实现机制</li>\n</ul>\n<h3 id=\"memory-cache\" tabindex=\"-1\"> Memory Cache</h3>\n<p>从命名上来说，Memory Cache就是内存中的缓存，存储的主要是当前页面已经抓取到的资源，\n比如页面上已经下载的样式、脚本、图片等。</p>\n<p>Memory Cache的特点:</p>\n<ul>\n<li>读取效率快，可是缓存持续时间短，会随着进程的释放而释放(一旦关闭Tab页面，就被释放了，还有可能在没关闭之前，排在前面的缓存就失效了，例如一个页面的缓存占用了超级多的内存)</li>\n<li>几乎所有的请求资源都能进入memory Cache，细分来说主要分为preloader和preload这两块。</li>\n<li>在从memory Cache读取缓存时，浏览器会忽视Cache-Control中的一些max-age、no-cache等头部配置，除非设置了no-store这个头部配置。</li>\n</ul>\n<p><strong>preloader</strong></p>\n<p>上面提到的preloader是页面优化的常见手段之一，它的作用主要是用于在浏览器打开一个网页的时候,能够一边解析执行js/css，一边去请求下一个资源，而这些被 preloader 请求来的资源就会被放入 memory Cache 中，供之后的解析执行操作使用。</p>\n<p><strong>preload</strong></p>\n<p>preload与preloader仅两个字母之差，它能显式指定预加载的资源，这些资源也会被放进memory Cache中，例如<link rel=\"preload\"></p>\n<h3 id=\"disk-cache\" tabindex=\"-1\"> Disk Cache</h3>\n<p>Disk Cache，也叫做HTTP Cache，是存储在硬盘上的缓存，所以它是持久存储，是实际存在于文件系统中的。</p>\n<p>从存储效率上说，它比内存缓存慢，但是优势在于存储容量更大，且存储时长更长。</p>\n<p>在所有浏览器缓存中，Disk Cache是覆盖面最大的。 它会根据前面我们提到的HTTP header中的缓存字段来判断哪些资源需要缓存，哪些资源不需要请求而直接使用，哪些已经过期了需要重新请求获取。</p>\n<p>若是命中了缓存之后，浏览器会从硬盘中直接读取资源，虽然没有从内存中读取的快，但是却是比网络缓存快。</p>\n<p>前面提到的强缓存和协商缓存也是属于Disk Cache，它们最终都存储在硬盘里。</p>\n<p><strong>Memory Cache与Disk Cache两者的对比:</strong></p>\n<ul>\n<li>比较大的JS、CSS文件会被丢硬盘中存储，反之则存储在内存中</li>\n<li>当前系统内存使用率比较高的时候，文件优先进入磁盘</li>\n</ul>\n<h3 id=\"push-cache\" tabindex=\"-1\"> Push Cache</h3>\n<p>Push Cache(推送缓存)，它是浏览器缓存的最后一段防线，当以上三种缓存都没有命中的时候，它才会被使用。</p>\n<p>我所知道的，它只会在会话(Session)中存在，一旦会话结束它就会被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟。</p>\n<p>另外由于它是 HTTP/2 中的内容，因此在国内不是很普及，这里贴上一个比较好的总结:</p>\n<ul>\n<li>所有的资源都能被推送，并且能够被缓存,但是 Edge 和 Safari 浏览器支持相对比较差</li>\n<li>可以推送 no-cache 和 no-store 的资源</li>\n<li>一旦连接被关闭，Push Cache 就被释放</li>\n<li>多个页面可以使用同一个HTTP/2的连接，也就可以使用同一个Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的tab标签使用同一个HTTP连接。</li>\n<li>Push Cache 中的缓存只能被使用一次</li>\n<li>浏览器可以拒绝接受已经存在的资源推送</li>\n<li>你可以给其他域名推送资源</li>\n</ul>\n<h2 id=\"缓存过程分析\" tabindex=\"-1\"> 缓存过程分析</h2>\n<p>上面已经向大家介绍了缓存类型已经缓存的位置，那么浏览器具体的一个缓存行径是怎样的呢?</p>\n<p>从浏览器发起HTTP请求到获得请求结果，可以分为以下几个过程:</p>\n<ol>\n<li>浏览器第一次发起HTTP请求，在浏览器缓存中没有发现请求的缓存结果和缓存标识</li>\n<li>因此向服务器发起HTTP请求，获得该请求的结果还有缓存规则(也就是Last-Modified 或者ETag)</li>\n<li>浏览器把响应内容存入Disk Cache，把响应内容的引用存入Memory Cache</li>\n<li>把响应内容存入 Service Worker 的 Cache Storage (如果 Service Worker 的脚本调用了 cache.put())</li>\n</ol>\n<p>下一次请求相同资源的时候:</p>\n<ol>\n<li>调用Service Worker 的fetch事件响应</li>\n<li>查看memory Cache</li>\n<li>查看disk Cache。 这里细分为:</li>\n</ol>\n<blockquote>\n<p>有强缓存且未失效，则使用强缓存，不请求服务器，返回的状态码都是200\n有强缓存且已失效，使用协商缓存判断，是返回304还是200(读取缓存还是重新获取)</p>\n</blockquote>\n<h2 id=\"缓存策略的实际场景应用\" tabindex=\"-1\"> 缓存策略的实际场景应用</h2>\n<p>说了这么多缓存策略，那么在实际使用上来说，我们一般是怎样使用它的呢?</p>\n<p><strong>不常变化的资源</strong></p>\n<p>对于不常变化的资源:</p>\n<div><pre><code><span><span>Cache-Control</span><span>:</span> <span>max-age=31536000</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>通常是给Cache-Control设置成一个很大的值，(31536000，一年)。 这个也很好理解，不常变化的资源，直接让它使用缓存就是了。</p>\n<p>但是有时候为了解决更新的问题，我们需要在文件名中添加上hash，版本号等动态字段，这样就达到了更改引用URL 的目的。</p>\n<p><strong>常变化的资源</strong></p>\n<p>经常变化的资源，我们进行以下配置:</p>\n<div><pre><code><span><span>Cache-Control</span><span>:</span> <span>no-cache</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>设置成以上配置，使得浏览器每次都请求服务器，然后配合ETag或者Last-Modified来验证资源是否有效。</p>\n<h2 id=\"后语\" tabindex=\"-1\"> 后语</h2>\n<p>浏览器缓存的内容其实还有很多可以说的，这里主要是总结了一些面试时常问到的，你可以转化成自己的言语来回答面试官。</p>\n",
      "image": "https://jin-shaohui.gitee.io/background/black-001.jpg",
      "date_published": "2022-09-22T10:15:04.000Z",
      "date_modified": "2022-09-22T09:47:24.000Z",
      "authors": [],
      "tags": [
        "Network"
      ]
    },
    {
      "title": "跨域",
      "url": "https://jin-shaohui.gitee.io/Network/CrossDomain/",
      "id": "https://jin-shaohui.gitee.io/Network/CrossDomain/",
      "summary": "白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。\n 发生跨域的三个必要条件：\n一般情况，我们己的项目地址和接口地址的域名不同时，如：https://localhost:9527，也许会不假思索的就能回答出：不同协议，不同域名，不同端口。没有问题，但并不准确，我更倾向于把这三个叫 跨域的三要素 ，那什么是跨域形成的必要条件呢？\n\n浏览器限制： 即浏览器对跨域行为进行检测和阻止\n触发跨域的三要素之一： 即协议、域名和端口三个条件满足其一\n发起的是xhr请求： 即发起的是 XMLHttpRequest 类型的请求。\n\n",
      "content_html": "<p>白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。</p>\n<h2 id=\"发生跨域的三个必要条件\" tabindex=\"-1\"> 发生跨域的三个必要条件：</h2>\n<p>一般情况，我们己的项目地址和接口地址的域名不同时，如：https://localhost:9527，也许会不假思索的就能回答出：<strong>不同协议，不同域名，不同端口</strong>。没有问题，但并不准确，我更倾向于把这三个叫 <strong>跨域的三要素</strong> ，那什么是跨域形成的必要条件呢？</p>\n<blockquote>\n<p>浏览器限制： 即浏览器对跨域行为进行检测和阻止</p>\n<p>触发跨域的三要素之一： 即协议、域名和端口三个条件满足其一</p>\n<p>发起的是xhr请求： 即发起的是 XMLHttpRequest 类型的请求。</p>\n</blockquote>\n\n<h2 id=\"如何解决跨域\" tabindex=\"-1\"> 如何解决跨域？</h2>\n<p>为了更好的理解这个知识点，我们先回顾一下一个普通项目的交互关系。客户端有各种各样的请求发送给中间服务器Apache / Nginx，中间服务器在接收到请求之后，判断如果是静态资源（img，js插件等）则直接返回客户端，如果是交互资源（例如访问@RequestMapping里的方法）则转发至应用服务器上。</p>\n<p>现在大部分公司项目采用前后端分离的开发模式，使得客户端和服务器端通常都在不同服务器上，这种模式解决跨域主要有两种思路：</p>\n<ul>\n<li>第一种就是<strong>被调用方（即后端）解决</strong>：调用方在浏览器直接将请求发送至被调用方，被调用方处理完成后，在请求响应中添加基于http协议关于跨域请求的一些规定，就是在http响应头中添加Access-Control-Allow-Origin等一些配置允许跨域访问。这种解决方法是基于解决跨域的思路，修改的是被调用方的HTTP服务器，我们在浏览器中能看到有调用方的url，也有被调用方的url。</li>\n</ul>\n<div><pre><code><span>// 允许跨域的域名，设置*表示允许除带Cookies信息的所有域名</span>\nresponse<span>.</span><span>addHeader</span><span>(</span><span>\"Access-Control-Allow-Origin\"</span><span>,</span> <span>\"*\"</span><span>)</span><span>;</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><ul>\n<li>第二种就是<strong>调用方（即前端）解决</strong>：这是基于隐藏跨域的解决办法。调用方通过一个代理服务器（Nginx）转发请求到被调用方的中间服务器，浏览器看到请求都是来自同一个域，就不会报跨域问题了。这种方式是基于隐藏跨域的思路，修改的是调用方的HTTP服务器(调用方的请求url是经过调用方的 Nginx 做反向代理转换转换的，目的就是为了和‘’被调用方”的域名端口一致)，在浏览器中也就只能看到调用方的url。</li>\n</ul>\n<h3 id=\"补充后端解决跨域问题\" tabindex=\"-1\"> 补充后端解决跨域问题</h3>\n<p>如果是在被调用方解决跨域问题，被调用方解决支持跨域办法如下：</p>\n<ol>\n<li>在应用服务器端实现</li>\n<li>在Ngnix上配置</li>\n<li>在Apache上配置</li>\n<li>Spring框架解决</li>\n</ol>\n<p>虽然有4种方案，但是这4种方案的本质都是一样的，最终的目的是在响应头增加字段。浏览器在执行跨域请求时，如果遇到是简单请求，则先执行后判断；如果是非简单请求，则先使用OPTION向服务器发起一个预检请求 <strong>preflight request</strong> ，从而获知服务器是否允许该跨域访问，如果允许，就在此发起带真实数据的请求，否则不发起。这就实现了对被调用方的数据安全保护，也是跨域问题设计所在的目的之一。</p>\n<blockquote>\n<p>在介绍简单/非简单请求前，我们要了解什么是 Content-Type，<strong>Content-Type是指http/https发送信息至服务器时的内容编码类型</strong></p>\n</blockquote>\n<p><strong>【常见简单请求】</strong></p>\n<ol>\n<li>\n<p>GET</p>\n</li>\n<li>\n<p>HEAD</p>\n</li>\n<li>\n<p>POST</p>\n</li>\n</ol>\n<p>且它的Content-Type为text/plain（普通文本类型）或multipart/form-data（多媒体数据/表单数据）或application/x-www-form-urlencoded中的一种</p>\n<p><strong>【常见非简单请求】</strong></p>\n<ol>\n<li>PUT</li>\n<li>DELETE</li>\n<li>OPTIONS</li>\n<li>发送Json格式的Ajax请求[常为post]</li>\n<li>带自定义Header信息的Ajax请求</li>\n<li>CONNECT</li>\n<li>TRACE</li>\n<li>PATCH</li>\n</ol>\n<p>当浏览器发现发起的是一个跨域的请求时，它会向请求头里增加一个Origin字段，当请求被响应时，浏览器会检查响应头里有没有设置允许跨域的信息，如果没有，它就会报错。同理，如果给请求增加头信息，那么加入的信息也会作为跨域检查的信息。</p>\n<ul>\n<li><strong>举个例子</strong></li>\n</ul>\n<p>我们在本地搭起来了一个后端项目，端口号为8080；同时搭建了一个前端项目，端口号为9527。那这个时候我们直接调用后端接口的时候，前后端分离的原因导致我们需要跨域请求 。因此，在应用服务器端的响应头需要添加允许跨域的设置，即如下：</p>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>void</span> <span>doFilter</span><span>(</span><span>ServletRequest</span> request<span>,</span> <span>ServletResponse</span> response<span>,</span> <span>FilterChain</span> chain<span>)</span>\n  <span>throws</span> <span>IOException</span><span>,</span> <span>ServletException</span> <span>{</span>\n\n  <span>HttpServletResponse</span> res <span>=</span> <span>(</span><span>HttpServletResponse</span><span>)</span> response<span>;</span>\n\n  <span>// 允许跨域的域名，设置*表示允许除带Cookies信息的所有域名</span>\n  res<span>.</span><span>addHeader</span><span>(</span><span>\"Access-Control-Allow-Origin\"</span><span>,</span> <span>\"http://localhost:9527\"</span><span>)</span><span>;</span> \n  <span>// 允许跨域的方法，可设置*表示所有。GET/POST/OPTIONS等</span>\n  res<span>.</span><span>addHeader</span><span>(</span><span>\"Access-Control-Allow-Methods\"</span><span>,</span> <span>\"GET\"</span><span>)</span><span>;</span> \n  <span>// 假如给post请求头设置了contentType字段，则需要添加以下信息</span>\n  res<span>.</span><span>addHeader</span><span>(</span><span>\"Access-Control-Allow-Headers\"</span><span>,</span> <span>\"Content-Type\"</span><span>)</span><span>;</span>\n  <span>// 设置预检命令的缓存时效。单位是\"秒\"</span>\n  <span>// 如果没有失效，则不会再次发起OPTION预检请求</span>\n  res<span>.</span><span>addHeader</span><span>(</span><span>\"Access-Control-Max-Age\"</span><span>,</span> <span>\"3600\"</span><span>)</span><span>;</span>\n  <span>// 还可以有其他配置...</span>\n  chain<span>.</span><span>doFilter</span><span>(</span>request<span>,</span> response<span>)</span><span>;</span> <span>//让过滤器放行该请求</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这时候，我们就可以在响应头Response Headers里观察到 <strong>Access-Control-Allow-Origin</strong> 和 <strong>Access-Control-Allow-Methods</strong> 信息，这代表跨域就被成功允许了。</p>\n<ul>\n<li><strong>还有一种特殊情况</strong></li>\n</ul>\n<p>带有Cookie的请求还需要注意一下两点才能实现跨域：</p>\n<ol>\n<li>Access-Control-Allow-Origin的值不能为 <strong>'*'</strong> 而是必须是精准匹配，因此需要添上具体的域名</li>\n<li>打开允许Cookie的设置，即Access-Control-Allow-Credentials: true</li>\n</ol>\n<p>但是这又带出了另一个问题，就是只能支持一个域名的跨域，怎么办？其实该变量可以通过调用方的请求头信息获取，解决办法如下：</p>\n<div><pre><code><span>HttpServletRequest</span> req <span>=</span> <span>(</span><span>HttpServletRequset</span><span>)</span> request<span>;</span>\n<span>String</span> origin <span>=</span>  req<span>.</span><span>getHeader</span><span>(</span><span>'Origin'</span><span>)</span><span>;</span>\n<span>if</span> <span>(</span><span>!</span><span><span>org<span>.</span>springframework<span>.</span>util<span>.</span></span>StringUtils</span><span>.</span><span>isEmpty</span><span>(</span>origin<span>)</span><span>)</span> <span>{</span>\n  <span>// 带cookie的时候origin必须是全匹配，不能使用 *</span>\n  res<span>.</span><span>addHeader</span><span>(</span><span>\"Access-Control-Allow-Orign\"</span><span>,</span> origin<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>对于需要增加请求头信息解决方案与此类似</p>\n<p><strong>调用方解决跨域：反向代理</strong></p>\n<p>当被调用方无法帮助解决处理跨域问题时，调用方也可以自己解决处理。其实现的办法就是利用反向代理</p>\n<blockquote>\n<p><strong>正向代理：</strong> 利用代理客户端去请求服务器，从而隐藏了真实的客户端，服务器并不知道客户端是谁，这种代理方式称作正向代理，其代理的对象是客户端</p>\n<p><strong>反向代理:</strong> 反向代理隐藏了真正的服务端。举个例子，我们只知道敲下www.baidu.com时就能访问百度搜索页面，然而背后成千上万的服务器到底是哪一台正在为我们服务我们并不知道，这种隐藏了服务器端的代理方式称作反向代理，其代理的是服务器端。软件层面上常用Ngnix来做反向代理服务器，他的性能很好，用来做负载均衡。</p>\n</blockquote>\n<p>为了实现反向代理，我们需要在 Ngnix中配置一个代理域名，或者称为一个网址demo.com，就像百度成千上万的服务器使用用一个代理网址www.baidu.com一样。ngnix的配置信息如下</p>\n<div><pre><code><span><span>server</span></span> <span>{</span>\n  <span><span>listen</span> <span>80</span></span><span>;</span>\n  <span><span>server_name:</span> demo.com</span><span>;</span> <span># 请求域名是demo.com，端口是80的，都会被nginx做代理</span>\n  <span># http://demo.com/api/test 就会跳转到http://localhost:8080/test/</span>\n  <span><span>location</span> /api</span> <span>{</span>\n    <span><span>proxy_pass</span> http://localhost:8080/test/</span><span>;</span>\n  <span>}</span>\n  <span># http://demo.com/test 就会跳转到http://localhost:8080/</span>\n  <span><span>location</span> /</span> <span>{</span>\n    <span><span>proxy_pass</span> http://localhost:8080</span><span>;</span> \n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"总结\" tabindex=\"-1\"> 总结</h2>\n<p>跨域是由浏览器安全限制造成的，解决跨域的办法有三种，一是 <strong>Jsonp</strong> 绕过浏览器安全检测策略，二是从被调用方配置支持跨域的请求头信息，三是从调用方利用反向代理，在 Ngnix 或 Apache 中配置代理域名隐藏跨域。</p>\n",
      "date_published": "2022-06-01T15:28:16.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Network"
      ]
    },
    {
      "title": "服务相关问题",
      "url": "https://jin-shaohui.gitee.io/Network/Question/",
      "id": "https://jin-shaohui.gitee.io/Network/Question/",
      "content_html": "<h2 id=\"常问问题\" tabindex=\"-1\"> 常问问题</h2>\n<h3 id=\"一个完整的http请求发生了什么\" tabindex=\"-1\"> 一个完整的http请求发生了什么</h3>\n<h3 id=\"从浏览器输入url到回车页面渲染出来-这中间发生了什么\" tabindex=\"-1\"> 从浏览器输入url到回车页面渲染出来 这中间发生了什么</h3>\n",
      "date_published": "2022-05-16T11:26:43.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Question"
      ]
    },
    {
      "title": "Storage",
      "url": "https://jin-shaohui.gitee.io/Package/Storage/",
      "id": "https://jin-shaohui.gitee.io/Package/Storage/",
      "summary": "很多人在用 localStorage 或 sessionStorage 的时候喜欢直接用明文存储，直接将信息暴露在浏览器中，\n虽然一般场景下都能应付得了且简单粗暴，但特殊需求情况下，比如设置定时功能，就不能实现。\n就需要对其进行二次封装，为了在使用上增加些安全感，那加密也必然是少不了的了。\n为方便项目使用，特对常规操作进行封装。\n",
      "content_html": "<p>很多人在用 localStorage 或 sessionStorage 的时候喜欢直接用明文存储，直接将信息暴露在浏览器中，</p>\n<p>虽然一般场景下都能应付得了且简单粗暴，但特殊需求情况下，比如设置定时功能，就不能实现。</p>\n<p>就需要对其进行二次封装，为了在使用上增加些安全感，那加密也必然是少不了的了。</p>\n<p>为方便项目使用，特对常规操作进行封装。</p>\n\n<h2 id=\"设计\" tabindex=\"-1\"> 设计</h2>\n<div>\n<p>Tips</p>\n<p>封装之前先梳理下所需功能，并要做成什么样，采用什么样的规范，部分主要代码片段是以 localStorage作为示例。</p>\n</div>\n<ul>\n<li>区分存储类型 type</li>\n<li>自定义名称前缀 prefix</li>\n<li>支持设置过期时间 expire</li>\n<li>支持加密可选，开发环境下未方便调试可关闭加密</li>\n<li>支持数据加密 这里采用 crypto-js 加密 也可使用其他方式</li>\n<li>判断是否支持 Storage isSupportStorage</li>\n<li>设置 setStorage</li>\n<li>获取 getStorage</li>\n<li>是否存在 hasStorage</li>\n<li>获取所有key getStorageKeys</li>\n<li>根据索引获取key getStorageForIndex</li>\n<li>获取localStorage长度 getStorageLength</li>\n<li>获取全部 getAllStorage</li>\n<li>删除 removeStorage</li>\n<li>清空 clearStorage</li>\n</ul>\n<div><pre><code><span>//定义参数 类型 window.localStorage, window.sessionStorage,</span>\n<span>const</span> config <span>=</span> <span>{</span>\n  <span>type</span><span>:</span> <span>'localStorage'</span><span>,</span> <span>// 本地存储类型 localStorage/sessionStorage</span>\n  <span>prefix</span><span>:</span> <span>'JSH_0.0.1'</span><span>,</span> <span>// 名称前缀 建议：项目名 + 项目版本</span>\n  <span>expire</span><span>:</span> <span>1</span><span>,</span> <span>//过期时间 单位：秒</span>\n  <span>isEncrypt</span><span>:</span> <span>true</span> <span>// 默认加密 为了调试方便, 开发过程中可以不加密</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"设置-setstorage\" tabindex=\"-1\"> 设置 setStorage</h3>\n<div>\n<p>Tips</p>\n<p>Storage 本身是不支持过期时间设置的，要支持设置过期时间，可以效仿 Cookie 的做法，setStorage(key,value,expire) 方法，接收三个参数，第三个参数就是设置过期时间的，用相对时间，单位秒，要对所传参数进行类型检查。</p>\n<p>可以设置统一的过期时间，也可以对单个值得过期时间进行单独配置。两种方式按需配置。</p>\n</div>\n<div><pre><code><span>export</span> <span>const</span> <span>setStorage</span> <span>=</span> <span>(</span><span>key<span>,</span>value<span>,</span>expire<span>=</span><span>0</span></span><span>)</span> <span>=></span> <span>{</span>\n  <span>if</span> <span>(</span>value <span>===</span> <span>''</span> <span>||</span> value <span>===</span> <span>null</span> <span>||</span> value <span>===</span> <span>undefined</span><span>)</span> <span>{</span>\n      value <span>=</span> <span>null</span><span>;</span>\n  <span>}</span>\n\n  <span>if</span> <span>(</span><span>isNaN</span><span>(</span>expire<span>)</span> <span>||</span> expire <span>&lt;</span> <span>1</span><span>)</span> <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Expire must be a number\"</span><span>)</span><span>;</span>\n\n  expire <span>=</span> <span>(</span>expire<span>?</span>expire<span>:</span>config<span>.</span>expire<span>)</span> <span>*</span> <span>60000</span><span>;</span>\n  <span>let</span> data <span>=</span> <span>{</span>\n      <span>value</span><span>:</span> value<span>,</span> <span>// 存储值</span>\n      <span>time</span><span>:</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>,</span> <span>//存值时间戳</span>\n      <span>expire</span><span>:</span> expire <span>// 过期时间</span>\n  <span>}</span>\n\n  window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>setItem</span><span>(</span>key<span>,</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"获取-getstorage\" tabindex=\"-1\"> 获取 getStorage</h3>\n<div>\n<p>Tips</p>\n<p>首先要对 key 是否存在进行判断，防止获取不存在的值而报错。对获取方法进一步扩展，只要在有效期内获取 Storage 值，就对过期时间进行续期，如果过期则直接删除该值。并返回 null</p>\n</div>\n<div><pre><code><span>export</span> <span>const</span> <span>getStorage</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n  <span>// key 不存在判断</span>\n  <span>if</span> <span>(</span><span>!</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span> <span>||</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span> <span>===</span> <span>'null'</span><span>)</span><span>{</span>\n      <span>return</span> <span>null</span><span>;</span>\n  <span>}</span>\n\n  <span>// 优化 持续使用中续期</span>\n  <span>const</span> storage <span>=</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n\n  <span>let</span> nowTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>\n\n  <span>// 过期删除</span>\n  <span>if</span> <span>(</span>storage<span>.</span>expire <span>&amp;&amp;</span> config<span>.</span>expire<span>*</span><span>6000</span> <span>&lt;</span> <span>(</span>nowTime <span>-</span> storage<span>.</span>time<span>)</span><span>)</span> <span>{</span>\n      <span>removeStorage</span><span>(</span>key<span>)</span><span>;</span>\n      <span>return</span> <span>null</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n      <span>// 未过期期间被调用 则自动续期 进行保活</span>\n      <span>setStorage</span><span>(</span>key<span>,</span>storage<span>.</span>value<span>)</span><span>;</span>\n      <span>return</span> storage<span>.</span>value<span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"获取所有值\" tabindex=\"-1\"> 获取所有值</h3>\n<div><pre><code><span>export</span> <span>const</span> <span>getAllStorage</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>let</span> len <span>=</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span>length <span>// 获取长度</span>\n  <span>let</span> arr <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>)</span> <span>// 定义数据集</span>\n  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      <span>// 获取key 索引从0开始</span>\n      <span>let</span> getKey <span>=</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>key</span><span>(</span>i<span>)</span>\n      <span>// 获取key对应的值</span>\n      <span>let</span> getVal <span>=</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>getKey<span>)</span>\n      <span>// 放进数组</span>\n      arr<span>[</span>i<span>]</span> <span>=</span> <span>{</span> <span>'key'</span><span>:</span> getKey<span>,</span> <span>'val'</span><span>:</span> getVal<span>,</span> <span>}</span>\n  <span>}</span>\n  <span>return</span> arr\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"删除-removestorage\" tabindex=\"-1\"> 删除 removeStorage</h3>\n<div><pre><code><span>// 名称前自动添加前缀</span>\n<span>const</span> <span>autoAddPrefix</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> prefix <span>=</span> config<span>.</span>prefix <span>?</span> config<span>.</span>prefix <span>+</span> <span>'_'</span> <span>:</span> <span>''</span><span>;</span>\n    <span>return</span>  prefix <span>+</span> key<span>;</span>\n<span>}</span>\n\n<span>// 删除 removeStorage</span>\n<span>export</span> <span>const</span> <span>removeStorage</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>removeItem</span><span>(</span><span>autoAddPrefix</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"清空-clearstorage\" tabindex=\"-1\"> 清空 clearStorage</h3>\n<div><pre><code><span>export</span> <span>const</span> <span>clearStorage</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"加密、解密\" tabindex=\"-1\"> 加密、解密</h3>\n<div>\n<p>Tips</p>\n<p>加密采用的是 crypto-js</p>\n</div>\n<div><pre><code>// 安装crypto-js\n<span>npm</span> <span>install</span> crypto-js\n\n// 引入 crypto-js 有以下两种方式\n<span>import</span> CryptoJS from <span>\"crypto-js\"</span><span>;</span>\n// 或者\nconst CryptoJS <span>=</span> require<span>(</span><span>\"crypto-js\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>对 crypto-js 设置密钥和密钥偏移量，可以采用将一个私钥经 MD5 加密生成16位密钥获得。</p>\n</div>\n<div><pre><code><span>// 十六位十六进制数作为密钥</span>\n<span>const</span> <span>SECRET_KEY</span> <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Utf8<span>.</span><span>parse</span><span>(</span><span>\"3333e6e143439161\"</span><span>)</span><span>;</span>\n<span>// 十六位十六进制数作为密钥偏移量</span>\n<span>const</span> <span>SECRET_IV</span> <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Utf8<span>.</span><span>parse</span><span>(</span><span>\"e3bbe7e3ba84431a\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><div>\n<p>Tips</p>\n<p>对加密方法进行封装</p>\n</div>\n<div><pre><code><span>/**\n * 加密方法\n * <span>@param</span> <span>data</span>\n * <span>@returns</span> <span><span>{</span>string<span>}</span></span>\n */</span>\n<span>export</span> <span>function</span> <span>encrypt</span><span>(</span><span>data</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>typeof</span> data <span>===</span> <span>\"object\"</span><span>)</span> <span>{</span>\n    <span>try</span> <span>{</span>\n      data <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>;</span>\n    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>\n      console<span>.</span><span>log</span><span>(</span><span>\"encrypt error:\"</span><span>,</span> error<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n  <span>const</span> dataHex <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Utf8<span>.</span><span>parse</span><span>(</span>data<span>)</span><span>;</span>\n  <span>const</span> encrypted <span>=</span> CryptoJS<span>.</span><span>AES</span><span>.</span><span>encrypt</span><span>(</span>dataHex<span>,</span> <span>SECRET_KEY</span><span>,</span> <span>{</span>\n    <span>iv</span><span>:</span> <span>SECRET_IV</span><span>,</span>\n    <span>mode</span><span>:</span> CryptoJS<span>.</span>mode<span>.</span><span>CBC</span><span>,</span>\n    <span>padding</span><span>:</span> CryptoJS<span>.</span>pad<span>.</span>Pkcs7\n  <span>}</span><span>)</span><span>;</span>\n  <span>return</span> encrypted<span>.</span>ciphertext<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>/**\n * 解密方法\n * <span>@param</span> <span>data</span>\n * <span>@returns</span> <span><span>{</span>string<span>}</span></span>\n */</span>\n<span>export</span> <span>function</span> <span>decrypt</span><span>(</span><span>data</span><span>)</span> <span>{</span>\n  <span>const</span> encryptedHexStr <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Hex<span>.</span><span>parse</span><span>(</span>data<span>)</span><span>;</span>\n  <span>const</span> str <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Base64<span>.</span><span>stringify</span><span>(</span>encryptedHexStr<span>)</span><span>;</span>\n  <span>const</span> decrypt <span>=</span> CryptoJS<span>.</span><span>AES</span><span>.</span><span>decrypt</span><span>(</span>str<span>,</span> <span>SECRET_KEY</span><span>,</span> <span>{</span>\n    <span>iv</span><span>:</span> <span>SECRET_IV</span><span>,</span>\n    <span>mode</span><span>:</span> CryptoJS<span>.</span>mode<span>.</span><span>CBC</span><span>,</span>\n    <span>padding</span><span>:</span> CryptoJS<span>.</span>pad<span>.</span>Pkcs7\n  <span>}</span><span>)</span><span>;</span>\n  <span>const</span> decryptedStr <span>=</span> decrypt<span>.</span><span>toString</span><span>(</span>CryptoJS<span>.</span>enc<span>.</span>Utf8<span>)</span><span>;</span>\n  <span>return</span> decryptedStr<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在存储数据及获取数据中进行使用：</p>\n<p>这里我们主要看下进行加密和解密部分，部分方法在下面代码段中并未展示，<code>请注意，不能直接运行</code>。</p>\n<div><pre><code><span>const</span> config <span>=</span> <span>{</span>\n    <span>type</span><span>:</span> <span>'localStorage'</span><span>,</span> <span>// 本地存储类型 sessionStorage</span>\n    <span>prefix</span><span>:</span> <span>'JSH_0.0.1'</span><span>,</span> <span>// 名称前缀 建议：项目名 + 项目版本</span>\n    <span>expire</span><span>:</span> <span>1</span><span>,</span> <span>//过期时间 单位：秒</span>\n    <span>isEncrypt</span><span>:</span> <span>true</span> <span>// 默认加密 为了调试方便, 开发过程中可以不加密</span>\n<span>}</span>\n\n<span>export</span> <span>const</span> <span>setStorage</span> <span>=</span> <span>(</span><span>key<span>,</span> value<span>,</span> expire <span>=</span> <span>0</span></span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span>value <span>===</span> <span>''</span> <span>||</span> value <span>===</span> <span>null</span> <span>||</span> value <span>===</span> <span>undefined</span><span>)</span> <span>{</span>\n        value <span>=</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>if</span> <span>(</span><span>isNaN</span><span>(</span>expire<span>)</span> <span>||</span> expire <span>&lt;</span> <span>0</span><span>)</span> <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Expire must be a number\"</span><span>)</span><span>;</span>\n\n    expire <span>=</span> <span>(</span>expire <span>?</span> expire <span>:</span> config<span>.</span>expire<span>)</span> <span>*</span> <span>1000</span><span>;</span>\n    <span>let</span> data <span>=</span> <span>{</span>\n        <span>value</span><span>:</span> value<span>,</span> <span>// 存储值</span>\n        <span>time</span><span>:</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>,</span> <span>//存值时间戳</span>\n        <span>expire</span><span>:</span> expire <span>// 过期时间</span>\n    <span>}</span>\n    <span>// 对存储数据进行加密 加密为可选配置</span>\n    <span>const</span> encryptString <span>=</span> config<span>.</span>isEncrypt <span>?</span> <span>encrypt</span><span>(</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>)</span><span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>;</span>\n    window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>setItem</span><span>(</span><span>autoAddPrefix</span><span>(</span>key<span>)</span><span>,</span> encryptString<span>)</span><span>;</span>\n<span>}</span>\n\n\n<span>export</span> <span>const</span> <span>getStorage</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    key <span>=</span> <span>autoAddPrefix</span><span>(</span>key<span>)</span><span>;</span>\n    <span>// key 不存在判断</span>\n    <span>if</span> <span>(</span><span>!</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span> <span>||</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span> <span>===</span> <span>'null'</span><span>)</span> <span>{</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>// 对存储数据进行解密</span>\n    <span>const</span> storage <span>=</span> config<span>.</span>isEncrypt <span>?</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span><span>decrypt</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span><span>)</span> <span>:</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n    <span>let</span> nowTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>\n    \n    <span>// 过期删除</span>\n    <span>if</span> <span>(</span>storage<span>.</span>expire <span>&amp;&amp;</span> config<span>.</span>expire <span>*</span> <span>6000</span> <span>&lt;</span> <span>(</span>nowTime <span>-</span> storage<span>.</span>time<span>)</span><span>)</span> <span>{</span>\n        <span>removeStorage</span><span>(</span>key<span>)</span><span>;</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n        <span>//  持续使用时会自动续期</span>\n        <span>setStorage</span><span>(</span><span>autoRemovePrefix</span><span>(</span>key<span>)</span><span>,</span> storage<span>.</span>value<span>)</span><span>;</span>\n        <span>return</span> storage<span>.</span>value<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"使用\" tabindex=\"-1\"> 使用</h3>\n<p>使用的时候你可以通过 import 按需引入，也可以挂载到全局上使用，一般建议少用全局方式或全局变量，为后来接手项目继续开发维护的人，追查代码留条便捷之路！不要为了封装而封装，尽可能基于项目需求和后续的通用，以及使用上的便捷。比如获取全部存储变量，如果你项目上都未曾用到过，倒不如删减掉，留着过年也不见得有多香，不如为减小体积做点贡献！</p>\n<div><pre><code><span>import</span> <span>{</span>isSupportStorage<span>,</span> hasStorage<span>,</span> setStorage<span>,</span>getStorage<span>,</span>getStorageKeys<span>,</span>getStorageForIndex<span>,</span>getStorageLength<span>,</span>removeStorage<span>,</span>getStorageAll<span>,</span>clearStorage<span>}</span> <span>from</span> <span>'@/utils/storage'</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"完整代码\" tabindex=\"-1\"> 完整代码</h3>\n<div><pre><code><span>import</span> CryptoJS <span>from</span> <span>'crypto-js'</span><span>;</span>\n\n<span>// 十六位十六进制数作为密钥</span>\n<span>const</span> <span>SECRET_KEY</span> <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Utf8<span>.</span><span>parse</span><span>(</span><span>\"3333e6e143439161\"</span><span>)</span><span>;</span>\n<span>// 十六位十六进制数作为密钥偏移量</span>\n<span>const</span> <span>SECRET_IV</span> <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Utf8<span>.</span><span>parse</span><span>(</span><span>\"e3bbe7e3ba84431a\"</span><span>)</span><span>;</span>\n\n<span>// 类型 window.localStorage,window.sessionStorage,</span>\n<span>const</span> config <span>=</span> <span>{</span>\n    <span>type</span><span>:</span> <span>'localStorage'</span><span>,</span> <span>// 本地存储类型 sessionStorage</span>\n    <span>prefix</span><span>:</span> <span>'JSH_0.0.1'</span><span>,</span> <span>// 名称前缀 建议：项目名 + 项目版本</span>\n    <span>expire</span><span>:</span> <span>1</span><span>,</span> <span>//过期时间 单位：秒</span>\n    <span>isEncrypt</span><span>:</span> <span>true</span> <span>// 默认加密 为了调试方便, 开发过程中可以不加密</span>\n<span>}</span>\n\n<span>// 判断是否支持 Storage</span>\n<span>export</span> <span>const</span> <span>isSupportStorage</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> <span>(</span><span>typeof</span> <span>(</span>Storage<span>)</span> <span>!==</span> <span>\"undefined\"</span><span>)</span> <span>?</span> <span>true</span> <span>:</span> <span>false</span>\n<span>}</span>\n\n<span>// 设置 setStorage</span>\n<span>export</span> <span>const</span> <span>setStorage</span> <span>=</span> <span>(</span><span>key<span>,</span> value<span>,</span> expire <span>=</span> <span>0</span></span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span>value <span>===</span> <span>''</span> <span>||</span> value <span>===</span> <span>null</span> <span>||</span> value <span>===</span> <span>undefined</span><span>)</span> <span>{</span>\n        value <span>=</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>if</span> <span>(</span><span>isNaN</span><span>(</span>expire<span>)</span> <span>||</span> expire <span>&lt;</span> <span>0</span><span>)</span> <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Expire must be a number\"</span><span>)</span><span>;</span>\n\n    expire <span>=</span> <span>(</span>expire <span>?</span> expire <span>:</span> config<span>.</span>expire<span>)</span> <span>*</span> <span>1000</span><span>;</span>\n    <span>let</span> data <span>=</span> <span>{</span>\n        <span>value</span><span>:</span> value<span>,</span> <span>// 存储值</span>\n        <span>time</span><span>:</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>,</span> <span>//存值时间戳</span>\n        <span>expire</span><span>:</span> expire <span>// 过期时间</span>\n    <span>}</span>\n    \n    <span>const</span> encryptString <span>=</span> config<span>.</span>isEncrypt \n    <span>?</span> <span>encrypt</span><span>(</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>)</span>\n    <span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>;</span>\n    \n    window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>setItem</span><span>(</span><span>autoAddPrefix</span><span>(</span>key<span>)</span><span>,</span> encryptString<span>)</span><span>;</span>\n<span>}</span>\n\n<span>// 获取 getStorage</span>\n<span>export</span> <span>const</span> <span>getStorage</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    key <span>=</span> <span>autoAddPrefix</span><span>(</span>key<span>)</span><span>;</span>\n    <span>// key 不存在判断</span>\n    <span>if</span> <span>(</span><span>!</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span> <span>||</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span> <span>===</span> <span>'null'</span><span>)</span> <span>{</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>// 优化 持续使用中续期</span>\n    <span>const</span> storage <span>=</span> config<span>.</span>isEncrypt \n    <span>?</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span><span>decrypt</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span><span>)</span> \n    <span>:</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n    \n    <span>let</span> nowTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>\n\n    <span>// 过期删除</span>\n    <span>if</span> <span>(</span>storage<span>.</span>expire <span>&amp;&amp;</span> config<span>.</span>expire <span>*</span> <span>6000</span> <span>&lt;</span> <span>(</span>nowTime <span>-</span> storage<span>.</span>time<span>)</span><span>)</span> <span>{</span>\n        <span>removeStorage</span><span>(</span>key<span>)</span><span>;</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n        <span>// 未过期期间被调用 则自动续期 进行保活</span>\n        <span>setStorage</span><span>(</span><span>autoRemovePrefix</span><span>(</span>key<span>)</span><span>,</span> storage<span>.</span>value<span>)</span><span>;</span>\n        <span>return</span> storage<span>.</span>value<span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>// 是否存在 hasStorage</span>\n<span>export</span> <span>const</span> <span>hasStorage</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    key <span>=</span> <span>autoAddPrefix</span><span>(</span>key<span>)</span><span>;</span>\n    <span>let</span> arr <span>=</span> <span>getStorageAll</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span><span>(</span><span>item</span><span>)</span><span>=></span><span>{</span>\n        <span>return</span> item<span>.</span>key <span>===</span> key<span>;</span>\n    <span>}</span><span>)</span>\n    <span>return</span> arr<span>.</span>length <span>?</span> <span>true</span> <span>:</span> <span>false</span><span>;</span>\n<span>}</span>\n\n<span>// 获取所有key</span>\n<span>export</span> <span>const</span> <span>getStorageKeys</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>let</span> items <span>=</span> <span>getStorageAll</span><span>(</span><span>)</span>\n    <span>let</span> keys <span>=</span> <span>[</span><span>]</span>\n    <span>for</span> <span>(</span><span>let</span> index <span>=</span> <span>0</span><span>;</span> index <span>&lt;</span> items<span>.</span>length<span>;</span> index<span>++</span><span>)</span> <span>{</span>\n        keys<span>.</span><span>push</span><span>(</span>items<span>[</span>index<span>]</span><span>.</span>key<span>)</span>\n    <span>}</span>\n    <span>return</span> keys\n<span>}</span>\n\n<span>// 根据索引获取key</span>\n<span>export</span> <span>const</span> <span>getStorageForIndex</span> <span>=</span> <span>(</span><span>index</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>key</span><span>(</span>index<span>)</span>\n<span>}</span>\n\n<span>// 获取localStorage长度</span>\n<span>export</span> <span>const</span> <span>getStorageLength</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span>length\n<span>}</span>\n\n<span>// 获取全部 getAllStorage</span>\n<span>export</span> <span>const</span> <span>getStorageAll</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>let</span> len <span>=</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span>length <span>// 获取长度</span>\n    <span>let</span> arr <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>)</span> <span>// 定义数据集</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>// 获取key 索引从0开始</span>\n        <span>let</span> getKey <span>=</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>key</span><span>(</span>i<span>)</span>\n        <span>// 获取key对应的值</span>\n        <span>let</span> getVal <span>=</span> window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>getItem</span><span>(</span>getKey<span>)</span>\n        <span>// 放进数组</span>\n        arr<span>[</span>i<span>]</span> <span>=</span> <span>{</span><span>'key'</span><span>:</span> getKey<span>,</span> <span>'val'</span><span>:</span> getVal<span>,</span><span>}</span>\n    <span>}</span>\n    <span>return</span> arr\n<span>}</span>\n\n<span>// 删除 removeStorage</span>\n<span>export</span> <span>const</span> <span>removeStorage</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>removeItem</span><span>(</span><span>autoAddPrefix</span><span>(</span>key<span>)</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// 清空 clearStorage</span>\n<span>export</span> <span>const</span> <span>clearStorage</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    window<span>[</span>config<span>.</span>type<span>]</span><span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>// 名称前自动添加前缀</span>\n<span>const</span> <span>autoAddPrefix</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> prefix <span>=</span> config<span>.</span>prefix <span>?</span> config<span>.</span>prefix <span>+</span> <span>'_'</span> <span>:</span> <span>''</span><span>;</span>\n    <span>return</span>  prefix <span>+</span> key<span>;</span>\n<span>}</span>\n\n<span>// 移除已添加的前缀</span>\n<span>const</span> <span>autoRemovePrefix</span> <span>=</span> <span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> len <span>=</span> config<span>.</span>prefix <span>?</span> config<span>.</span>prefix<span>.</span>length<span>+</span><span>1</span> <span>:</span> <span>''</span><span>;</span>\n    <span>return</span> key<span>.</span><span>substr</span><span>(</span>len<span>)</span>\n    <span>// const prefix = config.prefix ? config.prefix + '_' : '';</span>\n    <span>// return  prefix + key;</span>\n<span>}</span>\n\n<span>/**\n * 加密方法\n * <span>@param</span> <span>data</span>\n * <span>@returns</span> <span><span>{</span>string<span>}</span></span>\n */</span>\n<span>const</span> <span>encrypt</span> <span>=</span> <span>(</span><span>data</span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span><span>typeof</span> data <span>===</span> <span>\"object\"</span><span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            data <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>\"encrypt error:\"</span><span>,</span> error<span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>const</span> dataHex <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Utf8<span>.</span><span>parse</span><span>(</span>data<span>)</span><span>;</span>\n    <span>const</span> encrypted <span>=</span> CryptoJS<span>.</span><span>AES</span><span>.</span><span>encrypt</span><span>(</span>dataHex<span>,</span> <span>SECRET_KEY</span><span>,</span> <span>{</span>\n        <span>iv</span><span>:</span> <span>SECRET_IV</span><span>,</span>\n        <span>mode</span><span>:</span> CryptoJS<span>.</span>mode<span>.</span><span>CBC</span><span>,</span>\n        <span>padding</span><span>:</span> CryptoJS<span>.</span>pad<span>.</span>Pkcs7\n    <span>}</span><span>)</span><span>;</span>\n    <span>return</span> encrypted<span>.</span>ciphertext<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>/**\n * 解密方法\n * <span>@param</span> <span>data</span>\n * <span>@returns</span> <span><span>{</span>string<span>}</span></span>\n */</span>\n<span>const</span> <span>decrypt</span> <span>=</span> <span>(</span><span>data</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> encryptedHexStr <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Hex<span>.</span><span>parse</span><span>(</span>data<span>)</span><span>;</span>\n    <span>const</span> str <span>=</span> CryptoJS<span>.</span>enc<span>.</span>Base64<span>.</span><span>stringify</span><span>(</span>encryptedHexStr<span>)</span><span>;</span>\n    <span>const</span> decrypt <span>=</span> CryptoJS<span>.</span><span>AES</span><span>.</span><span>decrypt</span><span>(</span>str<span>,</span> <span>SECRET_KEY</span><span>,</span> <span>{</span>\n        <span>iv</span><span>:</span> <span>SECRET_IV</span><span>,</span>\n        <span>mode</span><span>:</span> CryptoJS<span>.</span>mode<span>.</span><span>CBC</span><span>,</span>\n        <span>padding</span><span>:</span> CryptoJS<span>.</span>pad<span>.</span>Pkcs7\n    <span>}</span><span>)</span><span>;</span>\n    <span>const</span> decryptedStr <span>=</span> decrypt<span>.</span><span>toString</span><span>(</span>CryptoJS<span>.</span>enc<span>.</span>Utf8<span>)</span><span>;</span>\n    <span>return</span> decryptedStr<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-13T15:07:14.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Storage"
      ]
    },
    {
      "title": "浅谈12个Hooks",
      "url": "https://jin-shaohui.gitee.io/React/Hooks/",
      "id": "https://jin-shaohui.gitee.io/React/Hooks/",
      "summary": " 前言\nReact Hooks的发布已经有三年多了，它给函数式组件带来了生命周期，现如今，Hooks逐渐取代class组件，相信各位 React 开发的小伙伴已经深有体会，然而你真的完全掌握hooks了吗？知道如何去做一个好的自定义hooks吗？\n我们知道React Hooks有useState设置变量，useEffect副作用，useRef来获取元素的所有属性，还有useMemo、useCallback来做性能优化，当然还有一个自定义Hooks，来创造出你所想要的Hooks\n接下来我们来看看以下几个问题，问问自己，是否全都知道：\n\nHooks的由来是什么？\nuseRef的高级用法是什么？\nuseMemo 和 useCallback 是怎么做优化的？\n一个好的自定义Hooks该如何设计？\n如何做一个不需要useState就可以直接修改属性并刷新视图的自定义Hooks？\n如何做一个可以监听任何事件的自定义Hooks？\n\n如果你对以上问题有疑问，有好奇，那么这篇文章应该能够帮助到你～\n本文将会以介绍自定义Hooks来解答上述问题，并结合 TS，ahooks中的钩子，以案列的形式去演示\n注：这里讲解的自定义钩子可能会和 ahooks上的略有不同，不会考虑过多的情况，如果用于项目，建议直接使用ahooks上的钩子～\n\n",
      "content_html": "<h2 id=\"前言\" tabindex=\"-1\"> 前言</h2>\n<p><code>React Hooks</code>的发布已经有三年多了，它给函数式组件带来了<strong>生命周期</strong>，现如今，<code>Hooks</code>逐渐取代<code>class</code>组件，相信各位 <code>React</code> 开发的小伙伴已经深有体会，然而你真的完全掌握hooks了吗？知道如何去做一个好的自定义hooks吗？</p>\n<p>我们知道<code>React Hooks</code>有<code>useState</code>设置变量，<code>useEffect</code>副作用，<code>useRef</code>来获取元素的所有属性，还有<code>useMemo</code>、<code>useCallback</code>来做性能优化，当然还有一个<code>自定义Hooks</code>，来创造出你所想要的<code>Hooks</code></p>\n<p>接下来我们来看看以下几个问题，问问自己，是否全都知道：</p>\n<ul>\n<li>Hooks的由来是什么？</li>\n<li><code>useRef</code>的高级用法是什么？</li>\n<li><code>useMemo</code> 和 <code>useCallback</code> 是怎么做优化的？</li>\n<li>一个好的自定义Hooks该如何设计？</li>\n<li>如何做一个不需要<code>useState</code>就可以直接修改属性并刷新视图的自定义Hooks？</li>\n<li>如何做一个可以监听任何事件的自定义Hooks？</li>\n</ul>\n<p>如果你对以上问题有疑问，有好奇，那么这篇文章应该能够帮助到你～</p>\n<p>本文将会以介绍<strong>自定义Hooks</strong>来解答上述问题，并结合 <strong>TS</strong>，<strong>ahooks</strong>中的钩子，以案列的形式去演示</p>\n<p>注：这里讲解的自定义钩子可能会和 <code>ahooks</code>上的略有不同，不会考虑过多的情况，如果用于项目，建议直接使用<code>ahooks</code>上的钩子～</p>\n<p><img src=\"/assets/knowledge/frontEnd/react/hooks/reactHooks.jpg\" alt=\"reactHooks\"></p>\n\n<h2 id=\"自定义hooks是什么\" tabindex=\"-1\"> 自定义Hooks是什么？</h2>\n<p><code>react-hooks</code>是<code>React16.8</code>以后新增的钩子API，目的是增加代码的可复用性、逻辑性，最主要的是解决了<strong>函数式组件无状态的问题</strong>，这样既保留了函数式的简单，又解决了没有数据管理状态的缺陷。那么什么是自定义hooks呢？</p>\n<p><code>自定义hooks</code>是在<code>react-hooks</code>基础上的一个扩展，可以根据业务、需求去制定相应的<code>hooks</code>,将常用的逻辑进行封装，从而具备复用性。</p>\n<h3 id=\"如何设计一个自定义hooks\" tabindex=\"-1\"> 如何设计一个自定义Hooks</h3>\n<p><code>hooks</code>本质上是一个<strong>函数</strong>，而这个函数主要就是<strong>逻辑复用</strong>，我们首先要知道一件事，<code>hooks</code>的驱动条件是什么？</p>\n<p>其实就是<code>props</code>的修改，<code>useState</code>、<code>useReducer</code>的使用是无状态组件更新的条件，从而驱动自定义hooks。</p>\n<h3 id=\"通用模式\" tabindex=\"-1\"> 通用模式</h3>\n<p>自定义hooks的名称是以<strong>use</strong>开头，我们设计为： <code>const [ xxx, ...] = useXXX(参数一，参数二...)</code></p>\n<h3 id=\"简单的小例子-usepow\" tabindex=\"-1\"> 简单的小例子：usePow</h3>\n<p>我们先写一个简单的小例子来了解下<code>自定义hooks</code></p>\n<div><pre><code><span>// usePow.ts</span>\n<span>const</span> <span>Index</span> <span>=</span> <span>(</span>list<span>:</span> <span>number</span><span>[</span><span>]</span><span>)</span> <span>=></span> <span>{</span>\n\n  <span>return</span> list<span>.</span><span>map</span><span>(</span><span>(</span>item<span>:</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>1</span><span>)</span>\n    <span>return</span> Math<span>.</span><span>pow</span><span>(</span>item<span>,</span> <span>2</span><span>)</span>\n  <span>}</span><span>)</span>\n<span>}</span>\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>// index.tsx</span>\n<span>import</span> <span>{</span> Button <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n<span>import</span> React<span>,</span><span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> usePow <span>}</span> <span>from</span> <span>'@/components'</span><span>;</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span>props<span>)</span><span>=></span> <span>{</span>\n  <span>const</span> <span>[</span>flag<span>,</span> setFlag<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>boolean</span><span>></span></span></span><span>(</span><span>true</span><span>)</span>\n  <span>const</span> data <span>=</span> <span>usePow</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span>\n  \n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span><span>></span></span><span>数字：</span><span>{</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>{</span><span>setFlag</span><span>(</span>v <span>=></span> <span>!</span>v<span>)</span><span>}</span><span>}</span></span><span>></span></span><span>切换</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span><span>></span></span><span>切换状态：</span><span>{</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>flag<span>)</span><span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span>\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我们简单的写了个 <code>usePow</code>，我们通过 <code>usePow</code> 给所传入的数字平方, 用切换状态的按钮表示函数内部的状态，我们来看看此时的效果：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d21cc3b15e24a8fba7a7cf3f2a89d14~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"awebp\"></p>\n<p>我们发现了一个问题，为什么点击切换按钮也会触发<code>console.log(1)</code>呢？</p>\n<p>这样明显增加了性能开销，我们的理想状态肯定不希望做无关的渲染，所以我们做自定义 <code>hooks</code>的时候一定要注意，需要<strong>减少性能开销</strong>,我们为组件加入 <code>useMemo</code>试试：</p>\n<div><pre><code><span>import</span> <span>{</span> useMemo <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> <span>Index</span> <span>=</span> <span>(</span>list<span>:</span> <span>number</span><span>[</span><span>]</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> <span>useMemo</span><span>(</span><span>(</span><span>)</span> <span>=></span> list<span>.</span><span>map</span><span>(</span><span>(</span>item<span>:</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>1</span><span>)</span>\n    <span>return</span> Math<span>.</span><span>pow</span><span>(</span>item<span>,</span> <span>2</span><span>)</span>\n  <span>}</span><span>)</span><span>,</span> <span>[</span><span>]</span><span>)</span> \n<span>}</span>\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3e583fe589a4dacbb0a5a72b2e99cef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<p>发现此时就已经解决了这个问题，所以要非常注意一点，一个好用的自定义<code>hooks</code>,一定要配合<code>useMemo</code>、<code>useCallback</code>等 Api 一起使用。</p>\n<h2 id=\"玩转react-hooks\" tabindex=\"-1\"> 玩转React Hooks</h2>\n<p>在上述中我们讲了用 <code>useMemo</code>来处理无关的渲染，接下来我们一起来看看<code>React Hooks</code>的这些钩子的妙用（这里建议先熟知、并使用对应的<code>React Hooks</code>,才能造出好的钩子）</p>\n<h3 id=\"usememo\" tabindex=\"-1\"> useMemo</h3>\n<p>当一个父组件中调用了一个子组件的时候，父组件的 state 发生变化，会导致父组件更新，而子组件虽然没有发生改变，但也会进行更新。</p>\n<p>简单的理解下，当一个页面内容非常复杂，模块非常多的时候，函数式组件会<strong>从头更新到尾</strong>，只要一处改变，所有的模块都会进行刷新，这种情况显然是没有必要的。</p>\n<p>我们理想的状态是各个模块只进行自己的更新，不要相互去影响，那么此时用<code>useMemo</code>是最佳的解决方案。</p>\n<p>这里要尤其注意一点，<strong>只要父组件的状态更新，无论有没有对自组件进行操作，子组件都会进行更新</strong>，<code>useMemo</code>就是为了防止这点而出现的</p>\n<p>在讲 <code>useMemo</code> 之前，我们先说说<code>memo</code>,<code>memo</code>的作用是<strong>结合了pureComponent纯组件和 componentShouldUpdate功能</strong>，会对传入的props进行一次对比，然后根据第二个函数返回值来进一步判断哪些props需要更新。（具体使用会在下文讲到～）</p>\n<p><code>useMemo</code>与<code>memo</code>的理念上差不多，都是判断是否满足当前的限定条件来决定是否执行<code>callback</code>函数，而<code>useMemo</code>的第二个参数是一个数组，通过这个数组来判定是否更新回掉函数</p>\n<p>这种方式可以运用在<strong>元素、组件、上下文中</strong>，尤其是利用在数组上，先看一个例子：</p>\n<div><pre><code><span>useMemo</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>(</span>\n    <span><span><span>&lt;</span>div</span><span>></span></span><span>\n        </span><span>{</span>\n            list<span>.</span><span>map</span><span>(</span><span>(</span>item<span>,</span> index<span>)</span> <span>=></span> <span>(</span>\n                <span><span><span>&lt;</span>p</span> <span>key</span><span><span>=</span><span>{</span>index<span>}</span></span><span>></span></span><span>\n                    </span><span>{</span>item<span>.</span>name<span>}</span><span>\n                </span><span><span><span>&lt;/</span></span><span>></span></span><span>\n            )}\n        }\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n),[list])\n</span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>从上面我们看出 <code>useMemo</code>只有在<code>list</code>发生变化的时候才会进行渲染，从而减少了不必要的开销</p>\n<p>总结一下<code>useMemo</code>的好处：</p>\n<ul>\n<li>可以减少不必要的循环和不必要的渲染</li>\n<li>可以减少子组件的渲染次数</li>\n<li>通过特地的依赖进行更新，可以避免很多不必要的开销，但要注意，有时候在配合 <code>useState</code>拿不到最新的值，这种情况可以考虑使用 <code>useRef</code>解决</li>\n</ul>\n<h3 id=\"usecallback\" tabindex=\"-1\"> useCallback</h3>\n<p><code>useCallback</code>与<code>useMemo</code>极其类似,可以说是一模一样，唯一不同的是<code>useMemo</code>返回的是函数运行的<strong>结果</strong>，而<code>useCallback</code>返回的是<strong>函数</strong></p>\n<p>注意：这个函数是父组件传递子组件的一个函数，防止做无关的刷新，其次，这个组件必须配合<code>memo</code>,否则<strong>不但不会提升性能，还有可能降低性能</strong></p>\n<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState<span>,</span> useCallback <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> Button <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n\n<span>const</span> MockMemo<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>[</span>count<span>,</span>setCount<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>\n  <span>const</span> <span>[</span>show<span>,</span>setShow<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>true</span><span>)</span>\n\n  <span>const</span>  add <span>=</span> <span>useCallback</span><span>(</span><span>(</span><span>)</span><span>=></span><span>{</span>\n    <span>setCount</span><span>(</span>count <span>+</span> <span>1</span><span>)</span>\n  <span>}</span><span>,</span><span>[</span>count<span>]</span><span>)</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>display<span>:</span> <span>'flex'</span><span>,</span> justifyContent<span>:</span> <span>'flex-start'</span><span>}</span><span>}</span></span><span>></span></span><span>\n        </span><span><span><span>&lt;</span><span>TestButton</span></span> <span>title</span><span><span>=</span><span>\"</span>普通点击<span>\"</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setCount</span><span>(</span>count <span>+</span> <span>1</span><span>)</span> <span>}</span></span><span>/></span></span><span>\n        </span><span><span><span>&lt;</span><span>TestButton</span></span> <span>title</span><span><span>=</span><span>\"</span>useCallback点击<span>\"</span></span> <span>onClick</span><span><span>=</span><span>{</span>add<span>}</span></span><span>/></span></span><span>\n      </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>20</span><span>}</span><span>}</span></span><span>></span></span><span>count: </span><span>{</span>count<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span><span>Button</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>{</span><span>setShow</span><span>(</span><span>!</span>show<span>)</span><span>}</span><span>}</span></span><span>></span></span><span> 切换</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span>\n<span>}</span>\n\n<span>const</span> TestButton <span>=</span> React<span>.</span><span>memo</span><span>(</span><span>(</span>props<span>:</span><span>any</span><span>)</span><span>=></span><span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span>props<span>.</span>title<span>)</span>\n  <span>return</span> <span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span>props<span>.</span>onClick<span>}</span></span> <span>style</span><span><span>=</span><span>{</span>props<span>.</span>title <span>===</span> <span>'useCallback点击'</span> <span>?</span> <span>{</span>\n  marginLeft<span>:</span> <span>20</span>\n  <span>}</span> <span>:</span> <span>undefined</span><span>}</span></span><span>></span></span><span>{</span>props<span>.</span>title<span>}</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span>\n<span>}</span><span>)</span>\n\n<span>export</span> <span>default</span> MockMemo<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c00efe7071b40c583a3d167d073a979~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<p>我们可以看到，当点击切换按钮的时候，没有经过 <code>useCallback</code>封装的函数会再次刷新，而进过过 <code>useCallback</code>包裹的函数不会被再次刷新</p>\n<h3 id=\"useref\" tabindex=\"-1\"> useRef</h3>\n<p><strong>useRef</strong> 可以获取当前元素的所有属性，并且返回一个可变的ref对象，并且这个对象<strong>只有current属性</strong>，可设置initialValue</p>\n<h4 id=\"通过useref获取对应的属性值\" tabindex=\"-1\"> 通过useRef获取对应的属性值</h4>\n<p>我们先看个案例：</p>\n<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState<span>,</span> useRef <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> scrollRef <span>=</span> <span><span>useRef</span><span><span>&lt;</span><span>any</span><span>></span></span></span><span>(</span><span>null</span><span>)</span><span>;</span>\n  <span>const</span> <span>[</span>clientHeight<span>,</span> setClientHeight <span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>0</span><span>)</span>\n  <span>const</span> <span>[</span>scrollTop<span>,</span> setScrollTop <span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>0</span><span>)</span>\n  <span>const</span> <span>[</span>scrollHeight<span>,</span> setScrollHeight <span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>0</span><span>)</span>\n\n  <span>const</span> <span>onScroll</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span><span>(</span>scrollRef<span>?.</span>current<span>)</span><span>{</span>\n      <span>let</span> clientHeight <span>=</span> scrollRef<span>?.</span>current<span>.</span>clientHeight<span>;</span> <span>//可视区域高度</span>\n      <span>let</span> scrollTop  <span>=</span> scrollRef<span>?.</span>current<span>.</span>scrollTop<span>;</span>  <span>//滚动条滚动高度</span>\n      <span>let</span> scrollHeight <span>=</span> scrollRef<span>?.</span>current<span>.</span>scrollHeight<span>;</span> <span>//滚动内容高度</span>\n      <span>setClientHeight</span><span>(</span>clientHeight<span>)</span>\n      <span>setScrollTop</span><span>(</span>scrollTop<span>)</span>\n      <span>setScrollHeight</span><span>(</span>scrollHeight<span>)</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span> <span>></span></span><span>\n        </span><span><span><span>&lt;</span>p</span><span>></span></span><span>可视区域高度：</span><span>{</span>clientHeight<span>}</span><span><span><span>&lt;/</span>p</span><span>></span></span><span>\n        </span><span><span><span>&lt;</span>p</span><span>></span></span><span>滚动条滚动高度：</span><span>{</span>scrollTop<span>}</span><span><span><span>&lt;/</span>p</span><span>></span></span><span>\n        </span><span><span><span>&lt;</span>p</span><span>></span></span><span>滚动内容高度：</span><span>{</span>scrollHeight<span>}</span><span><span><span>&lt;/</span>p</span><span>></span></span><span>\n      </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>height<span>:</span> <span>200</span><span>,</span> overflowY<span>:</span> <span>'auto'</span><span>}</span><span>}</span></span> <span>ref</span><span><span>=</span><span>{</span>scrollRef<span>}</span></span> <span>onScroll</span><span><span>=</span><span>{</span>onScroll<span>}</span></span> <span>></span></span><span>\n        </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>height<span>:</span> <span>2000</span><span>}</span><span>}</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>从上述可知，我们可以通过<code>useRef</code>来获取对应元素的相关属性，以此来做一些操作</p>\n<p>效果：<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce0221becc3940ec8610783afa66f5dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h4 id=\"缓存数据\" tabindex=\"-1\"> 缓存数据</h4>\n<p>除了获取对应的属性值外，<code>useRef</code>还有一点比较重要的特性，那就是 <strong>缓存数据</strong></p>\n<p>上述讲到我们封装一个合格的<code>自定义hooks</code>的时候需要结合<strong>useMemo</strong>、<strong>useCallback</strong>等Api，但我们控制变量的值用<strong>useState</strong> 有可能会导致拿到的是旧值，并且如果他们更新会带来整个组件重新执行，这种情况下，我们使用<strong>useRef</strong>将会是一个非常不错的选择</p>\n<p>在<code>react-redux</code>的源码中，在hooks推出后，<code>react-redux</code>用大量的<strong>useMemo</strong>重做了<strong>Provide</strong>等核心模块，其中就是运用<strong>useRef</strong>来缓存数据，并且所运用的 <strong>useRef()</strong> 没有一个是绑定在dom元素上的，都是做数据缓存用的</p>\n<p>可以简单的来看一下：</p>\n<div><pre><code> <span>// 缓存数据</span>\n <span>/* react-redux 用userRef 来缓存 merge之后的 props */</span> \n <span>const</span> lastChildProps <span>=</span> <span>useRef</span><span>(</span><span>)</span> \n \n <span>// lastWrapperProps 用 useRef 来存放组件真正的 props信息 </span>\n <span>const</span> lastWrapperProps <span>=</span> <span>useRef</span><span>(</span>wrapperProps<span>)</span> \n \n <span>//是否储存props是否处于正在更新状态 </span>\n <span>const</span> renderIsScheduled <span>=</span> <span>useRef</span><span>(</span><span>false</span><span>)</span>\n\n <span>//更新数据</span>\n <span>function</span> <span>captureWrapperProps</span><span>(</span> \n     lastWrapperProps<span>,</span> \n     lastChildProps<span>,</span> \n     renderIsScheduled<span>,</span> \n     wrapperProps<span>,</span> \n     actualChildProps<span>,</span> \n     childPropsFromStoreUpdate<span>,</span> \n     notifyNestedSubs \n <span>)</span> <span>{</span> \n     lastWrapperProps<span>.</span>current <span>=</span> wrapperProps \n     lastChildProps<span>.</span>current <span>=</span> actualChildProps \n     renderIsScheduled<span>.</span>current <span>=</span> <span>false</span> \n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我们看到 <code>react-redux</code> 用重新赋值的方法，改变了缓存的数据源，减少了不必要的更新，如过采取<code>useState</code>势必会重新渲染</p>\n<h4 id=\"uselatest\" tabindex=\"-1\"> useLatest</h4>\n<p>经过上面的讲解我们知道<code>useRef</code> 可以拿到最新值，我们可以进行简单的封装，这样做的好处是：<strong>可以随时确保获取的是最新值，并且也可以解决闭包问题</strong></p>\n<div><pre><code><span>import</span> <span>{</span> useRef <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> useLatest <span>=</span> <span><span><span>&lt;</span><span>T</span></span><span>></span></span><span>(value: T) => </span><span>{</span>\n  <span>const</span> ref <span>=</span> <span>useRef</span><span>(</span>value<span>)</span>\n  ref<span>.</span>current <span>=</span> value\n\n  <span>return</span> ref\n<span>}</span><span>;\n\nexport default useLatest;\n</span></code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"结合usememo和useref封装usecreation\" tabindex=\"-1\"> 结合useMemo和useRef封装useCreation</h4>\n<p><strong>useCreation</strong> ：是 <code>useMemo</code> 或 <code>useRef</code>的替代品。换言之，<code>useCreation</code>这个钩子增强了 <code>useMemo</code> 和 <code>useRef</code>，让这个钩子可以替换这两个钩子。（来自ahooks-useCreation[2]）</p>\n<ul>\n<li><code>useMemo</code>的值不一定是最新的值，但<code>useCreation</code>可以保证拿到的值一定是最新的值</li>\n<li>对于复杂常量的创建，<code>useRef</code>容易出现潜在的的性能隐患，但<code>useCreation</code>可以避免</li>\n</ul>\n<p>这里的性能隐患是指：</p>\n<div><pre><code><span>// 每次重渲染，都会执行实例化 Subject 的过程，即便这个实例立刻就被扔掉了</span>\n<span>const</span> a <span>=</span> <span>useRef</span><span>(</span><span>new</span> <span>Subject</span><span>(</span><span>)</span><span>)</span> \n\n<span>// 通过 factory 函数，可以避免性能隐患</span>\n<span>const</span> b <span>=</span> <span>useCreation</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>new</span> <span>Subject</span><span>(</span><span>)</span><span>,</span> <span>[</span><span>]</span><span>)</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>接下来我们来看看如何封装一个<code>useCreation</code>,首先我们要明白以下三点：</p>\n<ul>\n<li>第一点：先确定参数，<code>useCreation</code> 的参数与<code>useMemo</code>的一致，第一个参数是函数，第二个参数参数是可变的数组</li>\n<li>第二点：我们的值要保存在 <code>useRef</code>中，这样可以将值缓存，从而减少无关的刷新</li>\n<li>第三点：更新值的判断，怎么通过第二个参数来判断是否更新 <code>useRef</code>里的值。</li>\n</ul>\n<p>明白了一上三点我们就可以自己实现一个<code>useCreation</code></p>\n<div><pre><code>import { useRef } from 'react';\nimport type { DependencyList } from 'react';\n\nconst depsAreSame = (oldDeps: DependencyList, deps: DependencyList):boolean => {\n  if(oldDeps === deps) return true\n  \n  for(let i = 0; i &lt; oldDeps.length; i++) {\n    // 判断两个值是否是同一个值\n    if(!Object.is(oldDeps[i], deps[i])) return false\n  }\n\n  return true\n}\n\nconst useCreation = &lt;T>(fn:() => T, deps: DependencyList)=> {\n\n  const { current } = useRef({ \n    deps,\n    obj:  undefined as undefined | T ,\n    initialized: false\n  })\n\n  if(current.initialized === false || !depsAreSame(current.deps, deps)) {\n    current.deps = deps;\n    current.obj = fn();\n    current.initialized = true;\n  }\n\n  return current.obj as T\n} \n\nexport default useCreation;\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在<code>useRef</code>判断是否更新值通过<code>initialized</code> 和 <code>depsAreSame</code>来判断，其中<code>depsAreSame</code>通过存储在 <code>useRef</code>下的<code>deps</code>(旧值) 和 新传入的 <code>deps</code>（新值）来做对比，判断两数组的数据是否一致，来确定是否更新</p>\n<h4 id=\"验证-usecreation\" tabindex=\"-1\"> 验证 useCreation</h4>\n<p>接下来我们写个小例子，来验证下 <code>useCreation</code>是否能满足我们的要求：</p>\n<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> Button <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n<span>import</span> <span>{</span> useCreation <span>}</span> <span>from</span> <span>'@/components'</span><span>;</span>\n\n<span>const</span> Index<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>[</span>_<span>,</span> setFlag<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>boolean</span><span>></span></span></span><span>(</span><span>false</span><span>)</span>\n\n  <span>const</span> <span>getNowData</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> Math<span>.</span><span>random</span><span>(</span><span>)</span>\n  <span>}</span>\n\n  <span>const</span> nowData <span>=</span> <span>useCreation</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>getNowData</span><span>(</span><span>)</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>padding<span>:</span> <span>50</span><span>}</span><span>}</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span><span>></span></span><span>正常的函数：</span><span>{</span><span>getNowData</span><span>(</span><span>)</span><span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span><span>></span></span><span>useCreation包裹后的：</span><span>{</span>nowData<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>{</span><span>setFlag</span><span>(</span>v <span>=></span> <span>!</span>v<span>)</span><span>}</span><span>}</span></span><span>></span></span><span> 渲染</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa5645ef84d141878142032ae2079bdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<p>我们可以看到，当我们做无关的<code>state</code>改变的时候，正常的函数也会刷新，但<code>useCreation</code>没有刷新，从而增强了渲染的性能～</p>\n<h3 id=\"useeffect\" tabindex=\"-1\"> useEffect</h3>\n<p><code>useEffect</code>相信各位小伙伴已经用的熟的不能再熟了，我们可以使用<code>useEffect</code>来模拟下<code>class</code>的<code>componentDidMount</code>和<code>componentWillUnmount</code>的功能。</p>\n<h4 id=\"usemount\" tabindex=\"-1\"> useMount</h4>\n<p>这个钩子不必多说，只是简化了使用<code>useEffect</code>的第二个参数：</p>\n<div><pre><code><span>import</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> <span>useMount</span> <span>=</span> <span>(</span><span>fn</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>)</span> <span>=></span> <span>{</span>\n\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    fn<span>?.</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useMount<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"useunmount\" tabindex=\"-1\"> useUnmount</h4>\n<p>这个需要注意一个点，就是使用<code>useRef</code>来确保所传入的函数为最新的状态，所以可以结合上述讲的<strong>useLatest</strong>结合使用</p>\n<div><pre><code><span>import</span> <span>{</span> useEffect<span>,</span> useRef <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> <span>useUnmount</span> <span>=</span> <span>(</span><span>fn</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>)</span> <span>=></span> <span>{</span>\n\n  <span>const</span> ref <span>=</span> <span>useRef</span><span>(</span>fn<span>)</span><span>;</span>\n  ref<span>.</span>current <span>=</span> fn<span>;</span>\n\n  <span>useEffect</span><span>(</span>\n    <span>(</span><span>)</span> <span>=></span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      fn<span>?.</span><span>(</span><span>)</span>\n    <span>}</span><span>,</span>\n    <span>[</span><span>]</span><span>,</span>\n  <span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useUnmount<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"结合usemount和useunmount做个小例子\" tabindex=\"-1\"> 结合<code>useMount</code>和<code>useUnmount</code>做个小例子</h4>\n<div><pre><code><span>import</span> <span>{</span> Button<span>,</span> Toast <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n<span>import</span> React<span>,</span><span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useMount<span>,</span> useUnmount <span>}</span> <span>from</span> <span>'@/components'</span><span>;</span>\n\n<span>const</span> <span>Child</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n\n  <span>useMount</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    Toast<span>.</span><span>show</span><span>(</span><span>'首次渲染'</span><span>)</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  <span>useUnmount</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    Toast<span>.</span><span>show</span><span>(</span><span>'组件已卸载'</span><span>)</span>\n  <span>}</span><span>)</span>\n\n  <span>return</span> <span><span><span>&lt;</span>div</span><span>></span></span><span>你好，我是小杜杜</span><span><span><span>&lt;/</span>div</span><span>></span></span>\n<span>}</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span>props<span>)</span><span>=></span> <span>{</span>\n  <span>const</span> <span>[</span>flag<span>,</span> setFlag<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>boolean</span><span>></span></span></span><span>(</span><span>false</span><span>)</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>padding<span>:</span> <span>50</span><span>}</span><span>}</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>{</span><span>setFlag</span><span>(</span>v <span>=></span> <span>!</span>v<span>)</span><span>}</span><span>}</span></span><span>></span></span><span>切换 </span><span>{</span>flag <span>?</span> <span>'unmount'</span> <span>:</span> <span>'mount'</span><span>}</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n      </span><span>{</span>flag <span>&amp;&amp;</span> <span><span><span>&lt;</span><span>Child</span></span> <span>/></span></span><span>}</span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果如下：<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27b1cfa623a944eb9056b62eeafaba5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h4 id=\"useupdate\" tabindex=\"-1\"> useUpdate</h4>\n<p><strong>useUpdate</strong>:强制更新</p>\n<p>有的时候我们需要组件强制更新，这个时候就可以使用这个钩子：</p>\n<div><pre><code><span>import</span> <span>{</span> useCallback<span>,</span> useState <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> <span>useUpdate</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>[</span><span>,</span> setState<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>{</span><span>}</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>useCallback</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>setState</span><span>(</span><span>{</span><span>}</span><span>)</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useUpdate<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>//示例：</span>\n<span>import</span> <span>{</span> Button <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n<span>import</span> React <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useUpdate <span>}</span> <span>from</span> <span>'@/components'</span><span>;</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span>props<span>)</span><span>=></span> <span>{</span>\n  <span>const</span> update <span>=</span> <span>useUpdate</span><span>(</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>padding<span>:</span> <span>50</span><span>}</span><span>}</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span><span>></span></span><span>时间：</span><span>{</span>Date<span>.</span><span>now</span><span>(</span><span>)</span><span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span>update<span>}</span></span><span>></span></span><span>更新时间</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果如下：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbe4ebe0e17f439693b48eac899e3f67~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h2 id=\"案例\" tabindex=\"-1\"> 案例</h2>\n<h3 id=\"案例1-usereactive\" tabindex=\"-1\"> 案例1: useReactive</h3>\n<p><strong>useReactiv</strong>: 一种具备<strong>响应式</strong>的<code>useState</code></p>\n<p>缘由：我们知道用<code>useState</code>可以定义变量其格式为：</p>\n<p><code>const [count, setCount] = useState&lt;number&gt;(0)</code></p>\n<p>通过<code>setCount</code>来设置，<code>count</code>来获取，使用这种方式才能够渲染视图</p>\n<p>来看看正常的操作，像这样 <code>let count = 0; count =7</code> 此时<code>count</code>的值就是7，也就是说数据是响应式的</p>\n<p>那么我们可不可以将 <code>useState</code>也写成<strong>响应式</strong>的呢？我可以自由设置<strong>count的值,并且可以随时获取到count的最新值</strong>，而不是通过<code>setCount</code>来设置。</p>\n<p>我们来想想怎么去实现一个具备 <strong>响应式</strong> 特点的 <code>useState</code> 也就是 <code>useRective</code>,提出以下疑问，感兴趣的，可以先自行思考一下：</p>\n<ul>\n<li>这个钩子的出入参该怎么设定？</li>\n<li>如何将数据制作成响应式（毕竟普通的操作无法刷新视图）？</li>\n<li>如何使用<code>TS</code>去写，完善其类型？</li>\n<li>如何更好的去优化？</li>\n</ul>\n<h4 id=\"分析\" tabindex=\"-1\"> 分析</h4>\n<p>以上四个小问题，最关键的就是<code>第二个</code>，我们如何将数据弄成<strong>响应式</strong>，想要弄成响应式，就必须监听到值的变化，在做出更改，也就是说，我们对这个数进行操作的时候，要进行相应的<strong>拦截</strong>，这时就需要<code>ES6</code>的一个知识点：<strong>Proxy</strong></p>\n<p>在这里会用到 <strong>Proxy</strong>和<strong>Reflect</strong>的点，感兴趣的可以看看我的这篇文章：🔥花一个小时，迅速了解ES6~ES12的全部特性[3]</p>\n<p><strong>Proxy</strong>：接受的参数是<strong>对象</strong>，所以第一个问题也解决了，入参就为对象。那么如何去刷新视图呢？这里就使用上述的<strong>useUpdate</strong>来强制刷新，使数据更改。</p>\n<p>至于优化这一块，使用上文说的<code>useCreation</code>就好，再配合<code>useRef</code>来放<code>initialState</code>即可</p>\n<h4 id=\"代码\" tabindex=\"-1\"> 代码</h4>\n<div><pre><code><span>import</span> <span>{</span> useRef <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useUpdate<span>,</span> useCreation <span>}</span> <span>from</span> <span>'../index'</span><span>;</span>\n\n<span>const</span> observer <span>=</span> <span>&lt;</span><span>T</span> <span>extends</span> <span>Record<span>&lt;</span><span>string</span><span>,</span> <span>any</span><span>></span></span><span>></span><span>(</span>initialVal<span>:</span> <span>T</span><span>,</span> <span>cb</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>)</span><span>:</span> <span>T</span> <span>=></span> <span>{</span>\n\n <span>const</span> proxy <span>=</span> <span>new</span> <span>Proxy<span>&lt;</span><span>T</span><span>></span></span><span>(</span>initialVal<span>,</span> <span>{</span>\n    <span>get</span><span>(</span>target<span>,</span> key<span>,</span> receiver<span>)</span> <span>{</span>\n      <span>const</span> res <span>=</span> Reflect<span>.</span><span>get</span><span>(</span>target<span>,</span> key<span>,</span> receiver<span>)</span><span>;</span>\n      <span>return</span> <span>typeof</span> res <span>===</span> <span>'object'</span> <span>?</span> <span>observer</span><span>(</span>res<span>,</span> cb<span>)</span> <span>:</span> Reflect<span>.</span><span>get</span><span>(</span>target<span>,</span> key<span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n    <span>set</span><span>(</span>target<span>,</span> key<span>,</span> val<span>)</span> <span>{</span>\n      <span>const</span> ret <span>=</span> Reflect<span>.</span><span>set</span><span>(</span>target<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n      <span>cb</span><span>(</span><span>)</span><span>;</span>\n      <span>return</span> ret<span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  <span>return</span> proxy<span>;</span>\n<span>}</span>\n\n<span>const</span> useReactive <span>=</span> <span>&lt;</span><span>T</span> <span>extends</span> <span>Record<span>&lt;</span><span>string</span><span>,</span> <span>any</span><span>></span></span><span>></span><span>(</span>initialState<span>:</span> <span>T</span><span>)</span><span>:</span><span>T</span> <span>=></span> <span>{</span>\n  <span>const</span> ref <span>=</span> <span><span>useRef</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>initialState<span>)</span><span>;</span>\n  <span>const</span> update <span>=</span> <span>useUpdate</span><span>(</span><span>)</span><span>;</span>\n\n  <span>const</span> state <span>=</span> <span>useCreation</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> <span>observer</span><span>(</span>ref<span>.</span>current<span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>update</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> state\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useReactive<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里先说下<code>TS</code>，因为我们不知道会传递什么类型的<code>initialState</code>所以在这需要使用<strong>泛型</strong>，我们接受的参数是<strong>对象</strong>，可就是 key-value 的形式，其中 key 为 string，value 可以是 任意类型，所以我们使用 <code>Record&lt;string, any&gt;</code></p>\n<p>有不熟悉的小伙伴可以看看我的这篇文章：一篇让你完全够用TS的指南[4]（又推销一遍，有点打广告，别在意～）</p>\n<p>再来说下<code>拦截这块</code>,我们只需要拦截<strong>设置（set）</strong> 和 <strong>获取（get）</strong> 即可，其中：</p>\n<ul>\n<li>设置这块，需要改变是图，也就是说需要，使用<strong>useUpdate</strong>来强制刷新</li>\n<li>获取这块，需要判断其是否为对象，是的话继续递归，不是的话返回就行</li>\n</ul>\n<h4 id=\"验证\" tabindex=\"-1\"> 验证</h4>\n<p>接下来我们来验证一下我们写的 <code>useReactive</code>,我们将以 字符串、数字、布尔、数组、函数、计算属性几个方面去验证一下：</p>\n<div><pre><code><span>import</span> <span>{</span> Button <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n<span>import</span> React <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useReactive <span>}</span> <span>from</span> <span>'@/components'</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span>props<span>)</span><span>=></span> <span>{</span>\n\n  <span>const</span> state <span>=</span> <span><span>useReactive</span><span><span>&lt;</span><span>any</span><span>></span></span></span><span>(</span><span>{</span>\n    count<span>:</span> <span>0</span><span>,</span>\n    name<span>:</span> <span>'小杜杜'</span><span>,</span>\n    flag<span>:</span> <span>true</span><span>,</span>\n    arr<span>:</span> <span>[</span><span>]</span><span>,</span>\n    bugs<span>:</span> <span>[</span><span>'小杜杜'</span><span>,</span> <span>'react'</span><span>,</span> <span>'hook'</span><span>]</span><span>,</span>\n    <span>addBug</span><span>(</span>bug<span>:</span><span>string</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>bugs<span>.</span><span>push</span><span>(</span>bug<span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n    <span>get</span> <span>bugsCount</span><span>(</span><span>)</span> <span>{</span>\n      <span>return</span> <span>this</span><span>.</span>bugs<span>.</span>length<span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>)</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>padding<span>:</span> <span>20</span><span>}</span><span>}</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>fontWeight<span>:</span> <span>'bold'</span><span>}</span><span>}</span></span><span>></span></span><span>基本使用：</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>8</span><span>}</span><span>}</span></span><span>></span></span><span> 对数字进行操作：</span><span>{</span>state<span>.</span>count<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>margin<span>:</span> <span>'8px 0'</span><span>,</span> display<span>:</span> <span>'flex'</span><span>,</span>justifyContent<span>:</span> <span>'flex-start'</span><span>}</span><span>}</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>count<span>++</span> <span>}</span></span> <span>></span></span><span>加1</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>count<span>--</span> <span>}</span></span> <span>></span></span><span>减1</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>count <span>=</span> <span>7</span> <span>}</span></span> <span>></span></span><span>设置为7</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n       </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>8</span><span>}</span><span>}</span></span><span>></span></span><span> 对字符串进行操作：</span><span>{</span>state<span>.</span>name<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>margin<span>:</span> <span>'8px 0'</span><span>,</span> display<span>:</span> <span>'flex'</span><span>,</span>justifyContent<span>:</span> <span>'flex-start'</span><span>}</span><span>}</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>name <span>=</span> <span>'小杜杜'</span> <span>}</span></span> <span>></span></span><span>设置为小杜杜</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>name <span>=</span> <span>'Domesy'</span><span>}</span></span> <span>></span></span><span>设置为Domesy</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n       </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>8</span><span>}</span><span>}</span></span><span>></span></span><span> 对布尔值进行操作：</span><span>{</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>state<span>.</span>flag<span>)</span><span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>margin<span>:</span> <span>'8px 0'</span><span>,</span> display<span>:</span> <span>'flex'</span><span>,</span>justifyContent<span>:</span> <span>'flex-start'</span><span>}</span><span>}</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>flag <span>=</span> <span>!</span>state<span>.</span>flag <span>}</span></span> <span>></span></span><span>切换状态</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n       </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>8</span><span>}</span><span>}</span></span><span>></span></span><span> 对数组进行操作：</span><span>{</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>state<span>.</span>arr<span>)</span><span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>margin<span>:</span> <span>'8px 0'</span><span>,</span> display<span>:</span> <span>'flex'</span><span>,</span>justifyContent<span>:</span> <span>'flex-start'</span><span>}</span><span>}</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>arr<span>.</span><span>push</span><span>(</span>Math<span>.</span><span>floor</span><span>(</span>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>100</span><span>)</span><span>)</span><span>}</span></span> <span>></span></span><span>push</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>arr<span>.</span><span>pop</span><span>(</span><span>)</span><span>}</span></span> <span>></span></span><span>pop</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>arr<span>.</span><span>shift</span><span>(</span><span>)</span><span>}</span></span> <span>></span></span><span>shift</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>arr<span>.</span><span>unshift</span><span>(</span>Math<span>.</span><span>floor</span><span>(</span>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>100</span><span>)</span><span>)</span><span>}</span></span> <span>></span></span><span>unshift</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>arr<span>.</span><span>reverse</span><span>(</span><span>)</span><span>}</span></span> <span>></span></span><span>reverse</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>arr<span>.</span><span>sort</span><span>(</span><span>)</span><span>}</span></span> <span>></span></span><span>sort</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n       </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>fontWeight<span>:</span> <span>'bold'</span><span>,</span> marginTop<span>:</span> <span>8</span><span>}</span><span>}</span></span><span>></span></span><span>计算属性：</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>8</span><span>}</span><span>}</span></span><span>></span></span><span>数量：</span><span>{</span> state<span>.</span>bugsCount <span>}</span><span> 个</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>margin<span>:</span> <span>'8px 0'</span><span>}</span><span>}</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;</span>form</span>\n           <span>onSubmit</span><span><span>=</span><span>{</span><span>(</span>e<span>)</span> <span>=></span> <span>{</span>\n             state<span>.</span>bug <span>?</span> state<span>.</span><span>addBug</span><span>(</span>state<span>.</span>bug<span>)</span> <span>:</span> state<span>.</span><span>addBug</span><span>(</span><span>'domesy'</span><span>)</span>\n             state<span>.</span>bug <span>=</span> <span>''</span><span>;</span>\n             e<span>.</span><span>preventDefault</span><span>(</span><span>)</span><span>;</span>\n           <span>}</span><span>}</span></span>\n         <span>></span></span><span>\n           </span><span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>value</span><span><span>=</span><span>{</span>state<span>.</span>bug<span>}</span></span> <span>onChange</span><span><span>=</span><span>{</span><span>(</span>e<span>)</span> <span>=></span> <span>(</span>state<span>.</span>bug <span>=</span> e<span>.</span>target<span>.</span>value<span>)</span><span>}</span></span> <span>/></span></span><span>\n           </span><span><span><span>&lt;</span>button</span> <span>type</span><span><span>=</span><span>\"</span>submit<span>\"</span></span>  <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>></span></span><span>增加</span><span><span><span>&lt;/</span>button</span><span>></span></span><span>\n           </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>\"</span>primary<span>\"</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> state<span>.</span>bugs<span>.</span><span>pop</span><span>(</span><span>)</span><span>}</span></span><span>></span></span><span>删除</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n         </span><span><span><span>&lt;/</span>form</span><span>></span></span><span>\n\n       </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n       </span><span><span><span>&lt;</span>ul</span><span>></span></span><span>\n         </span><span>{</span>\n           state<span>.</span>bugs<span>.</span><span>map</span><span>(</span><span>(</span>bug<span>:</span><span>any</span><span>,</span> index<span>:</span><span>number</span><span>)</span> <span>=></span> <span>(</span>\n             <span><span><span>&lt;</span>li</span> <span>key</span><span><span>=</span><span>{</span>index<span>}</span></span><span>></span></span><span>{</span>bug<span>}</span><span><span><span>&lt;/</span>li</span><span>></span></span>\n           <span>)</span><span>)</span>\n         <span>}</span><span>\n       </span><span><span><span>&lt;/</span>ul</span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果如下：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9571ffdbb94c478bbb34e8b37d9c454f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h3 id=\"案例2-useeventlistener\" tabindex=\"-1\"> 案例2: useEventListener</h3>\n<p>缘由：我们监听各种事件的时候需要做监听，如：监听点击事件、键盘事件、滚动事件等，我们将其统一封装起来，方便后续调用</p>\n<p>说白了就是在<code>addEventListener</code>的基础上进行封装，我们先来想想在此基础上需要什么？</p>\n<p>首先，<code>useEventListener</code>的入参可分为三个</p>\n<ul>\n<li>第一个<code>event</code>是事件（如：click、keydown）</li>\n<li>第二个回调函数（所以不需要出参）</li>\n<li>第三个就是目标（是某个节点还是全局）</li>\n</ul>\n<p>在这里需要注意一点就是在<strong>销毁的时候需要移除对应的监听事件</strong></p>\n<h4 id=\"代码-1\" tabindex=\"-1\"> 代码</h4>\n<div><pre><code><span>import</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> <span>useEventListener</span> <span>=</span> <span>(</span>event<span>:</span> <span>string</span><span>,</span> <span>handler</span><span>:</span> <span>(</span><span>...</span>e<span>:</span><span>any</span><span>)</span> <span>=></span> <span>void</span><span>,</span> target<span>:</span> <span>any</span> <span>=</span> window<span>)</span> <span>=></span> <span>{</span>\n\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> targetElement  <span>=</span> <span>'current'</span> <span>in</span> target <span>?</span> target<span>.</span>current <span>:</span> window<span>;</span>\n    <span>const</span> <span>useEventListener</span> <span>=</span> <span>(</span>event<span>:</span> Event<span>)</span> <span>=></span> <span>{</span>\n      <span>return</span> <span>handler</span><span>(</span>event<span>)</span>\n    <span>}</span>\n    targetElement<span>.</span><span>addEventListener</span><span>(</span>event<span>,</span> useEventListener<span>)</span>\n    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      targetElement<span>.</span><span>removeEventListener</span><span>(</span>event<span>,</span> useEventListener<span>)</span>\n    <span>}</span>\n  <span>}</span><span>,</span> <span>[</span>event<span>]</span><span>)</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useEventListener<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>注：这里把<code>target</code>默认设置成了<code>window</code>，至于为什么要这么写：<code>'current' in target</code>是因为我们用<code>useRef</code>拿到的值都是 <code>ref.current</code></p>\n<h4 id=\"优化\" tabindex=\"-1\"> 优化</h4>\n<p>接下来我们一起来看看如何优化这个组件，这里的优化与 <code>useCreation</code> 类似，但又有不同，原因是这里的需要判断的要比<code>useCreation</code>复杂一点。</p>\n<blockquote>\n<p><strong>再次强调一下</strong>，传递过来的值，优先考虑使用<code>useRef</code>，再考虑用<code>useState</code>，可以直接使用<code>useLatest</code>，防止拿到的值不是最新值</p>\n</blockquote>\n<p>这里简单说一下我的思路（又不对的地方或者有更好的建议欢迎评论区指出）：</p>\n<ul>\n<li>首先需要<code>hasInitRef</code>来存储是否是第一次进入，通过它来判断初始化存储</li>\n<li>然后考虑有几个参数需要存储，从上述代码上来看，可变的变量有两个，一个是<code>event</code>，另一个是<code>target</code>，其次，我们还需要存储<code>对应的卸载后的函数</code>，所以存储的变量应该有<code>3个</code></li>\n<li>接下来考虑一下什么情况下触发<strong>更新</strong>，也就是可变的两个参数：<code>event</code>和 <code>target</code></li>\n<li>最后在卸载的时候可以考虑使用<code>useUnmount</code>，并<code>执行存储对应的卸载后的函数</code> 和把<code>hasInitRef</code>还原</li>\n</ul>\n<h4 id=\"详细代码\" tabindex=\"-1\"> 详细代码</h4>\n<div><pre><code><span>import</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>type</span> <span>{</span> DependencyList <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useRef <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> useLatest <span>from</span> <span>'../useLatest'</span><span>;</span>\n<span>import</span> useUnmount <span>from</span> <span>'../useUnmount'</span><span>;</span>\n\n<span>const</span> depsAreSame <span>=</span> <span>(</span>oldDeps<span>:</span> DependencyList<span>,</span> deps<span>:</span> DependencyList<span>)</span><span>:</span><span>boolean</span> <span>=></span> <span>{</span>\n  <span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> oldDeps<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>if</span><span>(</span><span>!</span>Object<span>.</span><span>is</span><span>(</span>oldDeps<span>[</span>i<span>]</span><span>,</span> deps<span>[</span>i<span>]</span><span>)</span><span>)</span> <span>return</span> <span>false</span>\n  <span>}</span>\n  <span>return</span> <span>true</span>\n<span>}</span>\n\n<span>const</span> <span>useEffectTarget</span> <span>=</span> <span>(</span><span>effect</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>,</span> deps<span>:</span>DependencyList<span>,</span> target<span>:</span> <span>any</span><span>)</span> <span>=></span> <span>{</span>\n\n  <span>const</span> hasInitRef <span>=</span> <span>useRef</span><span>(</span><span>false</span><span>)</span><span>;</span> <span>// 一开始设置初始化</span>\n  <span>const</span> elementRef <span>=</span> <span><span>useRef</span><span><span>&lt;</span><span>(</span>Element <span>|</span> <span>null</span><span>)</span><span>[</span><span>]</span><span>></span></span></span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span><span>// 存储具体的值</span>\n  <span>const</span> depsRef <span>=</span> <span><span>useRef</span><span><span>&lt;</span>DependencyList<span>></span></span></span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span> <span>// 存储传递的deps</span>\n  <span>const</span> unmountRef <span>=</span> <span><span>useRef</span><span><span>&lt;</span><span>any</span><span>></span></span></span><span>(</span><span>)</span><span>;</span> <span>// 存储对应的effect</span>\n\n  <span>// 初始化 组件的初始化和更新都会执行</span>\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> targetElement  <span>=</span> <span>'current'</span> <span>in</span> target <span>?</span> target<span>.</span>current <span>:</span> window<span>;</span>\n\n    <span>// 第一遍赋值</span>\n    <span>if</span><span>(</span><span>!</span>hasInitRef<span>.</span>current<span>)</span><span>{</span>\n      hasInitRef<span>.</span>current <span>=</span> <span>true</span><span>;</span>\n\n      elementRef<span>.</span>current <span>=</span> targetElement<span>;</span>\n      depsRef<span>.</span>current <span>=</span> deps<span>;</span>\n      unmountRef<span>.</span>current <span>=</span> <span>effect</span><span>(</span><span>)</span><span>;</span>\n      <span>return</span>\n    <span>}</span>\n    <span>// 校验变值: 目标的值不同， 依赖值改变</span>\n    <span>if</span><span>(</span>elementRef<span>.</span>current <span>!==</span> targetElement <span>||</span> <span>!</span><span>depsAreSame</span><span>(</span>deps<span>,</span> depsRef<span>.</span>current<span>)</span><span>)</span><span>{</span>\n      <span>//先执行对应的函数</span>\n      unmountRef<span>.</span>current<span>?.</span><span>(</span><span>)</span><span>;</span>\n      <span>//重新进行赋值</span>\n      elementRef<span>.</span>current <span>=</span> targetElement<span>;</span>\n      depsRef<span>.</span>current <span>=</span> deps<span>;</span> \n      unmountRef<span>.</span>current <span>=</span> <span>effect</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>)</span>\n\n  <span>useUnmount</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    unmountRef<span>.</span>current<span>?.</span><span>(</span><span>)</span><span>;</span>\n    hasInitRef<span>.</span>current <span>=</span> <span>false</span><span>;</span>\n  <span>}</span><span>)</span>\n<span>}</span>\n\n<span>const</span> <span>useEventListener</span> <span>=</span> <span>(</span>event<span>:</span> <span>string</span><span>,</span> <span>handler</span><span>:</span> <span>(</span><span>...</span>e<span>:</span><span>any</span><span>)</span> <span>=></span> <span>void</span><span>,</span> target<span>:</span> <span>any</span> <span>=</span> window<span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> handlerRef <span>=</span> <span>useLatest</span><span>(</span>handler<span>)</span><span>;</span>\n\n  <span>useEffectTarget</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> targetElement  <span>=</span> <span>'current'</span> <span>in</span> target <span>?</span> target<span>.</span>current <span>:</span> window<span>;</span>\n\n    <span>//  防止没有 addEventListener 这个属性</span>\n    <span>if</span><span>(</span><span>!</span>targetElement<span>?.</span>addEventListener<span>)</span> <span>return</span><span>;</span>\n\n    <span>const</span> <span>useEventListener</span> <span>=</span> <span>(</span>event<span>:</span> Event<span>)</span> <span>=></span> <span>{</span>\n      <span>return</span> handlerRef<span>.</span><span>current</span><span>(</span>event<span>)</span>\n    <span>}</span>\n    targetElement<span>.</span><span>addEventListener</span><span>(</span>event<span>,</span> useEventListener<span>)</span>\n    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      targetElement<span>.</span><span>removeEventListener</span><span>(</span>event<span>,</span> useEventListener<span>)</span>\n    <span>}</span>\n  <span>}</span><span>,</span> <span>[</span>event<span>]</span><span>,</span> target<span>)</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useEventListener<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>在这里只用<code>useEffect</code>是因为，在更新和初始化的情况下都需要使用</li>\n<li>必须要防止没有 <code>addEventListener</code>这个属性的情况，监听的目标有可能没有加载出来</li>\n</ul>\n<h4 id=\"验证-1\" tabindex=\"-1\"> 验证</h4>\n<p>验证一下<code>useEventListener</code>是否能够正常的使用，顺变验证一下初始化、卸载的，代码：</p>\n<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState<span>,</span> useRef <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useEventListener <span>}</span> <span>from</span> <span>'@/components'</span>\n<span>import</span> <span>{</span> Button <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span>props<span>)</span><span>=></span> <span>{</span>\n\n  <span>const</span> <span>[</span>count<span>,</span> setCount<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>0</span><span>)</span>\n  <span>const</span> <span>[</span>flag<span>,</span> setFlag<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>boolean</span><span>></span></span></span><span>(</span><span>true</span><span>)</span>\n  <span>const</span> <span>[</span>key<span>,</span> setKey<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span><span>''</span><span>)</span>\n  <span>const</span> ref <span>=</span> <span>useRef</span><span>(</span><span>null</span><span>)</span><span>;</span>\n\n  <span>useEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>setCount</span><span>(</span>v <span>=></span> v <span>+</span><span>1</span><span>)</span><span>,</span> ref<span>)</span>\n  <span>useEventListener</span><span>(</span><span>'keydown'</span><span>,</span> <span>(</span>ev<span>)</span> <span>=></span> <span>setKey</span><span>(</span>ev<span>.</span>key<span>)</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>padding<span>:</span> <span>20</span><span>}</span><span>}</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>{</span><span>setFlag</span><span>(</span>v <span>=></span> <span>!</span>v<span>)</span><span>}</span><span>}</span></span><span>></span></span><span>切换 </span><span>{</span>flag <span>?</span> <span>'unmount'</span> <span>:</span> <span>'mount'</span><span>}</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n      </span><span>{</span>\n        flag <span>&amp;&amp;</span> <span><span><span>&lt;</span>div</span><span>></span></span><span>\n          </span><span><span><span>&lt;</span>div</span><span>></span></span><span>数字：</span><span>{</span>count<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n          </span><span><span><span>&lt;</span>button</span> <span>ref</span><span><span>=</span><span>{</span>ref<span>}</span></span> <span>></span></span><span>加1</span><span><span><span>&lt;/</span>button</span><span>></span></span><span>\n          </span><span><span><span>&lt;</span>div</span><span>></span></span><span>监听键盘事件：</span><span>{</span>key<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n        </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n      <span>}</span><span>\n\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dbb36ddad2d41f9917b8db7355d283a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<p>我们可以利用<code>useEventListener</code>这个钩子去封装其他钩子，如 鼠标悬停，长按事件，鼠标位置等，在这里在举一个鼠标悬停的小例子</p>\n<h4 id=\"小例子-usehover\" tabindex=\"-1\"> 小例子 useHover</h4>\n<p><strong>useHover</strong>：监听 DOM 元素是否有鼠标悬停</p>\n<p>这个就很简单了，只需要通过 <code>useEventListener</code>来监听<code>mouseenter</code>和<code>mouseleave</code>即可，在返回布尔值就行了：</p>\n<div><pre><code><span>import</span> <span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> useEventListener  <span>from</span> <span>'../useEventListener'</span><span>;</span>\n\n<span>interface</span> <span>Options</span> <span>{</span>\n  onEnter<span>?</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>;</span>\n  onLeave<span>?</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>;</span>\n<span>}</span>\n\n<span>const</span> useHover <span>=</span> <span>(</span>target<span>:</span><span>any</span><span>,</span> options<span>?</span><span>:</span>Options<span>)</span><span>:</span> <span>boolean</span> <span>=></span> <span>{</span>\n\n  <span>const</span> <span>[</span>flag<span>,</span> setFlag<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>boolean</span><span>></span></span></span><span>(</span><span>false</span><span>)</span>\n  <span>const</span> <span>{</span> onEnter<span>,</span> onLeave <span>}</span> <span>=</span> options <span>||</span> <span>{</span><span>}</span><span>;</span>\n\n  <span>useEventListener</span><span>(</span><span>'mouseenter'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    onEnter<span>?.</span><span>(</span><span>)</span>\n    <span>setFlag</span><span>(</span><span>true</span><span>)</span>\n  <span>}</span><span>,</span> target<span>)</span>\n\n  <span>useEventListener</span><span>(</span><span>'mouseleave'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    onLeave<span>?.</span><span>(</span><span>)</span>\n    <span>setFlag</span><span>(</span><span>false</span><span>)</span>\n  <span>}</span><span>,</span> target<span>)</span>\n\n  <span>return</span> flag\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useHover<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d77611b1d33647e689398e380f1fdb16~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h3 id=\"案例3-有关时间的hooks\" tabindex=\"-1\"> 案例3: 有关时间的Hooks</h3>\n<p>在这里主要介绍有关时间的三个hooks,分别是：<code>useTimeout</code>、<code>useInterval</code>和<code>useCountDown</code></p>\n<h4 id=\"usetimeout\" tabindex=\"-1\"> useTimeout</h4>\n<p><strong>useTimeout</strong>：一段时间内，执行一次</p>\n<p>传递参数只要函数和延迟时间即可，需要注意的是卸载的时候将定时器清除下就OK了</p>\n<p>详细代码：</p>\n<div><pre><code><span>import</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> useLatest <span>from</span> <span>'../useLatest'</span><span>;</span>\n\n\n<span>const</span> useTimeout <span>=</span> <span>(</span><span>fn</span><span>:</span><span>(</span><span>)</span> <span>=></span> <span>void</span><span>,</span> delay<span>?</span><span>:</span> <span>number</span><span>)</span><span>:</span> <span>void</span> <span>=></span> <span>{</span>\n\n  <span>const</span> fnRef <span>=</span> <span>useLatest</span><span>(</span>fn<span>)</span>\n\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span><span>(</span><span>!</span>delay <span>||</span> delay <span>&lt;</span> <span>0</span><span>)</span> <span>return</span><span>;</span>\n\n    <span>const</span> timer <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      fnRef<span>.</span><span>current</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span> delay<span>)</span>\n\n    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>clearTimeout</span><span>(</span>timer<span>)</span>\n    <span>}</span>\n  <span>}</span><span>,</span> <span>[</span>delay<span>]</span><span>)</span>\n\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useTimeout<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果展示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38ea46cb005e4b7e92979bc56ffb76f9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h4 id=\"useinterval\" tabindex=\"-1\"> useInterval</h4>\n<p><strong>useInterval</strong>: 每过一段时间内一直执行</p>\n<p>大体上与<code>useTimeout</code>一样，多了一个是否要首次渲染的参数<code>immediate</code></p>\n<p>详细代码：</p>\n<div><pre><code><span>import</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> useLatest <span>from</span> <span>'../useLatest'</span><span>;</span>\n\n<span>const</span> useInterval <span>=</span> <span>(</span><span>fn</span><span>:</span><span>(</span><span>)</span> <span>=></span> <span>void</span><span>,</span> delay<span>?</span><span>:</span> <span>number</span><span>,</span> immediate<span>?</span><span>:</span><span>boolean</span><span>)</span><span>:</span> <span>void</span> <span>=></span> <span>{</span>\n\n  <span>const</span> fnRef <span>=</span> <span>useLatest</span><span>(</span>fn<span>)</span>\n\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span><span>(</span><span>!</span>delay <span>||</span> delay <span>&lt;</span> <span>0</span><span>)</span> <span>return</span><span>;</span>\n    <span>if</span><span>(</span>immediate<span>)</span> fnRef<span>.</span><span>current</span><span>(</span><span>)</span><span>;</span>\n\n    <span>const</span> timer <span>=</span> <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      fnRef<span>.</span><span>current</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span> delay<span>)</span>\n\n    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>clearInterval</span><span>(</span>timer<span>)</span>\n    <span>}</span>\n  <span>}</span><span>,</span> <span>[</span>delay<span>]</span><span>)</span>\n\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useInterval<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果展示：<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47b323c0e8b04546a5a30f51b9eb3488~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n<h4 id=\"usecountdown\" tabindex=\"-1\"> useCountDown</h4>\n<p><strong>useCountDown</strong>：简单控制倒计时的钩子</p>\n<p>跟之前一样我们先来想想这个钩子需要什么：</p>\n<ul>\n<li>我们要做倒计时的钩子首先需要一个目标时间（targetDate），控制时间变化的秒数（interval默认为1s），然后就是倒计时完成后所触发的函数（onEnd）</li>\n<li>返参就更加一目了然了，返回的是两个时间差的数值（time），再详细点可以换算成对应的天、时、分等（formattedRes）</li>\n</ul>\n<p>详细代码:</p>\n<div><pre><code><span>import</span> <span>{</span> useState<span>,</span> useEffect<span>,</span> useMemo <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> useLatest <span>from</span> <span>'../useLatest'</span><span>;</span>\n<span>import</span> dayjs <span>from</span> <span>'dayjs'</span><span>;</span>\n\n<span>type</span> <span>DTime</span> <span>=</span> Date <span>|</span> <span>number</span> <span>|</span> <span>string</span> <span>|</span> <span>undefined</span><span>;</span>\n\n<span>interface</span> <span>Options</span> <span>{</span>\n  targetDate<span>?</span><span>:</span> DTime<span>;</span>\n  interval<span>?</span><span>:</span> <span>number</span><span>;</span>\n  onEnd<span>?</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span><span>;</span>\n<span>}</span>\n\n<span>interface</span> <span>FormattedRes</span> <span>{</span>\n  days<span>:</span> <span>number</span><span>;</span>\n  hours<span>:</span> <span>number</span><span>;</span>\n  minutes<span>:</span> <span>number</span><span>;</span>\n  seconds<span>:</span> <span>number</span><span>;</span>\n  milliseconds<span>:</span> <span>number</span><span>;</span>\n<span>}</span>\n\n<span>const</span> <span>calcTime</span> <span>=</span> <span>(</span>time<span>:</span> DTime<span>)</span> <span>=></span> <span>{</span>\n  <span>if</span><span>(</span><span>!</span>time<span>)</span> <span>return</span> <span>0</span>\n\n  <span>const</span> res <span>=</span> <span>dayjs</span><span>(</span>time<span>)</span><span>.</span><span>valueOf</span><span>(</span><span>)</span> <span>-</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span><span>;</span> <span>//计算差值</span>\n\n  <span>if</span><span>(</span>res <span>&lt;</span> <span>0</span><span>)</span> <span>return</span> <span>0</span>\n\n  <span>return</span> res\n<span>}</span>\n\n<span>const</span> parseMs <span>=</span> <span>(</span>milliseconds<span>:</span> <span>number</span><span>)</span><span>:</span> FormattedRes <span>=></span> <span>{</span>\n  <span>return</span> <span>{</span>\n    days<span>:</span> Math<span>.</span><span>floor</span><span>(</span>milliseconds <span>/</span> <span>86400000</span><span>)</span><span>,</span>\n    hours<span>:</span> Math<span>.</span><span>floor</span><span>(</span>milliseconds <span>/</span> <span>3600000</span><span>)</span> <span>%</span> <span>24</span><span>,</span>\n    minutes<span>:</span> Math<span>.</span><span>floor</span><span>(</span>milliseconds <span>/</span> <span>60000</span><span>)</span> <span>%</span> <span>60</span><span>,</span>\n    seconds<span>:</span> Math<span>.</span><span>floor</span><span>(</span>milliseconds <span>/</span> <span>1000</span><span>)</span> <span>%</span> <span>60</span><span>,</span>\n    milliseconds<span>:</span> Math<span>.</span><span>floor</span><span>(</span>milliseconds<span>)</span> <span>%</span> <span>1000</span><span>,</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> <span>useCountDown</span> <span>=</span> <span>(</span>options<span>?</span><span>:</span> Options<span>)</span> <span>=></span> <span>{</span>\n\n  <span>const</span> <span>{</span> targetDate<span>,</span> interval <span>=</span> <span>1000</span><span>,</span> onEnd <span>}</span> <span>=</span> options <span>||</span> <span>{</span><span>}</span><span>;</span>\n\n  <span>const</span> <span>[</span>time<span>,</span> setTime<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>(</span><span>)</span> <span>=></span>  <span>calcTime</span><span>(</span>targetDate<span>)</span><span>)</span><span>;</span>\n  <span>const</span> onEndRef <span>=</span> <span>useLatest</span><span>(</span>onEnd<span>)</span><span>;</span>\n\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n\n    <span>if</span><span>(</span><span>!</span>targetDate<span>)</span> <span>return</span> <span>setTime</span><span>(</span><span>0</span><span>)</span>\n\n    <span>setTime</span><span>(</span><span>calcTime</span><span>(</span>targetDate<span>)</span><span>)</span>\n\n    <span>const</span> timer <span>=</span> <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>const</span> target <span>=</span> <span>calcTime</span><span>(</span>targetDate<span>)</span><span>;</span>\n\n      <span>setTime</span><span>(</span>target<span>)</span><span>;</span>\n      <span>if</span> <span>(</span>target <span>===</span> <span>0</span><span>)</span> <span>{</span>\n        <span>clearInterval</span><span>(</span>timer<span>)</span><span>;</span>\n        onEndRef<span>.</span>current<span>?.</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>,</span> interval<span>)</span><span>;</span>\n    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>clearInterval</span><span>(</span>timer<span>)</span><span>;</span>\n  <span>}</span><span>,</span><span>[</span>targetDate<span>,</span> interval<span>]</span><span>)</span>\n\n  <span>const</span> formattedRes <span>=</span> <span>useMemo</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>return</span> <span>parseMs</span><span>(</span>time<span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span>time<span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>[</span>time<span>,</span> formattedRes<span>]</span> <span>as</span> <span>const</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> useCountDown<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>验证:</p>\n<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> useCountDown <span>}</span> <span>from</span> <span>'@/components'</span>\n<span>import</span> <span>{</span> Button<span>,</span> Toast <span>}</span> <span>from</span> <span>'antd-mobile'</span><span>;</span>\n\n<span>const</span> Index<span>:</span>React<span>.</span><span>FC</span><span>&lt;</span><span>any</span><span>></span> <span>=</span> <span>(</span>props<span>)</span><span>=></span> <span>{</span>\n\n  <span>const</span> <span>[</span>_<span>,</span> formattedRes<span>]</span> <span>=</span> <span>useCountDown</span><span>(</span><span>{</span>\n    targetDate<span>:</span> <span>'2022-12-31 24:00:00'</span><span>,</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  <span>const</span> <span>{</span> days<span>,</span> hours<span>,</span> minutes<span>,</span> seconds<span>,</span> milliseconds <span>}</span> <span>=</span> formattedRes<span>;</span>\n\n  <span>const</span> <span>[</span>count<span>,</span> setCount<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span><span>)</span><span>;</span>\n\n  <span>const</span> <span>[</span>countdown<span>]</span> <span>=</span> <span>useCountDown</span><span>(</span><span>{</span>\n    targetDate<span>:</span> count<span>,</span>\n    <span>onEnd</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      Toast<span>.</span><span>show</span><span>(</span><span>'结束'</span><span>)</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>padding<span>:</span> <span>20</span><span>}</span><span>}</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span><span>></span></span><span> 距离 2022-12-31 24:00:00 还有 </span><span>{</span>days<span>}</span><span> 天 </span><span>{</span>hours<span>}</span><span> 时 </span><span>{</span>minutes<span>}</span><span> 分 </span><span>{</span>seconds<span>}</span><span> 秒 </span><span>{</span>milliseconds<span>}</span><span> 毫秒</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n      </span><span><span><span>&lt;</span>div</span><span>></span></span><span>\n        </span><span><span><span>&lt;</span>p</span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginTop<span>:</span> <span>12</span><span>}</span><span>}</span></span><span>></span></span><span>动态变化：</span><span><span><span>&lt;/</span>p</span><span>></span></span><span>\n        </span><span><span><span>&lt;</span><span>Button</span></span> <span>color</span><span><span>=</span><span>'</span>primary<span>'</span></span> <span>disabled</span><span><span>=</span><span>{</span>countdown <span>!==</span> <span>0</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setCount</span><span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>+</span> <span>3000</span><span>)</span><span>}</span></span><span>></span></span><span>\n          </span><span>{</span>countdown <span>===</span> <span>0</span> <span>?</span> <span>'开始'</span> <span>:</span> <span><span>`</span><span>还有 </span><span><span>${</span>Math<span>.</span><span>round</span><span>(</span>countdown <span>/</span> <span>1000</span><span>)</span><span>}</span></span><span>s</span><span>`</span></span><span>}</span><span>\n        </span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n        </span><span><span><span>&lt;</span><span>Button</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span>marginLeft<span>:</span> <span>8</span><span>}</span><span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setCount</span><span>(</span><span>undefined</span><span>)</span><span>}</span></span><span>></span></span><span>停止</span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>\n      </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>\n    </span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>)</span><span>;</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> Index<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>效果展示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f41eaef407564c86b27aac51c4539da2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?\" alt=\"图片\"></p>\n",
      "image": "https://jin-shaohui.gitee.io/assets/knowledge/frontEnd/react/hooks/reactHooks.jpg",
      "date_published": "2022-06-27T10:14:21.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [
        {
          "name": "小杜杜 - 掘金"
        }
      ],
      "tags": [
        "React"
      ]
    },
    {
      "title": "父组件里监听子组件的生命周期",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/@Hook/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/@Hook/",
      "content_html": "<p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，常规的写法可能如下：</p>\n<div><pre><code>// Parent.vue\n<span><span><span>&lt;</span>Child</span> <span>@mounted</span><span><span>=</span><span>\"</span>doSomething<span>\"</span></span><span>/></span></span>\n\n// Child.vue\nmounted() {\n  this.$emit(\"mounted\");\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此外，还有一种特别简单的方式，子组件不需要任何处理，只需要在父组件引用的时候通过@hook 来监听即可，@hook也可以监听其它的生命周期事件,代码如下：</p>\n<div><pre><code><span><span><span>&lt;</span>Child</span> <span><span>@hook:</span>mounted</span><span><span>=</span><span>\"</span>doSomething<span>\"</span></span> <span>/></span></span> \n<span><span><span>&lt;</span>Child</span> <span><span>@hook:</span>updated</span><span><span>=</span><span>\"</span>doSomething<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>实现原理在vue源码的 <code>/src/core/instance/lifecycle.js</code></p>\n<div><pre><code><span>// 每个生命周期后都会调用 callHook('xxx') 如下</span>\n<span>if</span> <span>(</span>vm<span>.</span>_isMounted <span>&amp;&amp;</span> <span>!</span>vm<span>.</span>_isDestroyed<span>)</span> <span>{</span>\n  <span>callHook</span><span>(</span>vm<span>,</span> <span>'beforeUpdate'</span><span>)</span>\n<span>}</span>\n\n<span>export</span> <span>function</span> <span>callHook</span> <span>(</span><span><span>vm</span><span>:</span> Component<span>,</span> <span>hook</span><span>:</span> string</span><span>)</span> <span>{</span>\n  <span>//...</span>\n  <span>if</span> <span>(</span>vm<span>.</span>_hasHookEvent<span>)</span> <span>{</span>\n    vm<span>.</span><span>$emit</span><span>(</span><span>'hook:'</span> <span>+</span> hook<span>)</span>\n  <span>}</span>\n  <span>//...</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-14T17:19:46.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "Computed中使用this",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/Computed/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/Computed/",
      "content_html": "<p>我们平时在 <code>computed</code> 属性中可以通过 <code>this.xxx</code> 去拿 <code>data</code> 里面的数据和 <code>methods</code> 里面的方法，</p>\n<p>或许还会通过 <code>this.$store</code> 去拿 <code>vuex</code> 的 <code>state</code> 和 <code>commit</code> 等，</p>\n<p>甚至，还会通过 this.<code>$route</code> 去获取路由里面的数据。</p>\n<p>其实，我们可以避免这些丑陋的this，它甚至会给我们带来看不见的性能问题。</p>\n<p>实现上，我们通过this能访问到的数据，在computed的第一个参数上都能结构出来。</p>\n<div><pre><code>export default {\n  computed: {\n    a({$attrs,$route,$store,$listeners,$ref}){\n     // 还能结构很多属性，可自行打印看看\n     return \n   }\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-15T10:19:03.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "上下文批量引入",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/Context/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/Context/",
      "content_html": "<div>\n<p>警告</p>\n<p>require.context()引入多个组件</p>\n<p>常常用来在组件内引入多个组件, <code>require.context(directory, useSubdirectories, regExp)</code></p>\n</div>\n<div><pre><code>// 原始写法\nimport titleCom from '@/components/home/titleCom'\nimport bannerCom from '@/components/home/bannerCom'\nimport cellCom from '@/components/home/cellCom'\ncomponents: {\n  titleCom, bannerCom, cellCom\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这样就写了大量重复的代码,利用 <code>require.context</code> 可以写成</p>\n<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>\n<span>const</span> files <span>=</span> require<span>.</span><span>context</span><span>(</span><span>'@/components/home'</span><span>,</span> <span>false</span><span>,</span> <span><span>/</span><span>\\.vue$</span><span>/</span></span><span>)</span>\n<span>const</span> modules <span>=</span> <span>{</span><span>}</span>\nfiles<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>key</span> <span>=></span> <span>{</span>\n  <span>const</span> name <span>=</span> path<span>.</span><span>basename</span><span>(</span>key<span>,</span> <span>'.vue'</span><span>)</span>\n  modules<span>[</span>name<span>]</span> <span>=</span> <span>files</span><span>(</span>key<span>)</span><span>.</span>default <span>||</span> <span>files</span><span>(</span>key<span>)</span>\n<span>}</span><span>)</span>\n<span>components</span><span>:</span> modules\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在main.js中引入大量公共组件,利用 <code>require.context</code> 可以写成</p>\n<div><pre><code><span>import</span> Vue <span>from</span> <span>'vue'</span>\n<span>// 自定义组件</span>\n<span>const</span> requireComponents <span>=</span> require<span>.</span><span>context</span><span>(</span><span>'../views/components'</span><span>,</span> <span>true</span><span>,</span> <span><span>/</span><span>\\.vue</span><span>/</span></span><span>)</span>\n<span>// 打印结果</span>\n<span>// 遍历出每个组件的路径</span>\nrequireComponents<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>fileName</span> <span>=></span> <span>{</span>\n  <span>// 组件实例</span>\n  <span>const</span> reqCom <span>=</span> <span>requireComponents</span><span>(</span>fileName<span>)</span>\n  <span>// 截取路径作为组件名</span>\n  <span>const</span> reqComName <span>=</span>reqCom<span>.</span>name<span>||</span> fileName<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\\.\\/(.*)\\.vue</span><span>/</span></span><span>,</span><span>'$1'</span><span>)</span>\n  <span>// 组件挂载</span>\n  Vue<span>.</span><span>component</span><span>(</span>reqComName<span>,</span> reqCom<span>.</span>default <span>||</span> reqCom<span>)</span>\n<span>}</span><span>)</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-14T16:26:24.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "数据冻结",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/Freeze/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/Freeze/",
      "content_html": "<div>\n<p>警告</p>\n<p>vue 2.0版本会通过 <code>Object.defineProperty</code> 对数据进行劫持，遇到数组和对象必须循环遍历所有的域值才能劫持每一个属性。</p>\n<p>vue 3.0版本会通过 <code>Proxy</code> 构造函数来进行数据劫持，来实现视图响应数据的变化</p>\n</div>\n<p>然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间。</p>\n<p>所以，我们可以通过 <code>Object.freeze</code> 方法来冻结一个对象，这个对象一旦被冻结，vue就不会对数据进行劫持了。</p>\n<p><code>Object.freeze()</code> 可以冻结一个对象，冻结之后不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</p>\n<div><pre><code><span><span><span>&lt;</span>p</span> <span>v-for</span><span><span>=</span><span>\"</span>item in list<span>\"</span></span><span>></span></span>{{ item.value }}<span><span><span>&lt;/</span>p</span><span>></span></span>\n\nexport default {\n  data: {\n    // vue不会对list里的object做getter、setter绑定\n    list: Object.freeze([\n        { value: 1 },\n        { value: 2 }\n    ])\n  },\n  created () {\n    // 界面不会有响应\n    this.list[0].value = 100;\n\n    // 下面两种做法，界面都会响应\n    this.list = [\n        { value: 100 },\n        { value: 200 }\n    ];\n    this.list = Object.freeze([\n        { value: 100 },\n        { value: 200 }\n    ]);\n  }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-15T10:50:58.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "组件懒加载",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/LazyComponent/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/LazyComponent/",
      "content_html": "<div>\n<p>警告</p>\n<p>异步组件可以让我们在需要一些组件时才将它加载进来，而不是一初始化就加载进来，这跟路由懒加载是一个概念。</p>\n</div>\n<p>以前是这么引入组件的</p>\n<div><pre><code>import BureauDetail from './components/ChildFirst'\nimport addBureau from './components/ChildSecond'\n\n//在vue的comoinents中\ncomponents: {\n  ChildFirst,\n  ChildSecond \n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如果不是一开始就要加载的组件，我们可以使用组件懒加载</p>\n<div><pre><code>//在vue的comoinents中\ncomponents: {\n  BureauDetail: () => import('./components/ChildFirst'),\n  addBureau: () => import('./components/ChildSecond')\n},\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>异步组件还有一种比较完善的写法</p>\n<p>export default {\ncomponents:{\nChildFirst:()=&gt;({\ncomponent:import(/* webpackChunkName: &quot;ChildFirst&quot; */ './Async'),\ndelay:200, // 延迟几毫秒，默认200\ntimeout:3000, // 加载几毫米之后就超时，触发error组件\nloading:LoadingComponent, // 组件未加载回来前显示\nerror:ErrorComponent // 组件超时时显示\n})\n}\n}</p>\n",
      "date_published": "2022-06-14T16:06:41.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "路由懒加载",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/LazyRouter/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/LazyRouter/",
      "content_html": "<div>\n<p>警告</p>\n<p>路由懒加载，能让你首次加载更快</p>\n</div>\n<p>路由懒加载可以让我们的包不需要一次把所有的页面的加载进来，只加载当前页面的路由组件就行。</p>\n<p>举个栗子🌰，如果这样写，加载的时候会全部都加载进来。</p>\n<div><pre><code><span>const</span> router <span>=</span> <span>new</span> <span>VueRouter</span><span>(</span><span>{</span>\n  <span>routes</span><span>:</span><span>[</span>\n    <span>{</span>\n      <span>path</span><span>:</span> <span>'/'</span><span>,</span>\n      <span>name</span><span>:</span> <span>'Home'</span><span>,</span>\n      <span>component</span><span>:</span> Home\n    <span>}</span><span>,</span>\n    <span>{</span>\n      <span>path</span><span>:</span> <span>'/about'</span><span>,</span>\n      <span>name</span><span>:</span> <span>'About'</span><span>,</span>\n      <span>component</span><span>:</span> About\n    <span>}</span>\n  <span>]</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>所以，应该避免上面的写法，尽量使用懒加载。</p>\n<p>路由的懒加载可以分为以下三种写法。</p>\n<ul>\n<li>Vue异步组件</li>\n<li>es6的import</li>\n<li>webpack提供的require.ensure()</li>\n</ul>\n<div><pre><code>\n<span>// 1、Vue异步组件</span>\n<span>VueRouter</span><span>(</span><span>{</span>\n  <span>routes</span><span>:</span><span>[</span>\n    <span>{</span>\n      <span>path</span><span>:</span> <span>'/about'</span><span>,</span>\n      <span>name</span><span>:</span> <span>'About'</span><span>,</span>\n      <span>component</span><span>:</span> <span>resolve</span> <span>=></span> <span>reqire</span><span>(</span><span>[</span><span>'path路径'</span><span>]</span><span>,</span> resolve<span>)</span>\n    <span>}</span>\n  <span>]</span>\n<span>}</span><span>)</span>\n\n<span>// 2、es6的import</span>\n<span>VueRouter</span><span>(</span><span>{</span>\n  <span>routes</span><span>:</span><span>[</span>\n    <span>{</span>\n      <span>path</span><span>:</span> <span>'/about'</span><span>,</span>\n      <span>name</span><span>:</span> <span>'About'</span><span>,</span>\n      <span>component</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>import</span><span>(</span><span>'path路径'</span><span>)</span>\n    <span>}</span>\n  <span>]</span>\n<span>}</span><span>)</span>\n\n<span>// 3、webpack提供的require.ensure()</span>\n<span>VueRouter</span><span>(</span><span>{</span>\n  <span>routes</span><span>:</span><span>[</span>\n    <span>{</span>\n      <span>path</span><span>:</span> <span>'/about'</span><span>,</span>\n      <span>name</span><span>:</span> <span>'About'</span><span>,</span>\n      <span>component</span><span>:</span> <span>r</span> <span>=></span> require<span>.</span><span>ensure</span><span>(</span><span>[</span><span>]</span><span>,</span><span>(</span><span>)</span> <span>=></span>  <span>r</span><span>(</span><span>require</span><span>(</span><span>'path路径'</span><span>)</span><span>)</span><span>,</span> <span>'demo'</span><span>)</span>\n    <span>}</span>\n  <span>]</span>\n<span>}</span><span>)</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-14T14:41:41.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "插槽",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/Slot/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/Slot/",
      "content_html": "<h2 id=\"默认内容和扩展点\" tabindex=\"-1\"> 默认内容和扩展点</h2>\n<div>\n<p>警告</p>\n<p>Vue中的槽可以有默认的内容，这使我们可以制作出更容易使用的组件。</p>\n</div>\n<div><pre><code><span><span><span>&lt;</span>button</span> <span>class</span><span><span>=</span><span>\"</span>button<span>\"</span></span> <span>@click</span><span><span>=</span><span>\"</span>$emit('click')<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>slot</span><span>></span></span>\n    <span>&lt;!-- Used if no slot is provided --></span>\n    Click me\n  <span><span><span>&lt;/</span>slot</span><span>></span></span>\n<span><span><span>&lt;/</span>button</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>我们可以取组件的任何部分，将其封装在一个插槽中，在外面我们可以用想要的任何内容覆盖组件的该部分。</p>\n<p>默认情况下，它仍然会按照原来的方式工作，但这样做会有了更多的选项</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>button</span> <span>class</span><span><span>=</span><span>\"</span>button<span>\"</span></span> <span>@click</span><span><span>=</span><span>\"</span>$emit('click')<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>slot</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>formatting<span>\"</span></span><span>></span></span>\n        {{ text }}\n      <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>slot</span><span>></span></span>\n  <span><span><span>&lt;/</span>button</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>现在我们可以用许多不同的方式使用这个组件。简单的、默认的方式，或者自定义的方式。</p>\n<div><pre><code><span>&lt;!-- Uses default functionality of the component --></span>\n<span><span><span>&lt;</span>SlotButton</span> <span>text</span><span><span>=</span><span>\"</span>Formatted text<span>\"</span></span> <span>/></span></span>\n\n<span><span><span>&lt;</span>SlotButton</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>different-formatting<span>\"</span></span><span>></span></span>\n    Do something a little different here\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>SlotButton</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"单个作用域插槽的简写-不需要-template-标签\" tabindex=\"-1\"> 单个作用域插槽的简写(不需要 template 标签)</h2>\n<p>限定范围的插槽非常有趣，但为了使用它们，您还必须使用许多模板标记。</p>\n<blockquote>\n<p>幸运的是，有一个简写可以让我们摆脱它，但只有在我们使用<code>单个作用域槽</code>的情况下。</p>\n</blockquote>\n<div><pre><code>// 普通写法：\n<span><span><span>&lt;</span>DataTable</span><span>></span></span>\n  <span><span><span>&lt;</span>template</span> <span>#header</span><span><span>=</span><span>\"</span>tableAttributes<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>TableHeader</span> <span>v-bind</span><span><span>=</span><span>\"</span>tableAttributes<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;/</span>DataTable</span><span>></span></span>\n\n\n// 不使用 template:\n<span><span><span>&lt;</span>DataTable</span> <span>#header</span><span><span>=</span><span>\"</span>tableAttributes<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>TableHeader</span> <span>v-bind</span><span><span>=</span><span>\"</span>tableAttributes<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;/</span>DataTable</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"有条件地渲染插槽\" tabindex=\"-1\"> 有条件地渲染插槽</h2>\n<p>我们先来看如何做，然后在讨论为什么想隐藏插槽。</p>\n<p>每个Vue组件都有一个特殊的$slots对象，里面有你所有的插槽。默认槽的键是default，任何被命名的槽都使用其名称作为键。</p>\n<div><pre><code>const $slots = {\n  default: <span><span><span>&lt;</span>default</span> <span>slot</span><span>></span></span>,\n  icon: <span><span><span>&lt;</span>icon</span> <span>slot</span><span>></span></span>,\n  button: <span><span><span>&lt;</span>button</span> <span>slot</span><span>></span></span>,\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>但这个 <code>$slots</code> 对象只有适用于该组件的插槽，而不是每一个定义的插槽。</p>\n<p>拿这个定义了几个插槽的组件来说，包括几个命名的插槽。</p>\n<div><pre><code><span>&lt;!-- Slots.vue --></span>\n<span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>h2</span><span>></span></span>Here are some slots<span><span><span>&lt;/</span>h2</span><span>></span></span>\n    <span><span><span>&lt;</span>slot</span> <span>/></span></span>\n    <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>\"</span>second<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>\"</span>third<span>\"</span></span> <span>/></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如果我们只对组件应用一个插槽，那么只有那个插槽会显示在我们的 <code>$slots</code> 对象中。</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>Slots</span><span>></span></span>\n    <span><span><span>&lt;</span>template</span> <span>#second</span><span>></span></span>\n      This will be applied to the second slot.\n    <span><span><span>&lt;/</span>template</span><span>></span></span>\n  <span><span><span>&lt;/</span>Slots</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n$slots = { second: <span><span><span>&lt;</span>vnode</span><span>></span></span> }\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>正阳就可以在组件中使用这一点来检测 <code>哪些插槽已经被应用</code> 到组件中，例如，通过隐藏插槽的包装元素。</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>h2</span><span>></span></span>A wrapped slot<span><span><span>&lt;/</span>h2</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>v-if</span><span><span>=</span><span>\"</span>$slots.default<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>styles<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>slot</span> <span>/></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>现在，应用样式的包装器 <code>div</code> 只有在我们用某些东西填充这个插槽时才会被渲染。</p>\n<p>如果不使用 <code>v-if</code> ，那么，当没有插槽时，就会得到一个空的不必要的div。</p>\n<p>根据div的样式，这可能会打乱我们的布局，让界面看起来很奇怪。</p>\n<div>\n<p>警告</p>\n<p>那么，为什么我们希望能够有条件地渲染插槽呢？</p>\n</div>\n<p>使用条件插槽的主要原因有三个:</p>\n<ul>\n<li>当使用封装的div来添加默认样式时</li>\n<li>插槽是空的</li>\n<li>如果我们将默认内容与嵌套槽相结合</li>\n</ul>\n<p>例如，当我们在添加默认样式时，我们在插槽周围添加一个div</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>h2</span><span>></span></span>This is a pretty great component, amirite?<span><span><span>&lt;/</span>h2</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>default-styling<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>slot</span> <span>/></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>$emit('click')<span>\"</span></span><span>></span></span>Click me!<span><span><span>&lt;/</span>button</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然而，如果父组件没有将内容应用到该插槽中，我们最终会在页面上渲染出一个空的div。</p>\n<div><pre><code><span><span><span>&lt;</span>div</span><span>></span></span>\n  <span><span><span>&lt;</span>h2</span><span>></span></span>This is a pretty great component, amirite?<span><span><span>&lt;/</span>h2</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>default-styling<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 槽中没有内容，但这个div 仍然被渲染。糟糕 --></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>$emit('click')<span>\"</span></span><span>></span></span>Click me!<span><span><span>&lt;/</span>button</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>解决方法就是像上面讲的一样，多个条件判断，就行啦。</p>\n<h2 id=\"如何监听一个插槽的变化\" tabindex=\"-1\"> 如何监听一个插槽的变化</h2>\n<div>\n<p>警告</p>\n<p>有时需要知道插槽内的内容何时发生了变化。</p>\n</div>\n<div><pre><code><span>&lt;!-- 可惜这个事件不存在 --></span>\n<span><span><span>&lt;</span>slot</span> <span>@change</span><span><span>=</span><span>\"</span>update<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>不幸的是，Vue没有内置的方法让我们检测这一点。</p>\n<p>然而有一次想出了一个非常干净的方法，使用MutationObserver来做这件事。</p>\n<p>MutationObserver接口提供了监视对DOM树所做更改的能力。它被设计为旧的Mutation Events功能的替代品，该功能是DOM3 Events规范的一部分。</p>\n<div><pre><code><span>export</span> <span>default</span> <span>{</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 当有变化时调用`update`</span>\n    <span>const</span> observer <span>=</span> <span>new</span> <span>MutationObserver</span><span>(</span><span>this</span><span>.</span>u<span>**</span>pdate<span>)</span><span>;</span>\n\n    <span>// 监听此组件的变化</span>\n    observer<span>.</span><span>observe</span><span>(</span><span>this</span><span>.</span>$el<span>,</span> <span>{</span>\n      <span>childList</span><span>:</span> <span>true</span><span>,</span>\n      <span>subtree</span><span>:</span> <span>true</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-16T11:30:02.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "父组件通信",
      "url": "https://jin-shaohui.gitee.io/SkillPoint/Sync/",
      "id": "https://jin-shaohui.gitee.io/SkillPoint/Sync/",
      "content_html": "<div>\n<p>警告</p>\n<p><code>.sync</code>提供了一种与父组件沟通的思路！</p>\n<p>你如果只是单纯的在子组件当中修改父组件的某个数据时，建议使用 <code>sync</code> ，简单，快捷，不需要在传一个自定义方法来接收了</p>\n</div>\n<p>vue中我们经常会用 <code>v-bind(缩写为:)</code> 给子组件传入参数，然后子组件 <code>emit</code> 事件去改变父组件的状态。</p>\n<p>或者我们会给子组件传入一个函数，子组件通过调用传入的函数来改变父组件的状态。</p>\n<p>举个例子🌰</p>\n<div><pre><code>//父组件 给子组件传入一个函数\n <span><span><span>&lt;</span>MyFooter</span> <span>:age</span><span><span>=</span><span>\"</span>age<span>\"</span></span> <span>@setAge</span><span><span>=</span><span>\"</span>(res)=> age = res<span>\"</span></span><span>></span></span>\n <span><span><span>&lt;/</span>MyFooter</span><span>></span></span>\n \n \n //子组件 通过调用这个函数来实现修改父组件的状态。\n mounted () {\n    console.log(this.$emit('setAge',1234567));\n }\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>现在只需要使用.sync就可以轻松更新赋组件的值</p>\n<div><pre><code>//父组件 将age传给子组件并使用.sync修饰符。\n<span><span><span>&lt;</span>MyFooter</span> <span>:age.sync</span><span><span>=</span><span>\"</span>age<span>\"</span></span><span>></span></span>\n<span><span><span>&lt;/</span>MyFooter</span><span>></span></span>\n\n\n//子组件 触发事件\n mounted () {\n   console.log(this.$emit('update:age',1234567));\n }\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-15T11:18:42.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "VUE SKILL"
      ]
    },
    {
      "title": "浅谈性能优化",
      "url": "https://jin-shaohui.gitee.io/Performance/info/",
      "id": "https://jin-shaohui.gitee.io/Performance/info/",
      "content_html": "<el-collapse>\n<el-collapse-item title=\"前言\" name=\"1\">\n<p>随着前端项目不断扩大，浏览器渲染的压力变得越来越重。配置好一点的计算机可以顺利地展现页面；配置低一些的计算机<code>渲染页面</code>的性能就不那么可观了。</p>\n<p>性能优化部分的面试题主要考察应试者对网站性能优化的了解。如何做好性能优化，哪些操作会引起性能优化的问题，性能优化指标是什么等，都值得应试者关注。</p>\n<p>因为性能优化变得越来越重要，所以很多企业专门建立团队去做性能优化。</p>\n</el-collapse-item>\n<el-collapse-item title=\"谈谈你对重构的理解\" name=\"2\">\n<p>网站重构是指在不改变外部行为的前提下，简化结构、添加可读性，且在网站前端保持一致的行为。也就是说，在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。对于传统的网站来说，重构通常包括以下方面。</p>\n<ul>\n<li>把表格（ table）布局改为DV+CSS。</li>\n<li>使网站前端兼容现代浏览器。</li>\n<li>对移动平台进行优化。</li>\n<li>针对搜索引擎进行优化。</li>\n</ul>\n<p>深层次的网站重构应该考虑以下方面：</p>\n<ul>\n<li>减少代码间的耦合</li>\n<li>让代码保持弹性。</li>\n<li>严格按规范编写代码。</li>\n<li>设计可扩展的API。</li>\n<li>代替旧的框架、语言（如VB）</li>\n<li>增强用户体验。</li>\n<li>对速度进行优化。</li>\n<li>压缩 JavaScript、CSS、 image等前端资源（通常由服务器来解决）。</li>\n<li>优化程序的性能（如数据读写）。</li>\n<li>采用CDN来加速资源加载。</li>\n<li>优化 JavaScript DOM。</li>\n<li>缓存HTTP服务器的文件。</li>\n</ul>\n</el-collapse-item>\n<el-collapse-item title=\"如果一个页面上有大量的图片（大型电商网站），网页加载很慢，可以用哪些方法优化这些图片的加载，从而提升用户体验？\" name=\"3\">\n<p>对于图片懒加载，可以为页面添加一个滚动条事件，判断图片是否在可视区域内或者即将进入可视区域，优先加载。如果为幻灯片、相册文件等，可以使用图片预加载技术，对于当前展示图片的前一张图片和后一张图片优先下载。如果图片为CSS图片，可以使用 CSS Sprite、SVG sprite、 Icon font、Base64等技术。如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩得特别小的缩略图，以提高用户体验。如果图片展示区域小于图片的真实大小，则应在服务器端根据业务需要先行进行图片压缩，图片压缩后，图片大小与展示的就一致了。</p>\n</el-collapse-item>\n<el-collapse-item title=\"谈谈性能优化问题\" name=\"4\">\n<p>可以在以下层面优化性能。</p>\n<ul>\n<li>缓存利用：缓存Ajax，使用CDN、外部 JavaScript和CSS文件缓存，添加 Expires头，在服务器端配置Etag，减少DNS查找等。</li>\n<li>请求数量：合并样式和脚本，使用CSS图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</li>\n<li>请求带宽：压缩文件，开启GZIP 。</li>\n<li>CSS代码：避免使用CSS表达式、高级选择器、通配选择器。</li>\n<li>JavaScript代码：用散列表来优化查找，少用全局变量，用 innerHTML代替DOM操作，减少DOM操作次数，优化 JavaScript性能，用 setTimeout避免页面失去响应，缓存DOM节点查找的结果，避免使用with（with会创建自己的作用域，增加作用域链的长度），多个变量声明合并。</li>\n<li>HTML代码：避免图片和 iFrame等src属性为空。src属性为空，会重新加载当前页面，影响速度和效率，尽量避免在HTML标签中写 Style属性</li>\n</ul>\n</el-collapse-item>\n<el-collapse-item title=\"移动端性能如何优化\" name=\"5\">\n<p>优化方式如下。</p>\n<ul>\n<li>尽量使用CSS3动画，开启硬件加速。</li>\n<li>适当使用 touch事件代替 click事件。</li>\n<li>避免使用CSS3渐变阴影效果。</li>\n<li>可以用 transform:translateZ（0）来开启硬件加速。</li>\n<li>不滥用 Float, Float在渲染时计算量比较大，尽量少使用。</li>\n<li>不滥用Web字体，Web字体需要下载、解析、重绘当前页面，尽量少使用。</li>\n<li>合理使用requestAnimation Frame动画代替 setTimeout。</li>\n<li>合理使用CSS中的属性（CSS3 transitions、CSS3 3D transforms、 Opacity、 Canvas、 WebGL、Video）触发GPU渲染。过度使用会使手机耗电量増加。</li>\n</ul>\n</el-collapse-item>\n<el-collapse-item title=\"如何对网站的文件进行优化\" name=\"6\">\n<p>可以进行文件合并、文件压缩使文件最小化；可以使用CDN托管文件，让用户更快速地访问；可以使用多个域名来缓存静态文件。</p>\n</el-collapse-item>\n<el-collapse-item title=\"请说出几种缩短页面加载时间的方法\" name=\"7\">\n<p>具体方法如下。</p>\n<p>（1）优化图片</p>\n<p>（2）选择图像存储格式（比如，GIF提供的颜色较少，可用在一些对颜色要求不高的地方）</p>\n<p>（3）优化CSS（压缩、合并CSS）</p>\n<p>（4）在网址后加斜杠</p>\n<p>（5）为图片标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小。如果图片很多，浏览器需要不断地调整页面。这不但影响速度，而且影响浏览体验。当浏览器知道高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容，从而优化加载时间，提升浏览体验）。</p>\n</el-collapse-item>\n<el-collapse-item title=\"哪些方法可以提升网站前端性能\" name=\"8\">\n<p>精灵图合并，减少HTTP请求；压缩HTML、CSS、JavaScript文件；使用CDN托管静态文件；使用 localstorage缓存和 mainfest应用缓存。</p>\n</el-collapse-item>\n<el-collapse-item title=\"你知道哪些优化性能的方法\" name=\"9\">\n<p>具体方法如下。</p>\n<p>（1）减少HTTP请求次数，控制CSS Sprite、JavaScript与CSS源码、图片的大小，使用网页Gzip、CDN托管、data缓存、图片服务器</p>\n<p>（2）通过前端模板 JavaScript和数据，减少由于HTML标签导致的带宽浪费，在前端用变量保存Ajax请求结果，每次操作本地变量时，不用请求，减少请求次数。</p>\n<p>（3）用 innerhTML代替DOM操作，减少DOM操作次数，优化 JavaScript性能。</p>\n<p>（4）当需要设置的样式很多时，设置 className而不是直接操作 Style。</p>\n<p>（5）少用全局变量，缓存DOM节点查找的结果，减少I/O读取操作</p>\n<p>（6）避免使用CSS表达式，它又称动态属性，</p>\n<p>（7）预加载图片，将样式表放在顶部，将脚本放在底部，加上时间戳。</p>\n<p>（8）避免在页面的主体布局中使用表，表要在其中的内容完全下载之后才会显示出来，显示的速度比DIV+CSS布局慢。</p>\n</el-collapse-item>\n<el-collapse-item title=\"列举你知道的Web性能优化方法\" name=\"10\">\n<p>具体优化方法如下。</p>\n<p>（1）压缩源码和图片（ JavaScript采用混淆压缩，CSS进行普通压缩，JPG图片根据具体质量压缩为50%~70%，把PNG图片从24色压缩成8色以去掉一些PNG格式信息等）。</p>\n<p>（2）选择合适的图片格式（颜色数多用JPG格式，而很少使用PNG格式，如果能通过服务器端判断浏览器支持WebP就用WebP或SVG格式）。</p>\n<p>（3）合并静态资源（减少HTTP请求）</p>\n<p>（4）把多个CSS合并为一个CSS，把图片组合成雪碧图。</p>\n<p>（5）开启服务器端的Gzip压缩（对文本资源非常有效）。</p>\n<p>（6）使用CDN（对公开库共享缓存）。</p>\n<p>（7）延长静态资源缓存时间。</p>\n<p>（8）把CSS放在页面头部把 JavaScript代码放在页面底部（这样避免阻塞页面渲染而使页面出现长时间的空白）</p>\n</el-collapse-item>\n<el-collapse-item title=\"平时你是如何对代码进行性能优化的\" name=\"11\">\n<p>利用性能分析工具监测性能，包括静态 Analyze工具和运行时的 Profile工具（在Xcode工具栏中依次单击 Product→ Profile项可以启动）。比如测试程序的运行时间，当单击 Time Profiler项时，应用程序开始运行，这就能获取到运行整个应用程序所消耗时间的分布和百分比。为了保证数据分析在同一使用场景下的真实性，一定要使用真机，因为此时模拟器在Mac上运行，而Mac上的CPU往往比iOS设备要快。</p>\n</el-collapse-item>\n<el-collapse-item title=\"针对CSS，如何优化性能\" name=\"12\">\n<p>具体优化方法如下。</p>\n<p>（1）正确使用 display属性， display属性会影响页面的渲染，因此要注意以下几方面。display:inline后不应该再使用 width、 height、 margin、 padding和float 。display:inline- block后不应该再使用 float。display:block后不应该再使用 vertical-align。display:table-*后不应该再使用 margin或者float。</p>\n<p>（2）不滥用 float。</p>\n<p>（3）不声明过多的font-size。</p>\n<p>（4）当值为0时不需要单位。</p>\n<p>（5）标准化各种浏览器前缀，并注意以下几方面。</p>\n<ul>\n<li>浏览器无前缀应放在最后。</li>\n<li>CSS动画只用（ -webkit-无前缀）两种即可。</li>\n<li>其他前缀包括 -webkit-、-moz-、-ms-、无前缀（ Opera浏览器改用 blink内核，所以-0-被淘汰）</li>\n</ul>\n<p>（6）避免让选择符看起来像是正则表达式。高级选择器不容易读懂，执行时间也长。</p>\n<p>（7）尽量使用id、 class选择器设置样式（避免使用 style属性设置行内样式）</p>\n<p>（8）尽量使用CSS3动画。</p>\n<p>（9）减少重绘和回流。</p>\n</el-collapse-item>\n<el-collapse-item title=\"针对HTML，如何优化性能\" name=\"13\">\n<p>具体方法如下。</p>\n<p>（1）对于资源加载，按需加载和异步加载</p>\n<p>（2）首次加载的资源不超过1024KB，即越小越好。</p>\n<p>（3）压缩HTML、CSS、 JavaScript文件。</p>\n<p>（4）减少DOM节点。</p>\n<p>（5）避免空src（空src在部分浏览器中会导致无效请求）。</p>\n<p>（6）避免30*、40*、50*请求错误</p>\n<p>（7）添加 Favicon.ico，如果没有设置图标ico，则默认的图标会导致发送一个404或者500请求。</p>\n</el-collapse-item>\n<el-collapse-item title=\"针对 JavaScript，如何优化性能\" name=\"14\">\n<p>具体方法如下。</p>\n<p>（1）缓存DOM的选择和计算。</p>\n<p>（2）尽量使用事件委托模式，避免批量绑定事件。</p>\n<p>（3）使用 touchstart、 touchend代替 click。</p>\n<p>（4）合理使用 requestAnimationFrame动画代替 setTimeOut。</p>\n<p>（5）适当使用 canvas动画。</p>\n<p>（6）尽量避免在高频事件（如 TouchMove、 Scroll事件）中修改视图，这会导致多次渲染。</p>\n</el-collapse-item>\n<el-collapse-item title=\"如何优化服务器端\" name=\"15\">\n<p>具体方法如下。</p>\n<p>（1）启用Gzip压缩。</p>\n<p>（2）延长资源缓存时间，合理设置资源的过期时间，对于一些长期不更新的静态资源过期时间设置得长一些。</p>\n<p>（3）减少 cookie头信息的大小，头信息越大，资源传输速度越慢。</p>\n<p>（4）图片或者CSS、 JavaScript文件均可使用CDN来加速。</p>\n</el-collapse-item>\n<el-collapse-item title=\"如何优化服务器端的接口\" name=\"16\">\n<p>具体方法如下。</p>\n<p>（1）接口合并：如果一个页面需要请求两部分以上的数据接口，则建议合并成一个以减少HTTP请求数。</p>\n<p>（2）减少数据量：去掉接口返回的数据中不需要的数据。</p>\n<p>（3）缓存数据：首次加载请求后，缓存数据；对于非首次请求，优先使用上次请求的数据，这样可以提升非首次请求的响应速度。</p>\n</el-collapse-item>\n<el-collapse-item title=\"如何优化脚本的执行\" name=\"17\">\n<p>脚本处理不当会阻塞页面加载、渲染，因此在使用时需注意。</p>\n<p>（1）把CSS写在页面头部，把 JavaScript程序写在页面尾部或异步操作中。</p>\n<p>（2）避免图片和 iFrame等的空src，空src会重新加载当前页面，影响速度和效率。</p>\n<p>（3）尽量避免重设图片大小。重设图片大小是指在页面、CSS、 JavaScript文件等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能</p>\n<p>（4）图片尽量避免使用 DataURL。DataURL图片没有使用图片的压缩算法，文件会变大，并且要在解码后再渲染，加载慢，耗时长。</p>\n</el-collapse-item>\n<el-collapse-item title=\"如何优化渲染\" name=\"18\">\n<p>具体方法如下。通过HTML设置 Viewport元标签， Viewport可以加速页面的渲染，如以下代码所示。</p>\n<p><code>&lt;meta name=viewport content=width=device=width,initial-scale=1&gt;</code></p>\n<p>（2）减少DOM节点数量，DOM节点太多会影响页面的渲染，应尽量减少DOM节点数量。</p>\n<p>（3）尽量使用CSS3动画，合理使用 requestAnimationFrame动画代替 setTimeout，适当使用 canvas动画（5个元素以内使用CSS动画，5个元素以上使用 canvas动画（iOS 8中可使用 webGL））。</p>\n<p>（4）对于高频事件优化 Touchmove, Scroll事件可导致多次渲染。使用 requestAnimationFrame监听帧变化，以便在正确的时间进行渲染，增加响应变化的时间间隔，减少重绘次数。使用节流模式（基于操作节流，或者基于时间节流），减少触发次数。</p>\n<p>（5）提升GPU的速度，用CSS中的属性（CSS3 transitions、CSS3 3D transforms、 Opacity、 Canvas、 WebGL、Video）来触发GPU渲染.</p>\n</el-collapse-item>\n<el-collapse-item title=\"如何设置DNS缓存\" name=\"19\">\n<p>在浏览器地址栏中输入URL以后，浏览器首先要查询域名（ hostname）对应服务器的IP地址，一般需要耗费20~120ms的时间。DNS查询完成之前，浏览器无法识别服务器IP，因此不下载任何数据。基于性能考虑，ISP运营商、局域网路由、操作系统、客户端（浏览器）均会有相应的DNS缓存机制。</p>\n<p>（1）正IE缓存30min，可以通过注册表中 DnsCacheTimeout项设置。</p>\n<p>（2） Firefox混存1 min，通过 network.dnsCacheExpiration配置。</p>\n<p>（3）在 Chrome中通过依次单击“设置”→“选项”→“高级选项”，并勾选“用预提取DNS提高网页载入速度”选项来配置缓存时间。</p>\n</el-collapse-item>\n<el-collapse-item title=\"什么时候会出现资源访问失败\" name=\"20\">\n<p>开发过程中，发现很多开发者没有设置图标，而服务器端根目录也没有存放默认的 Favicon.ico，从而导致请求404出现。通常在App的 webview里打开 Favicon.ico，不会加载这个 Favicon.ico，但是很多页面能够分享。如果用户在浏览器中打开 Favicon. ico，就会调取失败，一般尽量保证该图标默认存在，文件尽可能小，并设置一个较长的缓存过期时间。另外，应及时清理缓存过期导致岀现请求失败的资源。</p>\n</el-collapse-item>\n<el-collapse-item title=\"jQuery性能优化如何做\" name=\"21\">\n<p>优化方法如下。</p>\n<p>（1）使用最新版本的 jQuery类库。JQuery类库每一个新的版本都会对上一个版本进行Bug修复和一些优化，同时也会包含一些创新，所以建议使用最新版本的 jQuery类库提高性能。不过需要注意的是，在更换版本之后，不要忘记测试代码，毕竟有时候不是完全向后兼容的。</p>\n<p>（2）使用合适的选择器。jQuery提供非常丰富的选择器，选择器是开发人员最常使用的功能，但是使用不同选择器也会带来性能问题。建议使用简凖选择器，如i选择器、类选择器，不要将i选择器嵌套等。</p>\n<p>（3）以数组方式使用 jQuery对象。使用 jQuery选择器获取的结果是一个 jQuery对象。然而， jQuery类库会让你感觉正在使用一个定义了索引和长度的数组。在性能方面，建议使用简单的for或者 while循环来处理，而不是$. each()，这样能使代码更快。</p>\n<p>（4）每一个 JavaScript事件（例如 click、 mouseover等）都会冒泡到父级节点。当需要给多个元素绑定相同的回调函数时，建议使用事件委托模式。</p>\n<p>（5）使用join( )来拼接字符串。使用 join( )拼接长字符串，而不要使用“+”拼接字符串，这有助于性能优化，特别是处理长字符串的时候。</p>\n<p>（6）合理利用HTML5中的data属性。HTML5中的data属性有助于插入数据，特别是前、后端的数据交换；jQuery的 data( )方法能够有效地利用HTML5的属性来自动获取数据。</p>\n</el-collapse-item>\n<el-collapse-item title=\"哪些方法能提升移动端CSS3动画体验\" name=\"22\">\n<p>（1）尽可能多地利用硬件能力，如使用3D变形来开启GPU加速，例如以下代码。</p>\n<ul>\n<li><code>webkit-transform: translate 3d(0, 0, 0);</code></li>\n<li><code>-moz-transform: translate3d(0,0, 0);</code></li>\n<li><code>-ms-transform: translate 3d(0,0,0);</code></li>\n<li><code>transform: translate3d(0,0,0);</code></li>\n</ul>\n<p>一个元素通过 translate3d右移500X的动画流畅度会明显优于使用left属性实现的动画移动，原因是CSS动画属性会触发整个页面重排、重绘、重组。paint通常是最耗性能的，尽可能避免使用触发 paint的CSS动画属性。如果动画执行过程中有闪烁（通常发生在动画开始的时候），可以通过如下方式处理。</p>\n<ul>\n<li><code>-webkit-backface-visibility: hidden;</code></li>\n<li><code>-moz-backface-visibility: hidden;</code></li>\n<li><code>-ms-backface-visibility: hidden;</code></li>\n<li><code>backface-visibility: hidden;</code></li>\n<li><code>-webkit-perspective：1000;</code></li>\n<li><code>-moz-perspective：1000;</code></li>\n<li><code>-ms-perspective：1000;</code></li>\n<li><code>perspective：1000;</code></li>\n</ul>\n<p>（2）尽可能少使用box- shadows和 gradients，它们往往严重影响页面的性能，尤其是在一个元素中同时都使用时。（3）尽可能让动画元素脱离文档流，以减少重排，如以下代码所示。</p>\n<ul>\n<li><code>position: fixed;</code></li>\n<li><code>position: absolute;</code></li>\n</ul>\n</el-collapse-item>\n</el-collapse>\n",
      "date_published": "2022-06-30T10:39:48.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "性能优化"
      ]
    },
    {
      "title": "性能优化方法",
      "url": "https://jin-shaohui.gitee.io/Performance/Skill/",
      "id": "https://jin-shaohui.gitee.io/Performance/Skill/",
      "content_html": "<p>Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分，</p>\n<p>使得我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM。</p>\n<p>但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，</p>\n<p>所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。本文内容分为以下三部分组成：</p>\n<ul>\n<li>Vue 代码层面的优化</li>\n<li>webpack 配置层面的优化</li>\n<li>基础的 Web 技术层面的优化</li>\n</ul>\n<h2 id=\"vue-代码层面的优化\" tabindex=\"-1\"> Vue 代码层面的优化</h2>\n<h3 id=\"v-if-和-v-show-区分使用场景\" tabindex=\"-1\"> v-if 和 v-show 区分使用场景</h3>\n<p>v-if 是 <strong>真正</strong> 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>v-show 就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。</p>\n<blockquote>\n<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>\n</blockquote>\n<h3 id=\"computed-和-watch-区分使用场景\" tabindex=\"-1\"> computed 和 watch 区分使用场景</h3>\n<p>computed：是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值.</p>\n<p>watch： 更多是「观察」的作用，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作.</p>\n<blockquote>\n<p>运用场景：\n当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算.\n当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>\n</blockquote>\n<h3 id=\"v-for-遍历必须为-item-添加-key-且避免同时使用-v-if\" tabindex=\"-1\"> v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</h3>\n<ol>\n<li>v-for 遍历必须为 item 添加 key</li>\n</ol>\n<p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。</p>\n<ol start=\"2\">\n<li>v-for 遍历避免同时使用 v-if</li>\n</ol>\n<p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p>\n<p>推荐：</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n    <span><span><span>&lt;</span>ul</span><span>></span></span>\n      <span><span><span>&lt;</span>li</span>\n        <span>v-for</span><span><span>=</span><span>\"</span>item in filterList<span>\"</span></span>\n        <span>:key</span><span><span>=</span><span>\"</span>item.id<span>\"</span></span><span>></span></span>\n        {{ item.name }}\n      <span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;/</span>ul</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n    <span>data</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>{</span>\n          <span>list</span><span>:</span> <span>[</span><span>{</span> <span>id</span><span>:</span> <span>1</span><span>,</span> <span>name</span><span>:</span> <span>'1'</span><span>,</span> <span>isActive</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>{</span> <span>id</span><span>:</span> <span>2</span><span>,</span> <span>name</span><span>:</span> <span>'2'</span><span>,</span> <span>isActive</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>{</span> <span>id</span><span>:</span> <span>3</span><span>,</span> <span>name</span><span>:</span> <span>'3'</span><span>,</span> <span>isActive</span><span>:</span> <span>true</span> <span>}</span><span>]</span>\n        <span>}</span>\n    <span>}</span><span>,</span>\n    <span>computed</span><span>:</span> <span>{</span>\n      <span>filterList</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>this</span><span>.</span>list<span>.</span><span>filter</span><span>(</span><span>function</span> <span>(</span><span>item</span><span>)</span> <span>{</span>\n            <span>return</span> user<span>.</span>isActive\n        <span>}</span><span>)</span>\n      <span>}</span>\n    <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>不推荐：</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n    <span><span><span>&lt;</span>ul</span><span>></span></span>\n        <span><span><span>&lt;</span>li</span>\n         <span>v-for</span><span><span>=</span><span>\"</span>user in list<span>\"</span></span>\n         <span>v-if</span><span><span>=</span><span>\"</span>user.isActive<span>\"</span></span>\n         <span>:key</span><span><span>=</span><span>\"</span>user.id<span>\"</span></span><span>></span></span>\n         {{ user.name }}\n       <span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;/</span>ul</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span>\n        <span>list</span><span>:</span> <span>[</span><span>{</span> <span>id</span><span>:</span> <span>1</span><span>,</span> <span>name</span><span>:</span> <span>'1'</span><span>,</span> <span>isActive</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>{</span> <span>id</span><span>:</span> <span>2</span><span>,</span> <span>name</span><span>:</span> <span>'2'</span><span>,</span> <span>isActive</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>{</span> <span>id</span><span>:</span> <span>3</span><span>,</span> <span>name</span><span>:</span> <span>'3'</span><span>,</span> <span>isActive</span><span>:</span> <span>true</span> <span>}</span><span>]</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"长列表性能优化\" tabindex=\"-1\"> 长列表性能优化</h3>\n<p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，\n在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>\n<div><pre><code>export default {\n  data: () => ({\n    users: {}\n  }),\n  async created() {\n    const users = await axios.get(\"/api/users\");\n    this.users = Object.freeze(users);\n  }\n};\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"事件的销毁\" tabindex=\"-1\"> 事件的销毁</h3>\n<p>Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。如果在 js 内</p>\n<div><pre><code>created() {\n  addEventListener('click', this.click, false)\n},\nbeforeDestroy() {\n  removeEventListener('click', this.click, false)\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"图片资源懒加载\" tabindex=\"-1\"> 图片资源懒加载</h3>\n<p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。\n这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：</p>\n<p>安装插件</p>\n<div><pre><code><span>npm</span> <span>install</span> vue-lazyload --save-dev\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>在入口文件 man.js 中引入并使用</p>\n<div><pre><code><span>import</span> VueLazyload <span>from</span> <span>'vue-lazyload'</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>然后再 vue 中直接使用</p>\n<div><pre><code>Vue<span>.</span><span>use</span><span>(</span>VueLazyload<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>或者添加自定义选项</p>\n<div><pre><code>Vue<span>.</span><span>use</span><span>(</span>VueLazyload<span>,</span> <span>{</span>\n<span>preLoad</span><span>:</span> <span>1.3</span><span>,</span>\n<span>error</span><span>:</span> <span>'dist/error.png'</span><span>,</span>\n<span>loading</span><span>:</span> <span>'dist/loading.gif'</span><span>,</span>\n<span>attempt</span><span>:</span> <span>1</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在 vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：</p>\n<div><pre><code><span><span><span>&lt;</span>img</span> <span>v-lazy</span><span><span>=</span><span>\"</span>/static/img/1.png<span>\"</span></span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>以上为 vue-lazyload 插件的简单使用，如果要看插件的更多参数选项，可以查看 vue-lazyload 的 github 地址。</p>\n<h3 id=\"路由懒加载\" tabindex=\"-1\"> 路由懒加载</h3>\n<p>Vue 是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。\n如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。</p>\n<p>路由懒加载：</p>\n<div><pre><code><span>const</span> <span>Foo</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>import</span><span>(</span><span>'./Foo.vue'</span><span>)</span>\n<span>const</span> router <span>=</span> <span>new</span> <span>VueRouter</span><span>(</span><span>{</span>\n  <span>routes</span><span>:</span> <span>[</span>\n    <span>{</span> <span>path</span><span>:</span> <span>'/foo'</span><span>,</span> <span>component</span><span>:</span> Foo <span>}</span>\n  <span>]</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"第三方插件的按需引入\" tabindex=\"-1\"> 第三方插件的按需引入</h3>\n<p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 babel-plugin-component ，然后可以只引入需要的组件，以达到减小项目体积的目的。\n以下为项目中引入 element-ui 组件库为例：</p>\n<p>首先，安装 babel-plugin-component：</p>\n<div><pre><code><span>npm</span> <span>install</span> babel-plugin-component <span>-D</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>然后，将 .babelrc 修改为：</p>\n<div><pre><code><span>{</span>\n  <span>\"presets\"</span><span>:</span> <span>[</span><span>[</span><span>\"es2015\"</span><span>,</span> <span>{</span> <span>\"modules\"</span><span>:</span> <span>false</span> <span>}</span><span>]</span><span>]</span><span>,</span>\n  <span>\"plugins\"</span><span>:</span> <span>[</span>\n    <span>[</span>\n      <span>\"component\"</span><span>,</span>\n      <span>{</span>\n        <span>\"libraryName\"</span><span>:</span> <span>\"element-ui\"</span><span>,</span>\n        <span>\"styleLibraryName\"</span><span>:</span> <span>\"theme-chalk\"</span>\n      <span>}</span>\n    <span>]</span>\n  <span>]</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在 main.js 中引入部分组件：</p>\n<div><pre><code><span>import</span> Vue <span>from</span> <span>'vue'</span><span>;</span>\n<span>import</span> <span>{</span> Button<span>,</span> Select <span>}</span> <span>from</span> <span>'element-ui'</span><span>;</span>\n\nVue<span>.</span><span>use</span><span>(</span>Button<span>)</span>\nVue<span>.</span><span>use</span><span>(</span>Select<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"优化无限列表性能\" tabindex=\"-1\"> 优化无限列表性能</h3>\n<p>如果你的应用存在非常长或者无限滚动的列表，那么需要采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。\n你可以参考以下开源项目 vue-virtual-scroll-list 和 vue-virtual-scroller 来优化这种无限列表的场景的。</p>\n<h3 id=\"服务端渲染-ssr-or-预渲染\" tabindex=\"-1\"> 服务端渲染 SSR or 预渲染</h3>\n<p>服务端渲染是指 Vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的 html 片段直接返回给客户端这个过程就叫做服务端渲染。</p>\n<ul>\n<li>服务端渲染的优点：</li>\n</ul>\n<p><strong>更好的 SEO</strong> ：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；</p>\n<p>而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</p>\n<p><strong>更快的内容到达时间（首屏加载更快）</strong>：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</p>\n<ul>\n<li>服务端渲染的缺点：</li>\n</ul>\n<p><strong>更多的开发条件限制</strong>：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</p>\n<p><strong>更多的服务器负载</strong>：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源，因此如果你预料在高流量环境下使用，请准备相应的服务器负载，并明智地采用缓存策略。</p>\n<p>如果你的项目的 SEO 和 首屏渲染是评价项目的关键指标，那么你的项目就需要服务端渲染来帮助你实现最佳的初始加载性能和 SEO，具体的 Vue SSR 如何实现，可以参考作者的另一篇文章《Vue SSR 踩坑之旅》。</p>\n<p>如果你的 Vue 项目只需改善少数营销页面（例如  /， /about， /contact 等）的 SEO，那么你可能需要预渲染，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。</p>\n<p>优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点，具体你可以使用 prerender-spa-plugin 就可以轻松地添加预渲染 。</p>\n",
      "date_published": "2022-06-01T15:08:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "性能优化"
      ]
    },
    {
      "title": "优先遍历算法",
      "url": "https://jin-shaohui.gitee.io/Algorithm/PriorityTraversal/",
      "id": "https://jin-shaohui.gitee.io/Algorithm/PriorityTraversal/",
      "summary": " 深度优先遍历\n深度优先遍历（Depth First Search，简称 DFS）就是找准一条路不停深入的搜索方法，\n当发现这条路走不通的时候就会回退到上一个探索的节点，如果上一个节点存在没有探索的分支，便继续探索若没有则继续回退。\n深度优先遍历就有点像二叉树中的前序遍历、中序遍历和后序遍历。\n它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。\n深度优先遍历的关键就在于如何找到已经探索过节点的上一个节点，也就是如何回溯。\n\n",
      "content_html": "<h2 id=\"深度优先遍历\" tabindex=\"-1\"> 深度优先遍历</h2>\n<p>深度优先遍历（Depth First Search，简称 DFS）就是找准一条路不停深入的搜索方法，\n当发现这条路走不通的时候就会回退到上一个探索的节点，如果上一个节点存在没有探索的分支，便继续探索若没有则继续回退。\n深度优先遍历就有点像二叉树中的前序遍历、中序遍历和后序遍历。</p>\n<p>它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。</p>\n<p>深度优先遍历的关键就在于如何找到已经探索过节点的上一个节点，也就是如何回溯。</p>\n<p><img src=\"/assets/algorithm/priorityTraversal/pt_000.jpg\" alt=\"pt_000\"></p>\n\n<ul>\n<li>从根节点 1 开始遍历，它相邻的节点有 2，3，4，先遍历节点 2，再遍历 2 的子节点 5，然后再遍历 5 的子节点 9</li>\n<li>此时 2 以及下面的节点遍历完后，回到根节点 1，继续遍历 3，6，10，7</li>\n<li>此时 3 以及下面的节点遍历完后，回到根节点 1，继续遍历 4，8</li>\n<li>完整的遍历顺序图如下：</li>\n</ul>\n<img :src=\"$withBase('/assets/algorithm/priorityTraversal/pt_001.jpg')\" />\n<p>另一个利用栈的动图描述：</p>\n<img :src=\"$withBase('/assets/algorithm/priorityTraversal/pt_002.gif')\" />\n<h3 id=\"递归实现\" tabindex=\"-1\"> 递归实现</h3>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>dfs</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>\n    <span>return</span><span>;</span>\n  <span>}</span>\n  <span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>\"DFS 遍历，这里应该存节点，如：list.add(root)\"</span><span>)</span><span>;</span>\n  <span>// 遍历左节点 </span>\n  <span>preOrderRecur</span><span>(</span>root<span>.</span>left<span>)</span><span>;</span>\n  <span>// 遍历右节点 </span>\n  <span>preOrderRecur</span><span>(</span>root<span>.</span>right<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"迭代实现\" tabindex=\"-1\"> 迭代实现</h3>\n<p>根据深度优先算法的特性，可以使用栈先入后出的特性实现。</p>\n<p>将探索过的点存入栈内，遇到走不通的时候将栈顶元素出栈回到上一个元素，实现回溯</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>dfs</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>\n  \t<span>return</span><span>;</span>\n  <span>}</span>\n  <span>Stack</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span> stack <span>=</span> <span>new</span> <span>Stack</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n  stack<span>.</span><span>push</span><span>(</span>root<span>)</span><span>;</span>\n  <span>while</span> <span>(</span><span>!</span>stack<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  \t<span>TreeNode</span> node <span>=</span> stack<span>.</span><span>pop</span><span>(</span><span>)</span><span>;</span>\n  \t<span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>\"DFS 遍历，这里应该存节点，如：list.add(node)\"</span><span>)</span><span>;</span>\n  \t<span>if</span> <span>(</span>node<span>.</span>right <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n  \t  stack<span>.</span><span>push</span><span>(</span>node<span>.</span>right<span>)</span><span>;</span>\n  \t<span>}</span>\n  \t<span>if</span> <span>(</span>node<span>.</span>left <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n  \t  stack<span>.</span><span>push</span><span>(</span>node<span>.</span>left<span>)</span><span>;</span>\n  \t<span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>不难发现，上面的图这就是树的前序遍历，实际上不管是前序遍历，还是中序遍历，亦或是后序遍历，都属于深度优先遍历。</p>\n<p>详细关于 DFS 的前序遍历、中序遍历、后序遍历的讲解，请看 二叉树遍历。</p>\n<h2 id=\"广度优先遍历\" tabindex=\"-1\"> 广度优先遍历</h2>\n<p>广度优先遍历（Breath First Search，简称 BFS）一层一层遍历，每一层得到的所有新节点，要用队列存储起来以备下一层遍历的时候再遍历。</p>\n<img :src=\"$withBase('/assets/algorithm/priorityTraversal/pt_003.gif')\" />\n<p>可以看出，遍历的顺序先是 2，3，4，接着是 5，6，7，8，最后是 9，10。属于一层一层遍历。</p>\n<p>另一个利用队列的动图描述：</p>\n<img :src=\"$withBase('/assets/algorithm/priorityTraversal/pt_004.gif')\" />\n<p>深度优先遍历用的是栈，而广度优先遍历要用队列来实现。</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>bfs</span><span>(</span><span>Node</span> root<span>)</span> <span>{</span> \n  <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span> \n    <span>return</span><span>;</span> \n  <span>}</span> \n  <span>Queue</span><span><span>&lt;</span><span>Node</span><span>></span></span> queue <span>=</span> <span>new</span> <span>LinkedList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span> \n  stack<span>.</span><span>add</span><span>(</span>root<span>)</span><span>;</span> \n \n  <span>while</span> <span>(</span><span>!</span>queue<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span> \n    <span>Node</span> node <span>=</span> queue<span>.</span><span>poll</span><span>(</span><span>)</span><span>;</span> \n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"BFS 遍历，这里可以存节点，如 list.add(node)\"</span><span>)</span><span>;</span> \n    <span>Node</span> left <span>=</span> node<span>.</span>left<span>;</span> \n    <span>if</span> <span>(</span>left <span>!=</span> <span>null</span><span>)</span> <span>{</span> \n        queue<span>.</span><span>add</span><span>(</span>left<span>)</span><span>;</span> \n    <span>}</span> \n    <span>Node</span> right <span>=</span> node<span>.</span>right<span>;</span> \n    <span>if</span> <span>(</span>right <span>!=</span> <span>null</span><span>)</span> <span>{</span> \n        queue<span>.</span><span>add</span><span>(</span>right<span>)</span><span>;</span> \n    <span>}</span> \n  <span>}</span> \n<span>}</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "image": "https://jin-shaohui.gitee.io/assets/algorithm/priorityTraversal/pt_000.jpg",
      "date_published": "2022-06-24T14:38:26.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "算法"
      ]
    },
    {
      "title": "动态规划算法",
      "url": "https://jin-shaohui.gitee.io/Algorithm/DynamicProgram/",
      "id": "https://jin-shaohui.gitee.io/Algorithm/DynamicProgram/",
      "content_html": "<h2 id=\"算法认识\" tabindex=\"-1\"> 算法认识</h2>\n<p>动态规划（Dynamic Programming）简称 DP，对于子问题重叠的情况特别有效，因为它将子问题的解保存在表格中，当需要某个子问题的解时，直接取值即可，从而避免重复计算。</p>\n<p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。</p>\n<p>动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>\n<p>与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。</p>\n<p>所以动态规划实际上是将问题分化成很多的子问题，然后将当前子问题计算过的最优结果存储起来，当另一个子问题也打算求该结果时，直接返回即可，因为已经是最优解。</p>\n<p>动态规划的题目分为两大类，一种是求最优解类，典型问题是背包问题，另一种就是计数类，它们都存在一定的递推性质。前者的递推性质还有一个名字，叫做 「最优子结构」 ——即当前问题的最优解取决于子问题的最优解，后者类似，当前问题的方案数取决于子问题的方案数。所以在遇到求方案数的问题时，我们可以往动态规划的方向考虑。</p>\n<h2 id=\"算法性质\" tabindex=\"-1\"> 算法性质</h2>\n<p>动态规划有很多的「高大上」的术语和性质，这些性质也是算法需要考虑的步骤。</p>\n<h3 id=\"子问题重叠\" tabindex=\"-1\"> 子问题重叠</h3>\n<p>子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率。</p>\n<p>也就是在求解的过程中，许多子问题的解被反复地使用。为了避免重复计算，动态规划算法采用了填表来保存子问题解。</p>\n<h3 id=\"状态转移方程\" tabindex=\"-1\"> 状态转移方程</h3>\n<p><strong>动态规划最难的就是求解出状态转移方程</strong>，就类似于递推的公式，如：</p>\n<div><pre><code><span>f</span><span>(</span>n<span>)</span> <span>=</span> <span>f</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>f</span><span>(</span>n <span>-</span> <span>2</span><span>)</span>  <span>// n 是 1,2,...,n</span>\ndp<span>[</span>i<span>]</span> <span>=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>+</span> dp<span>[</span>i <span>-</span> <span>2</span><span>]</span>  <span>// // i 是 1,2,...,i</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>其中 <code>f(n)</code> 由 <code>f(n - 1)</code> 和 <code>f(n - 2)</code> 不断转移，直至 n 才得到结果，这就是状态转移方程。</p>\n<h3 id=\"最优子结构\" tabindex=\"-1\"> 最优子结构</h3>\n<p>如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。</p>\n<p>原问题的解是由多个子问题的最优解构成，比如说，原问题是考出最高的总成绩，那么子问题就是要把语文考到最高，数学考到最高等，为了每门课考到最高，要把每门课相应的选择题分数拿到最高，填空题分数拿到最高等等，当然，最终就是每门课都是满分，这就是最高的总成绩。所以得到了最后正确的结果：最高的总成绩就是总分。</p>\n<h3 id=\"无后效性\" tabindex=\"-1\"> 无后效性</h3>\n<p>即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</p>\n<p>如 A -&gt; B -&gt; C，那么 B 和 C 的结果不会影响 A，同理 C 不会影响 B，但是 A 能影响 B 和 C，毕竟 B 和 C 是通过 A 的结果来算出。</p>\n<h3 id=\"自底向上\" tabindex=\"-1\"> 自底向上</h3>\n<p>动态规划的特点就是从最底部（0 或者 1）蔓延到上面（n），假设存在长度 n，我们知道递归是从 n 到 n - 1 往下遍历，直至到 1，这叫 <strong>自顶向下</strong>。而动态规划是 <strong>自底向上</strong>，也就是从 1 到 2 往上遍历，直至到 n。</p>\n<p>因为动态规划是自底向上，所以我们在求解的时候需要由一些原始条件，如：</p>\n<div><pre><code>dp<span>[</span><span>0</span><span>]</span> <span>=</span> <span>0</span><span>;</span>\ndp<span>[</span><span>1</span><span>]</span> <span>=</span> <span>1</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>这样才有具体的值来自底向上：</p>\n<div><pre><code>dp<span>[</span>n<span>]</span> <span>=</span> dp<span>[</span>n <span>-</span> <span>1</span><span>]</span> <span>+</span> dp<span>[</span>n <span>-</span> <span>2</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"步骤实战\" tabindex=\"-1\"> 步骤实战</h2>\n<p>动态规划遵循一套固定的流程：<strong>递归的暴力解法</strong> -&gt; <strong>带备忘录的递归解法</strong> -&gt; <strong>非递归的动态规划解法</strong>。这个过程是层层递进的解决问题的过程，如果没有前面的铺垫，直接看最终的非递归的动态规划解法，会难理解。</p>\n<h3 id=\"斐波那契式子\" tabindex=\"-1\"> 斐波那契式子</h3>\n<p>斐波那契式子为：<code>F(0) = 0，F(1) = 1, F(n) = F(n - 1) + F(n - 2)</code>。</p>\n<h4 id=\"暴力的递归算法\" tabindex=\"-1\"> 暴力的递归算法</h4>\n<div><pre><code><span>function</span> <span>fib</span><span>(</span><span>n</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>n <span>==</span> <span>1</span> <span>||</span> n <span>==</span> <span>2</span><span>)</span> <span>{</span>\n      <span>return</span> <span>1</span><span>;</span>\n  <span>}</span>\n  <span>return</span> <span>fib</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fib</span><span>(</span>n <span>-</span> <span>2</span><span>)</span><span>;</span> <span>// 自顶向下</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>要想计算原问题 f(20)，就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，依次类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果。</p>\n<p>子问题个数为 O(2^n)，所以这个算法的时间复杂度为 O(2^n)，效率很低。</p>\n<p>这就是我们需要解决动态规划问题的第一个性质：<strong>重叠子问题</strong></p>\n<h4 id=\"带备忘录的递归解法\" tabindex=\"-1\"> 带备忘录的递归解法</h4>\n<p>即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；后面每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p>\n<p>「备忘录」可以是数组，也可以是哈希表，key 为子问题的唯一标识，value 就是解决后的结果。</p>\n<div><pre><code><span>public</span> <span>int</span> <span>fib</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>n <span>&lt;</span> <span>1</span><span>)</span> <span>{</span>\n    <span>return</span> <span>0</span><span>;</span>\n  <span>}</span>\n  <span>// 备忘录全初始化为 0</span>\n  <span>int</span><span>[</span><span>]</span> memo <span>=</span> <span>new</span> <span>int</span><span>[</span>n <span>+</span> <span>1</span><span>]</span><span>;</span>\n  memo<span>[</span><span>0</span><span>]</span> <span>=</span> <span>1</span><span>;</span>\n  memo<span>[</span><span>1</span><span>]</span> <span>=</span> <span>1</span><span>;</span>\n  <span>// 初始化最简情况</span>\n  <span>fibMemo</span><span>(</span>memo<span>,</span> n<span>)</span><span>;</span>\n  <span>return</span> memo<span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>  <span>// 1 1 2 3 5 8 13，因为 i 从 0 开始，所以 n - 1 就是结果</span>\n<span>}</span>\n\n<span>public</span> <span>int</span> <span>fibMemo</span><span>(</span><span>int</span><span>[</span><span>]</span> memo<span>,</span> <span>int</span> n<span>)</span> <span>{</span>\n  <span>// 未被计算过</span>\n  <span>if</span> <span>(</span>n <span>></span> <span>0</span> <span>&amp;&amp;</span> memo<span>[</span>n<span>]</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>\n    memo<span>[</span>n<span>]</span> <span>=</span> <span>fibMemo</span><span>(</span>memo<span>,</span> n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fibMemo</span><span>(</span>memo<span>,</span> n <span>-</span> <span>2</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>return</span> memo<span>[</span>n<span>]</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。</p>\n<p>子问题个数为 O(n)。所以，本算法的时间复杂度是 O(n)。比起暴力算法，效率大幅度提升很多。</p>\n<p>至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>\n<h4 id=\"动态规划\" tabindex=\"-1\"> 动态规划</h4>\n<p>有「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，叫做 dp，在这张表上完成「自底向上」的推算。</p>\n<div><pre><code><span>public</span> <span>int</span> <span>fib</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>\n  <span>int</span><span>[</span><span>]</span> dp <span>=</span> <span>new</span> <span>int</span><span>[</span>n <span>+</span> <span>1</span><span>]</span><span>;</span>\n  dp<span>[</span><span>0</span><span>]</span> <span>=</span> <span>1</span><span>;</span>\n  dp<span>[</span><span>1</span><span>]</span> <span>=</span> <span>1</span><span>;</span>\n  <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>2</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    dp<span>[</span>i<span>]</span> <span>=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>+</span> dp<span>[</span>i <span>-</span> <span>2</span><span>]</span><span>;</span> <span>// 状态转移方程</span>\n  <span>}</span>\n  <span>return</span> dp<span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>  <span>// 1 1 2 3 5 8 13，因为 i 从 0 开始，所以 n - 1 就是结果</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>dp[i] = dp[i - 1] + dp[i - 2];</code> 就是 <strong>状态转移方程</strong>，它是解决问题的核心。我们也很容易发现，其实状态转移方程直接代表着暴力解法。</p>\n<p><strong>动态规划问题最困难的就是写出状态转移方程</strong>。</p>\n<blockquote>\n<p>动态规划优化</p>\n</blockquote>\n<p>根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 dp 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：</p>\n<div><pre><code><span>public</span> <span>int</span> <span>fib</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>n <span>&lt;</span> <span>2</span><span>)</span> <span>{</span>\n    <span>return</span> n<span>;</span>\n  <span>}</span>\n  <span>int</span> prev <span>=</span> <span>0</span><span>,</span> curr <span>=</span> <span>1</span><span>;</span>\n  <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>int</span> sum <span>=</span> prev <span>+</span> curr<span>;</span>\n    prev <span>=</span> curr<span>;</span>\n    curr <span>=</span> sum<span>;</span>\n  <span>}</span>\n  <span>return</span> curr<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"硬币凑钱\" tabindex=\"-1\"> 硬币凑钱</h3>\n<p>给 k 种面值的硬币，面值分别为 c1，c2，...，ck，再给一个总金额 n，问最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。</p>\n<p>比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 <code>11 = 5 + 5 + 1</code>。</p>\n<h4 id=\"暴力的递归算法-1\" tabindex=\"-1\"> 暴力的递归算法</h4>\n<div><pre><code><span>public</span> <span>int</span> <span>coinChange</span><span>(</span><span>int</span><span>[</span><span>]</span> coins<span>,</span> <span>int</span> amount<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>amount <span>==</span> <span>0</span><span>)</span> <span>{</span>\n    <span>return</span> <span>0</span><span>;</span>\n  <span>}</span>\n  <span>int</span> ans <span>=</span> <span>Integer</span><span>.</span><span>MAX_VALUE</span><span>;</span>\n  <span>for</span> <span>(</span><span>int</span> coin <span>:</span> coins<span>)</span> <span>{</span>\n    <span>// 金额不可达</span>\n    <span>if</span> <span>(</span>amount <span>-</span> coin <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n      <span>continue</span><span>;</span>\n    <span>}</span>\n    <span>int</span> subProb <span>=</span> <span>coinChange</span><span>(</span>coins<span>,</span> amount <span>-</span> coin<span>)</span><span>;</span>\n    <span>// 子问题无解时</span>\n    <span>if</span> <span>(</span>subProb <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>\n      <span>continue</span><span>;</span>\n    <span>}</span>\n    ans <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span>ans<span>,</span> subProb <span>+</span> <span>1</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>return</span> ans <span>==</span> <span>Integer</span><span>.</span><span>MAX_VALUE</span> <span>?</span> <span>-</span><span>1</span> <span>:</span> ans<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>总时间复杂度为 O(k*n^k)。</p>\n<h4 id=\"带备忘录的递归算法\" tabindex=\"-1\"> 带备忘录的递归算法</h4>\n<div><pre><code><span>public</span> <span>int</span> <span>coinChange</span><span>(</span><span>int</span><span>[</span><span>]</span> coins<span>,</span> <span>int</span> amount<span>)</span> <span>{</span>\n  <span>// 备忘录初始化为 -2</span>\n  <span>int</span><span>[</span><span>]</span> memo <span>=</span> <span>new</span> <span>int</span><span>[</span>amount <span>+</span> <span>1</span><span>]</span><span>;</span>\n  <span>Arrays</span><span>.</span><span>fill</span><span>(</span>memo<span>,</span> <span>-</span><span>2</span><span>)</span><span>;</span>\n  \n  <span>return</span> <span>helper</span><span>(</span>coins<span>,</span> amount<span>,</span> memo<span>)</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>int</span> <span>helper</span><span>(</span><span>int</span><span>[</span><span>]</span> coins<span>,</span> <span>int</span> amount<span>,</span> <span>int</span><span>[</span><span>]</span> memo<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>amount <span>==</span> <span>0</span><span>)</span> <span>{</span>\n    <span>return</span> <span>0</span><span>;</span>\n  <span>}</span>\n  <span>// 备忘录不为 -2 代表已经存有最优解</span>\n  <span>if</span> <span>(</span>memo<span>[</span>amount<span>]</span> <span>!=</span> <span>-</span><span>2</span><span>)</span> <span>{</span>\n    <span>return</span> memo<span>[</span>amount<span>]</span><span>;</span>\n  <span>}</span>\n  <span>int</span> ans <span>=</span> <span>Integer</span><span>.</span><span>MAX_VALUE</span><span>;</span>\n  <span>for</span> <span>(</span><span>int</span> coin <span>:</span> coins<span>)</span> <span>{</span>\n    <span>// 金额不可达</span>\n    <span>if</span> <span>(</span>amount <span>-</span> coin <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n        <span>continue</span><span>;</span>\n    <span>}</span>\n    <span>int</span> subProb <span>=</span> <span>helper</span><span>(</span>coins<span>,</span> amount <span>-</span> coin<span>,</span> memo<span>)</span><span>;</span>\n    <span>// 子问题无解时</span>\n    <span>if</span> <span>(</span>subProb <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>\n        <span>continue</span><span>;</span>\n    <span>}</span>\n    ans <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span>ans<span>,</span> subProb <span>+</span> <span>1</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>// 记录本轮答案，下标就是凑够当前硬币的最少枚次数</span>\n  memo<span>[</span>amount<span>]</span> <span>=</span> <span>(</span>ans <span>==</span> <span>Integer</span><span>.</span><span>MAX_VALUE</span><span>)</span> <span>?</span> <span>-</span><span>1</span> <span>:</span> ans<span>;</span>\n  <span>return</span> memo<span>[</span>amount<span>]</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"动态规划-1\" tabindex=\"-1\"> 动态规划</h4>\n<p>如果我们有面值为 1 元、3 元和 5 元的硬币若干枚，如何用最少的硬币凑够 11 元？ (表面上这道题可以用贪心算法，但贪心算法无法保证可以求出解，比如 1 元换成 2 元的时候)</p>\n<p>如何用最少的硬币凑够i元（i &lt; 11）？ 两个原因：</p>\n<ul>\n<li>当我们遇到一个大问题时，总是习惯把问题的规模变小，这样便于分析讨论</li>\n<li>这个规模变小后的问题和原来的问题是同质的，除了规模变小，其它的都是一样的， 本质上它还是同一个问题（规模变小后的问题其实是原问题的子问题）</li>\n</ul>\n<p>当 i = 0，即需要多少个硬币来凑够 0 元。 由于 1，3，5 都大于 0，即没有比 0 小的币值，因此凑够 0 元最少需要 0 个硬币。这时候可以用一个 <strong>标记</strong> 来表示「凑够 0 元最少需要 0 个硬币」。</p>\n<p>那么， 我们用 <code>d(i) = j</code> 来表示凑够 i 元最少需要 j 个硬币。于是我们已经得到了 <code>d(0) = 0</code>，表示凑够 0 元最小需要 0 个硬币。</p>\n<p>当 i = 1 时，只有面值为 1 元的硬币可用，因此我们拿起一个面值为 1 的硬币，接下来只需要凑够 0 元即可，即 <code>d(0) = 0</code>。所以有：</p>\n<div><pre><code><span>d</span><span>(</span><span>1</span><span>)</span> <span>=</span> <span>d</span><span>(</span><span>1</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>d</span><span>(</span><span>0</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>0</span> <span>+</span> <span>1</span> <span>=</span> <span>1</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>当 i = 2 时，仍然只有面值为 1 的硬币可用，于是我拿起一个面值为 1 的硬币，接下来我只需要再凑够 2 - 1 = 1 元即可， 所以有：</p>\n<div><pre><code><span>d</span><span>(</span><span>2</span><span>)</span> <span>=</span> <span>d</span><span>(</span><span>2</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>d</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>1</span> <span>+</span> <span>1</span> <span>=</span> <span>2</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>当 i = 3 时，我们能用的硬币就有两种了：1 元和 3 元。既然能用的硬币有两种，于是就有两种方案。如果我拿了一个 1 元的硬币，我的目标就变为了： 凑够 3 - 1 = 2 元需要的最少硬币数量。即</p>\n<div><pre><code><span>d</span><span>(</span><span>3</span><span>)</span> <span>=</span> <span>d</span><span>(</span><span>3</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>d</span><span>(</span><span>2</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>2</span> <span>+</span> <span>1</span> <span>=</span> <span>3</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>这个方案说的是，我拿 3 个 1 元的硬币；第二种方案是我拿起一个 3 元的硬币，我的目标就变成：凑够 3 - 3 = 0元需要的最少硬币数量。即</p>\n<div><pre><code><span>d</span><span>(</span><span>3</span><span>)</span> <span>=</span> <span>d</span><span>(</span><span>3</span> <span>-</span> <span>3</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>d</span><span>(</span><span>0</span><span>)</span> <span>+</span> <span>1</span> <span>=</span> <span>0</span> <span>+</span> <span>1</span> <span>=</span> <span>1</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>这个方案说的是，我拿 1 个 3 元的硬币。</p>\n<p>这两种方案哪种更优呢？题目要求使用用最少的硬币数量来凑够 3 元的。所以，选择 <code>d(3) = 1</code>，所以我们得到了 <strong>转移状态方程</strong>：</p>\n<div><pre><code><span>d</span><span>(</span><span>3</span><span>)</span> <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span><span>d</span><span>(</span><span>3</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span><span>,</span> <span>d</span><span>(</span><span>3</span> <span>-</span> <span>3</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>从以上的文字中， 我们要得到动态规划里非常重要的两个概念：<strong>状态</strong> 和 <strong>状态转移方程</strong>。</p>\n<p>上文中 d(i) 表示凑够 i 元需要的最少硬币数量，我们将它定义为该问题的 <strong>状态</strong>， 这个状态是怎么找出来的呢？要根据子问题定义状态，找到子问题，状态也就浮出水面了。最终我们要求解的问题，可以用这个状态来表示：d(11)，即凑够 11 元最少需要多少个硬币。</p>\n<p>那状态转移方程是什么呢？既然我们用 d(i) 表示状态，那么状态转移方程应该包含了状态 d(i)，上文中包含状态 d(i) 的方程是：</p>\n<div><pre><code><span>d</span><span>(</span><span>3</span><span>)</span> <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span><span>d</span><span>(</span><span>3</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span><span>,</span> <span>d</span><span>(</span><span>3</span> <span>-</span> <span>3</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>于是它就是状态转移方程，描述状态之间是如何转移的。当然，我们要对它抽象一下，</p>\n<div><pre><code><span>d</span><span>(</span>i<span>)</span> <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span><span>d</span><span>(</span>i<span>)</span><span>,</span> <span>d</span><span>(</span>i <span>-</span> vj<span>)</span> <span>+</span> <span>1</span> <span>)</span><span>;</span> <span>// 其中 i-vj >= 0，vj 表示第 j 个硬币的面值</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>所以最终代码：</p>\n<div><pre><code><span>public</span> <span>int</span> <span>coinChange</span><span>(</span><span>int</span><span>[</span><span>]</span> coins<span>,</span> <span>int</span> amount<span>)</span> <span>{</span>\n    <span>int</span><span>[</span><span>]</span> dp <span>=</span> <span>new</span> <span>int</span><span>[</span>amount <span>+</span> <span>1</span><span>]</span><span>;</span>\n    <span>Arrays</span><span>.</span><span>fill</span><span>(</span>dp<span>,</span> <span>Integer</span><span>.</span><span>MAX_VALUE</span><span>)</span><span>;</span>\n    dp<span>[</span><span>0</span><span>]</span> <span>=</span> <span>0</span><span>;</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> dp<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>// 内层 for 在求所有子问题 + 1 的最小值</span>\n        <span>for</span> <span>(</span><span>int</span> coin <span>:</span> coins<span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>i <span>-</span> coin <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n                <span>continue</span><span>;</span>\n            <span>}</span>\n            dp<span>[</span>i<span>]</span> <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span>dp<span>[</span>i<span>]</span><span>,</span> <span>1</span> <span>+</span> dp<span>[</span>i <span>-</span> coin<span>]</span><span>)</span><span>;</span> <span>// 状态转移方程</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> dp<span>[</span>amount<span>]</span> <span>==</span> <span>Integer</span><span>.</span><span>MAX_VALUE</span> <span>?</span> <span>-</span><span>1</span> <span>:</span> dp<span>[</span>amount<span>]</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"例题实战\" tabindex=\"-1\"> 例题实战</h2>\n<h3 id=\"爬楼梯\" tabindex=\"-1\"> 爬楼梯</h3>\n<p>下面介绍先通过典型的动态规划题目总结 <strong>计算步骤</strong>，然后利用计算步骤完成动态规划的题目。</p>\n<p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>如 n = 2 时，有两种方法，分别是：</p>\n<ul>\n<li>1 阶 + 1 阶</li>\n<li>直接 2 阶</li>\n</ul>\n<p>如 n = 3，有三种方法，分别是：</p>\n<ul>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ul>\n<h4 id=\"计算步骤\" tabindex=\"-1\"> 计算步骤</h4>\n<ul>\n<li><strong>特例确定</strong>，也就是「剪枝」，判断满足某些条件，直接返回，不需要计算，一般针对起始位置或末尾位置</li>\n<li><strong>状态定义</strong>：定义状态的空间位置，确保动态规划有足够的空间存放子问题的解，如下题 f[i] 代表走过 i 阶需要的总方法</li>\n<li><strong>初始状态</strong>，动态规划自底向上，所以底部（0 或者 1）至少要有一个已知的值，然后慢慢推到后面的值</li>\n<li><strong>状态转移方程</strong>，动态规划最难的就是求解出状态转移方程，这是一种递推规律的公式</li>\n<li><strong>返回值</strong>：确定最终的返回值</li>\n</ul>\n<h4 id=\"简单动态规划\" tabindex=\"-1\"> 简单动态规划</h4>\n<div><pre><code><span>public</span> <span>int</span> <span>climbStairs</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>\n  <span>// 特例</span>\n  <span>if</span><span>(</span>n <span>&lt;=</span> <span>2</span><span>)</span> <span>{</span>\n    <span>return</span> n<span>;</span>\n  <span>}</span>\n  <span>// 确定空间</span>\n  <span>int</span><span>[</span><span>]</span> f <span>=</span> <span>new</span> <span>int</span><span>[</span>n<span>]</span><span>;</span>\n  <span>// 初始条件</span>\n  f<span>[</span><span>0</span><span>]</span> <span>=</span> <span>1</span><span>;</span> <span>// -1 才是没有楼梯</span>\n  f<span>[</span><span>1</span><span>]</span> <span>=</span> <span>2</span><span>;</span>\n  <span>// 转移方程</span>\n  <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>2</span><span>;</span>i <span>&lt;</span> f<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    f<span>[</span>i<span>]</span> <span>=</span> f<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>+</span> f<span>[</span>i <span>-</span> <span>2</span><span>]</span><span>;</span>\n  <span>}</span>\n  <span>return</span> f<span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"优化动态规划\" tabindex=\"-1\"> 优化动态规划</h4>\n<p>因为我们只需要 3 中状态，也就是只需要 3 种子问题的解，即 n、n - 1、n - 2，其他的不需要，所以就利用变量来替换</p>\n<div><pre><code><span>public</span> <span>int</span> <span>climbStairs</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>\n    <span>int</span> p <span>=</span> <span>0</span><span>,</span> q <span>=</span> <span>0</span><span>,</span> r <span>=</span> <span>1</span><span>;</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> n<span>;</span> <span>++</span>i<span>)</span> <span>{</span>\n        p <span>=</span> q<span>;</span> \n        q <span>=</span> r<span>;</span> \n        r <span>=</span> p <span>+</span> q<span>;</span>\n    <span>}</span>\n    <span>return</span> r<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"最小路径和\" tabindex=\"-1\"> 最小路径和</h3>\n<p>题目来自 <code>https://leetcode-cn.com/problems/minimum-path-sum/</code></p>\n<p>解题思路参考：<code>https://leetcode-cn.com/problems/minimum-path-sum/solution/zui-xiao-lu-jing-he-dong-tai-gui-hua-gui-fan-liu-c/</code></p>\n<p><code>题目</code></p>\n<ul>\n<li>给定一个包含非负整数的 <code>m x n</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小</li>\n<li><strong>说明</strong>：每次只能向下或者向右移动一步</li>\n</ul>\n<p>示例 1：</p>\n<div><pre><code>输入：grid = [[1,3,1],[1,5,1],[4,2,1]]\n输出：7\n解释：因为路径 1→3→1→1→1 的总和最小。\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>示例 2：</p>\n<div><pre><code>输入：grid = [[1,2,3],[4,5,6]]\n输出：12\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>此题是典型的动态规划题目。</p>\n<p>下面按动态规划的步骤进行计算：</p>\n<p><code>特例确定</code></p>\n<p>如果 DP 长度为 0，返回 0。</p>\n<p><code>状态定义</code></p>\n<p>设 DP 为大小 <code>m x n</code> 矩阵，其中 <code>dp[i][j]</code> 的值代表直到走到 (i,j) 的最小路径和。</p>\n<p><code>初始状态</code></p>\n<p>DP 初始化即可，不需要赋初始值。</p>\n<p><code>状态转移方程</code></p>\n<p>题目要求，只能向右或向下走，换句话说，当前单元格 (i, j) 只能从左方单元格 (i−1, j) 或上方单元格 (i, j−1) 走到，因此只需要考虑矩阵左边界和上边界。</p>\n<p>走到当前单元格 (i, j) 的最小路径和 =「从左方单元格 (i-1, j) 与从上方单元格 (i, j−1) 走来的两个最小路径和中较小的」 + 当前单元格值 <code>dp[i][j]</code> 。具体分为以下 3 种情况：</p>\n<ul>\n<li>矩阵的第一列进行求和，然后覆盖原来的值。</li>\n</ul>\n<div><pre><code>dp<span>[</span>i<span>]</span><span>[</span><span>0</span><span>]</span> <span>+=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ul>\n<li>矩阵的第一行进行求和，然后覆盖原来的值。</li>\n</ul>\n<div><pre><code>dp<span>[</span><span>0</span><span>]</span><span>[</span>i<span>]</span> <span>+=</span> dp<span>[</span><span>0</span><span>]</span><span>[</span>i <span>-</span> <span>1</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ul>\n<li><strong>当左边和上边都不是矩阵边界时</strong>： 即当 i、j 不等于 0 时，有</li>\n</ul>\n<div><pre><code>dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>+=</span> <span>Math</span><span>.</span><span>min</span><span>(</span>dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span><span>,</span> dp<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><code>返回值</code></p>\n<p>返回 DP 矩阵右下角值，即走到终点的最小路径和。</p>\n<p><code>复杂度分析</code></p>\n<p>时间复杂度 O(M x N)：遍历整个 grid 矩阵元素。</p>\n<p>空间复杂度 O(1)：直接修改原矩阵，不使用额外空间。</p>\n<p>grid 代表 DP</p>\n<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>\n  <span>public</span> <span>int</span> <span>minPathSum</span><span>(</span><span>int</span><span>[</span><span>]</span><span>[</span><span>]</span> grid<span>)</span> <span>{</span>\n    <span>int</span> high <span>=</span> grid<span>.</span>length<span>;</span>\n    <span>int</span> width <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>.</span>length<span>;</span>\n    <span>if</span> <span>(</span>width <span>==</span> <span>0</span><span>)</span> <span>{</span>\n      <span>return</span> <span>0</span><span>;</span>\n    <span>}</span>\n    <span>// 先将矩阵 [0] 的左右进行叠加</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> high<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      grid<span>[</span>i<span>]</span><span>[</span><span>0</span><span>]</span> <span>+=</span> grid<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span>;</span>\n    <span>}</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> width<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      grid<span>[</span><span>0</span><span>]</span><span>[</span>i<span>]</span> <span>+=</span> grid<span>[</span><span>0</span><span>]</span><span>[</span>i <span>-</span> <span>1</span><span>]</span><span>;</span>\n    <span>}</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> high<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n      <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;</span> width<span>;</span> j<span>++</span><span>)</span> <span>{</span>\n        grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>+=</span> <span>Math</span><span>.</span><span>min</span><span>(</span>grid<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span><span>,</span> grid<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n    <span>return</span> grid<span>[</span>high <span>-</span> <span>1</span><span>]</span><span>[</span>width <span>-</span> <span>1</span><span>]</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"不同路径\" tabindex=\"-1\"> 不同路径</h3>\n<p>题目来自：<code>https://leetcode-cn.com/problems/unique-paths/</code></p>\n<p><code>题目</code></p>\n<ul>\n<li>一个机器人位于一个 m x n 网格的左上角</li>\n<li>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角，即 m x n 的终点（对角线的末尾）</li>\n<li>问总共有多少条不同的路径？</li>\n</ul>\n<p>下面按动态规划的步骤进行计算：</p>\n<p><code>特例确定</code></p>\n<p>无特例。</p>\n<p><code>初始状态</code></p>\n<p>DP 初始化即可，不需要赋初始值。</p>\n<p><code>状态定义</code></p>\n<p>设 m x n 矩阵有 <code>dp[i][j]</code>，其中 i 代表矩阵的第 i 行，j 代表第 j 列。</p>\n<p><code>状态转移方程</code></p>\n<p>规律：</p>\n<ul>\n<li>如果位置处于第一行或者第一列，则总路径 = 1</li>\n<li>不在第一行或者第一列，则某个位置的总路径 = 它上面位置的总路径 + 它左侧位置的总路径</li>\n</ul>\n<p>状态转移方程为：</p>\n<div><pre><code>dp<span>[</span>m<span>]</span><span>[</span>n<span>]</span> <span>=</span> dp<span>[</span>m <span>-</span> <span>1</span><span>]</span><span>[</span>n<span>]</span> <span>+</span> dp<span>[</span>m<span>]</span><span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><code>返回值</code></p>\n<p>返回 DP 矩阵右下角值，即走到终点的总路径和。</p>\n<p><code>复杂度分析</code></p>\n<p>时间复杂度 O(m x n)：遍历整个 DP 矩阵元素。</p>\n<p>空间复杂度 O(n)：直接修改原矩阵，不使用额外空间。</p>\n<div><pre><code><span>public</span> <span>int</span> <span>uniquePaths</span><span>(</span><span>int</span> m<span>,</span> <span>int</span> n<span>)</span> <span>{</span>\n  <span>int</span><span>[</span><span>]</span><span>[</span><span>]</span> dp <span>=</span> <span>new</span> <span>int</span><span>[</span>m<span>]</span><span>[</span>n<span>]</span><span>;</span>\n  <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span> <span>{</span>\n      <span>// 起始点为 0，如果在起始点的左侧或者右侧，那么就只有一条路径</span>\n      <span>if</span> <span>(</span>i <span>==</span> <span>0</span> <span>||</span> j <span>==</span> <span>0</span><span>)</span> <span>{</span>\n        dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>1</span><span>;</span>\n      <span>}</span>\n      <span>// 每条路径的次数都是从上方的路径和左侧的路径相加而得到，具体画图</span>\n      <span>else</span> <span>{</span>\n        dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span> <span>+</span> dp<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n  <span>// 返回最后一个元素，数组从 0 开始</span>\n  <span>return</span> dp<span>[</span>m <span>-</span> <span>1</span><span>]</span><span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"适用场景\" tabindex=\"-1\"> 适用场景</h2>\n<p>适合用动态规划来解决的问题，都具有下面三个特点：最优化原理、最优化原理、有重叠子问题。</p>\n<p>如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。某阶段状态（定义的新子问题）一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与其以前的状态有关。子问题之间是不独立的（分治法是独立的），一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）。</p>\n<h2 id=\"算法局限\" tabindex=\"-1\"> 算法局限</h2>\n<p>动态规划对于解决多阶段决策问题的效果是明显的，但是动态规划也有一定的局限性。首先，它没有统一的处理方法，必须根据问题的各种性质并结合一定的技巧来处理；另外当变量的维数增大时，总的计算量及存贮量急剧增大。因而，受计算机的存贮量及计算速度的限制，当今的计算机仍不能用动态规划方法来解决较大规模的问题，这就是「维数障碍」。</p>\n<p>动态规划大部分都是 <strong>空间换时间</strong>，因为动态规划需要一个 DP 来存已经计算的子问题的解，所以需要利用大量的空间来存解值，但是在时间上就很快找出该解值，不需要重新求解值。</p>\n",
      "date_published": "2022-06-06T16:38:19.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "算法"
      ]
    },
    {
      "title": "服务器",
      "url": "https://jin-shaohui.gitee.io/Server/",
      "id": "https://jin-shaohui.gitee.io/Server/",
      "content_html": "<h2 id=\"远程连接问题\" tabindex=\"-1\"> 远程连接问题</h2>\n<img :src=\"$withBase('/assets/server/001.jpg')\" />\n<p>修改登录客户端，即本地计算机的设置。\n运行gpedit.msc打开本地组策略编辑器，依次展开“计算机配置”-&gt;“管理模板”-&gt;“系统”-&gt;“凭据分配”，选择设置项： 加密 Oracle 修正\n然后右键编辑，改为 启用，保护级别为 易受攻击，确定。设置完成后即可正常远程。</p>\n<h2 id=\"查看网卡配置\" tabindex=\"-1\"> 查看网卡配置</h2>\n<div><pre><code><span>cd</span> /etc/sysconfig/network-scripts/\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"按时间显示文件\" tabindex=\"-1\"> 按时间显示文件</h3>\n<div><pre><code><span>ls</span> <span>-lrt</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"查看具体网卡信息\" tabindex=\"-1\"> 查看具体网卡信息</h3>\n<div><pre><code><span>ifconfig</span> -a｜more\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"查看eth0的配置\" tabindex=\"-1\"> 查看eth0的配置</h3>\n<div><pre><code><span>vi</span> ifcfg-eth0\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"配置ip、子网掩码、网关\" tabindex=\"-1\"> 配置IP、子网掩码、网关</h2>\n<h3 id=\"重启网卡\" tabindex=\"-1\"> 重启网卡</h3>\n<div><pre><code><span>service</span> network restart\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"配置\" tabindex=\"-1\"> 配置</h2>\n<div><pre><code><span>BOOTPROTO</span><span>=</span>static        \n<span>#static静态、dhcp动态获取、none不指定（可能出现问题）</span>\n\n<span>ONBOOT</span><span>=</span>yes              \n<span>#特别注意 这个是开机启动,需要设置成yes</span>\n\n<span>DNS1</span><span>=</span><span>8.8</span>.8.8            \n<span>#DNS域名解析服务器的IP地址</span>\n\n<span>IPADDR</span><span>=</span><span>192.168</span>.1.2      \n<span>#网卡的IP地址</span>\n\n<span>GATEWAY</span><span>=</span><span>192.168</span>.1.1     \n<span>#网关地址</span>\n\n<span>NETMASK</span><span>=</span><span>255.255</span>.255.0   \n<span>#子网掩码</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"配置文件\" tabindex=\"-1\"> 配置文件</h2>\n<div><pre><code><span>DEVICE</span><span>=</span>ens33                         \n<span># 网卡的设备名称</span>\n\n<span>NAME</span><span>=</span>ens33                           \n<span># 网卡设备的别名</span>\n\n<span>TYPE</span><span>=</span>Ethernet                        \n<span># 网络类型：Ethernet以太网</span>\n\n<span>BOOTPROTO</span><span>=</span>none                       \n<span>#引导协议：static静态、dhcp动态获取、none不指定（可能出现问题）</span>\n\n<span>DEFROUTE</span><span>=</span>yes                         \n<span># 启动默认路由</span>\n\n<span>IPV4_FAILURE_FATAL</span><span>=</span>no                \n<span># 不启用IPV4错误检测功能</span>\n\n<span>IPV6INIT</span><span>=</span>yes                         \n<span># 启用IPV6协议</span>\n\n<span>IPV6_AUTOCONF</span><span>=</span>yes                    \n<span># 自动配置IPV6地址</span>\n\n<span>IPV6_DEFROUTE</span><span>=</span>yes                    \n<span># 启用IPV6默认路由</span>\n\n<span>IPV6_FAILURE_FATAL</span><span>=</span>no                \n<span># 不启用IPV6错误检测功能</span>\n\n<span>UUID</span><span>=</span>sjdfga-asfd-asdf-asdf-f82b      \n<span># 网卡设备的UUID唯一标识号</span>\n\n<span>ONBOOT</span><span>=</span>yes                           \n<span># 开机自动启动网卡</span>\n\n<span>DNS</span><span>=</span><span>114.114</span>.114.114                  \n<span># DNS域名解析服务器的IP地址 可以多设置一个DNS1</span>\n\n<span>IPADDR</span><span>=</span><span>192.168</span>.1.22                  \n<span># 网卡的IP地址</span>\n\n<span>PREFIX</span><span>=</span><span>24</span>                            \n<span># 子网前缀长度</span>\n\n<span>GATEWAY</span><span>=</span><span>192.168</span>.1.1                  \n<span># 默认网关IP地址</span>\n\n<span>IPV6_PEERDNS</span><span>=</span>yes\n<span>IPV6_PEERROUTES</span><span>=</span>yes\n<span>IPADDR</span><span>=</span><span>192.168</span>.1.22                  \n<span># 你想要设置的固定IP，理论上192.168.2.2-255之间都可以，请自行验证；如果是dhcp可以不填写</span>\n\n<span>NETMASK</span><span>=</span><span>255.255</span>.255.0                \n<span># 子网掩码，不需要修改；</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "物联网"
      ]
    },
    {
      "title": "观察者模式",
      "url": "https://jin-shaohui.gitee.io/DesignPattern/Observer/",
      "id": "https://jin-shaohui.gitee.io/DesignPattern/Observer/",
      "content_html": "<h1 id=\"观察者模式\" tabindex=\"-1\"> 观察者模式</h1>\n<p>我们学习vue的时候，经常会遇到消息通信，但大部分组件不是父子关系，就是兄弟关系。\n那如果两个没有任何关系的组件，既要进行消息通信，要保证通信不丢失，那么这时候 <strong>观察者模式（发布-订阅模式）</strong> 就很好用了。</p>\n<h2 id=\"发布-订阅\" tabindex=\"-1\"> 发布-订阅</h2>\n<blockquote>\n<p>发布：数据推送方，如：组件A想获取组件B数据，组件B抛出组件A需要的数据</p>\n<p>订阅：提出诉求方，如：组件A想获取组件B数据，抛出了个接收数据的'getData'方法</p>\n</blockquote>\n<h2 id=\"代码编写\" tabindex=\"-1\"> 代码编写</h2>\n<ul>\n<li>首先我们要定义一个观察者（数据处理中心），用来存储事件和回调函数信息。</li>\n</ul>\n<div><pre><code><span>class</span> <span>Observer</span> <span>{</span>\n    <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n        <span>// 数据处理中心，用来存储事件和回调函数信息</span>\n        <span>this</span><span>.</span>handlers <span>=</span> <span>{</span><span>}</span>\n        <span>this</span><span>.</span>caches <span>=</span> <span>{</span><span>}</span>\n    <span>}</span>\n<span>}</span>\nmodule<span>.</span>exports <span>=</span> <span>new</span> <span>Observer</span><span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>其次我们要定义一个发布的函数，当然，为了防止发布者比订阅者提早生成，将发布内容存储于 <strong>caches</strong>，使订阅者生成后直接发布。</li>\n</ul>\n<div><pre><code><span>function</span> <span>emit</span><span>(</span><span>eventName</span><span>)</span> <span>{</span>\n    <span>const</span> fns <span>=</span> <span>this</span><span>.</span>handlers<span>[</span>eventName<span>]</span> <span>// 获取注册的事件</span>\n    <span>const</span> args <span>=</span> <span>[</span><span>]</span><span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span> <span>// 获取所有参数转成list</span>\n    args<span>.</span><span>shift</span><span>(</span><span>)</span> <span>// 参数去掉事件名称</span>\n    <span>// 判断 有注册的执行</span>\n    <span>if</span> <span>(</span><span>!</span>fns <span>||</span> fns<span>.</span>length <span>===</span> <span>0</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span>caches<span>[</span>eventName<span>]</span> <span>=</span> args\n        <span>return</span> <span>false</span><span>;</span>\n    <span>}</span>\n    fns<span>.</span><span>forEach</span><span>(</span><span>(</span><span>fn</span><span>)</span> <span>=></span> <span>{</span>\n        <span>fn</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> args<span>)</span>\n    <span>}</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>然后我们要定义一个订阅的函数，当发布者比订阅者提早生成时，要先将caches中存有的发布数据发布出去，再存入观察者中。</li>\n</ul>\n<div><pre><code><span>function</span> <span>on</span><span>(</span><span>eventName<span>,</span> fn</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>typeof</span> fn <span>!==</span> <span>'function'</span><span>)</span> <span>{</span>\n        console<span>.</span><span>error</span><span>(</span><span>'fn must be a function'</span><span>)</span>\n    <span>}</span>\n    <span>if</span> <span>(</span><span>this</span><span>.</span>caches<span>[</span>eventName<span>]</span> <span>instanceof</span> <span>Array</span><span>)</span> <span>{</span>\n        <span>//有缓存的 可以执行 说明是先发布 后订阅</span>\n        <span>fn</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> <span>this</span><span>.</span>caches<span>[</span>eventName<span>]</span><span>)</span>\n        <span>delete</span> <span>this</span><span>.</span>caches<span>[</span>eventName<span>]</span>\n    <span>}</span>\n    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>handlers<span>[</span>eventName<span>]</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span>handlers<span>[</span>eventName<span>]</span> <span>=</span> <span>[</span><span>]</span>\n    <span>}</span>\n    <span>this</span><span>.</span>handlers<span>[</span>eventName<span>]</span><span>.</span><span>push</span><span>(</span>fn<span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>最后，当页面销毁的时候，我们就需要定义一个销毁订阅的方法。</li>\n</ul>\n<div><pre><code><span>function</span> <span>off</span><span>(</span><span>eventName<span>,</span> fn</span><span>)</span> <span>{</span>\n    <span>// 若是没有传参，注销所有的订阅</span>\n    <span>if</span> <span>(</span><span>!</span>arguments<span>.</span>length<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>handlers <span>=</span> <span>{</span><span>}</span><span>;</span>\n        <span>return</span> <span>this</span><span>;</span>\n    <span>}</span>\n    <span>const</span> fns <span>=</span> <span>this</span><span>.</span>handlers<span>[</span>eventName<span>]</span>\n    <span>if</span> <span>(</span><span>!</span>fns<span>)</span> <span>return</span>\n    <span>// 若是只传eventName，不传fn，删除对应事件名称下的所有回调函数</span>\n    <span>if</span> <span>(</span>arguments<span>.</span>length <span>===</span> <span>1</span><span>)</span> <span>{</span>\n        <span>delete</span> <span>this</span><span>.</span>handlers<span>[</span>eventName<span>]</span>\n        <span>return</span>\n    <span>}</span>\n    <span>if</span> <span>(</span>fns <span>&amp;&amp;</span> fns<span>.</span><span>includes</span><span>(</span>fn<span>)</span><span>)</span> <span>{</span>\n        fns<span>.</span><span>splice</span><span>(</span>fns<span>.</span><span>indexOf</span><span>(</span>fn<span>)</span><span>,</span> <span>1</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"实际应用\" tabindex=\"-1\"> 实际应用</h2>\n<p>首先我们使用vue-cli直接 <strong>vue create demo</strong> 创建应用，\n在app.vue中引入两个组件 comp1 以及 comp2， 代码如下：</p>\n<ul>\n<li>comp1.vue</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>import</span> observer <span>from</span> <span>'../utils/observer'</span>\n    <span>export</span> <span>default</span> <span>{</span>\n        <span>name</span><span>:</span> <span>'comp1'</span><span>,</span>\n        <span>created</span><span>(</span><span>)</span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>'我是组件1，1秒后发送数据1'</span><span>)</span>\n            <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n                <span>// 发布'comp1ToComp2'事件并携带数据</span>\n                observer<span>.</span><span>emit</span><span>(</span><span>'comp1ToComp2Func1'</span><span>,</span> <span>{</span>\n                    <span>info</span><span>:</span> <span>'1组件发送给2组件的数据1'</span>\n                <span>}</span><span>)</span>\n            <span>}</span><span>,</span> <span>1000</span><span>)</span>\n\n            console<span>.</span><span>log</span><span>(</span><span>'我是组件1，10秒后发送数据2'</span><span>)</span>\n            <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n                <span>// 发布'comp1ToComp2'事件并携带数据</span>\n                observer<span>.</span><span>emit</span><span>(</span><span>'comp1ToComp2Func2'</span><span>,</span> <span>{</span>\n                    <span>info</span><span>:</span> <span>'1组件发送给2组件的数据2'</span>\n                <span>}</span><span>)</span>\n            <span>}</span><span>,</span> <span>10000</span><span>)</span>\n        <span>}</span>\n    <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>comp2.vue</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>import</span> observer <span>from</span> <span>'../utils/observer'</span>\n    <span>export</span> <span>default</span> <span>{</span>\n        <span>name</span><span>:</span> <span>'comp2'</span><span>,</span>\n        <span>created</span><span>(</span><span>)</span> <span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>'我是组件2，5秒后才订阅事件1'</span><span>)</span>\n            <span>// 添加'comp1ToComp2'事件订阅</span>\n            <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n                observer<span>.</span><span>on</span><span>(</span><span>'comp1ToComp2Func1'</span><span>,</span> <span>this</span><span>.</span><span>getComp1Data</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span>\n            <span>}</span><span>,</span> <span>5000</span><span>)</span>\n\n            console<span>.</span><span>log</span><span>(</span><span>'我是组件2，9秒后才订阅事件2'</span><span>)</span>\n            <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n                observer<span>.</span><span>on</span><span>(</span><span>'comp1ToComp2Func2'</span><span>,</span> <span>this</span><span>.</span><span>getComp1Data</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span>\n            <span>}</span><span>,</span> <span>9000</span><span>)</span>\n        <span>}</span><span>,</span>\n        <span>methods</span><span>:</span> <span>{</span>\n            <span>getComp1Data</span><span>(</span><span>data</span><span>)</span> <span>{</span>\n                console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>我是组件2，我拿到数据了，数据是</span><span><span>${</span>data<span>.</span>info<span>}</span></span><span>`</span></span><span>)</span>\n            <span>}</span>\n        <span>}</span><span>,</span>\n    <span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li>最后的结果是：</li>\n</ul>\n<img :src=\"$withBase('/assets/designPattern/observer/001.jpg')\">\n",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "设计模式"
      ]
    },
    {
      "title": "Git",
      "url": "https://jin-shaohui.gitee.io/Git/",
      "id": "https://jin-shaohui.gitee.io/Git/",
      "content_html": "<h2 id=\"前言\" tabindex=\"-1\"> 前言</h2>\n<p>作为当前世界上最强大的代码管理工具Git相信大家都很熟悉，\n但据我所知有很大一批人停留在clone、commit、pull、push...的阶段，\n是不是对rebase心里没底只敢用merge？碰见版本回退就抓瞎？\n别问我怎么知道的，问就是：“我曾经就是这样啊～～”。针对这些问题，\n今天我就将这几年对Git的认知和理解分享出来，尽可能的从本质去讲解Git，\n帮助你一步一步去了解Git的底层原理，相信读完本篇文章你便可以换种姿态，\n更加风骚得使用Git各种指令。</p>\n<h2 id=\"基本概念\" tabindex=\"-1\"> 基本概念</h2>\n<ul>\n<li>Git的优势\nGit是一个分布式代码管理工具，在讨论分布式之前避免不了提及一下什么是中央式代码管理仓库</li>\n</ul>\n<blockquote>\n<p>中央式：所有的代码保存在中央服务器，所以提交必须依赖网络，并且每次提交都会带入到中央仓库，如果是协同开发可能频繁触发代码合并，进而增加提交的成本和代价。最典型的就是svn\n分布式：可以在本地提交，不需要依赖网络，并且会将每次提交自动备份到本地。每个开发者都可以把远程仓库clone一份到本地，并会把提交历史一并拿过来。代表就是Git</p>\n</blockquote>\n<p>那Git相比于svn有什么优势呢？打个比方：&quot;巴拉巴拉写了一大堆代码，突然发现写的有问题，我想回到一个小时之前&quot;，对于这种情况Git的优势就很明显了，因为commit的成本比较小并且本地会保存所有的提交记录，随时随刻可以进行回退。在这并不是说svn的不能完成这种操作，只是Git的回退会显得更加的优雅。Git相比于中央式工具还有很多优点，就不一一列举了，感兴趣的可自行了解。</p>\n<ul>\n<li>文件状态</li>\n</ul>\n<p>在Git中文件大概分为三种状态：已修改（modified）、已暂存（staged）、已提交（committed）</p>\n<p>修改：Git可以感知到工作目录中哪些文件被修改了，然后把修改的文件加入到modified区域</p>\n<p>暂存：通过add命令将工作目录中修改的文件提交到暂存区，等候被commit</p>\n<p>提交：将暂存区文件commit至Git目录中永久保存</p>\n<ul>\n<li>commit节点</li>\n</ul>\n<p>在Git中每次提交都会生成一个节点,而每个节点都会有一个哈希值作为唯一标示，多次提交会形成一个线性节点链（不考虑merge的情况），如图</p>\n<img :src=\"$withBase('/assets/git/1-1.jpg')\" alt=\"1-1\" style=\"zoom: 50%;\" />\n<blockquote>\n<p>节点上方是通过 SHA1计算的哈希值</p>\n</blockquote>\n<ul>\n<li>HEAD</li>\n</ul>\n<p>HEAD是Git中非常重要的一个概念，你可以称它为指针或者引用，它可以指向任意一个节点，并且指向的节点始终为当前工作目录，换句话说就是当前工作目录(也就是你所看到的代码)就是HEAD指向的节点。</p>\n<p>还以图1-1举例，如果HEAD指向C2那工作目录对应的就是C2节点。具体如何移动HEAD指向后面会讲到，此处不要纠结。</p>\n<p>同时HEAD也可以指向一个分支，间接指向分支所指向的节点</p>\n<p>1.5 远程仓库</p>\n<p>虽然Git会把代码以及历史保存在本地，但最终还是要提交到服务器上的远程仓库。通过clone命令可以把远程仓库的代码下载到本地，同时也会将提交历史、分支、HEAD等状态一并同步到本地，但这些状态并不会实时更新，需要手动从远程仓库去拉取，至于何时拉、怎么拉后面章节会讲到。</p>\n<p>通过远程仓库为中介，你可以和你的同事进行协同开发，开发完新功能后可以申请提交至远程仓库，同时也可以从远程仓库拉取你同事的代码。</p>\n<p>注意点</p>\n<p>因为你和你的同事都会以远程仓库的代码为基准，所以要时刻保证远程仓库的代码质量，切记不要将未经检验测试的代码提交至远程仓库</p>\n<h2 id=\"分支\" tabindex=\"-1\"> 分支</h2>\n<ul>\n<li>什么是分支？</li>\n</ul>\n<p>分支也是Git中相当重要的一个概念，当一个分支指向一个节点时，当前节点的内容即是该分支的内容，它的概念和HEAD非常接近同样也可以视为指针或引用，不同的是分支可以存在多个，而HEAD只有一个。通常会根据功能或版本建立不同的分支</p>\n<p>那分支有什么用呢？</p>\n<blockquote>\n<p>举个例子：你们的 App 经历了千辛万苦终于发布了v1.0版本，由于需求紧急v1.0上线之后便马不停蹄的开始v1.1，正当你开发的兴起时，QA同学说用户反馈了一些bug，需要修复然后重新发版，修复v1.0肯定要基于v1.0的代码，可是你已经开发了一部分v1.1了，此时怎么搞？</p>\n</blockquote>\n<p>面对上面的问题通过引入分支概念便可优雅的解决，如图</p>\n<img :src=\"$withBase('/assets/git/2-1.jpg')\" alt=\"2-1\" style=\"zoom: 50%;\" />\n<blockquote>\n<p>先看左边示意图，假设C2节点既是v1.0版本代码，上线后在C2的基础上新建一个分支ft-1.0</p>\n<p>再看右边示意图，在v1.0上线后可在master分支开发v1.1内容，收到QA同学反馈后提交v1.1代码生成节点C3，随后切换到ft-1.0分支做bug修复，修复完成后提交代码生成节点C4，然后再切换到master分支并合并ft-1.0分支，到此我们就解决了上面提出的问题</p>\n</blockquote>\n<p>除此之外利用分支还可以做很多事情，比如现在有一个需求不确定要不要上线，但是得先做，此时可以单独创建一个分支开发该功能，等到啥时候需要上线直接合并到主分支即可。分支适用的场景很多就不一一列举了。</p>\n<p>注意点</p>\n<blockquote>\n<p>当在某个节点创建一个分支后，并不会把该节点对应的代码复制一份出来，只是将新分支指向该节点，因此可以很大程度减少空间上的开销。一定要记着不管是HEAD还是分支它们都只是引用而已，量级非常轻</p>\n</blockquote>\n<h2 id=\"命令详解\" tabindex=\"-1\"> 命令详解</h2>\n<h3 id=\"提交相关\" tabindex=\"-1\"> 提交相关</h3>\n<p>前面我们提到过，想要对代码进行提交必须得先加入到暂存区，Git中是通过命令 add 实现</p>\n<h4 id=\"添加某个文件到暂存区\" tabindex=\"-1\"> 添加某个文件到暂存区</h4>\n<div><pre><code><span>git</span> <span>add</span> 文件路径 \n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"添加所有文件到暂存区\" tabindex=\"-1\"> 添加所有文件到暂存区</h4>\n<div><pre><code><span>git</span> <span>add</span> <span>.</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>同时Git也提供了撤销<strong>工作区</strong>和<strong>暂存区</strong>命令</p>\n<h4 id=\"撤销工作区改动\" tabindex=\"-1\"> 撤销工作区改动</h4>\n<div><pre><code><span>git</span> checkout -- 文件名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"清空暂存区\" tabindex=\"-1\"> 清空暂存区</h4>\n<div><pre><code><span>git</span> reset HEAD 文件名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"提交\" tabindex=\"-1\"> 提交</h4>\n<p>将改动文件加入到暂存区后就可以进行提交了，提交后会生成一个新的提交节点，具体命令如下：</p>\n<div><pre><code><span>git</span> commit <span>-m</span> <span>\"该节点的描述信息\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"分支相关\" tabindex=\"-1\"> 分支相关</h3>\n<h4 id=\"创建分支\" tabindex=\"-1\"> 创建分支</h4>\n<p>创建一个分支后该分支会与HEAD指向同一节点，说通俗点就是HEAD指向哪创建的新分支就指向哪，命令如下：</p>\n<div><pre><code><span>git</span> branch 分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"切换分支\" tabindex=\"-1\"> 切换分支</h4>\n<p>当切换分支后，默认情况下HEAD会指向当前分支，即HEAD间接指向当前分支指向的节点</p>\n<div><pre><code><span>git</span> checkout 分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>同时也可以创建一个分支后立即切换，命令如下：</p>\n<div><pre><code><span>git</span> checkout <span>-b</span> 分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"删除分支\" tabindex=\"-1\"> 删除分支</h4>\n<p>为了保证仓库分支的简洁，当某个分支完成了它的使命后应该被删除。比如前面所说的单独开一个分支完成某个功能，当这个功能被合并到主分支后应该将这个分支及时删除。</p>\n<p>删除命令如下：</p>\n<div><pre><code><span>git</span> branch <span>-d</span> 分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"合并相关\" tabindex=\"-1\"> 合并相关</h3>\n<p>关于合并的命令是最难掌握同时也是最重要的。我们常用的合并命令大概有三个merge、rebase、cherry-pick</p>\n<h4 id=\"合并-merge\" tabindex=\"-1\"> 合并 merge</h4>\n<p>merge是最常用的合并命令，它可以将某个分支或者某个节点的代码合并至当前分支。具体命令如下：</p>\n<div><pre><code><span>git</span> merge 分支名/节点哈希值\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>如果需要合并的分支完全领先于当前分支，如图所示</p>\n<img :src=\"$withBase('/assets/git/3-1.jpg')\" alt=\"3-1\" style=\"zoom: 50%;\" />\n<p>由于分支ft-1完全领先分支ft-2即ft-1完全包含ft-2，所以ft-2执行了“git merge ft-1”后会触发fast forward(快速合并)，此时两个分支指向同一节点，这是最理想的状态。但是实际开发中我们往往碰到是是下面这种情况：如图3-2(左)</p>\n<img :src=\"$withBase('/assets/git/3-2.jpg')\" alt=\"3-2\" style=\"zoom: 50%;\" />\n<p>这种情况就不能直接合了，当ft-2执行了“git merge ft-1”后Git会将节点C3、C4合并随后生成一个新节点C5，最后将ft-2指向C5 如图</p>\n<p>注意点：</p>\n<blockquote>\n<p>如果C3、C4同时修改了同一个文件中的同一句代码，这个时候合并会出错，因为Git不知道该以哪个节点为标准，所以这个时候需要我们自己手动合并代码</p>\n</blockquote>\n<h4 id=\"变基-rebase\" tabindex=\"-1\"> 变基 rebase</h4>\n<p>rebase也是一种合并指令，命令行如下：</p>\n<div><pre><code>git rebase 分支名/节点哈希值\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>与merge不同的是rebase合并看起来不会产生新的节点(实际上是会产生的，只是做了一次复制)，而是将需要合并的节点直接累加 如图</p>\n<img :src=\"$withBase('/assets/git/3-3.jpg')\" alt=\"3-3\" style=\"zoom: 50%;\" />\n<p>当左边示意图的ft-1.0执行了git rebase master后会将C4节点复制一份到C3后面，也就是C4'，C4与C4'相对应，但是哈希值却不一样。</p>\n<p>rebase相比于merge提交历史更加线性、干净，使并行的开发流程看起来像串行，更符合我们的直觉。既然rebase这么好用是不是可以抛弃merge了？其实也不是了，下面我罗列一些merge和rebase的优缺点：</p>\n<ul>\n<li>merge优缺点：</li>\n</ul>\n<blockquote>\n<p>优点：每个节点都是严格按照时间排列。当合并发生冲突时，只需要解决两个分支所指向的节点的冲突即可</p>\n<p>缺点：合并两个分支时大概率会生成新的节点并分叉，久而久之提交历史会变成一团乱麻</p>\n</blockquote>\n<ul>\n<li>rebase优缺点：</li>\n</ul>\n<blockquote>\n<p>优点：会使提交历史看起来更加线性、干净</p>\n<p>缺点：虽然提交看起来像是线性的，但并不是真正的按时间排序，比如上图中，不管C4早于或者晚于C3提交它最终都会放在C3后面。并且当合并发生冲突时，理论上来讲有几个节点rebase到目标分支就可能处理几次冲突</p>\n</blockquote>\n<p>对于网络上一些只用rebase的观点，作者表示不太认同，如果不同分支的合并使用rebase可能需要重复解决冲突，这样就得不偿失了。但如果是本地推到远程并对应的是同一条分支可以优先考虑rebase。所以我的观点是 根据不同场景合理搭配使用merge和rebase，如果觉得都行那优先使用rebase</p>\n<h4 id=\"筛选合并-cherry-pick\" tabindex=\"-1\"> 筛选合并 cherry-pick</h4>\n<p>cherry-pick的合并不同于merge和rebase，它可以选择某几个节点进行合并，如图</p>\n<div><pre><code><span>git</span> cherry-pick 节点哈希值\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><img :src=\"$withBase('/assets/git/3-4.jpg')\" alt=\"3-4\" style=\"zoom: 50%;\" />\n<p>假设当前分支是master，执行了git cherry-pick C3(哈希值)，C4(哈希值)命令后会直接将C3、C4节点抓过来放在后面，对应C3'和C4'</p>\n<h3 id=\"回退相关\" tabindex=\"-1\"> 回退相关</h3>\n<h4 id=\"分离head\" tabindex=\"-1\"> 分离HEAD</h4>\n<p>在默认情况下HEAD是指向分支的，但也可以将HEAD从分支上取下来直接指向某个节点，此过程就是分离HEAD，具体命令如下：</p>\n<div><pre><code><span>git</span> checkout 节点哈希值\n//也可以直接脱离分支指向当前节点\n<span>git</span> checkout <span>--detach</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>由于哈希值是一串很长很长的乱码，在实际操作中使用哈希值分离HEAD很麻烦，所以Git也提供了HEAD基于某一特殊位置(分支/HEAD)直接指向前一个或前N个节点的命令，也即相对引用，如下：</p>\n<div><pre><code>//HEAD分离并指向前一个节点\n<span>git</span> checkout 分支名/HEAD^\n\n//HEAD分离并指向前N个节点\n<span>git</span> checkout 分支名～N\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>将HEAD分离出来指向节点有什么用呢？举个例子：如果开发过程发现之前的提交有问题，此时可以将HEAD指向对应的节点，修改完毕后再提交，此时你肯定不希望再生成一个新的节点，而你只需在提交时加上--amend即可，具体命令如下：</p>\n<div><pre><code><span>git</span> commit <span>--amend</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"回退\" tabindex=\"-1\"> 回退</h4>\n<p>回退场景在平时开发中还是比较常见的，比如你巴拉巴拉写了一大堆代码然后提交，后面发现写的有问题，于是你想将代码回到前一个提交，这种场景可以通过reset解决，具体命令如下：</p>\n<div><pre><code>//回退N个提交\n<span>git</span> reset HEAD~N\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>reset和相对引用很像，区别是reset会使分支和HEAD一并回退。</p>\n<h3 id=\"远程相关\" tabindex=\"-1\"> 远程相关</h3>\n<p>当我们接触一个新项目时，第一件事情肯定是要把它的代码拿下来，在Git中可以通过clone从远程仓库复制一份代码到本地，具体命令如下：</p>\n<div><pre><code><span>git</span> clone 仓库地址\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>前面的章节我也有提到过，clone不仅仅是复制代码，它还会把远程仓库的引用(分支/HEAD)一并取下保存在本地，如图所示：</p>\n<img :src=\"$withBase('/assets/git/3-5.jpg')\" alt=\"3-5\" style=\"zoom: 50%;\" />\n<p>其中origin/master和origin/ft-1为远程仓库的分支，而远程的这些引用状态是不会实时更新到本地的，比如远程仓库origin/master分支增加了一次提交，此时本地是感知不到的，所以本地的origin/master分支依旧指向C4节点。我们可以通过fetch命令来手动更新远程仓库状态</p>\n<p>小提示：</p>\n<blockquote>\n<p>并不是存在服务器上的才能称作是远程仓库，你也可以clone本地仓库作为远程，当然实际开发中我们不可能把本地仓库当作公有仓库，说这个只是单纯的帮助你更清晰的理解分布式</p>\n</blockquote>\n<h4 id=\"下载-fetch\" tabindex=\"-1\"> 下载 fetch</h4>\n<p>说的通俗一点，fetch命令就是一次下载操作，它会将远程新增加的节点以及引用(分支/HEAD)的状态下载到本地，具体命令如下：</p>\n<div><pre><code><span>git</span> fetch 远程仓库地址/分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"拉取-pull\" tabindex=\"-1\"> 拉取 pull</h4>\n<p>pull命令可以从远程仓库的某个引用拉取代码，具体命令如下：</p>\n<div><pre><code><span>git</span> pull 远程分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>其实pull的本质就是fetch+merge，首先更新远程仓库所有状态到本地，随后再进行合并。合并完成后本地分支会指向最新节点</p>\n<p>另外pull命令也可以通过rebase进行合并，具体命令如下：</p>\n<div><pre><code><span>git</span> pull <span>--rebase</span> 远程分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"推送-push\" tabindex=\"-1\"> 推送 push</h4>\n<p>push命令可以将本地提交推送至远程，具体命令如下：</p>\n<div><pre><code><span>git</span> push 远程分支名\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>如果直接push可能会失败，因为可能存在冲突，所以在push之前往往会先pull一下，如果存在冲突本地解决。push成功后本地的远程分支引用会更新，与本地分支指向同一节点</p>\n<h2 id=\"综上所述\" tabindex=\"-1\"> 综上所述</h2>\n<ul>\n<li>不管是HEAD还是分支，它们都只是引用而已，引用+节点是 Git 构成分布式的关键</li>\n<li>merge相比于rebase有更明确的时间历史，而rebase会使提交更加线性应当优先使用</li>\n<li>通过移动HEAD可以查看每个提交对应的代码</li>\n<li>clone或fetch都会将远程仓库的所有提交、引用保存在本地一份</li>\n<li>pull的本质其实就是fetch+merge，也可以加入--rebase通过rebase方式合并</li>\n</ul>\n",
      "date_published": "2022-05-16T11:21:30.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "Git"
      ]
    },
    {
      "title": "二分查找理论",
      "url": "https://jin-shaohui.gitee.io/Algorithm/Dichotomy/",
      "id": "https://jin-shaohui.gitee.io/Algorithm/Dichotomy/",
      "content_html": "<h2 id=\"二分查找理论\" tabindex=\"-1\"> 二分查找理论</h2>\n<p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用 顺序存储结构 ，而且表中元素按关键字有序排列。</p>\n<p>首先，假设表中元素是按升序排列，将表中间位置记录的 关键字 与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置 记录  将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的 记录 ，使查找成功，或直到子表不存在为止，此时查找不成功。</p>\n<p>二分查找是我们降低算法复杂度的主要手段之一，只要我们可以题目中存在：</p>\n<ul>\n<li>有序</li>\n<li>查找</li>\n</ul>\n<p>两个因素，就可以用二分查找降低时间复杂度。</p>\n<p>在最开始的阶段，二分查找的难点在于识别有序和查找。后面的难点在于如果通过建模手段把题目的数据变得存在有序和查找。</p>\n<h2 id=\"方式\" tabindex=\"-1\"> 方式</h2>\n<p>二分查找的精髓就是 3 点：</p>\n<ol>\n<li>目标值小于查找值时怎么办</li>\n<li>目标值等于查找值时怎么办</li>\n<li>目标值大于查找值时怎么办</li>\n</ol>\n<p>二分查找这么看就成为了填空题。</p>\n<p>二分查找的作用就是在 Logn 的时间复杂度内找到想要的数据。共有 5 种类型的二分查找方式：</p>\n<ul>\n<li>数据无重复查找数据</li>\n<li>数据有重复查找小于该数的最后一个数字的位置</li>\n<li>数据有重复查找该数字第一次出现的位置</li>\n<li>数据有重复查找该数字最后一次出现的位置</li>\n<li>数据有重复查找第一个大于该数的数字的位置</li>\n</ul>\n<p>下面针对这五类进行代码介绍。</p>\n<h2 id=\"分类\" tabindex=\"-1\"> 分类</h2>\n<h3 id=\"第一类-数据无重复查找数据\" tabindex=\"-1\"> 第一类 - 数据无重复查找数据</h3>\n<p>位置：0 1 2 3 4 5 6 7 8 9</p>\n<p>数据：1 2 3 4 5 6 7 8 9 10</p>\n<div><pre><code><span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>\n    <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> right <span>=</span> numbers<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>\n        <span>int</span> middle <span>=</span> left <span>+</span> <span>(</span>right <span>-</span> left<span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>==</span> target<span>)</span> <span>{</span>\n            <span>return</span> middle<span>;</span>\n        <span>}</span><span>else</span> <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>></span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle <span>-</span> <span>1</span><span>;</span>\n        <span>}</span><span>else</span> <span>{</span>\n            left <span>=</span> middle <span>+</span> <span>1</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> <span>-</span><span>1</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"第二类-数据有重复查找小于该数的最后一个数字的位置\" tabindex=\"-1\"> 第二类 - 数据有重复查找小于该数的最后一个数字的位置</h3>\n<p>位置：0 1 2 3 4 5 6 7 8 9</p>\n<p>数据：1 1 2 2 3 3 3 3 4 4</p>\n<div><pre><code><span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>\n    <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> right <span>=</span> numbers<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>\n        <span>int</span> middle <span>=</span> left <span>+</span> <span>(</span>right <span>-</span> left <span>+</span> <span>1</span><span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>==</span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle <span>-</span> <span>1</span><span>;</span>\n        <span>}</span><span>else</span> <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>></span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle <span>-</span> <span>1</span><span>;</span>\n        <span>}</span><span>else</span> <span>{</span>\n            left <span>=</span> middle<span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> left<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"第三类-数据有重复查找该数字第一次出现的位置\" tabindex=\"-1\"> 第三类 - 数据有重复查找该数字第一次出现的位置</h3>\n<p>位置：0 1 2 3 4 5 6 7 8 9</p>\n<p>数据：1 1 2 2 3 3 3 3 4 4</p>\n<div><pre><code><span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>\n    <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> right <span>=</span> numbers<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>\n        <span>int</span> middle <span>=</span> left <span>+</span> <span>(</span>right <span>-</span> left<span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>==</span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle<span>;</span>\n        <span>}</span><span>else</span> <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>></span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle<span>;</span>\n        <span>}</span><span>else</span> <span>{</span>\n            left <span>=</span> middle <span>+</span> <span>1</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> left<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"第四类-数据有重复查找该数字最后一次出现的位置\" tabindex=\"-1\"> 第四类 - 数据有重复查找该数字最后一次出现的位置</h3>\n<p>位置：0 1 2 3 4 5 6 7 8 9</p>\n<p>数据：1 1 2 2 3 3 3 3 4 4</p>\n<div><pre><code><span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>\n    <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> right <span>=</span> numbers<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>\n        <span>int</span> middle <span>=</span> left <span>+</span> <span>(</span>right <span>-</span> left <span>+</span> <span>1</span><span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>==</span> target<span>)</span> <span>{</span>\n            left <span>=</span> middle<span>;</span>\n        <span>}</span><span>else</span> <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>></span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle <span>-</span> <span>1</span><span>;</span>\n        <span>}</span><span>else</span> <span>{</span>\n            left <span>=</span> middle<span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> left<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"第五类-数据有重复查找第一个大于该数的数字的位置\" tabindex=\"-1\"> 第五类 - 数据有重复查找第一个大于该数的数字的位置</h3>\n<p>位置：0 1 2 3 4 5 6 7 8 9</p>\n<p>数据：1 1 2 2 3 3 3 3 4 4</p>\n<div><pre><code><span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>\n    <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> right <span>=</span> numbers<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>\n        <span>int</span> middle <span>=</span> left <span>+</span> <span>(</span>right <span>-</span> left <span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>==</span> target<span>)</span> <span>{</span>\n            left <span>=</span> middle <span>+</span> <span>1</span><span>;</span>\n        <span>}</span><span>else</span> <span>if</span> <span>(</span>numbers<span>[</span>middle<span>]</span> <span>></span> target<span>)</span> <span>{</span>\n            right <span>=</span> middle<span>;</span>\n        <span>}</span><span>else</span> <span>{</span>\n            left <span>=</span> middle <span>+</span> <span>1</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> left<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"实战\" tabindex=\"-1\"> 实战</h2>\n<p>题目来自力扣。</p>\n<h3 id=\"搜索插入位置\" tabindex=\"-1\"> 搜索插入位置</h3>\n<p>搜索插入位置</p>\n<div>\n<p>Tips</p>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>请必须使用时间复杂度为 O(log n) 的算法。</p>\n</div>\n<p><code>示例 1</code></p>\n<p>输入: nums = [1,3,5,6], target = 5</p>\n<p>输出: 2</p>\n<p><code>示例 2</code></p>\n<p>输入: nums = [1,3,5,6], target = 2</p>\n<p>输出: 1</p>\n<p><code>示例 3</code></p>\n<p>输入: nums = [1,3,5,6], target = 7</p>\n<p>输出: 4</p>\n<h4 id=\"思路与算法\" tabindex=\"-1\"> 思路与算法</h4>\n<p>假设题意是叫你在排序数组中寻找是否存在一个目标值，那么训练有素的读者肯定立马就能想到利用二分法在 O(\\log n)O(logn) 的时间内找到是否存在目标值。但这题还多了个额外的条件，即如果不存在数组中的时候需要返回按顺序插入的位置，那我们还能用二分法么？答案是可以的，我们只需要稍作修改即可。</p>\n<p>考虑这个插入的位置 pos，它成立的条件为：</p>\n<div><pre><code>nums<span>[</span>pos−<span>1</span><span>]</span> <span>&lt;</span> target ≤ nums<span>[</span>pos<span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>其中 nums 代表排序数组。由于如果存在这个目标值，我们返回的索引也是 pos，因此我们可以将两个条件合并得出最后的目标：「在一个有序数组中找第一个大于等于 target 的下标」。</p>\n<p>问题转化到这里，直接套用二分法即可，即不断用二分法逼近查找第一个大于等于 target 的下标 。下文给出的代码是笔者习惯的二分写法，ans 初值设置为数组长度可以省略边界条件的判断，因为存在一种情况是 target 大于数组中的所有数，此时需要插入到数组长度的位置。</p>\n<div><pre><code><span>public</span> <span>int</span> <span>searchInsert</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>\n    <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> right <span>=</span> nums<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>left <span>&lt;=</span> right<span>)</span> <span>{</span>\n        <span>int</span> mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> target<span>)</span> <span>{</span>\n            <span>return</span> mid<span>;</span>\n        <span>}</span><span>else</span> <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>&lt;</span> target<span>)</span> <span>{</span>\n            left <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>></span> target<span>)</span> <span>{</span>\n            right <span>=</span> mid <span>-</span> <span>1</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> left<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"有序数组中的单一元素\" tabindex=\"-1\"> 有序数组中的单一元素</h3>\n<div>\n<p>Tips</p>\n<p>给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。</p>\n<p>请你找出并返回只出现一次的那个数。</p>\n<p>你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。</p>\n</div>\n<p><code>示例 1</code></p>\n<p>输入: nums = [1,1,2,3,3,4,4,8,8]</p>\n<p>输出: 2</p>\n<p><code>示例 2</code></p>\n<p>输入: nums = [3,3,7,7,10,11,11]</p>\n<p>输出: 10</p>\n<h4 id=\"思路与算法-1\" tabindex=\"-1\"> 思路与算法</h4>\n<p>因为找出唯一一个没有重复的数，且其他相同的数只有两个，所以利用二分查找时，根据 mid 和它的前后来进行判断。</p>\n<p>那么怎么知道不重复的在 mid 的左边还是右边呢？</p>\n<p>根据 mid 的左侧和右侧个数来判断，因为 mid 指的是下标。</p>\n<ul>\n<li>\n<p>假设 mid 是偶数，则前面有 <code>2 * n</code> 的数，如果 <code>nums[mid] == nums[mid - 1]</code>，则代表左侧必有不重复的数，因为前面原本有 <code>2 * n</code> 的数，则假设正好存在 <code>n / 2</code> 个重复的数，但是显然 <code>nums[mid] == nums[mid - 1]</code>，所以左侧必有唯一的数。（0 - mid 之间不取 mid 是偶数，取了 mid 则是奇数，奇数之间肯定有一个唯一的数）</p>\n</li>\n<li>\n<p>假设 mid 是奇数，则前面有 <code>2 * n - 1</code> 个数，如果 <code>nums[mid] == nums[mid - 1]</code>，则代表右侧的必有不重复的数，因为前面原本有 <code>2 * n - 1</code> 的数，则假设正好存在 2 个重复的数 + 一个不重复的数，但是显然 <code>nums[mid] == nums[mid - 1]</code>，所以右侧必有唯一的数。（0 - mid 之间不取 mid 是奇数，取了 mid 则是偶数，偶数之间不存在唯一的数，所以只有右侧有）</p>\n</li>\n<li>\n<p><code>nums[mid] == nums[mid + 1]</code> 同理 ......</p>\n</li>\n</ul>\n<p>如果最终 <code>mid</code> 是 <code>0</code> 或者 <code>nums.length - 1</code>，则 <code>0</code> 或者 <code>nums.length - 1</code> 就是唯一数的下标。</p>\n<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>\n    <span>public</span> <span>int</span> <span>singleNonDuplicate</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>)</span> <span>{</span>\n        <span>int</span> left <span>=</span> <span>0</span><span>;</span>\n        <span>int</span> right <span>=</span> nums<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n        <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>\n            <span>int</span> mid <span>=</span> left <span>+</span> <span>(</span>right <span>-</span> left<span>)</span> <span>/</span> <span>2</span><span>;</span>\n            <span>if</span><span>(</span>mid <span>==</span> <span>0</span><span>)</span> <span>{</span>\n                <span>return</span> nums<span>[</span><span>0</span><span>]</span><span>;</span>\n            <span>}</span><span>else</span> <span>if</span><span>(</span>mid <span>==</span> nums<span>.</span>length <span>-</span> <span>1</span><span>)</span> <span>{</span>\n                <span>return</span> nums<span>[</span>nums<span>.</span>length <span>-</span> <span>1</span><span>]</span><span>;</span>\n            <span>}</span>\n            <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> nums<span>[</span>mid <span>-</span> <span>1</span><span>]</span><span>)</span> <span>{</span>\n                <span>// mid 指的是下标，如果 mid 是偶数（则 mid 前面一定有 2 * n 个数），则 mid 左边的数字一定是唯一的，如 nums = [1, 1, 2, 3, 3, 5, 5, 8, 8]</span>\n                <span>if</span> <span>(</span>mid <span>%</span> <span>2</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>\n                    right <span>=</span> mid <span>-</span> <span>1</span><span>;</span>\n                <span>}</span> \n                <span>// 如果 mid 是奇数（则 mid 前面一定有 2 * n - 1 个数），则 mid 右边的数字一定是唯一的</span>\n                <span>else</span> <span>{</span> \n                    left <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n                <span>}</span>\n            <span>}</span> <span>else</span> <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> nums<span>[</span>mid <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>\n                <span>// 如果 mid 是偶数（则 mid 前面一定有 2 * n 个数），则 mid 右边的数字一定是唯一的，因为满足了 nums[mid] == nums[mid + 1]</span>\n                <span>if</span> <span>(</span>mid <span>%</span> <span>2</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>\n                    left <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n                <span>}</span>\n                <span>// 如果 mid 是奇数（则 mid 前面一定有 2 * n - 1 个数），则 mid 左边的数字一定是唯一的</span>\n                <span>else</span> <span>{</span> \n                    right <span>=</span> mid <span>-</span> <span>1</span><span>;</span>\n                <span>}</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>return</span> nums<span>[</span>mid<span>]</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> nums<span>[</span>left<span>]</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-06T16:36:20.000Z",
      "date_modified": "2022-09-16T15:10:28.000Z",
      "authors": [],
      "tags": [
        "算法"
      ]
    }
  ]
}