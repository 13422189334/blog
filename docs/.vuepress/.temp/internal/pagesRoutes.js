export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"主页","i":"home"},["/index.html","/README.md"]],
  ["v-46d4f31c","/Algorithm/Dichotomy/",{"d":"2022-06-06T16:36:20.000Z","l":"2022年6月7日","c":["算法"],"g":["很菜的算法"],"e":"<h2> 二分查找理论</h2>\n<p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用 顺序存储结构 ，而且表中元素按关键字有序排列。</p>\n<p>首先，假设表中元素是按升序排列，将表中间位置记录的 关键字 与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置 记录  将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的 记录 ，使查找成功，或直到子表不存在为止，此时查找不成功。</p>\n<p>二分查找是我们降低算法复杂度的主要手段之一，只要我们可以题目中存在：</p>","y":"a","t":"二分查找理论"},["/Algorithm/Dichotomy/index.html","/Algorithm/Dichotomy.html","/Algorithm/Dichotomy.md"]],
  ["v-7ed7b8d1","/Algorithm/DynamicProgram/",{"d":"2022-06-06T16:38:19.000Z","l":"2022年6月7日","c":["算法"],"g":["很菜的算法"],"e":"<h2> 算法认识</h2>\n<p>动态规划（Dynamic Programming）简称 DP，对于子问题重叠的情况特别有效，因为它将子问题的解保存在表格中，当需要某个子问题的解时，直接取值即可，从而避免重复计算。</p>\n<p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。</p>\n<p>动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>\n<p>与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。</p>","y":"a","t":"动态规划算法"},["/Algorithm/DynamicProgram/index.html","/Algorithm/DynamicProgram.html","/Algorithm/DynamicProgram.md"]],
  ["v-bab80564","/Algorithm/PriorityTraversal/",{"d":"2022-06-24T14:38:26.000Z","l":"2022年6月24日","c":["算法"],"g":["很菜的算法"],"e":"<h2> 深度优先遍历</h2>\n<p>深度优先遍历（Depth First Search，简称 DFS）就是找准一条路不停深入的搜索方法，\n当发现这条路走不通的时候就会回退到上一个探索的节点，如果上一个节点存在没有探索的分支，便继续探索若没有则继续回退。\n深度优先遍历就有点像二叉树中的前序遍历、中序遍历和后序遍历。</p>\n<p>它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。</p>\n<p>深度优先遍历的关键就在于如何找到已经探索过节点的上一个节点，也就是如何回溯。</p>\n<p><img src=\"/assets/algorithm/priorityTraversal/pt_000.jpg\" alt=\"pt_000\"></p>\n","y":"a","t":"优先遍历算法"},["/Algorithm/PriorityTraversal/index.html","/Algorithm/PriorityTraversal.html","/Algorithm/PriorityTraversal.md"]],
  ["v-a6145dea","/DesignPattern/Info/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["设计模式"],"g":["设计模式"],"e":"<h3> 设计模式是什么？</h3>\n<p>设计模式（Design pattern）代表了<code>最佳的实践</code>，通常被有经验的面向对象的软件开发人员所采用。</p>\n<p>设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<p>大白话就是，在<code>合适的场景</code>使用<code>合适的设计模式</code>：</p>\n<ul>\n<li>代码比较稳定</li>\n<li>代码比较高效</li>\n<li>代码维护性强</li>\n<li>代码比较规范</li>\n</ul>\n<h3> 工厂模式</h3>","y":"a","t":"简而言之"},["/DesignPattern/Info/index.html","/DesignPattern/Info.html","/DesignPattern/Info.md"]],
  ["v-2c569a3a","/DesignPattern/Observer/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["设计模式"],"g":["设计模式"],"e":"<h1> 观察者模式</h1>\n<p>我们学习vue的时候，经常会遇到消息通信，但大部分组件不是父子关系，就是兄弟关系。\n那如果两个没有任何关系的组件，既要进行消息通信，要保证通信不丢失，那么这时候 <strong>观察者模式（发布-订阅模式）</strong> 就很好用了。</p>\n<h2> 发布-订阅</h2>\n<blockquote>\n<p>发布：数据推送方，如：组件A想获取组件B数据，组件B抛出组件A需要的数据</p>\n<p>订阅：提出诉求方，如：组件A想获取组件B数据，抛出了个接收数据的'getData'方法</p>\n</blockquote>\n<h2> 代码编写</h2>\n<ul>\n<li>首先我们要定义一个观察者（数据处理中心），用来存储事件和回调函数信息。</li>\n</ul>","y":"a","t":"观察者模式"},["/DesignPattern/Observer/index.html","/DesignPattern/Observer.html","/DesignPattern/Observer.md"]],
  ["v-7438ad36","/Git/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["Git"],"g":["Git"],"e":"<h2> 前言</h2>\n<p>作为当前世界上最强大的代码管理工具Git相信大家都很熟悉，\n但据我所知有很大一批人停留在clone、commit、pull、push...的阶段，\n是不是对rebase心里没底只敢用merge？碰见版本回退就抓瞎？\n别问我怎么知道的，问就是：“我曾经就是这样啊～～”。针对这些问题，\n今天我就将这几年对Git的认知和理解分享出来，尽可能的从本质去讲解Git，\n帮助你一步一步去了解Git的底层原理，相信读完本篇文章你便可以换种姿态，\n更加风骚得使用Git各种指令。</p>\n<h2> 基本概念</h2>\n<ul>\n<li>Git的优势\nGit是一个分布式代码管理工具，在讨论分布式之前避免不了提及一下什么是中央式代码管理仓库</li>\n</ul>","y":"a","t":"Git","i":"git"},["/Git/index.html","/Git/index.md"]],
  ["v-99dcbeae","/Performance/info/",{"d":"2023-02-24T10:29:48.000Z","l":"2023年2月24日","c":["性能优化"],"g":["不咋滴的性能优化"],"e":"\n","y":"a","t":"浅谈性能优化","i":"info"},["/Performance/info/index.html","/Performance/Info.html","/Performance/Info.md"]],
  ["v-ed222c94","/Performance/Skill/",{"d":"2022-06-01T15:08:30.000Z","l":"2022年6月1日","c":["性能优化"],"g":["不咋滴的性能优化"],"e":"<p>Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分，</p>\n<p>使得我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM。</p>\n<p>但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，</p>\n<p>所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。本文内容分为以下三部分组成：</p>\n<ul>\n<li>Vue 代码层面的优化</li>\n<li>webpack 配置层面的优化</li>\n<li>基础的 Web 技术层面的优化</li>\n</ul>\n<h2> Vue 代码层面的优化</h2>","y":"a","t":"性能优化方法","i":"enum"},["/Performance/Skill/index.html","/Performance/Skill.html","/Performance/Skill.md"]],
  ["v-86b4b910","/Recommend/CSS/",{"d":"2023-02-01T11:21:30.000Z","l":"2023年2月1日","c":["推荐"],"g":["推荐"],"e":"<h3> 前端 - Css</h3>\n<ul>\n<li><a href=\"https://cssreference.io/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 参考书</a></li>\n<li><a href=\"https://htmlcheatsheet.com/css/\" target=\"_blank\" rel=\"noopener noreferrer\">交互式在线 CSS 速记表</a></li>\n<li><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 小花招</a></li>\n<li><a href=\"https://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener noreferrer\">学习 CSS 布局</a></li>\n<li><a href=\"https://codemyui.com/tag/\" target=\"_blank\" rel=\"noopener noreferrer\">450 多个纯 CSS 实现的 UI 设计</a></li>\n</ul>","y":"a","t":"CSS推荐","i":"css"},["/Recommend/CSS/index.html","/Recommend/CSS.html","/Recommend/CSS.md"]],
  ["v-4020390b","/Recommend/Other/",{"d":"2023-02-01T16:21:30.000Z","l":"2023年2月2日","c":["推荐"],"g":["推荐"],"e":"<h2> 面试题</h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/idLCZ32YvYPqUg83FUJOdA\" target=\"_blank\" rel=\"noopener noreferrer\">leetcode 最常见的 150 道前端面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/JM9EjDC2FxrI--MB53SN1Q\" target=\"_blank\" rel=\"noopener noreferrer\">为什么都说首屏html大小限制在14KB以内</a></li>\n</ul>","y":"a","t":"其他推荐","i":"others"},["/Recommend/Other/index.html","/Recommend/Other.html","/Recommend/Other.md"]],
  ["v-4381c413","/Server/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["服务器"],"g":["服务器"],"e":"<h2> 远程连接问题</h2>\n\n<p>修改登录客户端，即本地计算机的设置。\n运行gpedit.msc打开本地组策略编辑器，依次展开“计算机配置”-&gt;“管理模板”-&gt;“系统”-&gt;“凭据分配”，选择设置项： 加密 Oracle 修正\n然后右键编辑，改为 启用，保护级别为 易受攻击，确定。设置完成后即可正常远程。</p>\n<h2> 查看网卡配置</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> /etc/sysconfig/network-scripts/\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"服务器","i":"linux"},["/Server/index.html","/Server/index.md"]],
  ["v-01effbd4","/Java/Lambda/",{"d":"2022-05-16T11:26:43.000Z","l":"2022年5月16日","c":["Java"],"g":["Java"],"e":"<p>Lambda 表达式(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。</p>\n<h2> 表达式的结构</h2>\n<ul>\n<li>一个 Lambda 表达式可以有零个或多个参数</li>\n<li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同</li>\n<li>所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a, b) 或 (int a, int b) 或 (String a, int b, float c)</li>\n<li>空圆括号代表参数集为空。例如：() -&gt; 42</li>\n<li>当只有一个参数，且其类型可推导时，圆括号（）可省略。例如：a -&gt; return a * a</li>\n<li>Lambda 表达式的主体可包含零条或多条语句</li>\n<li>如果 Lambda 表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致</li>\n<li>如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li>\n</ul>","y":"a","t":"Lambda"},["/Java/Lambda/index.html","/Knowledge/BackEnd/Java-Lambda.html","/Knowledge/BackEnd/Java-Lambda.md"]],
  ["v-d621118a","/Java/Stream/",{"d":"2022-05-16T11:26:43.000Z","l":"2022年5月16日","c":["Java"],"g":["Java"],"e":"<p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。\nStream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。\n这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p>\n<h2> 特性</h2>\n<ul>\n<li>不是数据结构：它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</li>\n<li>不支持索引访问：但是很容易生成数组或者 List 。</li>\n<li>惰性化：很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。Intermediate 操作永远是惰性化的。</li>\n<li>并行能力。当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</li>\n<li>可以是无限的：集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</li>\n<li>注意事项：所有 Stream 的操作必须以 lambda 表达式为参数。</li>\n</ul>","y":"a","t":"Stream"},["/Java/Stream/index.html","/Knowledge/BackEnd/Java-Stream.html","/Knowledge/BackEnd/Java-Stream.md"]],
  ["v-6335a4dc","/Java/Utils/",{"d":"2023-02-24T15:34:43.000Z","l":"2023年2月24日","c":["Java"],"g":["Java"],"e":"<h2> 加解密</h2>\n<h3> AES加解密</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\">DeshfuUtil</span> desUtil <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeshfuUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密:\"</span><span class=\"token operator\">+</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密:\"</span><span class=\"token operator\">+</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7E91EA4F56943F90\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"工具类"},["/Java/Utils/index.html","/Knowledge/BackEnd/Java-Utils.html","/Knowledge/BackEnd/Java-Utils.md"]],
  ["v-7d7d1d84","/FrontEnd/",{"y":"h","t":""},["/FrontEnd/index.html","/Knowledge/FrontEnd/","/Knowledge/FrontEnd/index.md"]],
  ["v-18fee289","/FrontEnd/Configuration/Dependencies/",{"d":"2022-05-27T15:54:30.000Z","l":"2022年5月27日","c":["PackageJson"],"g":["PackageJson"],"e":"<h2> 浑水摸鱼的说法？</h2>\n<p>以前说到 <code>dependencies</code> 和 <code>devDependencies</code> 的时候，大家会想到啥？</p>\n<ul>\n<li><code>dependencies</code>：生产环境需要的依赖</li>\n<li><code>devDependencies</code>：开发环境需要的依赖</li>\n</ul>\n<p>但是我们装依赖的时候真的会去考虑 <code>npm install -D</code> 还是 <code>npm install -S</code> 吗？</p>\n<p>其实<code>并不会</code>去关心哪些是<code>生产环境</code>所需依赖，哪些是<code>开发环境</code>所需依赖，但是这也正常，因为其实在<code>SPA</code>项目中，这两个东西并<code>不需要区分</code>！所以平时没有过多了解也正常！！！</p>","y":"a","t":"dependencies和devDependencies区分"},["/FrontEnd/Configuration/Dependencies/index.html","/Knowledge/FrontEnd/Configuration/Dependencies.html","/Knowledge/FrontEnd/Configuration/Dependencies.md"]],
  ["v-2f759e1f","/FrontEnd/Configuration/Webpack/",{"d":"2022-05-27T15:54:30.000Z","l":"2022年5月27日","c":["Webpack"],"g":["Webpack"],"u":true,"o":true,"e":"<h2> 前言</h2>\n<p><code>Webpack</code>在前端构建工具中可以堪称中流砥柱般的存在，日常业务开发、前端基建工具、高级前端面试...任何场景都会出现它的身影。</p>\n<p>也许对于它的内部实现机制，我们也许会感到疑惑，日常工作中基于<code>Webpack Plugin/Loader</code>之类查阅<code>API</code>仍然不明白各个参数的含义和应用方式。其实这一切原因本质上都是基于<code>Webpack</code>工作流没有一个清晰的认知导致了所谓的“面对<code>API</code>无从下手”开发。</p>\n<p>下面，我们会从如何实现 <strong>模块分析项目打包</strong> 的角度出发，使用 <strong>最通俗，最简洁，最明了</strong> 的代码带你揭开<code>Webpack</code>背后的神秘面纱，带你实现一个简易版<code>Webpack</code>，从此对于任何<code>webpack</code>相关底层开发了然于胸。用最通俗易懂的代码带你走进<code>webpack</code>的工作流。</p>\n<blockquote>\n<p>可以根据 <a href=\"https://gitee.com/jin-shaohui/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">代码</a> 一边看一边尝试</p>\n</blockquote>\n","y":"a","t":"Webpack"},["/FrontEnd/Configuration/Webpack/index.html","/Knowledge/FrontEnd/Configuration/Webpack.html","/Knowledge/FrontEnd/Configuration/Webpack.md"]],
  ["v-fbe0eace","/FrontEnd/CssComponent/Checked/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["CSS"],"g":["很烂的CSS"],"e":"\n","y":"a","t":"打钩动画"},["/FrontEnd/CssComponent/Checked/index.html","/Knowledge/FrontEnd/CssComponents/Checked.html","/Knowledge/FrontEnd/CssComponents/Checked.md"]],
  ["v-6c95fb57","/FrontEnd/CssComponent/Login/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["CSS"],"g":["CSS"],"e":"\n","y":"a","t":"登录页"},["/FrontEnd/CssComponent/Login/index.html","/Knowledge/FrontEnd/CssComponents/Login.html","/Knowledge/FrontEnd/CssComponents/Login.md"]],
  ["v-700ddfb8","/FrontEnd/CssComponent/Shutters/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["CSS"],"g":["CSS"],"e":"\n","y":"a","t":"百叶窗"},["/FrontEnd/CssComponent/Shutters/index.html","/Knowledge/FrontEnd/CssComponents/Shutters.html","/Knowledge/FrontEnd/CssComponents/Shutters.md"]],
  ["v-83b26002","/FrontEnd/CssComponent/StreamerButton/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["CSS"],"g":["CSS"],"e":"\n","y":"a","t":"流光按钮"},["/FrontEnd/CssComponent/StreamerButton/index.html","/Knowledge/FrontEnd/CssComponents/StreamerButton.html","/Knowledge/FrontEnd/CssComponents/StreamerButton.md"]],
  ["v-6857ff90","/FrontEnd/Draw/Canvas/",{"d":"2022-07-25T16:17:25.000Z","l":"2022年7月26日","c":["Canvas"],"g":["Canvas"],"u":true,"o":true,"e":"<h2> Canvas 是什么？</h2>\n<blockquote>\n<p>Canvas 中文名叫 <code>画布</code>，是 HTML5 <code>新增</code>的一个<code>标签</code>。</p>\n<p>Canvas 允许开发者通过JS在这个标签上绘制各种图案。</p>\n<p>Canvas 拥有多种绘制路径、矩形、圆形、字符以及图片的方法。</p>\n<p>Canvas 在某些情况下可以 <code>代替</code> 图片。</p>\n<p>Canvas 可用于动画、游戏、数据可视化、图片编辑器、实时视频处理等领域。</p>\n</blockquote>\n<h3> Canvas 和 SVG 的区别</h3>","y":"a","t":"Canvas 入门","i":"canvas"},["/FrontEnd/Draw/Canvas/index.html","/Knowledge/FrontEnd/Draw/Canvas.html","/Knowledge/FrontEnd/Draw/Canvas.md"]],
  ["v-24504732","/FrontEnd/Draw/Svg/",{"d":"2022-08-19T11:33:25.000Z","l":"2022年8月19日","c":["Svg"],"g":["Svg"],"u":true,"o":true,"e":"<h2> 简介</h2>\n<p>SVG 是 <code>Scalable Vector Graphics</code> 的缩写，意为<code>可缩放矢量图形</code>。于 2003年1月14日 SVG 1.1 被Sun公司（已被Oracle公司收购）、Adobe、苹果公司、IBM 以及柯达共同确立成为<code>W3C</code>推荐标准。</p>\n<h3> 概念</h3>\n<ol>\n<li>SVG是 <code>Scalable Vector Graphics</code> 的缩写 意为<code>可缩放矢量图形</code></li>\n<li>SVG是一个基于<code>文本</code>的<code>开放网络标准</code>，用来定义用于<code>网络</code>的<code>矢量图形</code></li>\n<li>SVG图像在<code>放大</code>或<code>改变尺寸</code>的情况下其图形<code>质量不会有所损失</code>，因此能够优雅而简洁地渲染不同大小的图形，并和<code>CSS</code>，<code>DOM</code>，<code>JavaScript</code>和<code>SMIL</code>等其他网络标准无缝衔接</li>\n<li>SVG 使用 <code>XML</code> 格式定义图形</li>\n<li>SVG是万维网联盟的标准与诸如 <code>DOM</code> 和 <code>XSL</code> 之类的 <code>W3C</code> 标准是一个整体</li>\n</ol>\n","y":"a","t":"Svg 入门","i":"svg"},["/FrontEnd/Draw/Svg/index.html","/Knowledge/FrontEnd/Draw/Svg.html","/Knowledge/FrontEnd/Draw/Svg.md"]],
  ["v-4708b362","/FrontEnd/JavaScript/EventLoop/",{"d":"2022-06-01T16:15:33.000Z","l":"2022年6月2日","c":["JavaScript"],"g":["JavaScript"],"e":"<h1> 这一次，彻底弄懂 JavaScript 执行机制</h1>\n<p>不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，\n我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。\n因为javascript是一门单线程语言，所以我们可以得出结论：</p>\n<p>javascript是按照语句出现的顺序执行的\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"/assets/knowledge/frontEnd/javaScript/eventLoop/001.jpg\" alt=\"microInfo\"></p>\n","y":"a","t":"JavaScript 执行机制"},["/FrontEnd/JavaScript/EventLoop/index.html","/Knowledge/FrontEnd/JavaScript/EventLoop.html","/Knowledge/FrontEnd/JavaScript/EventLoop.md"]],
  ["v-30b6da65","/FrontEnd/JavaScript/Jsonp/",{"d":"2023-02-23T16:54:02.000Z","l":"2023年2月24日","c":["JavaScript"],"g":["JavaScript"],"e":"<p>我们都知道， <code>Ajax</code> 请求是不能跨域<sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup><a class=\"footnote-anchor\" id=\"footnote-ref1\">的，无论是 <code>静态页面</code> 、 <code>动态网页</code> 、  <code>web服务</code>等，只要是跨域请求，一律都不允许通过浏览器跨域的<code>检测</code>和<code>阻拦</code>。</a></p>","y":"a","t":"Jsonp","i":"jsonp"},["/FrontEnd/JavaScript/Jsonp/index.html","/Knowledge/FrontEnd/JavaScript/Jsonp.html","/Knowledge/FrontEnd/JavaScript/Jsonp.md"]],
  ["v-75a3b0c4","/FrontEnd/JavaScript/LRU/",{"d":"2023-02-25T14:57:37.000Z","l":"2023年2月25日","c":["JavaScript"],"g":["JavaScript"],"e":"<h2> 什么是 LRU？</h2>\n<p><code>LRU</code> 英文全称是 <code>Least Recently Used</code>，英译过来就是 <code>最近最少使用</code> 的意思。</p>\n<h3> 百度百科</h3>\n<p>LRU 是一种常用的页面置换算法，选择 <code>最近</code> <code>最久</code> <code>未使用</code> 的页面予以<code>淘汰</code>。</p>\n<p>该算法赋予<code>每个页面</code>一个<code>访问字段</code>，用来记录一个页面自上次被访问以来所 <code>经历的时间t</code>，当须淘汰一个页面时，选择现有页面中其 <code>t</code> 值最大的，即<code>最近最少使用</code>的页面予以淘汰。</p>","y":"a","t":"请使用JS完成一个LRU缓存"},["/FrontEnd/JavaScript/LRU/index.html","/Knowledge/FrontEnd/JavaScript/LRU.html","/Knowledge/FrontEnd/JavaScript/LRU.md"]],
  ["v-775ef2ea","/FrontEnd/JavaScript/Question/",{"d":"2022-06-01T11:21:30.000Z","l":"2022年6月1日","c":["Question"],"g":["前端面试仔"],"e":"<h2> 常问问题</h2>\n<h3> 回调地狱</h3>\n<details class=\"hint-container details\"><summary>详情</summary>\n<p>人们普遍以javaScript的执行顺序来编写代码,在执行异步代码时,无论以什么顺序简单的执行代码,通常情况会变成许多层级的回调函数堆积</p>\n<p>下面代码使用promise多次加载图片，防止回调函数嵌套</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">ID_BASE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos'</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">ROBOT_IMG_BASE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://robohash.org'</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getRobotId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>id\n              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> promise\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createRobot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n      img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">ROBOT_IMG_BASE_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;size=200*200</span><span class=\"token template-punctuation string\">`</span></span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getRobotId</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID_BASE_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res1</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">createRobot</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">getRobotId</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID_BASE_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res2</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">createRobot</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>","y":"a","t":"JavaScript相关面试问题"},["/FrontEnd/JavaScript/Question/index.html","/Knowledge/FrontEnd/JavaScript/Question.html","/Knowledge/FrontEnd/JavaScript/Question.md"]],
  ["v-29600350","/FrontEnd/JavaScript/Reflect/",{"d":"2023-02-28T16:46:13.000Z","l":"2023年3月1日","c":["JavaScript"],"g":["JavaScript"],"e":"<h3> 1</h3>\n<h3> 2</h3>\n<h3> 3</h3>\n<h3> 4</h3>\n<h3> 5</h3>\n<h3> 6</h3>\n<h3> 7</h3>\n<h3> Object.keys() 和 Reflect.ownKeys() 差别</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'method'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non enumerable property\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"a\", \"b\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"a\", \"b\", \"method\"]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Reflect","i":"reflect"},["/FrontEnd/JavaScript/Reflect/index.html","/Knowledge/FrontEnd/JavaScript/Reflect.html","/Knowledge/FrontEnd/JavaScript/Reflect.md"]],
  ["v-3f9ef9bc","/FrontEnd/JavaScript/Skill/",{"d":"2023-02-28T10:37:02.000Z","l":"2023年2月28日","c":["JavaScript"],"g":["JavaScript"],"e":"<h3> 一行代码完成结构加赋值</h3>\n<p>经常使用结构赋值，<strong>一般都是先结构，再赋值</strong>，当然也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> people<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> people<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {\"name\":\"张三\",\"age\":16}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"JavaScript 小技巧","i":"skill"},["/FrontEnd/JavaScript/Skill/index.html","/Knowledge/FrontEnd/JavaScript/Skill.html","/Knowledge/FrontEnd/JavaScript/Skill.md"]],
  ["v-8b25e15c","/FrontEnd/JavaScript/Storage/",{"d":"2022-06-13T15:07:14.000Z","l":"2022年6月13日","c":["JavaScript"],"g":["JavaScript"],"e":"<p>很多人在用 localStorage 或 sessionStorage 的时候喜欢直接用明文存储，直接将信息暴露在浏览器中，</p>\n<p>虽然一般场景下都能应付得了且简单粗暴，但特殊需求情况下，比如设置定时功能，就不能实现。</p>\n<p>就需要对其进行二次封装，为了在使用上增加些安全感，那加密也必然是少不了的了。</p>\n<p>为方便项目使用，特对常规操作进行封装。</p>\n","y":"a","t":"Storage"},["/FrontEnd/JavaScript/Storage/index.html","/Knowledge/FrontEnd/JavaScript/Storage.html","/Knowledge/FrontEnd/JavaScript/Storage.md"]],
  ["v-5d919c1e","/FrontEnd/JavaScript/",{"d":"2023-02-23T16:20:10.000Z","l":"2023年2月24日","e":"<h3> 知识点模块</h3>\n<ul class=\"task-list-container\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> <a href=\"/FrontEnd/JavaScript/EventLoop/\" target=\"blank\">JavaScript 执行机制</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-1\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-1\"> <a href=\"/FrontEnd/JavaScript/Reflect/\" target=\"blank\">Reflect</a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-2\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-2\"> <a href=\"/FrontEnd/JavaScript/Question/\" target=\"blank\">待整理问题</a></label></li>\n</ul>","y":"a","t":"JS篇","i":"javascript"},["/FrontEnd/JavaScript/index.html","/Knowledge/FrontEnd/JavaScript/_index.html","/Knowledge/FrontEnd/JavaScript/_index.md"]],
  ["v-3ab4fbff","/FrontEnd/Micro/QianKun/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["微前端"],"g":["微前端"],"u":true,"o":true,"e":"<p><strong>微前端</strong> 是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。</p>\n<p>各个前端应用还可以独立开发、独立部署。同时，它们也可以在共享组件的同时进行并行开发——这些组件可以通过 NPM 或者 Git Tag、Git Submodule 来管理。</p>\n<p><strong>qiankun（乾坤）</strong> 就是一款由蚂蚁金服推出的比较成熟的微前端框架，基于 <strong>single-spa</strong> 进行二次开发，用于将Web应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。</p>\n<p><img src=\"/assets/knowledge/frontEnd/micro/qianKun/microInfo.png\" alt=\"microInfo\"></p>\n<p>那么，话不多说，我们的源码解析正式开始。</p>\n","y":"a","t":"乾坤"},["/FrontEnd/Micro/QianKun/index.html","/Knowledge/FrontEnd/Micro/QianKun.html","/Knowledge/FrontEnd/Micro/QianKun.md"]],
  ["v-ab8abb0a","/Network/BrowserCache/",{"d":"2022-09-22T10:15:04.000Z","l":"2022年9月22日","c":["Network"],"g":["缓存"],"u":true,"o":true,"e":"<h2> 什么是web缓存？</h2>\n<p><code>web缓存</code>主要指的是两部分：<code>浏览器缓存</code>和<code>http缓存</code>。</p>\n<p>http缓存是web缓存的核心，是最难懂的那一部分,也是最重要的那一部分。</p>\n<p>浏览器缓存：例如 <code>localStorage(5M)</code>、<code>sessionStorage(5M)</code>、<code>cookie(4k)</code>等等。这些功能主要用于缓存一些必要的数据，比如用户信息。比如需要携带到后端的参数。亦或者是一些列表数据等等。</p>\n<h2> 缓存可以解决什么问题？</h2>\n<ol>\n<li>减少不必要的网络传输，节约宽带（就是<code>省钱</code>）</li>\n<li>更快的加载页面（就是<code>加速</code>）</li>\n<li>减少服务器负载，避免服务器过载的情况出现。（就是<code>减载</code>）</li>\n</ol>\n<h2> 缺点是什么？</h2>\n<ol>\n<li>占内存（有些缓存会被存到内存中）</li>\n</ol>\n","y":"a","t":"浏览器缓存"},["/Network/BrowserCache/index.html","/Knowledge/FrontEnd/Network/BrowserCache.html","/Knowledge/FrontEnd/Network/BrowserCache.md"]],
  ["v-0fb4daf6","/Network/CrossDomain/",{"d":"2022-06-01T15:28:16.000Z","l":"2022年6月1日","c":["Network"],"g":["跨域"],"e":"<p>白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。</p>\n<h2> 发生跨域的三个必要条件：</h2>\n<p>一般情况，我们己的项目地址和接口地址的域名不同时，如：<a href=\"https://localhost:9527\" target=\"_blank\" rel=\"noopener noreferrer\">https://localhost:9527</a>，也许会不假思索的就能回答出：<strong>不同协议，不同域名，不同端口</strong>。没有问题，但并不准确，我更倾向于把这三个叫 <strong>跨域的三要素</strong> ，那什么是跨域形成的必要条件呢？</p>\n<blockquote>\n<p>浏览器限制： 即浏览器对跨域行为进行检测和阻止</p>\n<p>触发跨域的三要素之一： 即协议、域名和端口三个条件满足其一</p>\n<p>发起的是xhr请求： 即发起的是 XMLHttpRequest 类型的请求。</p>\n</blockquote>\n","y":"a","t":"跨域"},["/Network/CrossDomain/index.html","/Knowledge/FrontEnd/Network/CrossDomain.html","/Knowledge/FrontEnd/Network/CrossDomain.md"]],
  ["v-4876c762","/Network/Question/",{"d":"2022-05-16T11:26:43.000Z","l":"2022年5月16日","c":["Question"],"g":["前端面试仔"],"e":"<h2> 常问问题</h2>\n<h3> 一个完整的http请求发生了什么</h3>\n<h3> 从浏览器输入url到回车页面渲染出来 这中间发生了什么</h3>\n","y":"a","t":"服务相关问题"},["/Network/Question/index.html","/Knowledge/FrontEnd/Network/Question.html","/Knowledge/FrontEnd/Network/Question.md"]],
  ["v-622fa8d3","/FrontEnd/React/Hooks/",{"a":"小杜杜 - 掘金","d":"2022-06-27T10:14:21.000Z","l":"2022年6月27日","c":["React"],"g":["React"],"e":"<h2> 前言</h2>\n<p><code>React Hooks</code>的发布已经有三年多了，它给函数式组件带来了<strong>生命周期</strong>，现如今，<code>Hooks</code>逐渐取代<code>class</code>组件，相信各位 <code>React</code> 开发的小伙伴已经深有体会，然而你真的完全掌握hooks了吗？知道如何去做一个好的自定义hooks吗？</p>\n<p>我们知道<code>React Hooks</code>有<code>useState</code>设置变量，<code>useEffect</code>副作用，<code>useRef</code>来获取元素的所有属性，还有<code>useMemo</code>、<code>useCallback</code>来做性能优化，当然还有一个<code>自定义Hooks</code>，来创造出你所想要的<code>Hooks</code></p>\n<p>接下来我们来看看以下几个问题，问问自己，是否全都知道：</p>\n<ul>\n<li>Hooks的由来是什么？</li>\n<li><code>useRef</code>的高级用法是什么？</li>\n<li><code>useMemo</code> 和 <code>useCallback</code> 是怎么做优化的？</li>\n<li>一个好的自定义Hooks该如何设计？</li>\n<li>如何做一个不需要<code>useState</code>就可以直接修改属性并刷新视图的自定义Hooks？</li>\n<li>如何做一个可以监听任何事件的自定义Hooks？</li>\n</ul>\n<p>如果你对以上问题有疑问，有好奇，那么这篇文章应该能够帮助到你～</p>\n<p>本文将会以介绍<strong>自定义Hooks</strong>来解答上述问题，并结合 <strong>TS</strong>，<strong>ahooks</strong>中的钩子，以案列的形式去演示</p>\n<p>注：这里讲解的自定义钩子可能会和 <code>ahooks</code>上的略有不同，不会考虑过多的情况，如果用于项目，建议直接使用<code>ahooks</code>上的钩子～</p>\n<p><img src=\"/assets/knowledge/frontEnd/react/hooks/reactHooks.jpg\" alt=\"reactHooks\"></p>\n","y":"a","t":"浅谈12个Hooks"},["/FrontEnd/React/Hooks/index.html","/Knowledge/FrontEnd/React/Hooks.html","/Knowledge/FrontEnd/React/Hooks.md"]],
  ["v-61f5a4d5","/FrontEnd/Standard/ES6/",{"d":"2022-06-01T11:21:30.000Z","l":"2022年6月1日","c":["ECMAScript"],"g":["前端规范"],"e":"<p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。</p>\n<p>Node.js 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node.js 默认没有打开的 ES6 实验性语法。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>// Linux <span class=\"token operator\">&amp;</span> Mac\n$ <span class=\"token function\">node</span> --v8-options <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> harmony\n// Windows\n$ <span class=\"token function\">node</span> --v8-options <span class=\"token operator\">|</span> findstr harmony\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"ES6","i":"es6"},["/FrontEnd/Standard/ES6/index.html","/Knowledge/FrontEnd/Standard/ES6.html","/Knowledge/FrontEnd/Standard/ES6.md"]],
  ["v-462bea94","/FrontEnd/Standard/HTML/",{"d":"2022-06-22T10:28:05.000Z","l":"2022年6月22日","c":["前端规范"],"g":["前端规范"],"e":"<p><em>HTML 作为描述网页结构的超文本标记语言，本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。</em></p>\n","y":"a","t":"HTML规范指南","i":"html"},["/FrontEnd/Standard/HTML/index.html","/Knowledge/FrontEnd/Standard/HTML.html","/Knowledge/FrontEnd/Standard/HTML.md"]],
  ["v-07cb4e14","/FrontEnd/Standard/RESTful/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["RESTful"],"g":["前端规范"],"e":"<h2> 如何解释什么是RESTful</h2>\n<p>一个悠闲的周日下午，Ta午觉醒来，又习惯性的抓起这个月的杂志，饶有兴趣地看了起来。</p>\n<p>果不其然，看着看着，Ta又对我发难了，“Restful是什么呀，是restaurant的形容词吗，突然就觉得好饿了啊......”</p>\n<p>作为一个合格的程序员，我一直把能够将一项技术讲给Ta听，并且能给Ta讲懂，作为我已经掌握了这项技术的标准。</p>\n<p>如果我直接回答说，<strong>REST就是Representational State Transfer的缩写呀，翻译为中文就是 表述性状态转移</strong>，那肯定不行。</p>","y":"a","t":"RESTful API","i":"RESTfulAPI"},["/FrontEnd/Standard/RESTful/index.html","/Knowledge/FrontEnd/Standard/RESTful.html","/Knowledge/FrontEnd/Standard/RESTful.md"]],
  ["v-1cc56289","/FrontEnd/Vue/Communicate/",{"d":"2022-06-01T16:21:10.000Z","l":"2022年6月2日","c":["VUE"],"g":["VUE"],"e":"<h1> Vue中的8种组件通信方式</h1>\n<p>Vue是数据驱动视图更新的框架，所以对于vue来说组件间的数据通信非常重要。</p>\n<p>常见使用场景可以分为三类:</p>\n<ul>\n<li>\n<p>父子组件通信: props/$emit  $parent/$children provide/inject ref $attrs/$listeners</p>\n</li>\n<li>\n<p>兄弟组件通信: eventBus Vuex</p>\n</li>\n<li>\n<p>跨级通信: eventBus Vuex provide/inject $attrs/$listeners</p>\n</li>\n</ul>\n","y":"a","t":"组件通讯方式"},["/FrontEnd/Vue/Communicate/index.html","/Knowledge/FrontEnd/Vue/Communicate.html","/Knowledge/FrontEnd/Vue/Communicate.md"]],
  ["v-074c4925","/FrontEnd/Vue/Directive/ClickOutside/",{"d":"2023-02-18T22:14:30.000Z","l":"2023年2月19日","c":["VUE"],"g":["Directive"],"e":"<h2> 如何使用</h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>&lt;button\n  @click=\"add\"\n  v-click-outside:[capture]=\"reset\"\n  v-click-outside:[capture].mousedown=\"reset\"\n  v-click-outside:[capture].touchstart=\"reset\"\n&gt;测试按钮&lt;/button&gt;\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"点击组件外部"},["/FrontEnd/Vue/Directive/ClickOutside/index.html","/Knowledge/FrontEnd/Vue/Directive-ClickOutside.html","/Knowledge/FrontEnd/Vue/Directive-ClickOutside.md"]],
  ["v-21f8b912","/FrontEnd/Vue/LifeCycle/",{"d":"2023-02-22T15:55:13.000Z","l":"2023年2月22日","c":["VUE"],"g":["VUE"],"e":"<h1> 前言</h1>\n<p>每个Vue实例再被创建之前，都会经过一系列的初始化过程，这个过程被称之为vue的生命周期。</p>\n<p>下面这张官网的图，想必大家都熟悉，那让我们一步一步的分析，并最后验证一下。</p>\n\n<p>图中可以看到在一整个生命周期中会有很多的钩子函数，不同的钩子函数提供给我们在vue生命周期不同的时刻进行的操作, 那么我们先列出所有的钩子函数，然后我们再一一详解：</p>\n","y":"a","t":"生命周期"},["/FrontEnd/Vue/LifeCycle/index.html","/Knowledge/FrontEnd/Vue/LifeCycle.html","/Knowledge/FrontEnd/Vue/LifeCycle.md"]],
  ["v-160f2f08","/FrontEnd/Vue/Question/",{"d":"2022-05-16T11:21:30.000Z","l":"2022年5月16日","c":["Question"],"g":["VUE"],"e":"<h2> 常问问题</h2>\n<h3> vue-router实现原理的histroy相关的api</h3>\n<h3> vue项目想要改变element-ui的组件内部的样式，默认情况下style加了scope无法修改，需怎么做</h3>\n<h3> v-if 和 v-for优先级</h3>\n<details class=\"hint-container details\"><summary>详情</summary>\n<p><strong>v-if和v-for是开发中经常会遇到的2个指令，那么在使用的过程中，二者如果同时存在同一个标签上，谁的优先级会更高一点呢？</strong></p>\n<p>那么我们从源码的角度去看他，源码位置： compiler/codegen/index.js</p>\n<p>在genElement方法中，我们可以看到一些if else的判断</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>staticRoot <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>staticProcessed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">genStatic</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>once <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>onceProcessed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">genOnce</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>for <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>forProcessed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">genFor</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>if <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>ifProcessed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">genIf</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> <span class=\"token string\">'template'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>slotTarget <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>pre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">genChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'void 0'</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> <span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">genSlot</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// component or element</span>\n    <span class=\"token keyword\">let</span> code\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      code <span class=\"token operator\">=</span> <span class=\"token function\">genComponent</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> data\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>plain <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>pre <span class=\"token operator\">&amp;&amp;</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">maybeComponent</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data <span class=\"token operator\">=</span> <span class=\"token function\">genData</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>inlineTemplate <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token function\">genChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      code <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">_c('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        data <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">// data</span>\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        children <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>children<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">// children</span>\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// module transforms</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> state<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      code <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> code\n  <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>处理for循环是处于if的上面的，所以我们由此可以判定v-for的优先级是高于v-if的。</p>\n</blockquote>\n<p>我们经常会遇见这种情况，在v-for的时候，在数组中会有一些需要进行v-if的判断，这种情况下，我们如果先使用computed将不需要渲染的项过滤出来，那么在进行v-for的时候，循环的就只是需要渲染的项，这也是提升vue性能的一种方式。</p>\n</details>","y":"a","t":"Vue相关面试问题"},["/FrontEnd/Vue/Question/index.html","/Knowledge/FrontEnd/Vue/Question.html","/Knowledge/FrontEnd/Vue/Question.md"]],
  ["v-283a9f92","/FrontEnd/Vue/Skill/@Hook/",{"d":"2023-02-23T09:57:46.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<h3> 前言</h3>\n<p>比如有父组件 <code>Parent</code> 和子组件 <code>Child</code>，如果父组件监听到子组件挂载 <code>mounted</code> 就做一些逻辑处理，常规的写法可能如下：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><pre class=\"language-vue\"><code>// Parent.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">@mounted</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>() =&gt; {}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Child.vue</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mounted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"父组件里监听子组件的生命周期"},["/FrontEnd/Vue/Skill/@Hook/index.html","/Knowledge/FrontEnd/Vue/Skill-@Hook.html","/Knowledge/FrontEnd/Vue/Skill-@Hook.md"]],
  ["v-69a9a597","/FrontEnd/Vue/Skill/Computed/",{"d":"2023-02-23T09:58:16.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<p>我们平时在 <code>computed</code> 属性中可以通过 <code>this.xxx</code> 去拿 <code>data</code> 里面的数据和 <code>methods</code> 里面的方法，</p>\n<p>或许还会通过 <code>this.$store</code> 去拿 <code>vuex</code> 的 <code>state</code> 和 <code>commit</code> 等，</p>\n<p>甚至，还会通过 this.<code>$route</code> 去获取路由里面的数据。</p>\n<p>其实，我们可以避免这些丑陋的this，它甚至会给我们带来看不见的性能问题。</p>","y":"a","t":"Computed中使用this"},["/FrontEnd/Vue/Skill/Computed/index.html","/Knowledge/FrontEnd/Vue/Skill-Computed.html","/Knowledge/FrontEnd/Vue/Skill-Computed.md"]],
  ["v-7983e22a","/FrontEnd/Vue/Skill/Context/",{"d":"2023-02-23T09:58:22.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<h3> 前言</h3>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> Comp1 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/Comp1'</span>\n<span class=\"token keyword\">import</span> Comp2 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/Comp2'</span>\n<span class=\"token keyword\">import</span> Comp3 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/Comp3'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Comp1<span class=\"token punctuation\">,</span> Comp2<span class=\"token punctuation\">,</span> Comp3 <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"上下文批量引入"},["/FrontEnd/Vue/Skill/Context/index.html","/Knowledge/FrontEnd/Vue/Skill-Context.html","/Knowledge/FrontEnd/Vue/Skill-Context.md"]],
  ["v-14f30c8d","/FrontEnd/Vue/Skill/Freeze/",{"d":"2023-02-23T09:59:01.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<div class=\"hint-container danger\">\n<p class=\"hint-container-title\">警告</p>\n<p>vue 2.0版本会通过 <code>Object.defineProperty</code> 对数据进行劫持，遇到数组和对象必须循环遍历所有的域值才能劫持每一个属性。</p>\n<p>vue 3.0版本会通过 <code>Proxy</code> 构造函数来进行数据劫持，来实现视图响应数据的变化</p>\n</div>\n<p>然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间。</p>","y":"a","t":"数据冻结"},["/FrontEnd/Vue/Skill/Freeze/index.html","/Knowledge/FrontEnd/Vue/Skill-Freeze.html","/Knowledge/FrontEnd/Vue/Skill-Freeze.md"]],
  ["v-32a1adfd","/FrontEnd/Vue/Skill/LazyLoader/",{"d":"2023-02-23T09:59:37.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<h3> 路由懒加载（能让你首次加载更快）</h3>\n<p><code>路由懒加载</code>可以让我们的包不需要一次把所有的页面的加载进来，只加载当前页面的路由组件就行。</p>\n<p>举个栗子🌰，如果这样写，加载的时候会全部都加载进来。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Home <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'About'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> About <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"懒加载"},["/FrontEnd/Vue/Skill/LazyLoader/index.html","/Knowledge/FrontEnd/Vue/Skill-LazyLoader.html","/Knowledge/FrontEnd/Vue/Skill-LazyLoader.md"]],
  ["v-b4c16974","/FrontEnd/Vue/Skill/Slot/",{"d":"2023-02-23T09:59:47.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<h3> 默认内容和扩展点</h3>\n<p>Vue中的<code>槽</code>可以有默认的内容，这使我们可以制作出更容易使用的组件。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$emit('click')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token comment\">&lt;!-- Used if no slot is provided --&gt;</span>\n      Click me\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"插槽"},["/FrontEnd/Vue/Skill/Slot/index.html","/Knowledge/FrontEnd/Vue/Skill-Slot.html","/Knowledge/FrontEnd/Vue/Skill-Slot.md"]],
  ["v-b4b5a36e","/FrontEnd/Vue/Skill/Sync/",{"d":"2023-02-23T10:00:19.000Z","l":"2023年2月23日","c":["VUE"],"g":["SKILL"],"e":"<h3> 前言</h3>\n<p>vue中我们经常会用 <code>v-bind(缩写为:)</code> 给子组件传入参数，然后子组件 <code>emit</code> 事件去改变父组件的状态。</p>\n<p>或者我们会给子组件传入一个函数，子组件通过调用传入的函数来改变父组件的状态。</p>\n<p>举个例子🌰</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  //父组件 给子组件传入一个函数\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyFooter</span> <span class=\"token attr-name\">:age</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@setAge</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(res) =&gt; age = res<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 父组件的变量</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//子组件 通过调用这个函数来实现修改父组件的状态。</span>\n  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setAge'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1234567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"父组件通信"},["/FrontEnd/Vue/Skill/Sync/index.html","/Knowledge/FrontEnd/Vue/Skill-Sync.html","/Knowledge/FrontEnd/Vue/Skill-Sync.md"]],
  ["v-1713970d","/FrontEnd/Vue/",{"d":"2023-02-17T10:53:10.000Z","l":"2023年2月17日","c":["VUE"],"g":["VUE"],"e":"<h3> 指令</h3>\n<ul class=\"task-list-container\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> <a href=\"/FrontEnd/Vue/Directive/ClickOutside/\" target=\"blank\">指令 - 点击外部</a></label></li>\n</ul>","y":"a","t":"VUE篇","i":"vue"},["/FrontEnd/Vue/index.html","/Knowledge/FrontEnd/Vue/_index.html","/Knowledge/FrontEnd/Vue/_index.md"]],
  ["v-3b04a201","/FrontEnd/Vue3/ToolFunction/",{"d":"2022-07-11T13:41:55.000Z","l":"2022年7月11日","c":["VUE","VUE3"],"g":["VUE"],"e":"<div class=\"hint-container info\">\n<p class=\"hint-container-title\">Tips</p>\n<p>具体文件是 <code>shared.cjs.prod.js</code> 和 <code>shared.cjs.js</code> 文件下针对源码中的工具函数和较冷门知识点的提取分析。</p>\n<p>vue 版本为 3.2.31</p>\n</div>\n<h2> 常量定义</h2>\n<h3> EMPTY_OBJ、EMPTY_ARR 对象</h3>\n<p>typescript是通过 <code>readonly</code> 的方式来定义一个冻结对象的类型的， <code>readonly</code> 是只读修饰符。 <code>Object.freeze</code> 冻结对象属性功能。</p>","y":"a","t":"VUE3工具函数源码解析"},["/FrontEnd/Vue3/ToolFunction/index.html","/Knowledge/FrontEnd/Vue/Vue3/ToolFunction.html","/Knowledge/FrontEnd/Vue/Vue3/ToolFunction.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},["/404"]],
  ["v-30e3f50e","/Algorithm/",{"y":"p","t":"Algorithm"},["/Algorithm/index.html"]],
  ["v-24cea5d6","/DesignPattern/",{"y":"p","t":"Design Pattern"},["/DesignPattern/index.html"]],
  ["v-7e2b8f98","/Performance/",{"y":"p","t":"Performance"},["/Performance/index.html"]],
  ["v-6ab432cc","/Recommend/",{"y":"p","t":"Recommend"},["/Recommend/index.html"]],
  ["v-1303aad4","/Java/",{"y":"p","t":"Java"},["/Java/index.html"]],
  ["v-f329c6c6","/FrontEnd/Configuration/",{"y":"p","t":"Configuration"},["/FrontEnd/Configuration/index.html"]],
  ["v-685ebbde","/FrontEnd/CssComponent/",{"y":"p","t":"Css Component"},["/FrontEnd/CssComponent/index.html"]],
  ["v-6b3f7f72","/FrontEnd/Draw/",{"y":"p","t":"Draw"},["/FrontEnd/Draw/index.html"]],
  ["v-def51ee2","/FrontEnd/Micro/",{"y":"p","t":"Micro"},["/FrontEnd/Micro/index.html"]],
  ["v-28cd39da","/Network/",{"y":"p","t":"Network"},["/Network/index.html"]],
  ["v-ce57a598","/FrontEnd/React/",{"y":"p","t":"React"},["/FrontEnd/React/index.html"]],
  ["v-d0aaa024","/FrontEnd/Standard/",{"y":"p","t":"Standard"},["/FrontEnd/Standard/index.html"]],
  ["v-d6da6ea6","/FrontEnd/Vue/Directive/",{"y":"p","t":"Directive"},["/FrontEnd/Vue/Directive/index.html"]],
  ["v-4d2ec56b","/FrontEnd/Vue/Skill/",{"y":"p","t":"Skill"},["/FrontEnd/Vue/Skill/index.html"]],
  ["v-69416984","/FrontEnd/Vue3/",{"y":"p","t":"Vue3"},["/FrontEnd/Vue3/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},["/timeline/index.html"]],
  ["v-06be9332","/category/%E7%AE%97%E6%B3%95/",{"y":"p","t":"算法 分类","I":0},["/category/算法/","/category/%E7%AE%97%E6%B3%95/index.html"]],
  ["v-55f14704","/tag/%E5%BE%88%E8%8F%9C%E7%9A%84%E7%AE%97%E6%B3%95/",{"y":"p","t":"很菜的算法 标签","I":0},["/tag/很菜的算法/","/tag/%E5%BE%88%E8%8F%9C%E7%9A%84%E7%AE%97%E6%B3%95/index.html"]],
  ["v-41590e77","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"设计模式 分类","I":0},["/category/设计模式/","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],
  ["v-05b88e01","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"设计模式 标签","I":0},["/tag/设计模式/","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],
  ["v-65efd6b5","/category/git/",{"y":"p","t":"Git 分类","I":0},["/category/git/index.html"]],
  ["v-b310d42a","/tag/git/",{"y":"p","t":"Git 标签","I":0},["/tag/git/index.html"]],
  ["v-1a558dd2","/category/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",{"y":"p","t":"性能优化 分类","I":0},["/category/性能优化/","/category/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.html"]],
  ["v-d801d3bc","/tag/%E4%B8%8D%E5%92%8B%E6%BB%B4%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",{"y":"p","t":"不咋滴的性能优化 标签","I":0},["/tag/不咋滴的性能优化/","/tag/%E4%B8%8D%E5%92%8B%E6%BB%B4%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.html"]],
  ["v-15536c54","/category/%E6%8E%A8%E8%8D%90/",{"y":"p","t":"推荐 分类","I":0},["/category/推荐/","/category/%E6%8E%A8%E8%8D%90/index.html"]],
  ["v-3f3a9a5e","/tag/%E6%8E%A8%E8%8D%90/",{"y":"p","t":"推荐 标签","I":0},["/tag/推荐/","/tag/%E6%8E%A8%E8%8D%90/index.html"]],
  ["v-5f7f7ebf","/category/%E6%9C%8D%E5%8A%A1%E5%99%A8/",{"y":"p","t":"服务器 分类","I":0},["/category/服务器/","/category/%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html"]],
  ["v-26aa7bf5","/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8/",{"y":"p","t":"服务器 标签","I":0},["/tag/服务器/","/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html"]],
  ["v-5831b135","/category/java/",{"y":"p","t":"Java 分类","I":0},["/category/java/index.html"]],
  ["v-28a1d8bf","/tag/java/",{"y":"p","t":"Java 标签","I":0},["/tag/java/index.html"]],
  ["v-e68fe84e","/category/packagejson/",{"y":"p","t":"PackageJson 分类","I":0},["/category/packagejson/index.html"]],
  ["v-a8ff95e2","/tag/packagejson/",{"y":"p","t":"PackageJson 标签","I":0},["/tag/packagejson/index.html"]],
  ["v-378faa7a","/category/webpack/",{"y":"p","t":"Webpack 分类","I":0},["/category/webpack/index.html"]],
  ["v-6318deb0","/tag/webpack/",{"y":"p","t":"Webpack 标签","I":0},["/tag/webpack/index.html"]],
  ["v-65ee2aa4","/category/css/",{"y":"p","t":"CSS 分类","I":0},["/category/css/index.html"]],
  ["v-75d0f565","/tag/%E5%BE%88%E7%83%82%E7%9A%84css/",{"y":"p","t":"很烂的CSS 标签","I":0},["/tag/很烂的css/","/tag/%E5%BE%88%E7%83%82%E7%9A%84css/index.html"]],
  ["v-c04f9a82","/category/canvas/",{"y":"p","t":"Canvas 分类","I":0},["/category/canvas/index.html"]],
  ["v-b3142c4c","/tag/css/",{"y":"p","t":"CSS 标签","I":0},["/tag/css/index.html"]],
  ["v-65f57a63","/category/svg/",{"y":"p","t":"Svg 分类","I":0},["/category/svg/index.html"]],
  ["v-14dc9fc9","/tag/canvas/",{"y":"p","t":"Canvas 标签","I":0},["/tag/canvas/index.html"]],
  ["v-e2bac56c","/category/javascript/",{"y":"p","t":"JavaScript 分类","I":0},["/category/javascript/index.html"]],
  ["v-b3058cce","/tag/svg/",{"y":"p","t":"Svg 标签","I":0},["/tag/svg/index.html"]],
  ["v-63bda3f1","/category/question/",{"y":"p","t":"Question 分类","I":0},["/category/question/index.html"]],
  ["v-3b951558","/tag/javascript/",{"y":"p","t":"JavaScript 标签","I":0},["/tag/javascript/index.html"]],
  ["v-84641254","/category/%E5%BE%AE%E5%89%8D%E7%AB%AF/",{"y":"p","t":"微前端 分类","I":0},["/category/微前端/","/category/%E5%BE%AE%E5%89%8D%E7%AB%AF/index.html"]],
  ["v-28df1e19","/tag/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%BB%94/",{"y":"p","t":"前端面试仔 标签","I":0},["/tag/前端面试仔/","/tag/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%BB%94/index.html"]],
  ["v-a074e84e","/category/network/",{"y":"p","t":"Network 分类","I":0},["/category/network/index.html"]],
  ["v-f60e17e8","/tag/%E5%BE%AE%E5%89%8D%E7%AB%AF/",{"y":"p","t":"微前端 标签","I":0},["/tag/微前端/","/tag/%E5%BE%AE%E5%89%8D%E7%AB%AF/index.html"]],
  ["v-884bc6b0","/category/react/",{"y":"p","t":"React 分类","I":0},["/category/react/index.html"]],
  ["v-006e7ae0","/tag/%E7%BC%93%E5%AD%98/",{"y":"p","t":"缓存 标签","I":0},["/tag/缓存/","/tag/%E7%BC%93%E5%AD%98/index.html"]],
  ["v-58561aba","/category/ecmascript/",{"y":"p","t":"ECMAScript 分类","I":0},["/category/ecmascript/index.html"]],
  ["v-59a60c34","/tag/%E8%B7%A8%E5%9F%9F/",{"y":"p","t":"跨域 标签","I":0},["/tag/跨域/","/tag/%E8%B7%A8%E5%9F%9F/index.html"]],
  ["v-e58f495c","/category/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/",{"y":"p","t":"前端规范 分类","I":0},["/category/前端规范/","/category/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/index.html"]],
  ["v-0d223344","/tag/react/",{"y":"p","t":"React 标签","I":0},["/tag/react/index.html"]],
  ["v-4d67143e","/category/restful/",{"y":"p","t":"RESTful 分类","I":0},["/category/restful/index.html"]],
  ["v-5197dadc","/tag/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/",{"y":"p","t":"前端规范 标签","I":0},["/tag/前端规范/","/tag/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/index.html"]],
  ["v-65f6d381","/category/vue/",{"y":"p","t":"VUE 分类","I":0},["/category/vue/index.html"]],
  ["v-b302da92","/tag/vue/",{"y":"p","t":"VUE 标签","I":0},["/tag/vue/index.html"]],
  ["v-58e39d4a","/category/vue3/",{"y":"p","t":"VUE3 分类","I":0},["/category/vue3/index.html"]],
  ["v-6c81fa8e","/tag/directive/",{"y":"p","t":"Directive 标签","I":0},["/tag/directive/index.html"]],
  ["v-0907e068","/tag/skill/",{"y":"p","t":"SKILL 标签","I":0},["/tag/skill/index.html"]],
  ["v-2b746c60","/FrontEnd/JavaScript/FlatJson/",{"d":"2023-02-25T14:57:37.000Z","l":"2023年2月25日","c":["JavaScript"],"g":["JavaScript"],"e":"<h3> 代码实现</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">expandJsonTool</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> jmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">expandJson</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">jstr<span class=\"token punctuation\">,</span> mapIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jstr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> jstr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expandJson</span><span class=\"token punctuation\">(</span>jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mapIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jstr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> jstr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果mapIndex为false,null,''时，则不加初始索引</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mapIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mapIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Array 是 Object 的子集，先判断是否为 Array,如果是，则不走Object的判断</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token keyword\">in</span> jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">expandJson</span><span class=\"token punctuation\">(</span>jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">expandJson</span><span class=\"token punctuation\">(</span>jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">expandJson</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          jmap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">expandJson</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> jmap\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"请使用JS完成一个JSON扁平化"},["/FrontEnd/JavaScript/FlatJson/index.html","/Knowledge/FrontEnd/JavaScript/FlatJson.html","/Knowledge/FrontEnd/JavaScript/FlatJson.md"]],
]
